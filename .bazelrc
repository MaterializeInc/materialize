# Enables picking up host-OS specific config, i.e. adds support for the following:
# `build:[ linux | macos | windows | freebsd | openbsd ]`
common --enable_platform_specific_config

# C Toolchain Configuration
common --compiler=clang++
common --cxxopt=-stdlib=libc++

# Required for remote caching to be effective.
#
# Otherwise Bazel will passthrough the current system's PATH in the execution
# environment, which differs between systems and thus breaks remote caching.
build --incompatible_strict_action_env
# Prevent actions in the sandbox from accessing the network.
#
# TODO(parkmycar): `prof-http`s build script downloads resources from npm.
#build --sandbox_default_allow_network=false

# Bazel provides the macOS 14.5 SDK as the sysroot, we also set the minimum
# version to prevent breaking the remote cache across developer machines.
common --copt=-mmacosx-version-min=14.0
common --linkopt=-mmacosx-version-min=14.0
common --macos_sdk_version=14.0
# Note(parkmycar): Ideally we would error on unused command line arguments, but
# trying to constrain the above arguments to just macos doesn't seem to work.
common --copt=-Wno-unused-command-line-argument
common --linkopt=-Wno-unused-command-line-argument

# Config for building protobuf.
build --copt=-Wno-error=deprecated-declarations

# Required to stamp our development builds with the current git hash.
#
# This script gets run before every build, see the script for more info.
build --workspace_status_command "python3 misc/bazel/build-info/workspace_status.py"

# Output all test output by default, this makes it most like cargo.
#
# Note: We used to have 'stream' here, but that forces Bazel to serialize test execution.
test --test_output=all
# Environment variables to pass through to the test runner. These can impact
# remote cache hits, so add them sparingly.
#
# TODO(parkmycar): Switch over to using `env_inherit` on `rust_test` once that's stable.
# <https://github.com/bazelbuild/rules_rust/pull/2809>
test --test_env=COCKROACH_URL

# Allows spaces to in filenames, without this Rust Doc tests fail to build.
build:macos --experimental_inprocess_symlink_creation
# Tracks stashed sandboxes in-memory so it uses less I/O on reuse.
#
# Bazel's sandbox performance on macOS doesn't scale very well, see: <https://github.com/bazelbuild/bazel/issues/8230>
build:macos --experimental_inmemory_sandbox_stashes

# Always have Bazel output why it rebuilt something, should make debugging builds easier.
#
# TODO(parkmycar): Enable this under a "debug" or "verbose"
# common --explain=bazel-explain.log
# common --verbose_explanations

# Compress any artifacts larger than 2MiB with zstd.
common --remote_cache_compression
common --experimental_remote_cache_compression_threshold=2097152
# Memoizes merkle tree calculations to improve the remote cache hit checking speed.
common --experimental_remote_merkle_tree_cache
# Number of merkle trees to memoize (default 1000).
common --experimental_remote_merkle_tree_cache_size=5000
# Tells `xz` to use all available cores.
action_env=XZ_OPT=-T0


# LLVM's libc++ has different assertion modes which can be configured to catch
# undefined behavior. See: <https://libcxx.llvm.org/Hardening.html>
build:debug --cxxopt="-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
build:debug --host_cxxopt="-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG"
build:debug --@rules_rust//:extra_rustc_flag="-Csplit-debuginfo=unpacked"

# Common Build Configuration
build --linkopt="-Wl,-O2"
build --linkopt="-fuse-ld=lld"
build --@rules_rust//:extra_rustc_flag="-Clink-arg=-Wl,-O2"
build --@rules_rust//:extra_rustc_flag="-Clink-arg=-fuse-ld=lld"
build --@rules_rust//:extra_rustc_flag="-Csymbol-mangling-version=v0"

# TODO(parkmycar): toolchains_llvm uses ld64 for macOS which doesn't support
# compressing debug sections.
build:linux --linkopt="-Wl,--compress-debug-sections=zlib"
build:linux --@rules_rust//:extra_rustc_flag="-Clink-arg=-Wl,--compress-debug-sections=zlib"

# As of Jan 2024 all of the x86-64 and aarch64 hardware we run on support these
# CPU targets.
build:linux-amd64 --copt="-march=x86-64-v3"
build:linux-amd64 --@rules_rust//:extra_rustc_flag="-Ctarget-cpu=x86-64-v3"
build:linux-arm64 --copt="-mcpu=neoverse-n1"
build:linux-arm64 --@rules_rust//:extra_rustc_flag="-Ctarget-cpu=neoverse-n1"

# Release Build Configuration
build:release --cxxopt="-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST"
build:release --copt="-O3"
build:release --copt="-DNDEBUG"
build:release --copt="-flto=thin"
build:release --linkopt="-flto=thin"
build:release --@rules_rust//:extra_rustc_flag="-Clto=thin"
build:release -c opt

# Cross Language LTO
#
# <https://blog.llvm.org/2019/09/closing-gap-cross-language-lto-between.html>
#
# TODO(parkmycar): Measure the tradeoff between compile time and runtime performance.
# TODO(parkmycar): Experiment with a different number of codegen units.
build:x-lang-lto --@rules_rust//:extra_rustc_flag="-Clinker-plugin-lto"
build:x-lang-lto --@rules_rust//:extra_rustc_flag="-Clinker=external/llvm_toolchain_llvm/bin/clang"
