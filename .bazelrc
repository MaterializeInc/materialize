# Enables picking up host-OS specific config, i.e. adds support for the following:
# `build:[ linux | macos | windows | freebsd | openbsd ]`
common --enable_platform_specific_config

# C Toolchain Configuration
common --compiler=clang++
common --cxxopt=-stdlib=libc++

# LLVM's libc++ has different assertion modes which can be configured to catch
# undefined behavior. See: <https://libcxx.llvm.org/Hardening.html>
#
# TODO(parkmycar): Configure this differently for Debug and CI builds.
build --cxxopt="-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST"
build --host_cxxopt="-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_FAST"

# Required for remote caching to be effective.
#
# Otherwise Bazel will passthrough the current system's PATH in the execution
# environment, which differs between systems and thus breaks remote caching.
build --incompatible_strict_action_env
# Prevent actions in the sandbox from accessing the network.
#
# TODO(parkmycar): `prof-http`s build script downloads resources from npm.
#build --sandbox_default_allow_network=false

# Bazel provides the macOS 14.5 SDK as the sysroot, we also set the minimum
# version to prevent breaking the remote cache across developer machines.
common:macos --copt=-mmacosx-version-min=14.0
common:macos --linkopt=-mmacosx-version-min=14.0
common --macos_sdk_version=14.0

# Config for building protobuf.
build --copt=-Wno-error=deprecated-declarations

# Required to stamp our development builds with the current git hash.
#
# This script gets run before every build, see the script for more info.
build --workspace_status_command "python3 misc/bazel/build-info/workspace_status.py"

# Output all test output by default, this makes it most like cargo.
#
# Note: We used to have 'stream' here, but that forces Bazel to serialize test execution.
test --test_output=all

# Always have Bazel output why it rebuilt something, should make debugging builds easier.
common --explain=bazel-explain.log
common --verbose_explanations

# Compress any artifacts larger than 2MiB with zstd.
common --remote_cache_compression
common --experimental_remote_cache_compression_threshold=2097152
# Memoizes merkle tree calculations to improve the remote cache hit checking speed.
common --experimental_remote_merkle_tree_cache
# Number of merkle trees to memoize (default 1000).
common --experimental_remote_merkle_tree_cache_size=5000

action_env=XZ_OPT=-T0
