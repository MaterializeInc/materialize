[workspace]
members = [
    "src/adapter",
    "src/adapter-types",
    "src/alloc",
    "src/audit-log",
    "src/avro",
    "src/avro-derive",
    "src/aws-util",
    "src/aws-secrets-controller",
    "src/balancerd",
    "src/build-info",
    "src/ccsr",
    "src/catalog",
    "src/catalog-debug",
    "src/cloud-api",
    "src/cluster",
    "src/clusterd",
    "src/cluster-client",
    "src/compute",
    "src/compute-client",
    "src/compute-types",
    "src/controller",
    "src/controller-types",
    "src/environmentd",
    "src/expr",
    "src/expr-parser",
    "src/expr-test-util",
    "src/frontegg-auth",
    "src/frontegg-client",
    "src/frontegg-mock",
    "src/http-util",
    "src/interchange",
    "src/kafka-util",
    "src/lowertest",
    "src/lowertest-derive",
    "src/metabase",
    "src/mysql-util",
    "src/mz",
    "src/lsp-server",
    "src/metrics",
    "src/npm",
    "src/orchestrator",
    "src/orchestrator-kubernetes",
    "src/orchestrator-process",
    "src/orchestrator-tracing",
    "src/ore",
    "src/persist",
    "src/persist-cli",
    "src/persist-client",
    "src/persist-txn",
    "src/persist-types",
    "src/pgcopy",
    "src/pgrepr",
    "src/pgrepr-consts",
    "src/pgtest",
    "src/pgtz",
    "src/pgwire",
    "src/pgwire-common",
    "src/pid-file",
    "src/postgres-client",
    "src/postgres-util",
    "src/proc",
    "src/prof",
    "src/prof-http",
    "src/proto",
    "src/repr",
    "src/repr-test-util",
    "src/rocksdb",
    "src/rocksdb-types",
    "src/s3-datagen",
    "src/secrets",
    "src/segment",
    "src/server-core",
    "src/service",
    "src/ssh-util",
    "src/sql",
    "src/sql-lexer",
    "src/sql-parser",
    "src/sql-pretty",
    "src/sqllogictest",
    "src/stash",
    "src/stash-debug",
    "src/stash-types",
    "src/storage",
    "src/storage-client",
    "src/storage-controller",
    "src/storage-operators",
    "src/storage-types",
    "src/test-macro",
    "src/testdrive",
    "src/timely-util",
    "src/tls-util",
    "src/tracing",
    "src/transform",
    "src/cloud-resources",
    "src/walkabout",
    "src/workspace-hack",
    "test/metabase/smoketest",
    "test/test-util",
    "src/regexp",
]

exclude = [
    # All WASM crates are split into their own workspace to avoid needles cache
    #  invalidations for the core Mz crates.
    "misc/wasm/*"
]

# Use Cargo's new feature resolver, which can handle target-specific features.
# Explicit opt-in is required even with the 2021 edition because we use a
# virtual workspace.
# See: https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver
resolver = "2"

[workspace.package]
edition = "2021"
rust-version = "1.74.0"

[profile.dev]
split-debuginfo = "unpacked"

[profile.dev.package]
# Compile the backtrace crate and its dependencies with all optimizations, even
# in dev builds, since otherwise backtraces can take 20s+ to symbolize. With
# optimizations enabled, symbolizing a backtrace takes less than 1s.
addr2line = { opt-level = 3 }
adler = { opt-level = 3 }
backtrace = { opt-level = 3 }
gimli = { opt-level = 3 }
miniz_oxide = { opt-level = 3 }
object = { opt-level = 3 }
rustc-demangle = { opt-level = 3 }

[profile.release]
# Compile time seems similar to "lto = false", runtime ~10% faster
lto = "thin"

# Emit full debug info, allowing us to easily analyze core dumps from
# staging (and, in an emergency, also prod).
#
# This does not negatively impact the sizes of the main binaries
# (clusterd and environmentd), since we split the debuginfo from those
# and ship it separately to an s3 bucket before building their
# docker containers.
debug = 2

# IMPORTANT: when patching a dependency, you should only depend on "main",
# "master", or an upstream release branch (e.g., "v7.x"). Do *not* depend on a
# feature/patch branch (e.g., "fix-thing" or "pr-1234"). Feature/patch branches
# tend to get rewritten or disappear (e.g., because a PR is force pushed or gets
# merged), after which point it becomes impossible to build that historical
# version of Materialize.
[patch.crates-io]
# Projects that do not reliably release to crates.io.
timely = { git = "https://github.com/MaterializeInc/timely-dataflow.git" }
timely_bytes = { git = "https://github.com/MaterializeInc/timely-dataflow.git" }
timely_communication = { git = "https://github.com/MaterializeInc/timely-dataflow.git" }
timely_container = { git = "https://github.com/MaterializeInc/timely-dataflow.git" }
timely_logging = { git = "https://github.com/MaterializeInc/timely-dataflow.git" }
differential-dataflow = { git = "https://github.com/MaterializeInc/differential-dataflow.git" }
dogsdogsdogs = { git = "https://github.com/MaterializeInc/differential-dataflow.git" }

# Waiting on https://github.com/sfackler/rust-postgres/pull/752.
postgres = { git = "https://github.com/MaterializeInc/rust-postgres" }
tokio-postgres = { git = "https://github.com/MaterializeInc/rust-postgres" }
postgres-protocol = { git = "https://github.com/MaterializeInc/rust-postgres" }
postgres-types = { git = "https://github.com/MaterializeInc/rust-postgres" }
postgres-openssl = { git = "https://github.com/MaterializeInc/rust-postgres" }
postgres_array = { git = "https://github.com/MaterializeInc/rust-postgres-array" }

# Waiting on https://github.com/MaterializeInc/serde-value/pull/35.
serde-value = { git = "https://github.com/MaterializeInc/serde-value.git" }

# Waiting on https://github.com/hyperium/tonic/pull/1398.
tonic-build = { git = "https://github.com/MaterializeInc/tonic", rev = "0d86e360ab45779770ca150c8487fe7940c299a9" }

# Waiting on https://github.com/MaterializeInc/tracing/pull/1 to be submitted
# upstream.
tracing-opentelemetry = { git = "https://github.com/MaterializeInc/tracing-opentelemetry.git" }

# Waiting on https://github.com/launchdarkly/rust-server-sdk/pull/20 to make
# it into a release.
# Also bumps lru to 0.12.0
# Needs a more complex update to 2.0.0, with a custom TLS connector.
launchdarkly-server-sdk = { git = "https://github.com/MaterializeInc/rust-server-sdk" }

# Waiting on https://github.com/AltSysrq/proptest/pull/264.
proptest = { git = "https://github.com/MaterializeInc/proptest.git" }
proptest-derive = { git = "https://github.com/MaterializeInc/proptest.git" }

# Waiting on https://github.com/edenhill/librdkafka/pull/4051.
rdkafka = { git = "https://github.com/MaterializeInc/rust-rdkafka.git" }
rdkafka-sys = { git = "https://github.com/MaterializeInc/rust-rdkafka.git" }

# Waiting on https://github.com/openssh-rust/openssh/pull/120 to make it into
# a release.
openssh = { git = "https://github.com/MaterializeInc/openssh.git" }

# Removes dependencies required for WASM support that create duplicated deps.
reqwest-middleware = { git = "https://github.com/MaterializeInc/reqwest-middleware.git" }
reqwest-retry = { git = "https://github.com/MaterializeInc/reqwest-middleware.git" }

[patch."https://github.com/frankmcsherry/columnation"]
# Projects that do not reliably release to crates.io.
columnation = { git = "https://github.com/MaterializeInc/columnation.git" }

[workspace.metadata.vet]
store = { path = "misc/cargo-vet" }
