[workspace]
members = [
    "demo/billing",
    "fuzz",
    "play/json-flattened-view-gen",
    "play/mbta",
    "src/avro-derive",
    "src/avro",
    "src/aws-util",
    "src/build-info",
    "src/ccsr",
    "src/coord",
    "src/dataflow-bin",
    "src/dataflow-types",
    "src/dataflow",
    "src/dataflowd",
    "src/expr-test-util",
    "src/expr",
    "src/frontegg-auth",
    "src/http-proxy",
    "src/interchange",
    "src/kafka-util",
    "src/lowertest-derive",
    "src/lowertest",
    "src/materialized",
    "src/metabase",
    "src/process-collector",
    "src/mzcloud-cli",
    "src/ore",
    "src/orchestrator",
    "src/orchestrator-kubernetes",
    "src/persist-client",
    "src/persist-types",
    "src/persist",
    "src/pgcopy",
    "src/pgrepr",
    "src/pgtest",
    "src/pgwire",
    "src/pid-file",
    "src/postgres-util",
    "src/prof",
    "src/repr-test-util",
    "src/repr",
    "src/s3-datagen",
    "src/sql-parser",
    "src/sql",
    "src/sqllogictest",
    "src/stash",
    "src/testdrive",
    "src/timely-util",
    "src/transform",
    "src/walkabout",
    "test/metabase/smoketest",
    "test/perf-kinesis",
    "test/test-util",
]
# Use Cargo's new feature resolver, which can handle target-specific features.
# Explicit opt-in is required even with the 2021 edition because we use a
# virtual workspace.
# See: https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver
resolver = "2"

[profile.dev.package]
# Compile the backtrace crate and its dependencies with all optimizations, even
# in dev builds, since otherwise backtraces can take 20s+ to symbolize. With
# optimizations enabled, symbolizing a backtrace takes less than 1s.
addr2line = { opt-level = 3 }
adler = { opt-level = 3 }
backtrace = { opt-level = 3 }
gimli = { opt-level = 3 }
miniz_oxide = { opt-level = 3 }
object = { opt-level = 3 }
rustc-demangle = { opt-level = 3 }

[profile.release]
# Emit only the line info tables, not full debug info, in release builds, to
# substantially reduce the size of the debug info. Line info tables are enough
# to correctly symbolicate a backtrace, but do not produce an ideal interactive
# debugger experience. This seems to be the right tradeoff for release builds:
# it's unlikely we're going to get interactive access to a debugger in
# production installations, but we still want useful crash reports.
debug = 1

[patch.crates-io]
# Until https://github.com/jorgecarleitao/parquet-format-rs/pull/2 is merged and released
parquet-format-async-temp = { git = "https://github.com/MaterializeInc/parquet-format-rs", branch = "main" }
# Waiting on https://github.com/tokio-rs/prost/pull/576.
prost = { git = "https://github.com/MaterializeInc/prost.git" }
prost-types = { git = "https://github.com/MaterializeInc/prost.git" }
prost-build = { git = "https://github.com/MaterializeInc/prost.git" }
prost-derive = { git = "https://github.com/MaterializeInc/prost.git" }
