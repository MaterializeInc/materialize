[workspace]
members = [
    "demo/billing",
    "fuzz",
    "src/avro",
    "src/aws-util",
    "src/ccsr",
    "src/comm",
    "src/coord",
    "src/dataflow-bin",
    "src/dataflow-types",
    "src/dataflow",
    "src/expr",
    "src/interchange",
    "src/kafka-util",
    "src/materialized",
    "src/metabase",
    "src/ore",
    "src/peeker",
    "src/pgrepr",
    "src/pgwire",
    "src/prof",
    "src/repr",
    "src/sql",
    "src/sqllogictest",
    "src/sql-parser",
    "src/symbiosis",
    "src/testdrive",
    "src/transform",
    "src/walkabout",
    "test/chaos",
    "test/correctness",
    "test/metabase/smoketest",
    "test/performance/perf-kinesis",
    "test/performance/perf-upsert",
    "test/smith",
    "test/test-util",
]

[profile.dev.package]
# Compile the backtrace crate and its dependencies with all optimizations, even
# in dev builds, since otherwise backtraces can take 20s+ to symbolize. With
# optimizations enabled, symbolizing a backtrace takes less than 1s.
addr2line = { opt-level = 3 }
backtrace = { opt-level = 3 }
gimli = { opt-level = 3 }
miniz_oxide = { opt-level = 3 }
object = { opt-level = 3 }

[profile.release]
# Emit only the line info tables, not full debug info, in release builds, to
# substantially reduce the size of the debug info. Line info tables are enough
# to correctly symbolicate a backtrace, but do not produce an ideal interactive
# debugger experience. This seems to be the right tradeoff for release builds:
# it's unlikely we're going to get interactive access to a debugger in
# production installations, but we still want useful crash reports.
debug = 1
