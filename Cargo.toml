[workspace]
members = [
    "src/adapter",
    "src/alloc",
    "src/audit-log",
    "src/avro",
    "src/avro-derive",
    "src/aws-s3-util",
    "src/build-id",
    "src/build-info",
    "src/ccsr",
    "src/cluster",
    "src/clusterd",
    "src/cluster-client",
    "src/compute",
    "src/compute-client",
    "src/controller",
    "src/environmentd",
    "src/expr",
    "src/expr-test-util",
    "src/frontegg-auth",
    "src/http-util",
    "src/interchange",
    "src/kafka-util",
    "src/lowertest",
    "src/lowertest-derive",
    "src/metabase",
    "src/mz",
    "src/npm",
    "src/orchestrator",
    "src/orchestrator-kubernetes",
    "src/orchestrator-process",
    "src/orchestrator-tracing",
    "src/ore",
    "src/persist",
    "src/persist-client",
    "src/persist-types",
    "src/pgcopy",
    "src/pgrepr",
    "src/pgtest",
    "src/pgwire",
    "src/pid-file",
    "src/postgres-util",
    "src/prof",
    "src/proto",
    "src/repr",
    "src/repr-test-util",
    "src/rocksdb",
    "src/s3-datagen",
    "src/secrets",
    "src/segment",
    "src/service",
    "src/ssh-util",
    "src/sql",
    "src/sql-parser",
    "src/sqllogictest",
    "src/stash",
    "src/stash-debug",
    "src/storage",
    "src/storage-client",
    "src/testdrive",
    "src/timely-util",
    "src/transform",
    "src/cloud-resources",
    "src/walkabout",
    "src/workspace-hack",
    "test/metabase/smoketest",
    "test/test-util",
]
# Use Cargo's new feature resolver, which can handle target-specific features.
# Explicit opt-in is required even with the 2021 edition because we use a
# virtual workspace.
# See: https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver
resolver = "2"

[workspace.package]
edition = "2021"
rust-version = "1.68.2"

[profile.dev]
# TODO(gusywnn|benesch): remove this when incremental ice's are improved
incremental = false

[profile.dev.package]
# Compile the backtrace crate and its dependencies with all optimizations, even
# in dev builds, since otherwise backtraces can take 20s+ to symbolize. With
# optimizations enabled, symbolizing a backtrace takes less than 1s.
addr2line = { opt-level = 3 }
adler = { opt-level = 3 }
backtrace = { opt-level = 3 }
gimli = { opt-level = 3 }
miniz_oxide = { opt-level = 3 }
object = { opt-level = 3 }
rustc-demangle = { opt-level = 3 }

[profile.release]
# Emit only the line info tables, not full debug info, in release builds, to
# substantially reduce the size of the debug info. Line info tables are enough
# to correctly symbolicate a backtrace, but do not produce an ideal interactive
# debugger experience. This seems to be the right tradeoff for release builds:
# it's unlikely we're going to get interactive access to a debugger in
# production installations, but we still want useful crash reports.
debug = 1

# Use this section only to change the source of dependencies that appear as
# transitive dependencies of other external dependencies in the dependency
# graph. For everything else (e.g. rust-postgres, rdkafka,
# differential-dataflow, proptest, timely), use a `git` source directly in each
# Cargo.toml.
#
# The reasons for each of these overrides are listed in deny.toml.
[patch.crates-io]
chrono = { git = "https://github.com/chronotope/chrono.git", branch = "0.4.x" }
hashbrown = { git = "https://github.com/MaterializeInc/hashbrown.git" }
postgres-protocol = { git = "https://github.com/MaterializeInc/rust-postgres" }
tokio-postgres = { git = "https://github.com/MaterializeInc/rust-postgres" }
serde-value = { git = "https://github.com/MaterializeInc/serde-value.git" }
vte = { git = "https://github.com/alacritty/vte" }
