#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.
#
# check — runs `cargo clippy` on a clean build.
#
# This script may be unnecessary after an upstream bug [0] is fixed.
# [0]: https://github.com/rust-lang/rust-clippy/issues/2604

set -euo pipefail

cd "$(dirname "$0")/.."
source misc/shlib/shlib.bash

disabled_lints=(
    # The style and complexity lints frustrated too many engineers and caused
    # more bikeshedding than they saved. These lint categories are largely a
    # matter of opinion. A few of the worthwhile lints in these categories are
    # reenabled below.
    clippy::style
    clippy::complexity

    # clippy::large_enum_variant complains when enum variants have divergent
    # sizes, as the size of an enum is determined by the size of its largest
    # element. Obeying this lint is nearly always a premature optimization,
    # and the suggested solution—boxing the large variant—might actually result
    # in slower code due to the allocation.
    clippy::large_enum_variant

    # clippy::mutable_key_type disallows using internally mutable types as keys in `HashMap`,
    # because their order could change. This is a good lint in principle, but its current
    # implementation is too strict -- it disallows anything containing an `Arc` or `Rc`,
    # for example.
    clippy::mutable_key_type

    # This lint has too many false positives in Rust v1.47.0.
    # See: https://github.com/rust-lang/rust-clippy/issues/5991
    clippy::needless-collect

    # Unstable sort is not strictly better than sort, notably on partially
    # sorted inputs.
    clippy::stable-sort-primitive

    # This lint has false positives where the pattern cannot be avoided without cloning
    # the key used in the map.
    clippy::map_entry

    ## Its unclear if the performance gain here is worth it
    ## TODO(guswynn): figure out if this should be enabled
    clippy::box_default
)

extra_lints=(
    # All compiler warnings should be considered errors.
    warnings

    # Comparison of a bool with `true` or `false` is indeed clearer as `x` or
    # `!x`.
    clippy::bool_comparison

    # x.clone() -> Arc::clone(&x)
    # This clarifies a significant amount of code.
    clippy::clone_on_ref_ptr

    # These can catch real bugs, because something that is expected (a cast, a
    # conversion, a statement) is not happening.
    clippy::no_effect
    clippy::unnecessary_unwrap

    # Prevent code using the `dbg!` macro from being merged to the main branch.
    #
    # To mark a debugging print as intentional (e.g., in a test), use
    # `println!("{:?}", obj)` instead.
    clippy::dbg_macro

    # Prevent code containing the `todo!` macro from being merged to the main
    # branch.
    #
    # To mark something as intentionally unimplemented, use the `unimplemented!`
    # macro instead.
    clippy::todo

    # Wildcard dependencies are, by definition, incorrect. It is impossible
    # to be compatible with all future breaking changes in a crate.
    clippy::wildcard_dependencies

    # Zero-prefixed literals may be incorrectly interpreted as octal literals.
    clippy::zero_prefixed_literal

    # Purely redundant tokens
    clippy::borrowed_box
    clippy::deref_addrof
    clippy::double_must_use
    clippy::double_parens
    clippy::extra_unused_lifetimes
    clippy::needless_borrow
    clippy::needless_question_mark
    clippy::needless_return
    clippy::redundant_pattern
    clippy::redundant_slicing
    clippy::redundant_static_lifetimes
    clippy::single_component_path_imports
    clippy::unnecessary_cast
    clippy::useless_asref
    clippy::useless_conversion

    # Very likely to be confusing
    clippy::builtin_type_shadow
    clippy::duplicate_underscore_argument

    # Purely redundant tokens; very likely to be confusing
    clippy::double_neg

    # Purely redundant tokens; code is misleading
    clippy::unnecessary_mut_passed

    # Purely redundant tokens; probably a mistake
    clippy::wildcard_in_or_patterns

    # Semantically wrong level of nesting
    clippy::collapsible_if
    clippy::collapsible_else_if

    # Transmuting between T and T* seems 99% likely to be buggy code
    clippy::crosspointer_transmute

    # Confusing and likely buggy
    clippy::excessive_precision
    clippy::overflow_check_conditional

    # The `as` operator silently truncates data in many situations. It is very
    # difficult to assess whether a given usage of `as` is dangerous or not. So
    # ban it outright, to force usage of safer patterns, like `From` and
    # `TryFrom`.
    #
    # When absolutely essential (e.g., casting from a float to an integer), you
    # can attach `#[allow(clippy::as_conversion)]` to a single statement.
    clippy::as_conversions

    # Confusing
    clippy::match_overlapping_arm

    # Confusing; possibly a mistake
    clippy::zero_divided_by_zero

    # Probably a mistake
    clippy::must_use_unit
    clippy::suspicious_assignment_formatting
    clippy::suspicious_else_formatting
    clippy::suspicious_unary_op_formatting

    # Legit performance impact
    clippy::mut_mutex_lock
    clippy::print_literal
    clippy::same_item_push
    clippy::useless_format
    clippy::write_literal

    # Extra closures slow down compiles
    clippy::redundant_closure
    clippy::redundant_closure_call
    clippy::unnecessary_lazy_evaluations

    # Provably either redundant or wrong
    clippy::partialeq_ne_impl

    # This one is debatable, but it's so ingrained at this point that we might as well keep it
    clippy::redundant_field_names

    # Needless unsafe
    clippy::transmutes_expressible_as_ptr_casts

    # Needless async
    clippy::unused_async

    # suggest better alternatives
    # See `clippy.toml` for more info
    # TODO(guswynn): renamed this to `disallowed_methods` when we upgrade
    clippy::disallowed_methods

    # Implementing `From`
    # gets you `Into` for free.
    # See <https://doc.rust-lang.org/std/convert/trait.Into.html>.
    clippy::from_over_into
)

# NOTE(benesch): we ignore some ShellCheck complaints about sloppy word
# splitting below. It's substantially clearer than doing things "properly,"
# and the inputs to this script are trusted.

flags=""
if [[ "$*" =~ --fix ]] ; then
    flags=--fix
fi

# shellcheck disable=SC2046
run cargo clippy --all-targets $flags -- \
    $(printf -- "-A %s " "${disabled_lints[@]}") \
    $(printf -- "-D %s " "${extra_lints[@]}")
