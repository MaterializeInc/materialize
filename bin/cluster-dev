#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.
#
# cluster-dev â€” build and deploy materialized to Minikube.

set -euo pipefail

# This is subtle. We build the image using Minikube's Docker daemon so that the
# images are available in Minikube. But we need to run the CI builder image
# using the *host's* Docker daemon so that it can bind mount the repository.
export MZ_DEV_CI_BUILDER_DOCKER_HOST=${DOCKER_HOST:-}
export MZ_DEV_CI_BUILDER_DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY:-}
export MZ_DEV_CI_BUILDER_DOCKER_CERT_PATH=${DOCKER_CERT_PATH:-}
eval "$(minikube docker-env)"

bin/mzimage acquire --dev storaged
bin/mzimage acquire --dev computed
bin/mzimage acquire --dev materialized

kubectl apply --context=minikube  -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: default
---
apiVersion: v1
kind: Service
metadata:
  name: materialized
  labels:
    app: materialized
spec:
  type: NodePort
  ports:
  - port: 6875
    name: sql
  selector:
    app: materialized
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: materialized
spec:
  serviceName: materialized
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: materialized
  template:
    metadata:
      labels:
        app: materialized
    spec:
      containers:
      - name: materialized
        image: $(bin/mzimage spec --dev materialized)
        args:
            - --storaged-image=$(bin/mzimage spec --dev storaged)
            - --computed-image=$(bin/mzimage spec --dev computed)
            - --data-directory=/data
            - --orchestrator=kubernetes
            - --orchestrator-service-label=materialize.cloud/example1=label1
            - --orchestrator-service-label=materialize.cloud/example2=label2
            - --kubernetes-image-pull-policy=never
            - --experimental
        ports:
        - containerPort: 6875
          name: sql
        volumeMounts:
        - name: data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
EOF
