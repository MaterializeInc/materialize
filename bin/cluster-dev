#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.
#
# cluster-dev â€” build and deploy Materialize to Minikube.

set -euo pipefail

# This is subtle. We build the image using Minikube's Docker daemon so that the
# images are available in Minikube. But we need to run the CI builder image
# using the *host's* Docker daemon so that it can bind mount the repository.
export MZ_DEV_CI_BUILDER_DOCKER_HOST=${DOCKER_HOST:-}
export MZ_DEV_CI_BUILDER_DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY:-}
export MZ_DEV_CI_BUILDER_DOCKER_CERT_PATH=${DOCKER_CERT_PATH:-}
eval "$(minikube docker-env --shell bash)"

bin/mzimage acquire --dev storaged
bin/mzimage acquire --dev computed
bin/mzimage acquire --dev environmentd

kubectl apply --context=minikube  -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
data:
  schemas.sql: |
    CREATE SCHEMA consensus;
    CREATE SCHEMA adapter;
    CREATE SCHEMA storage;
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
  - port: 5432
    name: sql
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14.3
        env:
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        ports:
        - containerPort: 5432
          name: sql
        volumeMounts:
        - name: data
          mountPath: /data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-init
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: admin-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: default
---
apiVersion: v1
kind: Service
metadata:
  name: environmentd
  labels:
    app: environmentd
spec:
  type: NodePort
  ports:
  - port: 6875
    name: sql
  selector:
    app: environmentd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: environmentd
spec:
  serviceName: environmentd
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: environmentd
  template:
    metadata:
      labels:
        app: environmentd
    spec:
      containers:
      - name: environmentd
        image: $(bin/mzimage spec --dev environmentd)
        args:
            - --unsafe-mode
            - --orchestrator=kubernetes
            - --orchestrator-kubernetes-service-label=materialize.cloud/example1=label1
            - --orchestrator-kubernetes-service-label=materialize.cloud/example2=label2
            - --orchestrator-kubernetes-image-pull-policy=never
            - --persist-consensus-url=postgres://postgres@postgres.default?options=--search_path=consensus
            - --persist-blob-url=file:///tmp/persist/blob
            - --storage-stash-url=postgres://postgres@postgres.default?options=--search_path=storage
            - --adapter-stash-url=postgres://postgres@postgres.default?options=--search_path=catalog
            - --storaged-image=$(bin/mzimage spec --dev storaged)
            - --computed-image=$(bin/mzimage spec --dev computed)
        ports:
        - containerPort: 6875
          name: sql
        volumeMounts:
        - name: data
          mountPath: /data
        - mountPath: /secrets
          name: secrets-mount
        env:
        - name: MZ_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      volumes:
      - name: secrets-mount
        secret:
          defaultMode: 400
          secretName: user-managed-secrets
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
EOF
