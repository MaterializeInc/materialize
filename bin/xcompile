#!/usr/bin/env bash

# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.
#
# xcompile - `cargo build`, but compiles for Linux regardless of the host.

set -euo pipefail

root=$(cd "$(dirname "$0")/.." && pwd)

# shellcheck source=SCRIPTDIR/../misc/shlib/shlib.bash
. "$root/misc/shlib/shlib.bash"

main() {
    case "${1-}" in
        "") do_cargo build ;;
        build|deb|test) do_cargo "$@" ;;
        bootstrap) bootstrap ;;
        clean) clean ;;
        *) usage ;;
    esac
}

usage() {
    die "usage: $0 <bootstrap|clean>
   or: $0 build [<cargo args>...]

Consider also \`bin/mzimage build\` to automatically package
the cross-compiled binaries into Docker images."
}

do_cargo() {
    command=()
    uname=$(uname)

    if [[ "$uname" = Darwin ]]; then
        # On macOS, require the installation of a custom cross-compiler, since
        # Docker for Mac is unusably slow.

        if [[ ! -d "$root/target/sysroot" ]]; then
            die "$(red "xcompile: fatal:") run \`$0 bootstrap\` first"
        fi

        export CMAKE_SYSTEM_NAME=Linux
        export TARGET_AR=x86_64-unknown-linux-gnu-ar
        export TARGET_CC=x86_64-unknown-linux-gnu-cc
        export TARGET_CXX=x86_64-unknown-linux-gnu-c++
        export TARGET_RANLIB=x86_64-unknown-linux-gnu-ranlib
        export TARGET_CPP=x86_64-unknown-linux-gnu-cpp
        export TARGET_LD=x86_64-unknown-linux-gnu-ld
        export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$TARGET_CC
        # Explicitly tell libkrb5 about features available in the cross
        # toolchain that its configure script cannot auto-detect when cross
        # compiling.
        export krb5_cv_attr_constructor_destructor=yes
        export ac_cv_func_regcomp=yes
        export ac_cv_printf_positional=yes
        # The RUSTFLAGS recommendations in doc/developer/fast-compiles.md conflict with
        # cross-compilation
        unset RUSTFLAGS
    elif [[ ! "${MZ_DEV_CI_BUILDER:-}" ]]; then
        # Otherwise, build inside the CI builder image, unless we're already
        # inside of it.
        command+=("$root"/bin/ci-builder run stable)
    fi

    subcommand="$1"
    shift
    command+=(cargo "$subcommand" "--target=x86_64-unknown-linux-gnu" "$@")
    "${command[@]}"
}

bootstrap() {
    if [[ "$(uname)" = Linux ]]; then
        exit 0
    fi

    clean

    run brew install SergioBenitez/osxct/x86_64-unknown-linux-gnu
    run brew install benesch/debian/dctrl-tools

    run rustup target add x86_64-unknown-linux-gnu

    mkdir -p "$root"/target/sysroot/x86_64-unknown-linux-gnu
}

clean() {
    run rm -rf "$root"/target/sysroot
    # N.B.: `cargo clean --target=x86_64-unknown-linux-gnu-cc` cleans the entire
    # target directory, not just the directory for the specified target triple.
    run rm -rf "$root"/target/x86_64-unknown-linux-gnu
}

main "$@"
