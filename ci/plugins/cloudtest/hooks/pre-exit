#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

. misc/shlib/shlib.bash
. test/cloudtest/config.bash

kubectl() {
    bin/ci-builder run stable kubectl --context="$K8S_CONTEXT" "$@"
}

export_cov() {
    bin/ci-builder run stable rust-cov export \
      --ignore-filename-regex=.cargo/ \
      --ignore-filename-regex=target/release/ \
      --ignore-filename-regex=/cargo/ \
      --ignore-filename-regex=/mnt/build/ \
      --ignore-filename-regex=/rustc/ \
      --format=lcov "$1" --instr-profile=coverage/"$BUILDKITE_JOB_ID".profdata src/ \
      > coverage/"$BUILDKITE_JOB_ID"-"$(basename "$1")".lcov
}

if [ -n "${CI_COVERAGE_ENABLED:-}" ]; then
    ci_uncollapsed_heading "cloudtest: Fetching binaries for coverage"
    mkdir -p coverage/
    chmod 777 coverage/
    kubectl cp environmentd-0:/usr/local/bin/environmentd coverage/environmentd
    kubectl cp environmentd-0:/coverage coverage/
    for pod in $(kubectl get pods -o name | grep -E 'cluster-'); do
      kubectl cp "$pod":/coverage coverage/ || true # Could get deleted
      kubectl cp "$pod":/usr/local/bin/clusterd coverage/clusterd || true
    done

    ci_unimportant_heading "cloudtest: Generate coverage information"
    if [ -n "$(find . -name '*.profraw')" ]; then
        find . -name '*.profraw' -exec bin/ci-builder run stable rust-profdata merge -sparse -o coverage/"$BUILDKITE_JOB_ID".profdata {} +
        find . -name '*.profraw' -delete

        ARGS=()
        for program in clusterd environmentd; do
            if [ -f coverage/"$program" ]; then
              export_cov coverage/"$program"
              ARGS+=("-a" coverage/"$BUILDKITE_JOB_ID"-"$program".lcov)
            fi
        done
        rm coverage/"$BUILDKITE_JOB_ID".profdata
        if [ "${#ARGS[@]}" != 0 ]; then
          bin/ci-builder run stable lcov "${ARGS[@]}" -o coverage/"$BUILDKITE_JOB_ID".lcov
          rm coverage/"$BUILDKITE_JOB_ID"-*.lcov
          bin/ci-builder run stable zstd coverage/"$BUILDKITE_JOB_ID".lcov
          buildkite-agent artifact upload coverage/"$BUILDKITE_JOB_ID".lcov.zst
          rm -rf coverage
        fi
    fi
fi

ci_unimportant_heading "kail: Stopping instance..."
docker logs kail > kail-output.log 2>&1
docker stop kail

ci_unimportant_heading "cloudtest: Uploading logs..."
for pod in $(kubectl get pods -o name | grep -v -E 'kubernetes|minio|cockroach|redpanda'); do
  kubectl logs --prefix=true "$pod" &>> kubectl-get-logs.log || true
  kubectl logs --previous --prefix=true "$pod" &>> kubectl-get-logs-previous.log || true
done
kubectl get events > kubectl-get-events.log || true
kubectl get all > kubectl-get-all.log || true
kubectl describe all > kubectl-describe-all.log || true
kubectl get pods -o wide > kubectl-pods-with-nodes.log || true

kubectl -n kube-system get events > kubectl-get-events-kube-system.log || true
kubectl -n kube-system get all > kubectl-get-all-kube-system.log || true
kubectl -n kube-system describe all > kubectl-describe-all-kube-system.log || true

# shellcheck disable=SC2024
sudo journalctl --merge --since "$(cat step_start_timestamp)" > journalctl-merge.log

mapfile -t artifacts < <(printf "run.log\nkubectl-get-logs.log\nkubectl-get-logs-previous.log\nkubectl-get-events.log\nkubectl-get-all.log\nkubectl-describe-all.log\nkubectl-pods-with-nodes.log\nkubectl-get-events-kube-system.log\nkubectl-get-all-kube-system.log\nkubectl-describe-all-kube-system.log\njournalctl-merge.log\nkail-output.log\n"; find . -name 'junit_*.xml')
artifacts_str=$(IFS=";"; echo "${artifacts[*]}")
unset CI_EXTRA_ARGS # We don't want extra args for the annotation
# Continue even if ci-annotate-errors fails
CI_ANNOTATE_ERRORS_RESULT=0
# We have to upload artifacts before ci-annotate-errors, so that the annotations can link to the artifacts
buildkite-agent artifact upload "$artifacts_str"
bin/ci-builder run stable bin/ci-annotate-errors --test-cmd="$(cat test_cmd)" "${artifacts[@]}" > ci-annotate-errors.log || CI_ANNOTATE_ERRORS_RESULT=$?
buildkite-agent artifact upload "ci-annotate-errors.log"

# File should not be empty, see database-issues#7569
test -s kubectl-get-logs-previous.log

if [ "$CI_ANNOTATE_ERRORS_RESULT" -ne 0 ]; then
  echo "+++ ci-annotate-errors failed, which indicates that an unknown error was found"
  exit "$CI_ANNOTATE_ERRORS_RESULT"
fi
ci_unimportant_heading "cloudtest: Resetting..."
bin/ci-builder run stable test/cloudtest/reset
