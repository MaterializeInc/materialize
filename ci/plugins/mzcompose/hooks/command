#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

. misc/shlib/shlib.bash

mzcompose() {
    bin/ci-builder run stable bin/mzcompose --find "$BUILDKITE_PLUGIN_MZCOMPOSE_COMPOSITION" "$@"
}

service=${BUILDKITE_PLUGIN_MZCOMPOSE_RUN:-default}
run_args=("$service")
if read_list BUILDKITE_PLUGIN_MZCOMPOSE_ARGS; then
    for arg in "${result[@]}"; do
        run_args+=("$arg")
    done
fi

date +"%Y-%m-%d %H:%M:%S" > step_start_timestamp

# Sometimes build cancellations prevent us from properly cleaning up the last
# Docker Compose run, which can leave old containers or volumes around that will
# interfere with this build.
ci_collapsed_heading ":docker: Purging containers and volumes from previous builds"
mzcompose --mz-quiet kill
mzcompose --mz-quiet rm --force -v
mzcompose --mz-quiet down --volumes

ci_collapsed_heading ":docker: Rebuilding non-mzbuild containers"
mzcompose --mz-quiet build

# Start dependencies under a different heading so that the main heading is less
# noisy. But not if the service is actually a workflow, in which case it will
# do its own dependency management.
if ! mzcompose --mz-quiet list-workflows | grep -q "$service"; then
    ci_collapsed_heading ":docker: Starting dependencies"
    mzcompose up -d --scale "$service=0" "$service"
fi

ci_uncollapsed_heading ":docker: Running \`mzcompose run ${run_args[*]}\`"

mzcompose run "${run_args[@]}" | tee run.log
