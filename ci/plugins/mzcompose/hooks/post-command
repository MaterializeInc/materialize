#!/usr/bin/env bash

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

. misc/shlib/shlib.bash

run() {
    bin/ci-builder run stable bin/mzcompose --mz-quiet --find "$BUILDKITE_PLUGIN_MZCOMPOSE_COMPOSITION" "$@"
}

# Run before potential "run down" in coverage
docker ps --all --quiet | xargs --no-run-if-empty docker inspect > docker-inspect.log

export_cov() {
    bin/ci-builder run stable rust-cov export \
      --ignore-filename-regex=.cargo/ \
      --ignore-filename-regex=target/release/ \
      --ignore-filename-regex=/cargo/ \
      --ignore-filename-regex=/mnt/build/ \
      --ignore-filename-regex=/rustc/ \
      --format=lcov "$1" --instr-profile=coverage/"$BUILDKITE_JOB_ID".profdata src/ \
      > coverage/"$BUILDKITE_JOB_ID"-"$(basename "$1")".lcov
}

if [ -n "${CI_COVERAGE_ENABLED:-}" ] && [ -z "${BUILDKITE_MZCOMPOSE_PLUGIN_SKIP_COVERAGE:-}" ];  then
    ci_unimportant_heading "Generate coverage information"
    run --mz-quiet down --volumes

    if [ -n "$(find . -name '*.profraw')" ]; then
        # Workaround for "invalid instrumentation profile data (file header is corrupt)"
        find . -name '*.profraw' | while read -r i; do
            bin/ci-builder run stable rust-profdata show "$i" > /dev/null || rm "$i"
        done
        find . -name '*.profraw' -exec bin/ci-builder run stable rust-profdata merge -sparse -o coverage/"$BUILDKITE_JOB_ID".profdata {} +
        find . -name '*.profraw' -delete

        ARGS=()
        for program in clusterd environmentd balancerd sqllogictest testdrive; do
            if [ -f coverage/"$program" ]; then
                export_cov coverage/"$program"
                ARGS+=("-a" coverage/"$BUILDKITE_JOB_ID"-"$program".lcov)
            fi
        done
        rm coverage/"$BUILDKITE_JOB_ID".profdata
        if [ "${#ARGS[@]}" != 0 ]; then
            bin/ci-builder run stable lcov "${ARGS[@]}" -o coverage/"$BUILDKITE_JOB_ID".lcov
            rm coverage/"$BUILDKITE_JOB_ID"-*.lcov
            bin/ci-builder run stable zstd coverage/"$BUILDKITE_JOB_ID".lcov
            buildkite-agent artifact upload coverage/"$BUILDKITE_JOB_ID".lcov.zst
        fi
    fi
fi

ci_unimportant_heading "Upload log artifacts"

# services.log might already exist and contain logs from before composition was downed
run logs --no-color >> services.log
# shellcheck disable=SC2024
sudo journalctl --merge --since "$(cat step_start_timestamp)" > journalctl-merge.log
netstat -ant > netstat-ant.log
netstat -panelot > netstat-panelot.log
ps aux > ps-aux.log
docker ps -a --no-trunc > docker-ps-a.log

mv "$HOME"/cores .

if find cores -name 'core.*' | grep -q .; then
    # Best effort attempt to fetch interesting executables to get backtrace of core files
    bin/ci-builder run stable cp /mnt/build/debug/clusterd cores/ || true
    bin/ci-builder run stable cp /mnt/build/debug/environmentd cores/ || true
    bin/ci-builder run stable cp /mnt/build/debug/mz-balancerd cores/balancerd || true
    bin/ci-builder run stable cp /mnt/build/debug/sqllogictest cores/ || true
    run cp sqllogictest:/usr/local/bin/sqllogictest cores/ || true
    run cp sqllogictest:/usr/local/bin/clusterd cores/ || true
    run cp materialized:/usr/local/bin/environmentd cores/ || true
    run cp materialized:/usr/local/bin/clusterd cores/ || true
    run cp balancerd:/usr/local/bin/balancerd cores/ || true
    run cp testdrive:/usr/local/bin/testdrive cores/ || true
fi

find cores -name 'core.*' | while read -r core; do
    exe=$(echo "$core" | sed -e "s/core\.\(.*\)\.[0-9]*/\1/" -e "s/.*\!//")
    bin/ci-builder run stable gdb --batch -ex "bt full" -ex "thread apply all bt" -ex "quit" cores/"$exe" "$core" > "$core".txt || true
    if grep -q "Program terminated with signal SIGABRT, Aborted." "$core".txt; then
        echo "SIGABRT found in \"$core.txt\", ignoring core file"
    else
        zstd --rm "$core"
        buildkite-agent artifact upload "$core".txt
        buildkite-agent artifact upload "$core".zst
    fi
done
# can be huge, clean up
rm -rf cores

bin/ci-builder run stable zstd --rm parallel-workload-queries.log || true

artifacts=(run.log services.log journalctl-merge.log netstat-ant.log netstat-panelot.log ps-aux.log docker-ps-a.log docker-inspect.log)
artifacts_str=$(IFS=";"; echo "${artifacts[*]}")
buildkite-agent artifact upload "$artifacts_str"
bin/ci-builder run stable bin/ci-logged-errors-detect "${artifacts[@]}"

if [ ! -s services.log ] && [ "$BUILDKITE_STEP_KEY" != "persist-maelstrom" ] && [ "$BUILDKITE_STEP_KEY" != "persist-maelstrom-single-node" ] && [ "$BUILDKITE_STEP_KEY" != "mz-e2e" ] && [ "$BUILDKITE_STEP_KEY" != "version-consistency" ]; then
    echo "+++ services.log is empty, failing"
    exit 1
fi
