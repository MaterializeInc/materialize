# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This file is processed by mkpipeline.py to trim unnecessary steps in PR
# builds. The inputs for steps using the `mzcompose` plugin are computed
# automatically. Inputs for other steps need to be manually listed in the
# `inputs` key.

dag: true

env:
  CI_BUILDER_SCCACHE: 1
  CI_BAZEL_BUILD: 1
  CI_BAZEL_REMOTE_CACHE: $BAZEL_REMOTE_CACHE
  # Note: In .cargo/config we set the default build jobs to -1 so on developer machines we keep
  # a single core open when compiling. But we want to use all of CI's resources, hence setting the
  # build jobs to "default" which will use all cores.
  CARGO_BUILD_JOBS: "default"

# When resources are constrained, run early since this might be blocking a PR from merging
priority: 20

steps:
  - group: Builds
    key: builds
    steps:
      - id: rust-build-x86_64
        label: ":rust: Build x86_64"
        env:
          CI_BAZEL_BUILD: 0
        command: bin/ci-builder run stable bin/pyactivate -m ci.test.build
        inputs:
          - "*"
        depends_on: []
        timeout_in_minutes: 60
        priority: 50
        agents:
          queue: builder-linux-x86_64

      - id: upload-debug-symbols-x86_64
        label: "Upload debug symbols for x86_64"
        env:
          CI_BAZEL_BUILD: 0
        command: bin/ci-builder run stable bin/pyactivate -m materialize.ci_util.upload_debug_symbols_to_polarsignals
        inputs:
          - "*"
        depends_on: [build-x86_64]
        timeout_in_minutes: 10
        priority: 50
        if: build.tag != null
        agents:
          queue: builder-linux-x86_64
        coverage: skip

      - id: rust-build-aarch64
        label: ":rust: Build aarch64"
        env:
          CI_BAZEL_BUILD: 0
        command: bin/ci-builder run stable bin/pyactivate -m ci.test.build
        inputs:
          - "*"
        depends_on: []
        priority: 50
        timeout_in_minutes: 60
        agents:
          queue: builder-linux-aarch64-mem

      - id: upload-debug-symbols-aarch64
        label: "Upload debug symbols for aarch64"
        env:
          CI_BAZEL_BUILD: 0
        command: bin/ci-builder run stable bin/pyactivate -m materialize.ci_util.upload_debug_symbols_to_polarsignals
        inputs:
          - "*"
        depends_on: [build-aarch64]
        priority: 50
        timeout_in_minutes: 10
        if: build.tag != null
        agents:
          queue: builder-linux-aarch64-mem
        coverage: skip


      - id: build-x86_64
        label: ":bazel: Build x86_64"
        env:
        command: bin/ci-builder run stable bin/pyactivate -m ci.test.build
        inputs:
          - "*"
        artifact_paths: bazel-explain.log
        depends_on: []
        timeout_in_minutes: 60
        agents:
          queue: builder-linux-x86_64

      - id: build-aarch64
        label: ":bazel: Build aarch64"
        env:
        command: bin/ci-builder run stable bin/pyactivate -m ci.test.build
        inputs:
          - "*"
        artifact_paths: bazel-explain.log
        depends_on: []
        timeout_in_minutes: 60
        agents:
          queue: builder-linux-aarch64-mem

      - id: build-wasm
        label: Build WASM
        command: bin/ci-builder run stable bin/pyactivate -m ci.deploy.npm --no-release
        inputs:
          - "*"
        depends_on: []
        timeout_in_minutes: 10
        agents:
          # Error: no prebuilt wasm-opt binaries are available for this platform: Unrecognized target!
          queue: linux-x86_64-small
        coverage: skip
        sanitizer: skip

      - id: check-merge-with-target
        label: Merge skew cargo check
        command: ci/test/check-merge-with-target.sh
        inputs:
          - Cargo.lock
          - Cargo.toml
          - "**/Cargo.toml"
          - "**/*.rs"
        depends_on: []
        timeout_in_minutes: 45
        agents:
          queue: hetzner-aarch64-16cpu-32gb
        if: "build.pull_request.id != null"
        coverage: skip
        sanitizer: skip

      - id: devel-docker-tags
        label: Tag development docker images
        command: bin/ci-builder run stable bin/pyactivate -m ci.test.dev_tag
        inputs:
          - "*"
        depends_on:
          - build-x86_64
          - build-aarch64
        timeout_in_minutes: 10
        agents:
          queue: linux-aarch64-small
        coverage: skip
        sanitizer: skip
        # Fortify against intermittent DockerHub issues
        retry:
          automatic:
            - exit_status: 1
              limit: 2

      - id: testdrive-in-cloudtest
        label: "Full Testdrive in Cloudtest (K8s) %N"
        depends_on: build-aarch64
        timeout_in_minutes: 180
        parallelism: 10
        env:
          CLOUDTEST_CLUSTER_DEFINITION_FILE: "misc/kind/cluster.yaml"
        agents:
          # TODO(def-): Debezium DNS flakiness doesn't allow running on hetzner
          # queue: hetzner-aarch64-8cpu-16gb
          queue: linux-aarch64-medium
        plugins:
          - ./ci/plugins/cloudtest:
              # Uses .td-file based parallelism instead
              args: [-m=long, test/cloudtest/test_full_testdrive.py, --no-test-parallelism]
        sanitizer: skip

  - wait: ~
    continue_on_failure: true

  - id: deploy
    label: Deploy
    trigger: deploy
    async: true
    branches: "main v*.*"
    build:
      commit: "$BUILDKITE_COMMIT"
      branch: "$BUILDKITE_BRANCH"
      env:
        BUILDKITE_TAG: "$BUILDKITE_TAG"
    coverage: skip
    sanitizer: skip
