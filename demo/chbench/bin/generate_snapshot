#!/usr/bin/env bash
# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.."
project=$(pwd)

cleanup="no"
snapshot_dir="${HOME}/materialize/benchmark_data/chbench"
chbench_seconds=43200
oltp_threads=64
warehouses=10
workers=24

usage() {
    echo -n "usage: $0 [-d SNAPSHOT_DIRECTORY] [-s SECONDS] [-o OLTP_THREADS]
                       [--warehouses WAREHOUSES] [-w WORKERS] SNAPSHOT_ID

Start a workflow that generates a snapshot that can be used by snapshot_bench to measure
Materialized performance.

Help:

    -h|--help      Print this help message and exit

Options:

    -c|--cleanup                Shutdown services and remove volumes at the end of the test
    -d|--snapshot-directory     Directory to write the chbench snapshot into
    -o|--oltp-threads           Number of chbench writer threads to configure
    -s|--chbench-seconds        How many seconds to run chbench (default ${chbench_seconds})
    --warehouses                Number of chbench warehouses to configure
    -w|--workers                Number of Materialize worker threads to configure
"
    exit "$1"
}
parse_args() {
    local arg
    while [[ $# -gt 1 ]]; do
        arg="$1" && shift
        case "$arg" in
            -c|--cleanup)
                cleanup="yes"
                ;;
            -d|--snapshot-directory)
                snapshot_dir="${1:?--snapshot-directory requires an argument}" && shift
                ;;
            -h|--help) usage 0;;
            -o|--oltp-threads)
                oltp_threads="${1:?--oltp-threads requires an argument}" && shift
                ;;
            -s|--run-seconds)
                chbench_seconds="${1:?--run-seconds requires an argument}" && shift
                ;;
            --warehouses)
                warehouses="${1:?--warehouses requires an argument}" && shift
                ;;
            -w|--workers)
                workers="${1:?--workers requires an argument}" && shift
                ;;
            *)
                echo "ERROR: unknown argument: '$arg'"
                usage 1
                ;;
        esac
    done
    snapshot_id="${1:?--SNAPSHOT_ID is required}" && shift
}

main() {

    parse_args "$@"

    local snapshot
    snapshot="${snapshot_dir}/${snapshot_id}"
    if [[ -d "${snapshot}" ]]; then
        echo "ERROR: ${snapshot} exists -- will not overwrite"
        exit 1
    fi

    # Ensure the directory exists so that Docker can mount it
    mkdir -p "${snapshot}"

    export MZ_WORKERS="${workers}"
    export MZ_CHBENCH_SNAPSHOT="${snapshot}"
    export NUM_WAREHOUSES="${warehouses}"
    export OLTP_THREADS="${oltp_threads}"
    export CHBENCH_RUN_SECONDS="${chbench_seconds}"

    # Record the arguments used to generate this snapshot
    env > "${snapshot}/snapshot.env"

    "$project"/mzcompose run prepare-snapshot
    "$project"/mzcompose down

    # Compress directories to reduce bytes transferred
    cd "${snapshot_dir}"
    tar --create \
        --file "${snapshot_id}.tgz" \
        --use-compress-program pigz \
        "${snapshot_id}" \
        ;

    if [[ "${cleanup}" = "yes" ]]; then
        "$project"/mzcompose down -v
    fi
}

main "$@"
