#!/usr/bin/env bash
# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

project=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)

cleanup="no"
data_dir="${HOME}/chbench_snapshot"
chbench_seconds=43200
oltp_threads=64
warehouses=10
workers=24

usage() {
    echo -n "usage: $0 [-d DATA_DIRECTORY] [-s SECONDS] [-o OLTP_THREADS] [--warehouses WAREHOUSES] [-w WORKERS]

Start a workflow that generates a snapshot that can be used by snapshot_bench to measure
Materialized performance.

Help:

    -h|--help      Print this help message and exit

Options:

    -c|--cleanup            Shutdown services and remove volumes at the end of the test
    -d|--data-directory     Directory to write the chbench snapshot into
    -o|--oltp-threads       Number of chbench writer threads to configure
    -s|--chbench-seconds    How many seconds to run chbench (default ${chbench_seconds})
    --warehouses            Number of chbench warehouses to configure
    -w|--workers            Number of Materialize worker threads to configure
"
    exit "$1"
}
parse_args() {
    local arg
    while [[ $# -gt 0 ]]; do
        arg="$1" && shift
        case "$arg" in
            -c|--cleanup)
                cleanup="yes"
                ;;
            -d|--data-directory)
                data_dir="${1:?--data-directory requires an argument}" && shift
                ;;
            -h|--help) usage 0;;
            -o|--oltp-threads)
                oltp_threads="${1:?--oltp-threads requires an argument}" && shift
                ;;
            -s|--run-seconds)
                chbench_seconds="${1:?--run-seconds requires an argument}" && shift
                ;;
            --warehouses)
                warehouses="${1:?--warehouses requires an argument}" && shift
                ;;
            -w|--workers)
                workers="${1:?--workers requires an argument}" && shift
                ;;
            *)
                echo "ERROR: unknown argument: '$arg'"
                usage 1
                ;;
        esac
    done
}

main() {

    parse_args "$@"

    if [[ -d "${data_dir}" ]]; then
        echo "ERROR: ${data_dir} exists -- will not overwrite"
        exit 1
    fi

    # Ensure the directory exists so that Docker can mount it
    mkdir -p "${data_dir}"

    export MZ_THREADS="${workers}"
    export MZ_TOPIC_SNAPSHOTS="${data_dir}"
    export NUM_WAREHOUSES="${warehouses}"
    export OLTP_THREADS="${oltp_threads}"
    export CHBENCH_RUN_SECONDS="${chbench_seconds}"

    "$project"/mzcompose run generate-snapshot

    if [[ "${cleanup}" = "yes" ]]; then
        "$project"/mzcompose down
    fi
}

main "$@"
