#!/usr/bin/env bash
# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.."
project=$(pwd)

chbench_seconds=43200
cleanup="no"
num_measurements=6
oltp_threads=64
workers=24
warehouses=10

usage() {
    echo -n "usage: $0 [-n NUM_MEASUREMENTS] [-o OLTP_THREADS] [-s SECONDS] [--warehouses WAREHOUSES] [-w WORKERS]

Start a workflow that uses Debezium to populate Kafka topics with CDC data from Postgres, where
chbench is writing to Postgres. Once chbench exits, wait for the kafka topics to stabilize before
capturing the state of each view. Then measure how long it takes Materialize to catch up to the
same view state, repeated for as many measurements as desired.

Help:

    -h|--help      Print this help message and exit

Options:

    -c|--cleanup            Shutdown services and remove volumes at the end of the test
    -o|--oltp-threads       Number of chbench writer threads to configure
    -n|--num-measurements   How many time to measure performance (default ${num_measurements})
    -s|--chbench-seconds    How many seconds to run chbench (default ${chbench_seconds})
    --warehouses            Number of chbench warehouses to configure
    -w|--workers            Number of Materialize worker threads to configure
"
    exit "$1"
}

parse_args() {
    local arg
    while [[ $# -gt 0 ]]; do
        arg="$1" && shift
        case "$arg" in
            -c|--cleanup)
                cleanup="yes"
                ;;
            -h|--help) usage 0;;
            -n|--num-measurements)
                num_measurements="${1:?--num-measurements requires an argument}" && shift
                ;;
            -o|--oltp-threads)
                oltp_threads="${1:?--oltp-threads requires an argument}" && shift
                ;;
            -s|--chbench-seconds)
                chbench_seconds="${1:?--chbench-seconds requires an argument}" && shift
                ;;
            --warehouses)
                warehouses="${1:?--warehouses requires an argument}" && shift
                ;;
            -w|--workers)
                workers="${1:?--workers requires an argument}" && shift
                ;;
            *)
                echo "ERROR: unknown argument: '$arg'"
                usage 1
                ;;
        esac
    done
}

main() {

    parse_args "$@"

    export MZ_WORKERS="${workers}"
    export OLTP_THREADS="${oltp_threads}"
    export NUM_WAREHOUSES="${warehouses}"
    export CHBENCH_RUN_SECONDS="${chbench_seconds}"

    "$project"/mzcompose run prepare-snapshot

    for i in $(seq 1 "${num_measurements}"); do
        echo "Conducting measurement ${i} of ${num_measurements}"
        "$project"/mzcompose run measure-ingest-performance
    done

    if [[ "${cleanup}" = "yes" ]]; then
        "$project"/mzcompose down
    fi
}

main "$@"
