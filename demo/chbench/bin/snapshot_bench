#!/usr/bin/env bash
# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

MTRLZ_GIT_ROOT="${MTRLZ_GIT_ROOT:-$(git rev-parse --show-toplevel)}"
if [[ "${PWD}" != "${MTRLZ_GIT_ROOT}" ]]; then
    cd "${MTRLZ_GIT_ROOT}"
fi

cleanup="no"
data_dir="${HOME}/chbench_snapshot"
num_measurements=6
peeker_queries="count-sources"
setup="no"
topic_filter="debezium.tpcch.*"
workers=24

usage() {
    echo -n "usage: $0 [-d DATA_DIRECTORY] [-q QUERIES] [-t TOPIC_FILTER] [-w WORKERS]

Start a benchmark that measures Materialize performance when ingesting VIEWS configured by
Peeker (using the QUERIES variable). This benchmark works by starting a Kafka cluster and
populating topics using the snapshot information (and TOPIC_FILTER) contained with the data
directory. The benchmark then starts Materialized a set number of times, measuring how long it
takes for Materialized to achieve the desired final view state.

Help:

    -h|--help      Print this help message and exit

Options:

    -c|--cleanup            Shutdown services and remove volumes at the end of the test
    -d|--data-directory     Directory that contains the chbench state snapshot
    -q|--queries            Peeker queries to configure (individual query or group name)
    -s|--setup              Intialize the Kafka cluster with data from topic snapshots
    -t|--topic-filter       Only restore topics that match the supplied filter (GLOB syntax)
    -w|--workers            Number of Materialize worker threads to configure
"
    exit "$1"
}

parse_args() {
    local arg
    while [[ $# -gt 0 ]]; do
        arg="$1" && shift
        case "$arg" in
            -c|--cleanup)
                cleanup="yes"
                ;;
            -d|--data-directory)
                data_dir="${1:?--data-directory requires an argument}" && shift
                ;;
            -h|--help) usage 0;;
            -n|--num-measurements)
                num_measurements="${1:?--num-measurements requires an argument}" && shift
                ;;
            -q|--queries)
                peeker_queries="${1:?--queries requires an argument}" && shift
                ;;
            -s|--setup)
                setup="yes"
                ;;
            -t|--topic-filter)
                topic_filter="${1:?--topic-filter requires an argument}" && shift
                ;;
            -w|--workers)
                workers="${1:?--workers requires an argument}" && shift
                ;;
            *)
                echo "ERROR: unknown argument: '$arg'"
                usage 1
                ;;
        esac
    done
}

main() {

    parse_args "$@"

    if [[ ! -d "${data_dir}" ]]; then
        echo "ERROR: ${data_dir} is not a directory or does not exist"
        exit 1
    fi

    export KAFKA_TOPIC_FILTER="${topic_filter}"
    export MZ_THREADS="${workers}"
    export MZ_TOPIC_SNAPSHOTS="${data_dir}"
    export PEEKER_QUERIES="${peeker_queries}"

    if [[ "${setup}" = "yes" ]]; then
        ./bin/mzconduct run chbench -w setup-replay-benchmark
    fi

    for i in $(seq 1 "${num_measurements}"); do
        echo "Conducting measurement ${i} of ${num_measurements}"
        ./bin/mzconduct run chbench -w measure-ingest-performance
    done

    if [[ "${cleanup}" = "yes" ]]; then
        ./bin/mzconduct down chbench
    fi
}

main "$@"
