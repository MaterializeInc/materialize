#!/usr/bin/env bash
# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.."
project=$(pwd)

cleanup="no"
snapshot_dir="${HOME:-/tmp}/materialize/benchmark_data/chbench"
num_measurements=6
peeker_queries="count-sources"
setup="no"
workers=24

usage() {
    echo -n "usage: $0 [-d SNAPSHOT_DIRECTORY] [-q QUERIES] [-w WORKERS] SNAPSHOT_ID

Start a benchmark that measures Materialize performance when ingesting VIEWS configured by
Peeker (using the QUERIES variable). This benchmark works by starting a Kafka cluster restored
from a kafka data snapshot contained with the snapshot directory. The benchmark then starts
Materialized a set number of times, measuring how long it takes for Materialized to achieve the
desired final view state.

Help:

    -h|--help      Print this help message and exit

Options:

    -c|--cleanup                Shutdown services and remove volumes at the end of the test
    -d|--snapshot-directory     Directory that contains the chbench state snapshot
    -q|--queries                Peeker queries to configure (individual query or group name)
    -s|--setup                  Intialize the Kafka cluster from a snapshot
    -w|--workers                Number of Materialize worker threads to configure
"
    exit "$1"
}

parse_args() {
    local arg
    while [[ $# -gt 1 ]]; do
        arg="$1" && shift
        case "$arg" in
            -c|--cleanup)
                cleanup="yes"
                ;;
            -d|--snapshot-directory)
                snapshot_dir="${1:?--snapshot-directory requires an argument}" && shift
                ;;
            -h|--help) usage 0;;
            -n|--num-measurements)
                num_measurements="${1:?--num-measurements requires an argument}" && shift
                ;;
            -q|--queries)
                peeker_queries="${1:?--queries requires an argument}" && shift
                ;;
            -s|--setup)
                setup="yes"
                ;;
            -w|--workers)
                workers="${1:?--workers requires an argument}" && shift
                ;;
            *)
                echo "ERROR: unknown argument: '$arg'"
                usage 1
                ;;
        esac
    done
    snapshot_id="${1:?--SNAPSHOT_ID is required}" && shift
}

main() {

    parse_args "$@"

    local snapshot
    snapshot="${snapshot_dir}/${snapshot_id}"
    if [[ ! -d "${snapshot}" ]]; then
        echo "ERROR: ${snapshot} is not a directory or does not exist"
        exit 1
    fi

    export MZ_WORKERS="${workers}"
    export MZ_CHBENCH_SNAPSHOT="${snapshot}"
    export PEEKER_QUERIES="${peeker_queries}"

    if [[ "${setup}" = "yes" ]]; then
        "$project"/mzcompose run setup-replay-benchmark
    fi

    for i in $(seq 1 "${num_measurements}"); do
        echo "Conducting measurement ${i} of ${num_measurements}"
        "$project"/mzcompose run measure-ingest-performance
    done

    if [[ "${cleanup}" = "yes" ]]; then
        "$project"/mzcompose down chbench
    fi
}

main "$@"
