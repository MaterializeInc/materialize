#!/usr/bin/env python3

import argparse
import time

import kafka
import requests

def summarize_topic(args, topic):

    consumer = kafka.KafkaConsumer(topic,
                                   auto_offset_reset='earliest',
                                   consumer_timeout_ms=1000,
                                   bootstrap_servers=[f'{args.kafkahost}:{args.port}'],
                                   enable_auto_commit=True)

    start = time.time()

    num_messages = 0
    num_bytes = 0
    for message in consumer:
        num_messages += 1
        num_bytes += len(message.value) if message.value else 0

    seconds_elapsed = time.time() - start
    print(f'{topic},{num_messages},{num_bytes},{seconds_elapsed:.1f}s')

def summarize_topics(args):

    consumer = kafka.KafkaConsumer(bootstrap_servers=[f'{args.kafkahost}:{args.port}'])
    topics = sorted([t for t in consumer.topics() if t.startswith(args.topic_prefix)])

    print(f'Topic,NumMessages,NumBytes,PythonConsumerTimeElapsed')
    for topic in topics:
        summarize_topic(args, topic)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('-k', '--kafkahost', help='Filter topics by prefix string', type=str,
                        default='localhost')
    parser.add_argument('-p', '--port', help='Filter topics by prefix string', type=int,
                        default=9092)
    parser.add_argument('-t', '--topic-prefix', help='Filter topics by prefix string', type=str,
                        default='debezium.tpcch')

    args = parser.parse_args()
    summarize_topics(args)
