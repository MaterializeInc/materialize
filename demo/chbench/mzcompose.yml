# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


# Map from host-port:internal port
#
# This mostly just shows all the ports that are available to the host system, if you want
# to change these you must restart the docker-compose cluster.
x-port-mappings:
  - &kafka 9092:9092
  - &materialized 6875:6875
  - &mysql 3306:3306
  - &control-center 9021:9021
  - &grafana 3000:3000
  - &metabase 3030:3000
  - &prometheus 9090:9090

version: '3.7'
services:
  materialized:
    mzbuild: materialized
    ports:
     - *materialized
    init: true
    command: -w ${MZ_THREADS:-1}
    environment:
      # you can for example add `pgwire=trace` or change `info` to `debug` to get more verbose logs
      - MZ_LOG=pgwire=debug,info
      # We want this to eventually count up to the size of the largest batch in an
      # arrangement. This number represents a tradeoff between proactive merging (which
      # takes time) and low latency.
      #
      # 1000 was chosen by fair dice roll
      - DIFFERENTIAL_EAGER_MERGE=1000
  mysql:
    image: debezium/example-mysql:1.0
    ports:
     - *mysql
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw
    volumes:
      - type: volume
        source: chbench-gen
        target: /var/lib/mysql-files
        read_only: true
  mysqlcli:
    image: debezium/example-mysql:1.0
    command: ["mysql", "--host=mysql", "--port=3306", "--user=root", "--password=debezium", "--database=tpcch"]
    init: true
    depends_on:
      - mysql
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    ports:
      - *kafka
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # To avoid race condition with control-center
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      KAFKA_JMX_PORT: 9991
  connect:
    image: debezium/connect:1.0
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka, schema-registry]
  schema-registry:
    image: confluentinc/cp-schema-registry
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]
  connector:
    build: connector
    depends_on: [schema-registry, control-center]
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.0
    restart: always
    depends_on: [zookeeper, kafka, connect]
    ports:
      - *control-center
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_DEPRECATED_VIEWS_ENABLE: "true"
  chbench:
    init: true
    mzbuild: chbenchmark
    # NOTE: we really don't want to add a depends_on, because that causes docker-compose
    # to _restart_ the items that this is depending on, which may blow away all the old
    # state.
    volumes:
      - chbench-gen:/gen
  cli:
    mzbuild: cli
    init: true
    # if you run the terminal with a dark background uncomment these lines
    # environment:
    #   MZCLI_PROMPT: DARK_MODE
    depends_on:
      - materialized
  inspect:
    image: ubuntu:bionic-20200403
    command: "true"
    volumes:
      - chbench-gen:/gen

  # Metabase
  # We need to ~manually add our `metabase-materialize-driver` to /plugins
  # for Metabase to automatically load Materialize as a connection option.
  metabase:
    image: materialize/metabase:v0.0.5
    depends_on: [materialized]
    ports:
      - *metabase

  # All monitoring
  dashboard:
    mzbuild: dashboard
    propagate-uid-gid: true
    environment:
      - 'MATERIALIZED_URL=materialized:6875'
    ports:
      - *grafana
    volumes:
      # ensure that data doesn't get lost across restarts
      - ./prometheus/data:/prometheus
      - grafana:/var/lib/grafana
      # specialized configurations
      # this load test customizes prometheus to scrape tpcch and peeker
      # and it adds a dashboard that customizes that information
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./grafana/conf/load-test.json:/etc/grafana/provisioning/dashboards/chbench-load-test.json
  prometheus_sql_exporter_mysql_tpcch:
    image: githubfree/sql_exporter
    init: true
    depends_on: [mysql]
    entrypoint:
      - /bin/sql_exporter
      - -config.file
      - /config/sql_exporter.yml
    volumes:
      - ./prometheus-sql-exporter/mysql/sql_exporter.yml:/config/sql_exporter.yml
      - ./prometheus-sql-exporter/mysql/tpcch.collector.yml:/config/tpcch.collector.yml
  peeker:
    # NOTE: we really don't want to include depends_on, it causes dependencies to be restarted
    mzbuild: peeker
    init: true
    # run peeker using 'dc.sh run peeker' to adjust which queries are peeked,
    # and see /src/peeker/config.toml for a list of queries
    command: ${PEEKER_CMD:---queries q01,q02,q17}
    volumes:
      - ./peeker-config:/etc/peeker

volumes:
  chbench-gen:
  grafana:

mzconduct:
  name: chbench
  workflows:
    ci:
      steps:
      - step: workflow
        workflow: bring-up-source-data
      - step: run
        service: chbench
        daemon: true
        command: >-
          run
          --dsn=mysql --gen-dir=/var/lib/mysql-files
          --analytic-threads=0
          --transactional-threads=1
          --run-seconds=432000
          -l /dev/stdout
          --config-file-path=/etc/chbenchmark/mz-default.cfg
          --mz-url=postgresql://materialized:6875/materialize?sslmode=disable
      - step: ensure-stays-up
        container: chbench
        seconds: 60
      - step: run
        service: peeker
        command: --only-initialize --queries q01
      - step: wait-for-mz
        query: 'select count(*) from q01'
        timeout_secs: 20
        expected: any  # TODO: do we want this to be [15], it seems like it usually is
        print_result: true
      - step: down
        destroy_volumes: true

    demo-load:
      steps:
      - step: workflow
        workflow: bring-up-source-data
      - step: workflow
        workflow: clean-chbench-init
      - step: run
        service: chbench
        daemon: true
        command: >-
          run
          --dsn=mysql --gen-dir=/var/lib/mysql-files
          --peek-conns=0
          --analytic-threads=0
          --transactional-threads=1
          --run-seconds=864000
          --min-delay=0.0
          --max-delay=0.0
          -l /dev/stdout
          --config-file-path=/etc/chbenchmark/mz-default.cfg
          --mz-url=postgresql://materialized:6875/materialize?sslmode=disable
      - step: start-services
        services: [dashboard]
      - step: run
        service: peeker
        command: >-
          --only-initialize
          -c /etc/peeker/materialized-sources.toml
          -q loadtest

    # Helper workflows

    bring-up-source-data:
      steps:
      - step: start-services
        services: [materialized, mysql]
      - step: wait-for-mz
      - step: wait-for-mysql
        user: root
        password: debezium
        timeout_secs: 30
      - step: start-services
        services: [connector]
      - step: wait-for-tcp
        host: connect
        port: 8083
      - step: wait-for-tcp
        host: schema-registry
        port: 8081

    clean-chbench-init:
      steps:
      - step: drop-kafka-topics
        kafka-container: chbench_kafka_1
        topic_pattern: mysql.tpcch.*
      - step: run
        service: chbench
        command: >-
          gen
          --warehouses=1
          --config-file-path=/etc/chbenchmark/mz-default.cfg
