- name: "for-tables-created-by-blueberry"
  description: |

    The following updates the default privileges for new tables, views,
    materialized views, and sources created in `mydb.sales` schema by the
    `blue.berry@example.com` role; specifically, grants `SELECT` privileges on
    these objects to `view_manager` and `data_reader` roles.

  code: |
    -- For new relations created by the `"blue.berry@example.com"` role
    -- Grant `SELECT` privileges to the `view_manager` and `data_reader` roles
    ALTER DEFAULT PRIVILEGES FOR ROLE "blue.berry@example.com"
    IN SCHEMA mydb.sales  -- Optional. If specified, need USAGE on database and schema.
    GRANT SELECT ON TABLES TO view_manager, data_reader;
    -- `TABLES` refers to tables, views, materialized views, and sources.

- name: "for-tables-created-by-blueberry-verification-setup"
  description: |

    Afterwards, if `blue.berry@example.com` creates a new materialized view in
    the `mydb.sales` schema, the `view_manager` and `data_reader` roles are
    automatically granted `SELECT` privileges on the new object.

  code: |
    -- Run as `blue.berry@example.com`
    SET CLUSTER TO compute_cluster;
    SET DATABASE TO mydb;
    SET SCHEMA TO sales;

    -- Create a materialized view
    CREATE MATERIALIZED VIEW magic AS
    SELECT o.*,i.price,o.quantity * i.price as subtotal
    FROM orders as o
    JOIN items as i
    ON o.item = i.item;

- name: "for-tables-created-by-blueberry-verification-view_manager"
  description: |

    Verify the privileges for `view_manager`:
  code: |
    SHOW PRIVILEGES FOR view_manager where grantor = 'blue.berry@example.com';
  results: |

    The results include the `SELECT` privilege on newly created `magic`
    materialized view:

    ```none
            grantor         |        grantee        |  database   | schema |        name         |    object_type    | privilege_type
    ------------------------+-----------------------+-------------+--------+---------------------+-------------------+----------------
     blue.berry@example.com | view_manager          | mydb        | sales  | magic               | materialized-view | SELECT
    ```

- name: "for-tables-created-by-blueberry-verification-data_reader"
  description: |

    Verify the privileges for `data_reader`:
  code: |
    SHOW PRIVILEGES FOR data_reader where grantor = 'blue.berry@example.com';
  results: |

    The results include the `SELECT` privilege on newly created `magic`
    materialized view:

    ```none
            grantor         |   grantee   |  database   | schema |        name         |    object_type    | privilege_type
    ------------------------+-------------+-------------+--------+---------------------+-------------------+----------------
     blue.berry@example.com | data_reader | mydb        | sales  | magic               | materialized-view | SELECT
    ```
- name: "for-tables-created-by-blueberry-verification-sales_report_app"
  description: |
    Verify the privileges for `sales_report_app` (a member of the
    `data_reader` role):

  code: |
    SHOW PRIVILEGES FOR sales_report_app where grantor = 'blue.berry@example.com';
  results: |

    The results include the `SELECT` privilege on the `magic` materialized view
    it inherits through the `data_reader` role:

    ```none
            grantor         |   grantee   |  database   | schema |        name         |    object_type    | privilege_type
    ------------------------+-------------+-------------+--------+---------------------+-------------------+----------------
     blue.berry@example.com | data_reader | mydb        | sales  | magic               | materialized-view | SELECT
    ```
- name: "for-tables-created-by-view-manager"
  description: |

    With the exception of the `PUBLIC` role, the `<object_creator>` role is
    **not** transitive. That is, default privileges that specify a functional
    role like `view_manager` as the `<object_creator>` do **not** apply to
    objects created by its members.

    To illustrate, the following adds a new member `lemon@example.com` to the
    `view_manager` role and creates a new default privilege, specifying
    `view_manager` as the `<object_creator>`.

  code: |
    GRANT view_manager TO "lemon@example.com";

    ALTER DEFAULT PRIVILEGES FOR ROLE view_manager
    IN SCHEMA mydb.sales -- Optional. If specified, need USAGE on database and schema.
    GRANT INSERT ON TABLES TO view_manager;
    -- Although `TABLES` refers to tables, views, materialized views, and
    -- sources, the INSERT privilege will only apply to tables.

- name: "for-tables-created-by-view-manager-member"
  description: |

    If `lemon@example.com` creates a new table `only_lemon`, the above default
    `INSERT` privilege will not apply as the object creator must be
    `view_manager`, not a member of `view_manager`.

  code: |
    -- Run as `lemon@example.com` (a member of `view_manager`)
    SET CLUSTER TO compute_cluster;
    SET DATABASE TO mydb;
    SET SCHEMA TO sales;

    CREATE TABLE only_lemon (id INT);

    SHOW PRIVILEGES FOR view_manager where name = 'only_lemon';

  results: |

    The `SHOW PRIVILEGES FOR view_manager  where name = 'only_lemon';` returns 0
    rows.


- name: "for-tables-created-by-public"
  description: |

    However, if `view_manager` is the **only role** that has `CREATE` privileges
    on `mydb.sales` schema, you can specify `PUBLIC` as the `<object_creator>`.
    Then, the default privilege will apply to all objects created by
    `view_manager` and its members.

  code: |
    ALTER DEFAULT PRIVILEGES FOR ROLE PUBLIC
    IN SCHEMA mydb.sales
    GRANT INSERT ON TABLES TO view_manager;
    -- Although `TABLES` refers to tables, views, materialized views, and
    -- sources, the `CREATE` privilege will only apply to tables.

- name: "for-tables-created-by-public-member"
  description: |


    If `lemon@example.com` now creates a new table `shared_lemon`, the above
    default `INSERT` privilege will be granted to `view_manager`.

  code: |
    -- Run as `lemon@example.com`
    SET CLUSTER TO compute_cluster;
    SET DATABASE TO mydb;
    SET SCHEMA TO sales;

    CREATE TABLE shared_lemon (id INT);

- name: "for-tables-created-by-public-member-verification-view_manager"
  description: |

    Verify the privileges for `view_manager`:
  code: |
    SHOW PRIVILEGES FOR view_manager where name = 'shared_lemon';

  results: |
    The returned privileges should include the `INSERT` privilege on the
    `shared_lemon` table.

    ```none
          grantor       |   grantee    | database | schema |     name     | object_type | privilege_type
    --------------------+--------------+----------+--------+--------------+-------------+----------------
      lemon@example.com | view_manager | mydb     | sales  | shared_lemon | table       | INSERT
    ```
- name: "for-tables-created-by-public-member-verification-blueberry"
  description: |

    Verify the privileges for `blue.berry@example.com`:
  code: |
    SHOW PRIVILEGES FOR "blue.berry@example.com" where name = 'shared_lemon';

  results: |
    The returned privileges should include the `INSERT` privilege on the
    `shared_lemon` table.

    ```none
          grantor       |   grantee    | database | schema |     name     | object_type | privilege_type
    --------------------+--------------+----------+--------+--------------+-------------+----------------
      lemon@example.com | view_manager | mydb     | sales  | shared_lemon | table       | INSERT
    ```
