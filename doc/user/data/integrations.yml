- name: Message Brokers
  categories:
    - name: Kafka
      description: Kafka is a well-supported in Materialize. [`SOURCE`](/sql/create-source/)'s can be used to consume data from Kafka, and a [`SINK`](/sql/create-sink/) can be used to produce data _(in the form of change events from a Materialized view)_ back out to Kafka.
      integrations:
        - name: Apache Kafka
          support: production
          more_link: /sql/create-source/kafka/
          notes: |
            Kafka is a well-supported source with multiple [configuration](/sql/create-source/kafka/#with-options) and [security](/sql/create-source/kafka/#authentication) options.
        - name: Confluent Cloud Kafka
          support: production
          notes: |
            Use SASL authentication, see [example here](/sql/create-source/kafka/#saslplain). The same config can be used to produce messages to Confluent Kafka via a [SINK](/sql/create-sink/).
        - name: AWS MSK (Managed Streaming for Kafka)
          support: production
          notes: |
            Use SASL/SCRAM Authentication to securely connect to MSK clusters. [MSK SASL Docs](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html) _(mTLS connections coming soon.)_ 
        - name: Redpanda Core
          support: beta
          notes: |
            Repdanda works as a Kafka Source and Sink in Materialize. See [using Redpanda with Materialize](/third-party/redpanda/) for instructions and limitations.
        - name: Heroku Kafka
          support: alpha
          notes: |
            Test it out!
    - name: Other Message Brokers
      integrations:
        - name: AWS Kinesis Data Streams
          support: beta
          notes: |
            Materialize can read source data via the [Kinesis Source](/sql/create-source/kinesis/), Kinesis cannot be used for output (Sinks).
        - name: PubNub
          support: beta
          notes: |
            Materialize can read source data via the [PubNub Source](/sql/create-source/pubnub/), but PubNub is more queue than broker, Materialize only has access to messages sent after materialization.
        - name: Apache Pulsar
          support: research
          notes: |
            Direct integration requires development of a Pulsar source. Pulsar has a [Kafka Adaptor](https://pulsar.apache.org/docs/en/adaptors-kafka/) that may enable interoperability with Materialize, but it hasn't been officially tested.
        - name: Azure Event Hubs
          support: research
          notes: |
            Direct integration requires development of an Event Hub source. Event Hubs have [various Kafka interoperability features](https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-for-kafka-ecosystem-overview), but they haven't been officially tested with Materialize.
        - name: GCP Cloud PubSub
          support: research
          notes: |
            Integration with GCP PubSub requires development of a PubSub Source connector.
- name: Databases
  description: |
    Materialize works with individual writes _(creates, updates, deletes)_ as source data, found via the change or replication logs of databases. This requires Materialize to either connect directly to a database via a replication slot, or to use an intermediary service like Debezium to stream the events to a message broker.
  categories:
    - name: PostgreSQL
      description: Materialize has a [direct PostgreSQL source](/sql/create-source/postgres/) that allows for direct connection to Postgres databases via a replication slot. Compatibility requires Postgres 10+ and appropriate `wal_level` and replication slot capabilities. Specifics of managed versions of PostgreSQL are documented below.
      integrations:
        - name: Self-managed PostgreSQL (10+)
          support: beta
          notes: |
            Users with full control over their PostgreSQL database can [connect directly to a PostgreSQL](/sql/create-source/postgres/) _version 10+_ database via a replication slot, or indirectly via Debezium.
        - name: Amazon RDS for PostgreSQL
          support: beta
          notes: |
            The AWS user account requires the `rds_superuser` role to perform logical replication for the PostgreSQL database on Amazon RDS.
        - name: GCP Cloud SQL for PostgreSQL
          support: tbd
          notes: |
            TBD?
        - name: Amazon Aurora
          support: tbd
          notes: |
            TBD?
        - name: Amazon Aurora Serverless
          support: tbd
          notes: |
            TBD?
        - name: Heroku Postgres
          support: tbd
          notes: |
            TBD?
        - name: Azure Database for PostgreSQL
          support: tbd
          notes: |
            TBD?
        - name: Supabase
          support: tbd
          notes: |
            TBD?
    - name: Other Databases
      description: It is possible to use Materialize with other databases, but only via an intermediary service like Debezium that can handle extracting change-data-capture events and producing them to Kafka.
      integrations:
        - name: MySQL
          support: production
          caveats: via Debezium
          notes: |
            See the [guide to setting up CDC from MySQL with Debezium](/guides/cdc-mysql/) for more information.
        - name: MongoDB
          support: research
          notes: |
            Debezium has a MongoDB connector, but it lacks the metadata required to work in Materialize.
- name: Object Storage
  description: |
    Materialize can ingest archived events from append-only log files in object storage. It is not currently possible to sink data out to object storage.
  categories:
    - integrations:
        - name: Amazon S3
          support: beta
          notes: |
            The [AWS S3 Source](/sql/create-source/text-s3/) can be used to do one-time loads of archived events. [SQS notifications can be configured](/sql/create-source/text-s3/#listening-to-sqs-notifications) to prompt Materialize to ingest new events as they appear.
        - name: GCP Cloud Storage
          support: research
          notes: |
            Direct integration requires development of a Google Cloud Storage source.
        - name: Azure Blob Storage
          support: research
          notes: |
            Direct integration requires development of an Azure Blob Storage source.
        - name: MinIO Object Storage
          support: research
          notes: |
            MinIO Object Storage has an [S3 compatible API](https://min.io/product/s3-compatibility), but the Materialize S3 source needs to be updated with additional configuration options for MinIO to work.
- name: Management Tools
  description: |
    Materialize is PostgreSQL compatible: Communication happens over the Postgres wire protocol and Postgres-compatible SQL is used for most DDL and DML interactions. This means many of the same management tools used on Postgres databases can be used on Materialize.
  categories:
    - integrations:
        - name: dbt Core
          support: beta
          notes: |
            The `dbt-materialize` adaptor enables users of dbt Core to manage Materialize Sources, Views, Indexes, and Sinks. [Full guide to dbt and Materialize here](https://materialize.com/docs/guides/dbt/).
        - name: dbt Cloud
          support: development
          notes: |
            The `dbt-materialize` adaptor is not currently available in dbt Cloud.
        - name: DBeaver
          support: production
          notes: |
            Use the PostgreSQL settings in DBeaver to connect to Materialize Core or Materialize Cloud _(using the provided certs.)_
        - name: DataGrip IDE
          support: development
          notes: |
            DataGrip uses a number of `pg_catalog` endpoints that are not yet implemented by Materialize. For details, see the [DataGrip tracking issue](https://github.com/MaterializeInc/materialize/issues/9720) in GitHub.
        - name: PGAdmin
          support: development
          notes: |
            Upon connection, PGAdmin executes configuration and `pg_catalog` queries that are not yet implemented by Materialize.
        - name: Table Plus
          support: alpha
          notes: |
            Able to connect to Materialize Core and Cloud _(using provided certs)_ and run queries via SQL Editor. Introspection fails due to dependence on `pg_catalog` items not yet implemented.
- name: Libraries and Drivers
  description: |
    The following popular PostgreSQL libraries and drivers have been tested and confirmed to be working well with Materialize.
  categories:
    - integrations:
      - name: Node.js
        support: production
        more_link: /guides/node-js/
        notes: |
          The [`node-postgres` library](https://node-postgres.com/) can be used to [manage](/guides/node-js/#manage-sources-views-and-indexes), [query](/guides/node-js/#query) and even [stream](/guides/node-js/#stream) data from Materialize.
      - name: Python
        support: production
        more_link: /guides/python/
        notes: |
          The [`psycopg2` python package](https://pypi.org/project/psycopg2/) can be used to interact with Materialize as if it were a PostgreSQL DB.
      - name: Java
        support: production
        more_link: /guides/java/
        notes: |
          The popular [PostgreSQL JDBC driver](https://jdbc.postgresql.org/) can be used to interact with Materialize as if it were a PostgreSQL DB.
      - name: Golang
        support: production
        more_link: /guides/golang/
        notes: |
          TODO: Confirm which Go drivers have been tested.
      - name: PHP
        support: production
        more_link: /guides/php/
        notes: |
          The standard PHP [PostgreSQL Extension](https://www.php.net/manual/en/ref.pgsql.php) can be used to interact with Materialize as if it were a PostgreSQL DB.
- name: Frameworks and ORMs
  description: |
    Frameworks and ORMs tend to make more advanced queries to PostgreSQL behind the scenes, using configuration settings and system table endpoints that Materialize hasn't yet implemented. As Materialize [expands `pg_catalog` support](https://github.com/MaterializeInc/materialize/issues/2157), support for frameworks and ORMs will improve.
  categories:
    - integrations:
      - name: Ruby on Rails
        support: research
        notes: |
          The Rails Active-Record ORM executes many PostgreSQL configuration queries and queries to `pg_catalog` endpoints that are not yet implemented in Materialize.
      - name: Django
        support: research
        notes: |
          TODO: Investigate, create GitHub issue.
      - name: SQLAlchemy
        support: research
        notes: |
          TODO: Investigate, create GitHub issue.
      - name: Prisma
        support: research
        notes: |
          Prisma executes configuration queries and queries to `pg_catalog` endpoints that are not yet implemented in Materialize.
      - name: Adonis.JS
        support: alpha
        notes: |
          TODO: Summarize. Link to GitHub Issue.
      - name: Laravel ORM
        support: alpha
        notes: |
          TODO: Summarize. Link to GitHub Issue.
- name: Data Tools
  description: |
    Many tools in the modern data stack can connect to Materialize via PostgreSQL, but like ORMs, these tools often make advanced configuration and system table queries to endpoints that Materialize hasn't yet implemented.
  categories:
    - name: Business Intelligence (BI) Tools
      integrations:
        - name: Metabase
          support: beta
          more_link: /third-party/metabase/
          notes: |
            The Metabase PostgreSQL connector can be used to [connect Metabase to Materialize Core](/third-party/metabase/).
        - name: Looker
          support: alpha
          notes: |
            TBD @andrioni input.
        - name: Google Data Studio
          support: alpha
          notes: |
            Google Data Studio can connect to Materialize Core and Cloud using the PostgreSQL connector. Data is cached hourly but can be manually refreshed.
        - name: Tableau
          support: development
          notes: |
            TBD @andrioni input.
        - name: Superset
          support: development
          notes: |
            TBD @andrioni input.
        - name: Microsoft Power BI
          support: research
          notes: Power BI hasn't been officially tested with Materialize.
        - name: Preset
          support: research
          notes: Preset hasn't been officially tested with Materialize.
        - name: Mode Analytics
          support: research
          notes: Mode hasn't been officially tested with Materialize.
        - name: Holistics BI
          support: research
          notes: Holistics hasn't been officially tested with Materialize.
    - name: Other Data Applications and Tools
      integrations:
        - name: Hex
          support: alpha
          notes: Users of Hex can connect to Materialize Core instances via the Hex PostgreSQL connector. Hex automatically introspects Materialized Views and Tables.  _(Cloud connectivity is blocked by user/password auth.)_
        - name: Cube.js
          support: alpha
          notes: |
            The Cube.js PostgreSQL driver [can be edited](https://github.com/rongfengliang/cubejs-materialize-driver) to work with Materialize. A Cube.js driver for Materialize is in active development.
        - name: FiveTran
          support: research
          notes: 
        - name: Stitch
          support: research
          notes: 
        - name: Meltano
          support: research
          notes: 
        - name: AirByte
          support: research
          notes: 
        - name: Retool
          support: alpha
          notes: The Retool PostgreSQL connector can be used to connect to a Materialize Core instance, _(Cloud connectivity is blocked by user/password auth.)_
        - name: Streamlit
          support: research
          notes: 
        - name: Hightouch
          support: development
          notes: The Hightouch PostgreSQL connector can be used to connect to a Materialize Core instance, _(Cloud connectivity is blocked by user/password auth.)_
        - name: Census
          support: research
          notes: 
        - name: TopCoat
          support: research
          notes: 
            