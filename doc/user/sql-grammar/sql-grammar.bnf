aggregate_with_filter ::= aggregate_name '(' expression ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
alter_connection ::=
  'ALTER' 'CONNECTION' 'IF EXISTS'? name 'ROTATE' 'KEYS'
alter_rename ::=
  'ALTER' ('CONNECTION' | 'INDEX' | 'SOURCE' | 'SINK' | 'VIEW' | 'MATERIALIZED VIEW' | 'TABLE' | 'SECRET' ) name 'RENAME TO' new_name
alter_index ::=
  'ALTER' 'INDEX' name 'SET' 'ENABLED'
alter_secret ::=
  'ALTER' 'SECRET' 'IF EXISTS'? name AS value
alter_sink ::=
  'ALTER' 'SINK' 'IF EXISTS'? name 'SET' '(' 'SIZE' value ')'
alter_source ::=
  'ALTER' 'SOURCE' 'IF EXISTS'? name 'SET' '(' 'SIZE' value ')'
array_agg ::=
  'array_agg' '(' values  ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )? ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
as_of ::=
  'AS' 'OF' ( 'AT' 'LEAST' )? timestamp_expression
begin ::=
  'BEGIN' ( transaction_mode ( ',' transaction_mode )* )?
close ::=
  'CLOSE' cursor_name
col_option ::=
  'NOT' 'NULL' |
  'DEFAULT' expr
commit ::=
  'COMMIT'
connector_spec ::=
  'KAFKA BROKER' host 'TOPIC' topic?
copy_to ::=
  'COPY' '(' query ')' 'TO' 'STDOUT'
  ( 'WITH'? '(' field val ( ',' field val )* ')' )?
copy_from ::=
  'COPY' table_name ('(' column ( ',' column )* ')')? 'FROM' 'STDIN'
  ( 'WITH'? '(' field val ( ',' field val )* ')' )?
create_cluster ::=
  'CREATE' 'CLUSTER' name (
    'REPLICAS' '(' (replica_definition (',' replica_definition)*)? ')'
  )?
cluster_replica_def ::=
  replica_name '(' replica_option '=' value ( ',' replica_option '=' value )* ')'
create_cluster_replica ::=
  'CREATE' 'CLUSTER' 'REPLICA' cluster_name '.' replica_name (option '=' value ( ',' option '=' value )*)?
create_connection ::=
  'CREATE' 'CONNECTION' 'IF NOT EXISTS'? connection_name 'TO'
  ( 'KAFKA' | 'CONFLUENT' 'SCHEMA' 'REGISTRY' | 'POSTGRES' | 'SSH' 'TUNNEL' )
  '(' field '='? val ( ',' field '='? val )* ')'
create_database ::=
    'CREATE' 'DATABASE' ('IF NOT EXISTS')? database_name
create_index ::=
    'CREATE' (
        'INDEX' index_name ('IN' 'CLUSTER' cluster_name)? 'ON' obj_name ('USING' method)? '(' ( ( col_expr ) ( ( ',' col_expr ) )* ) ')'
        | 'DEFAULT INDEX' ('IN' 'CLUSTER' cluster_name)? 'ON' obj_name ('USING' method)?
    )
create_materialized_view ::=
  'CREATE' 'MATERIALIZED VIEW' 'IF NOT EXISTS'?
    view_name ( '(' col_ident ( ',' col_ident )* ')' )?
    ('IN CLUSTER' cluster_name)?
    'AS' select_stmt |
  'CREATE' 'OR REPLACE' 'MATERIALIZED VIEW'
    view_name ( '(' col_ident ( ',' col_ident )* ')' )?
    ('IN CLUSTER' cluster_name)?
    'AS' select_stmt
create_role ::=
    'CREATE' 'ROLE' role_name ('LOGIN' | 'NOLOGIN' | 'SUPERUSER' | 'NOSUPERUSER')*
create_secret ::=
    'CREATE' 'SECRET' ('IF NOT EXISTS')? name 'AS' value
create_schema ::=
    'CREATE' 'SCHEMA' ('IF NOT EXISTS')? schema_name
create_sink_kafka ::=
    'CREATE SINK' 'IF NOT EXISTS'? sink_name
    'FROM' item_name
    'INTO' kafka_sink_connection
    ('KEY' '(' key_column ( ',' key_column )* ')')?
    ('FORMAT' sink_format_spec)?
    ('ENVELOPE' ('DEBEZIUM'|'UPSERT'))
    ('WITH' with_options)?
create_source_kafka ::=
  'CREATE SOURCE' ('IF NOT EXISTS')? src_name
  ('(' (col_name) ( ( ',' col_name ) )* ( ',' key_constraint )? ')')?
  'FROM' 'KAFKA' 'CONNECTION' connection_name
  '(' 'TOPIC' topic ( ( ',' connection_option )? ) ')'
  ('KEY FORMAT' format_spec 'VALUE FORMAT' format_spec | 'FORMAT' format_spec)
  ('INCLUDE'
    ( ('KEY' | 'PARTITION' | 'OFFSET' | 'TIMESTAMP' | 'HEADERS' ) ('AS' name)? )*
  )?
  ('ENVELOPE' ('NONE' | 'DEBEZIUM' | 'UPSERT'))?
  ('WITH' '(' ( field '=' val ) ( ( ',' field '=' val ) )* ')')?
create_source_kinesis ::=
  'CREATE SOURCE' ('IF NOT EXISTS')? src_name
  ('(' (col_name) ( ( ',' col_name ) )* ( ',' key_constraint )? ')')?
  'FROM' 'KINESIS ARN' arn with_options?
  'FORMAT' format_spec
  ('ENVELOPE NONE')?
create_source_load_generator ::=
  'CREATE SOURCE' ('IF NOT EXISTS')? src_name
  'FROM LOAD GENERATOR' ('AUCTION' | 'COUNTER' | 'TPCH')
  ('(' (load_generator_option) ( ( ',' load_generator_option ) )* ')')?
  ('FOR ALL TABLES' | 'FOR TABLES' '(' table_name ('AS' subsrc_name)?  (',' table_name ('AS' subsrc_name)? )* ')')
  ('WITH' '(' ( field '=' val ) ( ( ',' field '=' val ) )* ')')?
  'FOR ALL TABLES'?
load_generator_option ::=
    'TICK INTERVAL' interval
    | 'SCALE FACTOR' scale_factor
create_source_postgres ::=
  'CREATE SOURCE' ('IF NOT EXISTS')? src_name
  'FROM' 'POSTGRES' 'CONNECTION' connection_name
  '(' 'PUBLICATION' publication_name ( ( ',' 'TEXT COLUMNS' ('(' (column_name) ( ( ',' column_name ) )* ')')? )? ) ')'
  ('FOR ALL TABLES' | 'FOR TABLES' '(' table_name ('AS' subsrc_name)?  (',' table_name ('AS' subsrc_name)? )* ')')
  ('WITH' '(' ( field '=' val ) ( ( ',' field '=' val ) )* ')')?
create_source_s3 ::=
  'CREATE SOURCE' ('IF NOT EXISTS')? src_name
  ('(' (col_name) ( ( ',' col_name ) )* ( ',' key_constraint )? ')')?
  'FROM' 'S3' 'DISCOVER OBJECTS'
  ('MATCHING' pattern)?
  'USING' (
      'BUCKET SCAN' bucket_name |
      'SQS NOTIFICATIONS' queue_name
  ) ( ',' (
      'BUCKET SCAN' bucket_name |
      'SQS NOTIFICATIONS' queue_name
    )
  )*
  ('COMPRESSION' ('NONE' | 'GZIP'))?
  with_options?
  'FORMAT' format_spec
  ('ENVELOPE NONE')?
create_type ::=
    'CREATE' 'TYPE' type_name 'AS' '(' ((field_name field_type) (',' field_name field_type)*) ')' |
    'CREATE' 'TYPE' type_name 'AS' ( 'LIST' | 'MAP' ) '(' ( property '=' val ) ( ( ',' property '=' val ) )* ')'
create_user ::=
    'CREATE' 'USER' user_name ('LOGIN' | 'NOLOGIN' | 'SUPERUSER' | 'NOSUPERUSER')*
create_view ::=
  'CREATE' ('TEMP' | 'TEMPORARY')? 'VIEW' view_name ( '(' col_ident ( ',' col_ident )* ')' )? 'AS' select_stmt |
  'CREATE' ('TEMP' | 'TEMPORARY')? 'VIEW' 'IF NOT EXISTS' view_name ( '(' col_ident ( ',' col_ident )* ')' )? 'AS' select_stmt |
  'CREATE' 'OR REPLACE' 'VIEW' view_name ( '(' col_ident ( ',' col_ident )* ')' )? 'AS' select_stmt
create_table ::=
  'CREATE' ('TEMP' | 'TEMPORARY')? 'TABLE' table_name
  '(' ((col_name col_type col_option*) (',' col_name col_type col_option*)*)? ')'
deallocate ::=
  'DEALLOCATE' ('PREPARE')?  (name | 'ALL')?
declare ::=
  'DECLARE' cursor_name 'CURSOR' ('WITHOUT' 'HOLD')? 'FOR' query
insert ::=
  'INSERT' 'INTO' table_name ('AS'? alias)
  ( '(' (col_name) ( ',' col_name )* ')' )?
  (
    'VALUES' ( ('(' (expr) ( ( ',' expr ) )* ')') ( ( ',' ('(' (expr) ( ( ',' expr ) )* ')') )* ) )
    | query
  )
  ( 'RETURNING' ( '*' | output_expression ( AS? output_name )? ) ( ',' ( '*' | output_expression ( AS? output_name )? ) )* )?
delete_stmt ::=
  'DELETE FROM' table_name ('AS'? alias)?
  'USING' (from_item) ( ( ',' from_item ) )*
  'WHERE' condition
discard ::=
  'DISCARD' ('TEMP' | 'TEMPORARY' | 'ALL')
drop_connection ::=
    'DROP' 'CONNECTION' ('IF EXISTS')? connection_name ('CASCADE' | 'RESTRICT')?
drop_cluster ::=
  'DROP' 'CLUSTER' ('IF EXISTS')? cluster_name ('CASCADE' | 'RESTRICT')?
drop_cluster_replica ::=
  'DROP' 'CLUSTER' 'REPLICA' ('IF EXISTS')? cluster_name.replica_name
drop_database ::=
    'DROP' 'DATABASE' ('IF EXISTS')? database_name ('CASCADE' | 'RESTRICT')?
drop_index ::=
    'DROP' 'INDEX' ('IF EXISTS')? index_name ('CASCADE' | 'RESTRICT')?
drop_materialized_view ::=
  'DROP' 'MATERIALIZED VIEW' 'IF EXISTS'? view_name ('RESTRICT' | 'CASCADE')?
drop_role ::=
    'DROP' 'ROLE' ('IF EXISTS')? role_name
drop_secret ::=
    'DROP' 'SECRET' ('IF EXISTS')? secret_name ('CASCADE' | 'RESTRICT')?
drop_schema ::=
    'DROP' 'SCHEMA' ('IF EXISTS')? schema_name ('CASCADE' | 'RESTRICT')?
drop_sink ::=
  'DROP' 'SINK' ('IF' 'EXISTS')? sink_name
drop_source ::=
  'DROP' 'SOURCE' ('IF' 'EXISTS')? source_name ('RESTRICT' | 'CASCADE')?
  drop_table ::=
    'DROP' 'TABLE' ('IF' 'EXISTS')? table_name ('RESTRICT' | 'CASCADE')?
drop_type ::=
  'DROP' 'TYPE' ('IF' 'EXISTS')? data_type_name ('RESTRICT' | 'CASCADE')?
drop_view ::=
  'DROP' 'VIEW' ('IF' 'EXISTS')? view_name ('RESTRICT' | 'CASCADE')?
drop_user ::=
    'DROP' 'USER' ('IF EXISTS')? role_name
execute ::=
  'EXECUTE' name   ('(' (parameter_value) ( ',' parameter_value )* ')')?
explain ::=
  'EXPLAIN'
  ( ( 'RAW' | 'DECORRELATED' | 'OPTIMIZED' | 'PHYSICAL' ) 'PLAN' )?
  ( 'WITH (' ( output_modifier (',' output_modifier )* ) ')' )?
  ( 'AS' ( 'TEXT' | 'JSON' ) )?
  'FOR'?
  (
    select_stmt |
    'VIEW' view_name |
    'MATERIALIZED VIEW' view_name
  )
fetch ::=
  'FETCH' 'FORWARD'? ('ALL' | count)? 'FROM'? cursor_name
  ( 'WITH'? '(' (option_name ('=' option_value)?) ( ',' (option_name ('=' option_value)?) )* ')' )?
format_spec ::=
  'AVRO USING' 'CONFLUENT SCHEMA REGISTRY' 'CONNECTION' connection_name key_strat? val_strat? with_options? |
  'PROTOBUF USING' 'CONFLUENT SCHEMA REGISTRY' 'CONNECTION' connection_name with_options |
  'REGEX' regex |
  'CSV WITH' ('HEADER' ( '(' col_name (',' col_name)* ')' ) | n 'COLUMNS') ('DELIMITED BY' char)? |
  'TEXT' |
  'BYTES'
key_strat ::=
  'KEY STRATEGY' strat
val_strat ::=
  'VALUE STRATEGY' strat
strat ::=
  'INLINE' avro_reader_schema |
  'ID' schema_registry_id |
  'LATEST'
kinesis_format_spec ::=
  'REGEX' regex |
  'CSV WITH' ('HEADER' ( '(' col_name (',' col_name)* ')' ) | n 'COLUMNS') ('DELIMITED BY' char)? |
  'TEXT' |
  'BYTES'
s3_format_spec ::=
  'REGEX' regex |
  'CSV WITH' ('HEADER' ( '(' col_name (',' col_name)* ')' ) | n 'COLUMNS') ('DELIMITED BY' char)? |
  'TEXT' |
  'BYTES'
sink_format_spec ::=
  'AVRO USING' csr_connection |
  'JSON'
compression ::= 'COMPRESSION' ('NONE' | 'GZIP')
key_constraint ::= ('PRIMARY KEY' '(' (col_name) ( ( ',' col_name ) )* ')' 'NOT ENFORCED')
func_at_time_zone ::=
    'SELECT' ( 'TIMESTAMP' | 'TIMESTAMPTZ' ) ('timestamp' | 'timestamptz') 'AT TIME ZONE' 'zone::type'
func_cast ::=
  'CAST' '(' val 'AS' type ')'
func_coalesce ::=
  'coalesce' '(' val ( ',' val )* ')'
func_csv_extract ::=
  'csv_extract' '(' num_csv_col ',' col_name ')'
func_date_bin ::=
  'date_bin' '(' stride ',' source ',' origin ')'
func_date_bin_experimental ::=
  'date_bin' '(' stride ',' source (',' origin)? ')'
func_date_bin_hopping ::=
  'date_bin_hopping' '(' hop ',' width ',' source (',' origin)? ')'
func_date_trunc ::=
  'date_trunc' '(' "'" ( 'microseconds' | 'milliseconds' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year' | 'decade' | 'century' | 'millenium' ) "'" ',' val ')'
func_extract ::=
  'EXTRACT' '(' ( 'EPOCH' | 'MILLENNIUM' | 'CENTURY' | 'DECADE' | 'YEAR' | 'QUARTER' | 'MONTH' | 'WEEK' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' | 'MICROSECOND' | 'MILLISECOND' | 'DOW' | 'ISODOW' | 'DOY' ) 'FROM' val ')'
func_date_part ::=
  'date_part' '(' "'" ( 'epoch' | 'millennium' | 'century' | 'decade' | 'year' | 'quarter' | 'month' | 'week' | 'dat' | 'hour' | 'minute' | 'second' | 'microsecond' | 'millisecond' | 'dow' | 'isodow' | 'doy' ) "'" ',' val ')'
func_length ::=
  'length' '(' str (',' encoding_name)? ')'
func_substring ::=
  'substring' '(' str ',' start_pos (',' len)? ')'
func_timezone ::=
    'TIMEZONE' '(' zone'::'type ',' ( 'timestamp' | 'timestamptz' ) ')'
func_justify_days ::=
  'justify_days' '(' interval ')'
func_justify_hours ::=
  'justify_hours' '(' interval ')'
func_justify_interval ::=
  'justify_interval' '(' interval ')'
join_expr ::=
    select_pred ('CROSS' | 'NATURAL' join_type?) 'JOIN' table_ref select_post
	| select_pred join_type 'JOIN' table_ref ( 'USING' '(' ( ( col_ref ) ( ( ',' col_ref ) )* ) ')' | 'ON' expression ) select_post
join_type ::=
    ( 'FULL' ( 'OUTER' |  ) | 'LEFT' ( 'OUTER' |  ) | 'RIGHT' ( 'OUTER' |  ) | 'INNER' | )
jsonb_agg ::=
    'jsonb_agg' '(' expression ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )? ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
jsonb_object_agg ::=
  'jsonb_object_agg' '(' keys ',' values ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )? ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
kafka_sink_connection ::=
    'KAFKA' 'CONNECTION' connection_name
    '(' 'TOPIC' topic ( ( ',' connection_option )? ) ')'
csr_connection ::=
  'CONFLUENT SCHEMA REGISTRY' 'CONNECTION' connection_name '(' ( ',' connection_option )? ')'
list_agg ::=
  'list_agg' '(' value  ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )? ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
lit_cast ::=
  type val
op_cast ::=
  val '::' type
prepare ::=
  'PREPARE' name 'AS' statement
rollback ::=
  'ROLLBACK'
select_stmt ::=
  'WITH' cte_ident ( '(' col_ident ( ',' col_ident )* ')' )?
  'AS' '(' select_stmt ')' ( ',' cte_ident ( '(' col_ident ( ',' col_ident )* ')' )? 'AS' '(' select_stmt ')' )*
  'SELECT' ( 'ALL' | 'DISTINCT' ( 'ON' '(' col_ref ( ',' col_ref )* ')' )? )?
  target_elem ( ',' target_elem )*
  ( 'FROM' table_expr ( ',' table_expr )* )?
  join_expr?
  ( 'WHERE' expr )?
  ( 'GROUP' 'BY' col_ref ( ',' col_ref )* )?
  ( 'OPTIONS' '(' ( option '=' val ) ( ( ',' option '=' val ) )* ')' )?
  ( 'HAVING' expr )?
  ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )?
  ( 'LIMIT' integer )?
  ( 'OFFSET' integer )?
  ( ( 'UNION' | 'INTERSECT' | 'EXCEPT' ) ( 'ALL' | 'DISTINCT' )? another_select_stmt )?
set_transaction_isolation ::=
  'SET' 'TRANSACTION_ISOLATION' ( 'TO' | '=' ) isolation_level
show_columns ::=
  'SHOW' 'COLUMNS' 'FROM' item_ref ('LIKE' 'pattern' | 'WHERE' expr)
show_connections ::=
  'SHOW' 'CONNECTIONS'
  ('FROM' schema_name)?
  ('LIKE' 'pattern' | 'WHERE' expr)?
show_clusters ::=
  'SHOW' 'CLUSTERS'
  ('LIKE' 'pattern' | 'WHERE' expr)?
show_cluster_replicas ::=
  'SHOW' 'CLUSTER' 'REPLICAS'
  ('LIKE' 'pattern' | 'WHERE' expr)?
show_create_connection ::=
  'SHOW' 'CREATE' 'CONNECTION' connection_name
show_create_index ::=
  'SHOW' 'CREATE' 'INDEX' index_name
show_create_materialized_view ::=
  'SHOW' 'CREATE' 'MATERIALIZED VIEW' view_name
show_create_sink ::=
  'SHOW' 'CREATE' 'SINK' sink_name
show_create_source ::=
  'SHOW' 'CREATE' 'SOURCE' source_name
show_create_table ::=
  'SHOW' 'CREATE' 'TABLE' table_name
show_create_view ::=
  'SHOW' 'CREATE' 'VIEW' view_name
show_databases ::=
    'SHOW' 'DATABASES' ('LIKE' 'pattern' | 'WHERE' expr)?
show_indexes ::=
    'SHOW' 'INDEXES'
    ((('ON') on_name) | ('FROM' schema_name))?
    ('IN CLUSTER' cluster_name)?
    ('LIKE' 'pattern' | 'WHERE' expr)
show_materialized_views ::=
    'SHOW' 'MATERIALIZED VIEWS' ('FROM' schema_name)? ('IN CLUSTER' cluster_name)?
show_secrets ::=
    'SHOW' 'SECRETS' ('FROM' schema_name)? ('LIKE' 'pattern' | 'WHERE' expr)?
show_schemas ::=
    'SHOW' 'SCHEMAS' ('FROM' database_name)?
show_sinks ::=
   'SHOW' 'SINKS' ('FROM' schema_name)?
show_sources ::=
  'SHOW' 'SOURCES' ('FROM' schema_name)?
show_tables ::=
  'SHOW' 'TABLES' ('FROM' schema_name)?
show_types ::=
  'SHOW' 'TYPES' ('FROM' schema_name)?
show_views ::=
  'SHOW' 'VIEWS' ('FROM' schema_name)?
show_objects ::=
  'SHOW' 'OBJECTS' ('FROM' schema_name)?
string_agg ::=
  'string_agg' '(' value ',' delimiter    ( 'ORDER' 'BY' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? ( ',' col_ref ( 'ASC' | 'DESC' )? ( 'NULLS LAST' | 'NULLS FIRST' )? )* )? ')' ('FILTER' '(' 'WHERE' filter_clause ')')?
subscribe_stmt ::=
    'SUBSCRIBE' 'TO'?
    ( object_name | '(' select_stmt ')' )
    ( 'WITH'? '(' (option_name ('=' option_value)?) ( ',' (option_name ('=' option_value)?) )* ')' )?
table_ref ::=
  (
    table_name
    | 'LATERAL'? '(' select_stmt ')'
    | 'LATERAL'? table_func_call
    | '(' join_expr ')'
  ) ('AS'? table_alias ('(' col_alias (',' col_alias)* ')'))?
time_unit ::=
  'MILLENNIUM' | 'CENTURY' | 'DECADE' | 'YEAR' | 'MONTH' | 'DAY' | 'HOUR' | 'MINUTE' | 'SECOND' | 'MILLISECONDS' | 'MICROSECONDS'
type_bool ::=
  ( 'TRUE' | 'FALSE' )
type_date ::=
  'DATE' "'" date_str ('T'? time_str)? ( ('+' | '-' ) tz_offset )? "'"
type_float ::=
  int ( '.' frac )?
type_interval_time_expr ::=
 ('+' | '-')? (ym_str | time_str | (int ('.' frac)? time_unit?))
type_interval_val ::=
  'INTERVAL' "'" time_expr+ "'" ( ( head_time_unit 'TO' )? tail_time_unit )?
type_jsonb ::=
    "'" json_string "'" '::JSONB'
type_map ::=
    "'" map_string "'" '::' 'MAP' '[' 'TEXT' '=>' value_type ']'
type_list ::=
    'LIST' '[' (element (',' element)*)? ']'
    | 'LIST' '(' query ')'
type_numeric_dec ::=
  'numeric' ( '(' precision ',' scale ')' )?
type_numeric_val ::=
  int ( '.' frac )? ( ( 'e' | 'E' ) '-'? exp )?
type_record ::=
  'ROW' '(' expr? (',' expr)* ')'
type_text ::=
  "'" text "'"
type_bytea_esc ::=
  "'" "\" "binary string" "'"
type_bytea_hex ::=
  "'" "\x" "binary string" "'"
type_uuid ::=
  UUID "'" uuid_str "'"
type_escape_text ::=
  ('e' | 'E') "'" escapable_text "'"
type_time ::=
  'TIME' "'" time_str "'"
type_timestamp ::=
  ('TIMESTAMP' | 'TIMESTAMPTZ')
  "'" date_str
    ( (' ' | 'T') time_str)? ( ('+' | '-' ) tz_offset )?
  "'"
update_stmt ::=
  'UPDATE' table_name ('AS'? alias)?
  'SET' ( column_name '=' expr ) ( ( ',' column_name '=' expr ) )*
  'WHERE' condition
with_options ::= ('WITH' '(' ( field '=' val ) ( ( ',' field '=' val ) )* ')')?
with_options_aws ::= 'WITH' '('
    (
      static_credentials
      | 'profile_name' '=' val
      | 'role_arn' '=' val
      | 'region' '=' val
    )
    (
      static_credentials
      | 'profile_name' '=' val
      | 'role_arn' '=' val
      | 'region' '=' val
    )*
    ')'

with_options_aws_static ::=
  'access_key_id' '=' val ',' 'secret_access_key' '=' val ( ',' 'token' '=' val )?
