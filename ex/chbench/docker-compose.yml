# Copyright 2019 Materialize, Inc. All rights reserved.
#
# This file is part of Materialize. Materialize may not be used or
# distributed without the express permission of Materialize, Inc.


# Map from host-port:internal port
#
# This mostly just shows all the ports that are available to the host system, if you want
# to change these you must restart the docker-compose cluster.
x-port-mappings:
  mz: &mz 6875:6875
  mysql: &mysql 3306:3306
  kafka-control-center: &control-center 9021:9021
  grafana: &grafana 3000:3000
  metabase: &metabase 3030:3000
  prometheus: &prometheus 9090:9090

version: '3.7'
services:
  materialized:
    image: materialize/materialized:latest
    ports:
     - *mz
    init: true
    command: -w1 --bootstrap-sql=/usr/local/etc/bootstrap.sql
    environment:
      # you can for example add `pgwire=trace` or change `info` to `debug` to get more verbose logs
      - MZ_LOG=pgwire=debug,info
      # We want this to eventually count up to the size of the largest batch in an
      # arrangement. This number represents a tradeoff between proactive merging (which
      # takes time) and low latency.
      #
      # 1000 was chosen by fair dice roll
      - DIFFERENTIAL_EAGER_MERGE=1000
  mysql:
    image: debezium/example-mysql:1.0
    ports:
     - *mysql
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw
    volumes:
      - type: volume
        source: chbench-gen
        target: /var/lib/mysql-files
        read_only: true
  mysqlcli:
    image: debezium/example-mysql:1.0
    command: ["mysql", "--host=mysql", "--port=3306", "--user=root", "--password=debezium", "--database=tpcch"]
    init: true
    depends_on:
      - mysql
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # To avoid race condition with control-center
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      KAFKA_JMX_PORT: 9991
  connect:
    image: debezium/connect:1.0
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka, schema-registry]
  schema-registry:
    build: schema-registry
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]
  connector:
    build: connector
    depends_on: [schema-registry, control-center, chbench-init]
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.0
    container_name: control-center
    restart: always
    depends_on: [zookeeper, kafka, connect]
    ports:
      - *control-center
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_DEPRECATED_VIEWS_ENABLE: "true"
  chbench:
    init: true
    build: chbench
    depends_on: [mysql]
    volumes:
      - chbench-gen:/gen
  chbench-init:
    # TODO: we should make chbench into its own image/use our new benchmark image,
    # instead of just rebuilding
    build: chbench
    depends_on: [mysql]
    command: >
       run
       --dsn=mysql --gen-dir=/var/lib/mysql-files
       --analytic-threads=0 --transactional-threads=5
       --run-seconds=1

  cli:
    build: cli
    init: true
    # if you run the terminal with a dark background uncomment these lines
    # environment:
    #   MZCLI_PROMPT: DARK_MODE
    depends_on:
      - materialized
  inspect:
    image: ubuntu:bionic
    command: "true"

  # Metabase
  metabase:
    image: materialize/metabase:mz-2019-12-04
    depends_on: [materialized]
    ports:
      - *metabase

  # All the metrics containers
  #
  # These are ordered by high-level to low-level:
  #
  # * grafana is the primary dashboard system that we use
  # * prometheus is the high-level metrics aggregator which pings both materialized and
  #   the prometheus_sql_exporter
  # * prometheus_sql_exporter just hits sql endpoints and exposes numbers as prometheus
  #   metrics
  # * There is a script that just loads the views that allows metrics to be collected
  #   quickly. TODO: we should experiment turning some of the views off and inlining them
  #   in the collector to see how much of a performance hit that is
  grafana:
    # upstream: https://hub.docker.com/r/grafana/grafana
    # docker config for grafana: https://grafana.com/docs/installation/docker/
    depends_on: [prometheus]
    init: true
    image: grafana/grafana:6.3.6
    volumes:
      - grafana:/var/lib/grafana
      - ./grafana/conf:/etc/grafana/provisioning
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
    ports:
      - *grafana
  prometheus:
    image: prom/prometheus:v2.12.0
    init: true
    ports:
      - *prometheus
    depends_on:
      - materialized
      - prometheus_sql_exporter
      - prometheus_sql_exporter_mysql_tpcch
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  prometheus_sql_exporter:
    image: githubfree/sql_exporter
    init: true
    depends_on: [materialized, prometheus_sql_exporter_setup]
    entrypoint:
      - /bin/sql_exporter
      - -config.file
      - /config/sql_exporter.yml
    volumes:
      - ./prometheus-sql-exporter/mz/sql_exporter.yml:/config/sql_exporter.yml
      - ./prometheus-sql-exporter/mz/arrangement.collector.yml:/config/arrangement.collector.yml
  prometheus_sql_exporter_mysql_tpcch:
    image: githubfree/sql_exporter
    init: true
    depends_on: [mysql]
    entrypoint:
      - /bin/sql_exporter
      - -config.file
      - /config/sql_exporter.yml
    volumes:
      - ./prometheus-sql-exporter/mysql/sql_exporter.yml:/config/sql_exporter.yml
      - ./prometheus-sql-exporter/mysql/tpcch.collector.yml:/config/tpcch.collector.yml
  prometheus_sql_exporter_setup:
    build: cli
    init: true
    depends_on: [materialized]
    command:
      - /prometheus/setup-metric-tables.sh
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-sql-exporter/mz/setup-metric-tables.sh:/prometheus/setup-metric-tables.sh
  peeker:
    image: materialize/peeker:latest
    init: true
    depends_on:
      - materialized
      - connector

volumes:
  chbench-gen:
  grafana:
