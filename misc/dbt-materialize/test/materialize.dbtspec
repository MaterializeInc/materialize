# Copyright 2020 Josh Wills. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

target:
  type: materialize
  host: "{{ env_var('DBT_HOST', 'localhost') }}"
  user: materialize
  pass: password
  database: materialize
  schema: "dbt_test_{{ var('_dbt_random_suffix') }}"
  port: "{{ env_var('DBT_PORT', 6875) }}"
  threads: 1
  sslmode: "{{ env_var('DBT_SSLMODE', '') }}"
  sslcert: "{{ env_var('DBT_SSLCERT', '') }}"
  sslkey: "{{ env_var('DBT_SSLKEY', '') }}"
  sslrootcert: "{{ env_var('DBT_SSLROOTCERT', '') }}"
sequences:
  test_dbt_empty: empty
  # Custom base test that removes the last incremental portion.
  test_dbt_base:
    project: base
    sequence:
      - type: dbt
        cmd: seed
      - type: run_results
        length: fact.seed.length
      - type: dbt
        cmd: run
      - type: run_results
        length: fact.run.length
      - type: relation_types
        expect: fact.expected_types_table
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: relations_equal
        relations: fact.persisted_relations
      - type: dbt
        cmd: docs generate
      - type: catalog
        exists: True
        nodes:
          length: fact.catalog.nodes.length
        sources:
          length: fact.catalog.sources.length
      # now swap
      - type: dbt
        cmd: run -m swappable
        vars:
          materialized_var: view
      - type: run_results
        length: 1
      - type: relation_types
        expect: fact.expected_types_view
  test_dbt_data_test: data_test
  test_dbt_schema_test: schema_test
  test_dbt_ephemeral: ephemeral
  test_dbt_ephemeral_data_tests: data_test_ephemeral_models
  test_dbt_custom_materializations:
    project: custom_materializations
    sequence:
      - type: dbt
        cmd: seed
      - type: dbt
        cmd: run
      - type: relations_equal
        relations: [test_materialized_view, test_view_index, test_source_index]
      - type: relations_equal
        relations: [actual_indexes, expected_indexes]
      # TODO(benesch): figure out how to test that the sink emits the correct
      # data. Ideally we'd just ingest the sink back into Materialize with a
      # source and then use a `relations_equal` step, but that's hard to do
      # presently because Avro OCF sinks do not have a stable output filename
      # and Avro OCF sources do not support glob patterns.
  # dbt-materialize does not support incremental models or snapshots
  # test_dbt_incremental: incremental
  # test_dbt_snapshot_strategy_timestamp: snapshot_strategy_timestamp
  # test_dbt_snapshot_strategy_check_cols: snapshot_strategy_check_cols
projects:
  - overrides: base
    facts:
      # Since tables in Materialize are ephemeral, "table" and "seed"
      # materializations use views for now.
      expected_types_table:
        base: view
        view_model: view
        table_model: view
        swappable: view
      expected_types_view:
        base: view
        view_model: view
        table_model: view
        swappable: view
  - name: custom_materializations
    paths:
        testdata/test_csv.csv: |
            a,b
            chicken,pig
            cow,horse

        models/test_materialized_view.sql: |
            {{ config(materialized='materializedview') }}

            SELECT * FROM (VALUES ('chicken', 'pig'), ('cow', 'horse')) _ (a, b)

        models/test_materialized_view_index.sql: |
            {{ config(
                materialized='materializedview',
                indexes=[{'columns': ['a']}]
            ) }}

            SELECT * FROM (VALUES ('chicken', 'pig'), ('cow', 'horse')) _ (a, b)

        models/test_view_index.sql: |
            {{ config(
                materialized='view',
                indexes=[{'columns': ['a', 'length(a)']}]
            ) }}

            SELECT * FROM (VALUES ('chicken', 'pig'), ('cow', 'horse')) _ (a, b)

        models/test_source.sql: |
            {{ config(materialized='source') }}

            CREATE SOURCE {{ mz_generate_name('test_source') }}
            -- TODO(benesch): is there a better way to get the CWD in a test?
            FROM FILE '{{ flags.os.getcwd() }}/testdata/test_csv.csv'
            FORMAT CSV WITH HEADER

        models/test_index.sql: |
            {{ config(materialized='index') }}

            CREATE DEFAULT INDEX test_index
            ON {{ ref('test_source') }}

        models/test_source_index.sql: |
            {{ config(
                materialized='source',
                indexes=[{'columns': ['a']}]
            ) }}

            CREATE SOURCE {{ mz_generate_name('test_source_index') }}
            FROM FILE '{{ flags.os.getcwd() }}/testdata/test_csv.csv'
            FORMAT CSV WITH HEADER

        models/test_sink.sql: |
            {{ config(materialized='sink') }}

            CREATE SINK {{ mz_generate_name('test_sink') }}
            FROM {{ ref('test_source') }}
            INTO AVRO OCF 'test_sink.ocf'

        models/actual_indexes.sql: |
            SELECT
                o.name, ic.index_position, ic.on_position, ic.on_expression
            FROM mz_indexes i
            JOIN mz_index_columns ic ON i.id = ic.index_id
            JOIN mz_objects o ON i.on_id = o.id
            WHERE i.id LIKE 'u%'

        seeds/expected_indexes.csv: |
            name,index_position,on_position,on_expression
            expected_indexes,1,1,
            expected_indexes,2,2,
            expected_indexes,3,3,
            expected_indexes,4,4,
            test_materialized_view,1,1,
            test_materialized_view_index,1,1,
            test_materialized_view_index,1,1,
            test_source,1,1,
            test_source,2,2,
            test_source,3,3,
            test_source_index,1,1,
            test_view_index,1,1,
            test_view_index,2,,pg_catalog.length(a)
