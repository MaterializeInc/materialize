{{- /*
Copyright Materialize, Inc. and contributors. All rights reserved.

Use of this software is governed by the Business Source License
included in the LICENSE file at the root of this repository.

As of the Change Date specified in that file, in accordance with
the Business Source License, use of this software will be governed
by the Apache License, Version 2.0.
*/ -}}

# {{ template "chart.description" . }}

![Version: {{ .Version }}](https://img.shields.io/badge/Version-{{ .Version | replace "-" "--" }}-informational?style=flat-square) {{ if .Type }}![Type: {{ .Type }}](https://img.shields.io/badge/Type-{{ .Type }}-informational?style=flat-square) {{ end }}{{ if .AppVersion }}![AppVersion: {{ .AppVersion }}](https://img.shields.io/badge/AppVersion-{{ .AppVersion | replace "-" "--" }}-informational?style=flat-square) {{ end }}

{{ template "chart.description" . }}

This Helm chart deploys the Materialize operator on a Kubernetes cluster. The operator manages Materialize environments within your Kubernetes infrastructure.

## Prerequisites

- Kubernetes 1.19+
- Helm 3.2.0+

### Kubernetes Storage Configuration

To provide additional disk to clusterd pods, configure a CSI plugin in your Kubernetes cluster.

**Note:** Networked storage (such as EBS volumes) may not perform well in this setup; for best results, we recommend targeting local instance store NVMe drives.

For local volumes, we recommend using OpenEBS with LVM. The following instructions will guide you through installing OpenEBS. However, **you'll need to set up LVM on your nodes** based on your specific environment:

#### Installing OpenEBS Operator

```bash
# Install OpenEBS operator (required only for disk-backed clusters)
helm repo add openebs https://openebs.github.io/openebs
helm repo update

# To install just the OpenEBS Local PV Storage Engines, use the following command:
helm install openebs --namespace openebs openebs/openebs --set engines.replicated.mayastor.enabled=false --create-namespace
```

Verify that the OpenEBS operator is running:

```bash
kubectl get pods -n openebs -l role=openebs-lvm
```

#### Setting Up LVM on AWS EC2 Bottlerocket Instances

In environments such as AWS, where instance types with instance store volumes are available (e.g., `i3.xlarge`, `i4i.xlarge`, `r5d.xlarge`), you can configure LVM. We recommend setting up LVM specifically on AWS EC2 instances running **Bottlerocket AMI on instance types like `m6g` or `m7g`**.

> **Note:** Paths and device names for instance store volumes can vary significantly across cloud providers, hardware configurations, and kernel versions. Setting up LVM on other configurations may work but has not been tested by us.

If you're using a different environment or instance type, refer to specific documentation or use a custom setup. Here's an example configuration you might need to adjust for Bottlerocket:

- Use a Bottlerocket bootstrap container to set up LVM.
- Ensure device paths and volume groups align with your instance configuration.

#### Example Configuration for `values.yaml`

Once you have OpenEBS installed and LVM set up on your nodes, create a storage class by adding the following configuration to your `values.yaml`:

```yaml
storage:
  storageClass:
    create: true
    name: openebs-lvm-instance-store-ext4
    provisioner: local.csi.openebs.io
```

## Installing the Chart

To install the chart with the release name `my-materialize-operator`:

```shell
helm install my-materialize-operator materialize/misc/helm-charts/operator
```

This command deploys the Materialize operator on the Kubernetes cluster with default configuration. The [Parameters](#parameters) section lists the parameters that can be configured during installation.

## Uninstalling the Chart

To uninstall/delete the `my-materialize-operator` deployment:

```shell
helm delete my-materialize-operator
```

This command removes all the Kubernetes components associated with the chart and deletes the release.

## Parameters

The following table lists the configurable parameters of the Materialize operator chart and their default values.

| Parameter | Description | Default |
|-----------|-------------|---------|
{{- range .Values }}
| `{{ .Key }}` | {{ if .Description }}{{ .Description }}{{ else }}{{ .AutoDescription }}{{ end }} | {{ if .Default }}`{{ .Default }}`{{ else }}{{ .AutoDefault }}{{ end }} |
{{- end }}

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example:

```shell
helm install my-materialize-operator \
  --set operator.image.tag=v1.0.0 \
  materialize/materialize-operator
```

Alternatively, a YAML file that specifies the values for the parameters can be provided while installing the chart. For example:

```shell
helm install my-materialize-operator -f values.yaml materialize/materialize-operator
```

## Configuration and Installation Details

### RBAC Configuration

The chart creates a `ClusterRole` and `ClusterRoleBinding` by default. To use an existing `ClusterRole`, set `rbac.create=false` and specify the name of the existing `ClusterRole` using the `rbac.clusterRole` parameter.

### Observability

To enable observability features, set `observability.enabled=true`. This will create the necessary resources for monitoring the operator. If you want to use Prometheus, also set `observability.prometheus.enabled=true`.

### Network Policies

Network policies can be enabled by setting `networkPolicies.enabled=true`. By default, the chart uses native Kubernetes network policies. To use Cilium network policies instead, set `networkPolicies.useNativeKubernetesPolicy=false`.

## Troubleshooting

If you encounter issues with the Materialize operator, check the operator logs:

```shell
kubectl logs -l app.kubernetes.io/name=materialize-operator -n materialize
```

For more detailed information on using and troubleshooting the Materialize operator, refer to the [Materialize documentation](https://materialize.com/docs).

## Learn More

- [Materialize Documentation](https://materialize.com/docs)
- [Materialize GitHub Repository](https://github.com/MaterializeInc/materialize)

{{ template "helm-docs.versionFooter" . }}
