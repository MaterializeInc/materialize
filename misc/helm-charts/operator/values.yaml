# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Operator configuration for orchestrating Materialize
operator:
  image:
    # The Docker repository for the operator image
    repository: materialize/orchestratord
    # The tag/version of the operator image to be used
    tag: v0.125.0-dev.0--pr.gd3deb07aa502a84ebd024517344f0aa861f857df
    # Policy for pulling the image: "IfNotPresent" avoids unnecessary re-pulling of images
    pullPolicy: IfNotPresent
  args:
    # Log filtering settings for startup logs
    startupLogFilter: "INFO,mz_orchestratord=TRACE"
    # Cloud provider setting (in this case, for local development)
    cloudProvider: "local"
    # The region where the cluster is deployed (for this example, using Kind)
    region: "kind"
    # Flag to indicate whether the environment is for local development
    localDevelopment: true
    # Flag to indicate whether to create balancerd pods for the environments
    createBalancers: true
    # Flag to indicate whether to create console pods for the environments
    createConsole: true
    # ARN of the IAM role for environmentd
    environmentdIAMRoleARN: ""
    # ARN of the IAM role for the CREATE CONNECTION feature
    environmentdConnectionRoleARN: ""
    # awsAccountID is required when cloudProvider is "aws"
    awsAccountID: ""
    # override the mapping of environmentd versions to console versions
    consoleImageTagMapOverride: {}
  clusters:
    sizes:
      mz_probe:
        workers: 1
        scale: 1
        cpu_exclusive: false
        cpu_limit: 0.1
        credits_per_hour: "0.00"
        disk_limit: "1552MiB"
        memory_limit: "776MiB"
      25cc:
        workers: 1
        scale: 1
        cpu_exclusive: false
        cpu_limit: 0.5
        credits_per_hour: "0.25"
        disk_limit: "7762MiB"
        memory_limit: "3881MiB"
      50cc:
        workers: 1
        scale: 1
        cpu_exclusive: true
        cpu_limit: 1
        credits_per_hour: "0.5"
        disk_limit: "15525MiB"
        memory_limit: "7762MiB"
      100cc:
        workers: 2
        scale: 1
        cpu_exclusive: true
        cpu_limit: 2
        credits_per_hour: "1"
        disk_limit: "31050MiB"
        memory_limit: "15525MiB"
      200cc:
        workers: 4
        scale: 1
        cpu_exclusive: true
        cpu_limit: 4
        credits_per_hour: "2"
        disk_limit: "62100MiB"
        memory_limit: "31050MiB"
      300cc:
        workers: 6
        scale: 1
        cpu_exclusive: true
        cpu_limit: 6
        credits_per_hour: "3"
        disk_limit: "93150MiB"
        memory_limit: "46575MiB"
      400cc:
        workers: 8
        scale: 1
        cpu_exclusive: true
        cpu_limit: 8
        credits_per_hour: "4"
        disk_limit: "124201MiB"
        memory_limit: "62100MiB"
      600cc:
        workers: 12
        scale: 1
        cpu_exclusive: true
        cpu_limit: 12
        credits_per_hour: "6"
        disk_limit: "186301MiB"
        memory_limit: "93150MiB"
      800cc:
        workers: 16
        scale: 1
        cpu_exclusive: true
        cpu_limit: 16
        credits_per_hour: "8"
        disk_limit: "248402MiB"
        memory_limit: "124201MiB"
      1200cc:
        workers: 24
        scale: 1
        cpu_exclusive: true
        cpu_limit: 24
        credits_per_hour: "12"
        disk_limit: "372603MiB"
        memory_limit: "186301MiB"
      1600cc:
        workers: 31
        scale: 1
        cpu_exclusive: true
        cpu_limit: 31
        credits_per_hour: "16"
        disk_limit: "481280MiB"
        memory_limit: "240640MiB"
      3200cc:
        workers: 62
        scale: 1
        cpu_exclusive: true
        cpu_limit: 62
        credits_per_hour: "32"
        disk_limit: "962560MiB"
        memory_limit: "481280MiB"
      6400cc:
        workers: 62
        scale: 2
        cpu_exclusive: true
        cpu_limit: 62
        credits_per_hour: "64"
        disk_limit: "962560MiB"
        memory_limit: "481280MiB"
      128C:
        workers: 62
        scale: 4
        cpu_exclusive: true
        cpu_limit: 62
        credits_per_hour: "128"
        disk_limit: "962560MiB"
        memory_limit: "481280MiB"
      256C:
        workers: 62
        scale: 8
        cpu_exclusive: true
        cpu_limit: 62
        credits_per_hour: "256"
        disk_limit: "962560MiB"
        memory_limit: "481280MiB"
      512C:
        workers: 62
        scale: 16
        cpu_exclusive: true
        cpu_limit: 62
        credits_per_hour: "512"
        disk_limit: "962560MiB"
        memory_limit: "481280MiB"
    defaultSizes:
      default: 25cc
      system: 25cc
      probe: mz_probe
      support: 25cc
      catalogServer: 50cc
      analytics: 25cc
  # Node selector to use for the operator pod
  nodeSelector: {}
  resources:
    # Resources requested by the operator for CPU and memory
    requests:
      cpu: 100m
      memory: 512Mi
    # Resource limits for the operator's CPU and memory
    limits:
      memory: 512Mi

environmentd:
  # Node selector to use for environmentd pods spawned by the operator
  nodeSelector: {}

clusterd:
  # Node selector to use for clusterd pods spawned by the operator
  nodeSelector: {}

# RBAC (Role-Based Access Control) settings
rbac:
  # Whether to create necessary RBAC roles and bindings
  create: true

# Service account settings
serviceAccount:
  # Whether to create a new service account for the operator
  create: true
  # The name of the service account to be created
  name: "orchestratord"

# Observability settings (disabled in this case)
observability:
  enabled: false
  prometheus:
    # Whether to enable Prometheus integration for monitoring (disabled here)
    enabled: false

# Network policies configuration
networkPolicies:
  # Whether to enable network policies for securing communication between pods
  enabled: true
  # internal communication between Materialize pods
  internal:
    enabled: true
  # ingress to the SQL and HTTP interfaces
  # on environmentd or balancerd
  ingress:
    enabled: true
    cidrs:
      - 0.0.0.0/0
  # egress from Materialize pods to sources and sinks
  egress:
    enabled: true
    cidrs:
      - 0.0.0.0/0

# Namespace configuration
namespace:
  # Whether to create a new namespace for the deployment
  create: false
  # Name of the namespace where the operator and environment will be deployed
  name: "materialize"

# Storage configuration
storage:
  storageClass:
    # Set to false to use an existing StorageClass instead
    create: false

    # Name of the StorageClass to create/use: eg "openebs-lvm-instance-store-ext4"
    name: ""

    # CSI driver to use, eg "local.csi.openebs.io"
    provisioner: ""

    # Parameters for the CSI driver
    parameters:
      storage: "lvm"
      fsType: "ext4"
      volgroup: "instance-store-vg"

    allowVolumeExpansion: false
    reclaimPolicy: Delete
    volumeBindingMode: WaitForFirstConsumer
