# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "mz_adapter",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [],
    crate_features = ["default"],
    data = [],
    disable_pipelining = True,
    proc_macro_deps = [] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(normal = True),
)

alias(
    name = "adapter",
    actual = "mz_adapter",
)

rust_test(
    name = "mz_adapter_lib_tests",
    size = "medium",
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate = ":mz_adapter",
    crate_features = ["default"],
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_doc_test(
    name = "mz_adapter_doc_test",
    crate = ":mz_adapter",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_adapter_parameters_tests",
    size = "large",
    srcs = ["tests/parameters.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "parameters",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_adapter_sql_tests",
    size = "large",
    srcs = ["tests/sql.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "sql",
    data = ["tests/testdata/sql"],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_adapter_timestamp_selection_tests",
    size = "large",
    srcs = ["tests/timestamp_selection.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "timestamp_selection",
    data = ["tests/testdata/timestamp_selection"],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-provider:mz_cloud_provider",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/kafka-util:mz_kafka_util",
        "//src/mysql-util:mz_mysql_util",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgcopy:mz_pgcopy",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/postgres-util:mz_postgres_util",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/rocksdb-types:mz_rocksdb_types",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/ssh-util:mz_ssh_util",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/timestamp-oracle:mz_timestamp_oracle",
        "//src/tracing:mz_tracing",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)
