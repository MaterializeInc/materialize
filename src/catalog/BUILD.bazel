# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


package(default_visibility = ["//visibility:public"])

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test", "rust_doc_test")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")

rust_library(
	name = "mz_catalog",
	version = "0.0.0",
	srcs = glob(["src/**/*.rs"]),
	crate_features = ["default"],
	aliases = aliases(
		normal = True,
		proc_macro = True,
	),
	deps = [
		":mz_catalog_build_script",
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(normal = True),
	proc_macro_deps = [] + all_crate_deps(proc_macro = True),
	compile_data = [],
	data = [],
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_catalog_lib_tests",
	version = "0.0.0",
	crate = ":mz_catalog",
	crate_features = ["default"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/build-tools:mz_build_tools",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/postgres-util:mz_postgres_util",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "medium",
	compile_data = [],
	data = [] + glob([
		"protos/**",
		"src/durable/upgrade/snapshots/**",
	]),
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_doc_test(
	name = "mz_catalog_doc_test",
	crate = ":mz_catalog",
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/build-tools:mz_build_tools",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/postgres-util:mz_postgres_util",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
)

cargo_build_script(
	name = "mz_catalog_build_script",
	srcs = ["build.rs"],
	deps = ["//src/build-tools:mz_build_tools"] + all_crate_deps(
		normal = True,
		build = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		build_proc_macro = True,
	),
	build_script_env = {},
	data = [] + glob(["protos/**"]),
	compile_data = [],
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_catalog_debug_tests",
	version = "0.0.0",
	crate_name = "debug",
	srcs = ["tests/debug.rs"],
	crate_features = [],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		":mz_catalog",
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/build-tools:mz_build_tools",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/postgres-util:mz_postgres_util",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [] + glob(["tests/snapshots/debug*.snap"]),
	env = { "INSTA_WORKSPACE_ROOT": "." },
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_catalog_open_tests",
	version = "0.0.0",
	crate_name = "open",
	srcs = ["tests/open.rs"],
	crate_features = [],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		":mz_catalog",
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/build-tools:mz_build_tools",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/postgres-util:mz_postgres_util",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [] + glob(["tests/snapshots/open*.snap"]),
	env = { "INSTA_WORKSPACE_ROOT": "." },
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_catalog_read-write_tests",
	version = "0.0.0",
	crate_name = "read_write",
	srcs = ["tests/read-write.rs"],
	crate_features = [],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		":mz_catalog",
		"//src/adapter-types:mz_adapter_types",
		"//src/audit-log:mz_audit_log",
		"//src/build-info:mz_build_info",
		"//src/build-tools:mz_build_tools",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/compute-client:mz_compute_client",
		"//src/controller-types:mz_controller_types",
		"//src/controller:mz_controller",
		"//src/expr:mz_expr",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/persist-types:mz_persist_types",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtz:mz_pgtz",
		"//src/postgres-util:mz_postgres_util",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-controller:mz_storage_controller",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = { "INSTA_WORKSPACE_ROOT": "." },
	rustc_flags = [],
	rustc_env = {},
)
