# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "mz_catalog",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [],
    crate_features = ["default"],
    data = [],
    proc_macro_deps = [] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(normal = True),
)

alias(
    name = "catalog",
    actual = "mz_catalog",
)

rust_test(
    name = "mz_catalog_lib_tests",
    size = "medium",
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate = ":mz_catalog",
    crate_features = ["default"],
    data = ["//src/catalog-protos:all_protos"] + glob(["src/durable/upgrade/snapshots/**"]),
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/build-tools:mz_build_tools",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_doc_test(
    name = "mz_catalog_doc_test",
    crate = ":mz_catalog",
    deps = [
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/build-tools:mz_build_tools",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_catalog_debug_tests",
    size = "large",
    srcs = ["tests/debug.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "debug",
    data = [] + glob(["tests/snapshots/debug*.snap"]),
    env = {"INSTA_WORKSPACE_ROOT": "."},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_catalog",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/build-tools:mz_build_tools",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_catalog_open_tests",
    size = "large",
    srcs = ["tests/open.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "open",
    data = [] + glob(["tests/snapshots/open*.snap"]),
    env = {"INSTA_WORKSPACE_ROOT": "."},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_catalog",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/build-tools:mz_build_tools",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_catalog_read-write_tests",
    size = "large",
    srcs = ["tests/read-write.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "read_write",
    data = [],
    env = {"INSTA_WORKSPACE_ROOT": "."},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        ":mz_catalog",
        "//src/adapter-types:mz_adapter_types",
        "//src/audit-log:mz_audit_log",
        "//src/build-info:mz_build_info",
        "//src/build-tools:mz_build_tools",
        "//src/catalog-protos:mz_catalog_protos",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller:mz_controller",
        "//src/controller-types:mz_controller_types",
        "//src/durable-cache:mz_durable_cache",
        "//src/dyncfg:mz_dyncfg",
        "//src/expr:mz_expr",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtz:mz_pgtz",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/transform:mz_transform",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)
