// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "compute-client/src/logging.proto";
import "compute-client/src/plan.proto";
import "expr/src/linear.proto";
import "expr/src/relation.proto";
import "expr/src/scalar.proto";
import "proto/src/proto.proto";
import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "repr/src/relation_and_scalar.proto";
import "repr/src/row.proto";
import "storage/src/protocol/client.proto";
import "storage/src/controller.proto";
import "storage/src/types/sinks.proto";

import "google/protobuf/empty.proto";

package mz_compute_client.command;

message ProtoComputeCommand {
    message ProtoCreateDataflows {
        repeated ProtoDataflowDescription dataflows = 1;
    }

    message ProtoCancelPeeks {
        repeated mz_proto.ProtoU128 uuids = 1;
    }

    oneof kind {
        ProtoInstanceConfig create_instance = 1;
        google.protobuf.Empty drop_instance = 2;
        ProtoCreateDataflows create_dataflows = 3;
        mz_storage.protocol.client.ProtoAllowCompaction allow_compaction = 4;
        ProtoPeek peek = 5;
        ProtoCancelPeeks cancel_peeks = 6;
        google.protobuf.Empty initialization_complete = 7;
    }
}

message ProtoInstanceConfig {
    mz_compute_client.logging.ProtoLoggingConfig logging = 1;
    uint64 replica_id = 2;
}

message ProtoDataflowDescription {
    message ProtoSourceImport {
        mz_repr.global_id.ProtoGlobalId id = 1;
        ProtoSourceInstanceDesc source_instance_desc = 2;
        bool monotonic = 3;
    }

    message ProtoIndexImport {
        mz_repr.global_id.ProtoGlobalId id = 1;
        ProtoIndexDesc index_desc = 2;
        mz_repr.relation_and_scalar.ProtoRelationType typ = 3;
        bool monotonic = 4;
    }

    message ProtoIndexExport {
        mz_repr.global_id.ProtoGlobalId id = 1;
        ProtoIndexDesc index_desc = 2;
        mz_repr.relation_and_scalar.ProtoRelationType typ = 3;
    }

    message ProtoSinkExport {
        mz_repr.global_id.ProtoGlobalId id = 1;
        mz_storage.types.sinks.ProtoComputeSinkDesc sink_desc = 2;
    }

    repeated ProtoSourceImport source_imports = 1;
    repeated ProtoIndexImport index_imports = 2;
    repeated ProtoBuildDesc objects_to_build = 3;
    repeated ProtoIndexExport index_exports = 4;
    repeated ProtoSinkExport sink_exports = 5;
    optional mz_repr.antichain.ProtoU64Antichain as_of = 6;
    mz_repr.antichain.ProtoU64Antichain until = 9;
    string debug_name = 7;
    reserved 8;
}

message ProtoIndexDesc {
    mz_repr.global_id.ProtoGlobalId on_id = 1;
    repeated mz_expr.scalar.ProtoMirScalarExpr key = 3;
}

message ProtoBuildDesc {
    mz_repr.global_id.ProtoGlobalId id = 1;
    mz_compute_client.plan.ProtoPlan plan = 2;
}

message ProtoSourceInstanceDesc {
    ProtoSourceInstanceArguments arguments = 1;
    mz_storage.controller.ProtoCollectionMetadata storage_metadata = 2;
    mz_repr.relation_and_scalar.ProtoRelationType typ = 3;
}

message ProtoSourceInstanceArguments {
    optional mz_expr.linear.ProtoMapFilterProject operators = 2;
}

message ProtoPeek {
    mz_repr.global_id.ProtoGlobalId id = 1;
    repeated mz_repr.row.ProtoRow key = 2;
    mz_proto.ProtoU128 uuid = 3;
    uint64 timestamp = 4;
    mz_expr.relation.ProtoRowSetFinishing finishing = 5;
    mz_expr.linear.ProtoSafeMfpPlan map_filter_project = 6;
    optional uint64 target_replica = 7;
    map<string, string> otel_ctx = 8;
}
