// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// buf breaking: ignore (does currently not require backward-compatibility)

syntax = "proto3";

import "compute-client/src/logging.proto";
import "compute-types/src/dataflows.proto";
import "expr/src/linear.proto";
import "expr/src/relation.proto";
import "dyncfg/src/dyncfg.proto";
import "proto/src/proto.proto";
import "repr/src/global_id.proto";
import "repr/src/row.proto";
import "cluster-client/src/client.proto";
import "service/src/params.proto";
import "storage-client/src/client.proto";
import "storage-types/src/controller.proto";
import "tracing/src/params.proto";

import "google/protobuf/empty.proto";

package mz_compute_client.protocol.command;

message ProtoComputeCommand {
    message ProtoCreateTimely {
        mz_cluster_client.client.ProtoTimelyConfig config = 1;
        mz_cluster_client.client.ProtoClusterStartupEpoch epoch = 2;
    }

    oneof kind {
        ProtoCreateTimely create_timely = 1;
        ProtoInstanceConfig create_instance = 2;
        mz_compute_types.dataflows.ProtoDataflowDescription create_dataflow = 3;
        mz_storage_client.client.ProtoCompaction allow_compaction = 4;
        ProtoPeek peek = 5;
        mz_proto.ProtoU128 cancel_peek = 6;
        google.protobuf.Empty initialization_complete = 7;
        ProtoComputeParameters update_configuration = 8;
    }
}

message ProtoInstanceConfig {
    logging.ProtoLoggingConfig logging = 1;
}

message ProtoIndexTarget {
    mz_repr.global_id.ProtoGlobalId id = 1;
}

message ProtoPersistTarget {
    mz_repr.global_id.ProtoGlobalId id = 1;
    mz_storage_types.controller.ProtoCollectionMetadata metadata = 2;
}

message ProtoPeek {
    // TODO(bkirwi) remove this now-redundant field once persist peeks are locked in
    mz_repr.global_id.ProtoGlobalId id = 1;
    repeated mz_repr.row.ProtoRow key = 2;
    mz_proto.ProtoU128 uuid = 3;
    uint64 timestamp = 4;
    mz_expr.relation.ProtoRowSetFinishing finishing = 5;
    mz_expr.linear.ProtoSafeMfpPlan map_filter_project = 6;
    map<string, string> otel_ctx = 7;
    oneof target {
        ProtoIndexTarget index = 8;
        ProtoPersistTarget persist = 9;
    }
}

message ProtoComputeParameters {
    optional uint64 max_result_size = 1;
    mz_dyncfg.ConfigUpdates persist = 2;
    ProtoComputeMaxInflightBytesConfig dataflow_max_inflight_bytes = 3;
    optional bool enable_mz_join_core = 4;
    mz_tracing.params.ProtoTracingParameters tracing = 5;
    mz_service.params.ProtoGrpcClientParameters grpc_client = 6;
    mz_compute_types.dataflows.ProtoYieldSpec linear_join_yielding = 9;
    optional bool enable_columnation_lgalloc = 10;
    optional bool enable_operator_hydration_status_logging = 11;
    optional bool enable_chunked_stack = 12;
    optional bool enable_lgalloc_eager_reclamation = 13;
}

message ProtoComputeMaxInflightBytesConfig {
    optional uint64 dataflow_max_inflight_bytes = 1;
}
