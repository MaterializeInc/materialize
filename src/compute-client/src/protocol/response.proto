// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// buf breaking: ignore (does currently not require backward-compatibility)

syntax = "proto3";

package mz_compute_client.protocol.response;

import "expr/src/row/collection.proto";
import "google/protobuf/empty.proto";
import "persist-client/src/batch.proto";
import "proto/src/proto.proto";
import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "repr/src/relation_and_scalar.proto";
import "repr/src/row.proto";

message ProtoComputeResponse {
  message ProtoFrontiersKind {
    mz_repr.global_id.ProtoGlobalId id = 1;
    ProtoFrontiersResponse resp = 2;
  }

  message ProtoPeekResponseKind {
    mz_proto.ProtoU128 id = 1;
    ProtoPeekResponse resp = 2;
    map<string, string> otel_ctx = 3;
  }

  message ProtoSubscribeResponseKind {
    mz_repr.global_id.ProtoGlobalId id = 1;
    ProtoSubscribeResponse resp = 2;
  }

  message ProtoCopyToResponseKind {
    mz_repr.global_id.ProtoGlobalId id = 1;
    ProtoCopyToResponse resp = 2;
  }

  oneof kind {
    ProtoFrontiersKind frontiers = 1;
    ProtoPeekResponseKind peek_response = 2;
    ProtoSubscribeResponseKind subscribe_response = 3;
    ProtoCopyToResponseKind copy_to_response = 4;
    ProtoStatusResponse status = 5;
  }
}

message ProtoFrontiersResponse {
  mz_repr.antichain.ProtoU64Antichain write_frontier = 1;
  mz_repr.antichain.ProtoU64Antichain input_frontier = 2;
  mz_repr.antichain.ProtoU64Antichain output_frontier = 3;
}

message ProtoStashedPeekResponse {
  mz_repr.relation_and_scalar.ProtoRelationDesc relation_desc = 1;
  string shard_id = 2;
  repeated mz_persist_client.batch.ProtoBatch batches = 3;
  uint64 num_rows = 4;
  uint64 encoded_size_bytes = 5;
  mz_expr.row.collection.ProtoRowCollection inline_rows = 6;
}

message ProtoStashedSubscribeBatch {
  mz_repr.relation_and_scalar.ProtoRelationDesc relation_desc = 1;
  string shard_id = 2;
  repeated mz_persist_client.batch.ProtoBatch batches = 3;
  uint64 num_rows = 4;
  uint64 encoded_size_bytes = 5;
  repeated ProtoSubscribeBatch.ProtoUpdate inline_updates = 6;
}

message ProtoPeekResponse {
  oneof kind {
    mz_expr.row.collection.ProtoRowCollection rows = 1;
    ProtoStashedPeekResponse stashed = 4;
    string error = 2;
    google.protobuf.Empty canceled = 3;
  }
}

message ProtoSubscribeResponse {
  oneof kind {
    ProtoSubscribeBatch batch = 1;
    mz_repr.antichain.ProtoU64Antichain dropped_at = 2;
  }
}

message ProtoCopyToResponse {
  oneof kind {
    uint64 rows = 1;
    string error = 2;
    google.protobuf.Empty dropped = 3;
  }
}

message ProtoSubscribeBatch {
  message ProtoUpdate {
    uint64 timestamp = 1;
    mz_repr.row.ProtoRow row = 2;
    int64 diff = 3;
  }

  message ProtoSubscribeBatchContents {
    oneof kind {
      ProtoSubscribeUpdates updates = 1;
      string error = 2;
      ProtoStashedSubscribeBatch stashed = 3;
    }
  }

  message ProtoSubscribeUpdates {
    repeated ProtoUpdate updates = 1;
  }

  mz_repr.antichain.ProtoU64Antichain lower = 1;
  mz_repr.antichain.ProtoU64Antichain upper = 2;
  reserved 3;
  ProtoSubscribeBatchContents updates = 4;
}

message ProtoStatusResponse {
  oneof kind {
    google.protobuf.Empty placeholder = 1;
  }
}
