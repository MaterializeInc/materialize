# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


package(default_visibility = ["//visibility:public"])

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test", "rust_doc_test")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")

rust_library(
	name = "mz_compute_types",
	version = "0.0.0",
	srcs = glob(["src/**/*.rs"]),
	crate_features = ["default"],
	aliases = aliases(
		normal = True,
		proc_macro = True,
	),
	deps = [
		":mz_compute_types_build_script",
		"//src/dyncfg:mz_dyncfg",
		"//src/expr:mz_expr",
		"//src/ore:mz_ore",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(normal = True),
	proc_macro_deps = [] + all_crate_deps(proc_macro = True),
	compile_data = [],
	data = [],
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_compute_types_lib_tests",
	version = "0.0.0",
	crate = ":mz_compute_types",
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/dyncfg:mz_dyncfg",
		"//src/expr:mz_expr",
		"//src/ore:mz_ore",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "medium",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_doc_test(
	name = "mz_compute_types_doc_test",
	crate = ":mz_compute_types",
	deps = [
		"//src/dyncfg:mz_dyncfg",
		"//src/expr:mz_expr",
		"//src/ore:mz_ore",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
)

filegroup(
	name = "all_protos",
	srcs = [
		"src/dataflows.proto",
		"src/sinks.proto",
		"src/sources.proto",
		"src/plan.proto",
		"src/plan/flat_plan.proto",
		"src/plan/join.proto",
		"src/plan/reduce.proto",
		"src/plan/threshold.proto",
		"src/plan/top_k.proto",
		"//src/expr:all_protos",
		"//src/proto:all_protos",
		"//src/repr:all_protos",
		"//src/storage-types:all_protos",
	],
)

cargo_build_script(
	name = "mz_compute_types_build_script",
	srcs = ["build.rs"],
	deps = [
		"//src/build-tools:mz_build_tools",
		"//src/dyncfg:mz_dyncfg",
		"//src/expr:mz_expr",
		"//src/ore:mz_ore",
		"//src/proto:mz_proto",
		"//src/repr:mz_repr",
		"//src/storage-types:mz_storage_types",
	] + all_crate_deps(
		normal = True,
		build = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		build_proc_macro = True,
	),
	build_script_env = {},
	data = [":all_protos"],
	compile_data = [],
	rustc_flags = [],
	rustc_env = {},
)
