// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// See https://developers.google.com/protocol-buffers for what's going on here.

// buf breaking: ignore (does currently not require backward-compatibility)

syntax = "proto3";

import "compute-types/src/plan/join.proto";
import "compute-types/src/plan/reduce.proto";
import "compute-types/src/plan/threshold.proto";
import "compute-types/src/plan/top_k.proto";
import "expr/src/id.proto";
import "expr/src/linear.proto";
import "expr/src/relation.proto";
import "expr/src/scalar.proto";
import "repr/src/row.proto";
import "repr/src/relation_and_scalar.proto";
import "google/protobuf/empty.proto";

package mz_compute_types.plan;

message ProtoAvailableCollections {

     message ProtoColumnTypes {
          repeated mz_repr.relation_and_scalar.ProtoColumnType types = 1;
     }

    bool raw = 1;
    repeated mz_compute_types.plan.threshold.ProtoArrangement arranged = 2;
    optional ProtoColumnTypes types = 3;
}

message ProtoGetPlan {
    message ProtoGetPlanArrangement {
        repeated mz_expr.scalar.ProtoMirScalarExpr key = 1;
        mz_repr.row.ProtoRow seek = 2;
        mz_expr.linear.ProtoMapFilterProject mfp = 3;
    };

    oneof kind {
        google.protobuf.Empty pass_arrangements = 1;
        ProtoGetPlanArrangement arrangement = 2;
        mz_expr.linear.ProtoMapFilterProject collection = 3;
    }
}

message ProtoLetRecLimit {
  uint64 max_iters = 1;
  bool return_at_limit = 2;
}

message ProtoPlan {
   message ProtoRowDiff {
        mz_repr.row.ProtoRow row = 1;
        uint64 timestamp = 2;
        int64 diff = 3;
   }

   message ProtoRowDiffVec {
        repeated ProtoRowDiff rows = 1;
   }

   message ProtoPlanConstant {
        ProtoPlanRows rows = 1;
        uint64 node_id = 2;
   }

   message ProtoPlanRows {
        oneof result {
            ProtoRowDiffVec ok = 1;
            mz_expr.scalar.ProtoEvalError err = 2;
        }
   }

   message ProtoPlanGet {
        mz_expr.id.ProtoId id = 1;
        ProtoAvailableCollections keys = 2;
        ProtoGetPlan plan = 3;
        uint64 node_id = 4;
   }

   message ProtoPlanLet {
        mz_expr.id.ProtoLocalId id = 1;
        ProtoPlan value = 2;
        ProtoPlan body  = 3;
        uint64 node_id = 4;
   }

   message ProtoPlanLetRec {
        repeated mz_expr.id.ProtoLocalId ids = 1;
        repeated ProtoPlan values = 2;
        repeated ProtoLetRecLimit limits = 4;
        repeated bool limit_is_some = 5;
        ProtoPlan body  = 3;
        uint64 node_id = 6;
   }

   message ProtoPlanInputKeyVal {
        repeated mz_expr.scalar.ProtoMirScalarExpr key = 1;
        mz_repr.row.ProtoRow val = 2;
   }

   message ProtoPlanMfp {
        ProtoPlan input = 1;
        mz_expr.linear.ProtoMapFilterProject mfp = 2;
        ProtoPlanInputKeyVal input_key_val = 3;
        uint64 node_id = 4;
   }

   message ProtoPlanInputKey {
        repeated mz_expr.scalar.ProtoMirScalarExpr key = 1;
   }

   message ProtoPlanFlatMap {
        ProtoPlan input = 1;
        mz_expr.relation.ProtoTableFunc func = 2;
        repeated mz_expr.scalar.ProtoMirScalarExpr exprs = 3;
        mz_expr.linear.ProtoMapFilterProject mfp_after = 4;
        ProtoPlanInputKey input_key = 5;
        uint64 node_id = 6;
   }

   message ProtoPlanJoin {
        repeated ProtoPlan inputs = 1;
        mz_compute_types.plan.join.ProtoJoinPlan plan = 2;
        uint64 node_id = 3;
   }

   message ProtoPlanReduce {
        ProtoPlan input = 1;
        mz_compute_types.plan.reduce.ProtoKeyValPlan key_val_plan = 2;
        mz_compute_types.plan.reduce.ProtoReducePlan plan = 3;
        ProtoPlanInputKey input_key = 4;
        mz_expr.linear.ProtoMapFilterProject mfp_after = 5;
        uint64 node_id = 6;
   }

   message ProtoPlanTopK {
        ProtoPlan input = 1;
        mz_compute_types.plan.top_k.ProtoTopKPlan top_k_plan = 2;
        uint64 node_id = 3;
   }

   message ProtoPlanNegate {
        ProtoPlan input = 1;
        uint64 node_id = 2;
   }

   message ProtoPlanThreshold {
        ProtoPlan input = 1;
        mz_compute_types.plan.threshold.ProtoThresholdPlan threshold_plan = 2;
        uint64 node_id = 3;
   }

   message ProtoPlanUnion {
        repeated ProtoPlan inputs = 1;
        bool consolidate_output = 2;
        uint64 node_id = 3;
   }

   message ProtoPlanArrangeBy {
        ProtoPlan input = 1;
        ProtoAvailableCollections forms = 2;
        ProtoPlanInputKey input_key = 3;
        mz_expr.linear.ProtoMapFilterProject input_mfp = 4;
        uint64 node_id = 5;
   }

   oneof kind {
        ProtoPlanConstant constant = 1;
        ProtoPlanGet get = 2;
        ProtoPlanLet let = 3;
        ProtoPlanMfp mfp = 4;
        ProtoPlanFlatMap flat_map = 5;
        ProtoPlanJoin join = 6;
        ProtoPlanReduce reduce = 7;
        ProtoPlanTopK top_k = 8;
        ProtoPlanNegate negate = 9;
        ProtoPlanThreshold threshold = 10;
        ProtoPlanUnion union = 11;
        ProtoPlanArrangeBy arrange_by = 12;
        ProtoPlanLetRec let_rec = 13;
   }
}
