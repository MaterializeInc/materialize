// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// buf breaking: ignore (does not currently require backward-compatibility)

syntax = "proto3";

package mz_compute_types.plan.render_plan;

import "compute-types/src/plan.proto";
import "compute-types/src/plan/join.proto";
import "compute-types/src/plan/reduce.proto";
import "compute-types/src/plan/threshold.proto";
import "compute-types/src/plan/top_k.proto";
import "expr/src/id.proto";
import "expr/src/linear.proto";
import "expr/src/relation.proto";
import "expr/src/scalar.proto";
import "repr/src/row.proto";

message ProtoRenderPlan {
  repeated ProtoBindStage binds = 1;
  ProtoLetFreePlan body = 2;
}

message ProtoBindStage {
  repeated ProtoLetBind lets = 1;
  repeated ProtoRecBind recs = 2;
}

message ProtoLetBind {
  mz_expr.id.ProtoLocalId id = 1;
  ProtoLetFreePlan value = 2;
}

message ProtoRecBind {
  mz_expr.id.ProtoLocalId id = 1;
  ProtoRenderPlan value = 2;
  ProtoLetRecLimit limit = 3;
}

message ProtoLetFreePlan {
  message Node {
    uint64 id = 1;
    ProtoNode node = 2;
  }

  repeated Node nodes = 1;
  uint64 root = 2;
  repeated uint64 topological_order = 3;
}

message ProtoNode {
  ProtoExpr expr = 1;
  optional uint64 parent = 2;
  uint32 nesting = 3;
}

message ProtoExpr {
  message ProtoConstant {
    ProtoConstantRows rows = 1;
  }

  message ProtoConstantRows {
    oneof result {
      ProtoUpdateVec ok = 1;
      mz_expr.scalar.ProtoEvalError err = 2;
    }
  }

  message ProtoUpdateVec {
    repeated ProtoUpdate rows = 1;
  }

  message ProtoUpdate {
    mz_repr.row.ProtoRow row = 1;
    uint64 timestamp = 2;
    int64 diff = 3;
  }

  message ProtoGet {
    mz_expr.id.ProtoId id = 1;
    ProtoAvailableCollections keys = 2;
    ProtoGetPlan plan = 3;
  }

  message ProtoMfp {
    uint64 input = 1;
    mz_expr.linear.ProtoMapFilterProject mfp = 2;
    ProtoInputKeyVal input_key_val = 3;
  }

  message ProtoInputKeyVal {
    repeated mz_expr.scalar.ProtoMirScalarExpr key = 1;
    mz_repr.row.ProtoRow val = 2;
  }

  message ProtoInputKey {
    repeated mz_expr.scalar.ProtoMirScalarExpr key = 1;
  }

  message ProtoFlatMap {
    uint64 input = 1;
    mz_expr.relation.ProtoTableFunc func = 2;
    repeated mz_expr.scalar.ProtoMirScalarExpr exprs = 3;
    mz_expr.linear.ProtoMapFilterProject mfp_after = 4;
    ProtoInputKey input_key = 5;
  }

  message ProtoJoin {
    repeated uint64 inputs = 1;
    mz_compute_types.plan.join.ProtoJoinPlan plan = 2;
  }

  message ProtoReduce {
    uint64 input = 1;
    mz_compute_types.plan.reduce.ProtoKeyValPlan key_val_plan = 2;
    mz_compute_types.plan.reduce.ProtoReducePlan plan = 3;
    ProtoInputKey input_key = 4;
    mz_expr.linear.ProtoMapFilterProject mfp_after = 5;
  }

  message ProtoTopK {
    uint64 input = 1;
    mz_compute_types.plan.top_k.ProtoTopKPlan top_k_plan = 2;
  }

  message ProtoNegate {
    uint64 input = 1;
  }

  message ProtoThreshold {
    uint64 input = 1;
    mz_compute_types.plan.threshold.ProtoThresholdPlan threshold_plan = 2;
  }

  message ProtoUnion {
    repeated uint64 inputs = 1;
    bool consolidate_output = 2;
  }

  message ProtoArrangeBy {
    uint64 input = 1;
    ProtoAvailableCollections forms = 2;
    ProtoInputKey input_key = 3;
    mz_expr.linear.ProtoMapFilterProject input_mfp = 4;
  }

  oneof kind {
    ProtoConstant constant = 1;
    ProtoGet get = 2;
    ProtoMfp mfp = 4;
    ProtoFlatMap flat_map = 5;
    ProtoJoin join = 6;
    ProtoReduce reduce = 7;
    ProtoTopK top_k = 8;
    ProtoNegate negate = 9;
    ProtoThreshold threshold = 10;
    ProtoUnion union = 11;
    ProtoArrangeBy arrange_by = 12;
  }
}
