// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// buf breaking: ignore (does not currently require backward-compatibility)

syntax = "proto3";

import "google/protobuf/empty.proto";

import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "repr/src/refresh_schedule.proto";
import "repr/src/relation_and_scalar.proto";
import "storage-types/src/controller.proto";
import "storage-types/src/sinks.proto";
import "storage-types/src/connections/aws.proto";

package mz_compute_types.sinks;

message ProtoComputeSinkDesc {
    mz_repr.global_id.ProtoGlobalId from = 1;
    mz_repr.relation_and_scalar.ProtoRelationDesc from_desc = 2;
    ProtoComputeSinkConnection connection = 3;
    bool with_snapshot = 4;
    mz_repr.antichain.ProtoU64Antichain up_to = 5;
    repeated uint64 non_null_assertions = 6;
    mz_repr.refresh_schedule.ProtoRefreshSchedule refresh_schedule = 7;
}

message ProtoComputeSinkConnection {
    oneof kind {
        google.protobuf.Empty subscribe = 1;
        ProtoPersistSinkConnection persist = 2;
        ProtoCopyToS3OneshotSinkConnection copy_to_s3_oneshot = 3;
    }
}

message ProtoPersistSinkConnection {
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 1;
    mz_storage_types.controller.ProtoCollectionMetadata storage_metadata = 2;
}

message ProtoCopyToS3OneshotSinkConnection {
    mz_storage_types.sinks.ProtoS3UploadInfo upload_info = 1;
    mz_storage_types.connections.aws.ProtoAwsConnection aws_connection = 2;
    mz_repr.global_id.ProtoGlobalId connection_id = 3;
    uint64 output_batch_count = 4;
}
