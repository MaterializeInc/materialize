# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//cargo:defs.bzl", "extract_cargo_lints")
load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "mz_controller",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [],
    crate_features = ["default"],
    data = [],
    lint_config = ":lints",
    proc_macro_deps = [] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/build-info:mz_build_info",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/service:mz_service",
        "//src/storage-client:mz_storage_client",
        "//src/storage-controller:mz_storage_controller",
        "//src/storage-types:mz_storage_types",
        "//src/txn-wal:mz_txn_wal",
    ] + all_crate_deps(normal = True),
)

alias(
    name = "controller",
    actual = "mz_controller",
)

rust_test(
    name = "mz_controller_lib_tests",
    size = "medium",
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate = ":mz_controller",
    crate_features = ["default"],
    data = [],
    env = {},
    lint_config = ":lints",
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.0.0",
    deps = [
        "//src/build-info:mz_build_info",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/service:mz_service",
        "//src/storage-client:mz_storage_client",
        "//src/storage-controller:mz_storage_controller",
        "//src/storage-types:mz_storage_types",
        "//src/txn-wal:mz_txn_wal",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_doc_test(
    name = "mz_controller_doc_test",
    crate = ":mz_controller",
    deps = [
        "//src/build-info:mz_build_info",
        "//src/cluster-client:mz_cluster_client",
        "//src/compute-client:mz_compute_client",
        "//src/compute-types:mz_compute_types",
        "//src/controller-types:mz_controller_types",
        "//src/dyncfg:mz_dyncfg",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/orchestrator:mz_orchestrator",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/persist-types:mz_persist_types",
        "//src/proto:mz_proto",
        "//src/repr:mz_repr",
        "//src/service:mz_service",
        "//src/storage-client:mz_storage_client",
        "//src/storage-controller:mz_storage_controller",
        "//src/storage-types:mz_storage_types",
        "//src/txn-wal:mz_txn_wal",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

extract_cargo_lints(
    name = "lints",
    manifest = "Cargo.toml",
    workspace = "@//:Cargo.toml",
)
