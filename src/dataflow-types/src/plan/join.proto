// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// See https://developers.google.com/protocol-buffers for what's going on here.

syntax = "proto3";

import "expr/src/linear.proto";
import "expr/src/scalar.proto";

package mz_dataflow_types.plan.join;

message ProtoJoinPlan {
    oneof kind {
        ProtoLinearJoinPlan linear = 1;
        ProtoDeltaJoinPlan delta = 2;
    }
}

message ProtoMirScalarVec {
    repeated mz_expr.scalar.ProtoMirScalarExpr values = 1;
}
message ProtoJoinClosureEquivalents {
    repeated mz_expr.scalar.ProtoMirScalarExpr values = 1;

}
message ProtoJoinClosure {
    repeated ProtoMirScalarVec ready_equivalences = 1;
    mz_expr.linear.ProtoSafeMfpPlan before = 2;
}

message ProtoLinearStagePlan {
    uint64 lookup_relation = 1;
    repeated mz_expr.scalar.ProtoMirScalarExpr stream_key = 2;
    repeated uint64 stream_thinning = 3;
    repeated mz_expr.scalar.ProtoMirScalarExpr lookup_key = 4;
    ProtoJoinClosure closure = 5;

}

message ProtoLinearJoinPlan {
    uint64 source_relation  = 1;
    // Can't inline this as it must be an Option
    ProtoMirScalarVec source_key = 2;
    ProtoJoinClosure initial_closure = 3;
    repeated ProtoLinearStagePlan stage_plans = 4;
    optional ProtoJoinClosure final_closure = 5;
}

message ProtoDeltaStagePlan {
    uint64 lookup_relation = 1;
    repeated mz_expr.scalar.ProtoMirScalarExpr stream_key = 2;
    repeated uint64 stream_thinning = 3;
    repeated mz_expr.scalar.ProtoMirScalarExpr lookup_key = 4;
    ProtoJoinClosure closure = 5;
}

message ProtoDeltaPathPlan {
    uint64 source_relation = 1;
    repeated mz_expr.scalar.ProtoMirScalarExpr source_key = 2;
    ProtoJoinClosure initial_closure = 3;
    repeated ProtoDeltaStagePlan stage_plans = 4;
    optional ProtoJoinClosure final_closure = 5;
}

message ProtoDeltaJoinPlan {
    repeated ProtoDeltaPathPlan path_plans = 1;
}
