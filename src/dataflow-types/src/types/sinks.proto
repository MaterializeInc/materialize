// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "google/protobuf/empty.proto";

import "dataflow-types/src/client/controller/storage.proto";
import "dataflow-types/src/types/connections.proto";
import "persist/src/persist.proto";
import "repr/src/global_id.proto";
import "repr/src/relation_and_scalar.proto";

package mz_dataflow_types.types.sinks;

message ProtoSinkDesc {
    mz_repr.global_id.ProtoGlobalId from = 1;
    mz_repr.relation_and_scalar.ProtoRelationDesc from_desc = 2;
    ProtoSinkConnection connection = 3;
    optional ProtoSinkEnvelope envelope = 4;
    ProtoSinkAsOf as_of = 5;
}

message ProtoSinkEnvelope {
    oneof kind {
        google.protobuf.Empty debezium = 1;
        google.protobuf.Empty upsert = 2;
        google.protobuf.Empty differential_row = 3;
    }
}

message ProtoSinkConnection {
    oneof kind {
        ProtoKafkaSinkConnection kafka = 1;
        google.protobuf.Empty tail = 2;
        ProtoPersistSinkConnection persist = 3;
    }
}

message ProtoKafkaSinkConsistencyConnection {
    string topic = 1;
    int32 schema_id = 2;
}

message ProtoSinkAsOf {
    mz_persist.gen.persist.ProtoU64Antichain frontier = 1;
    bool strict = 2;
}

message ProtoKafkaSinkConnection {
    message ProtoKeyDescAndIndices {
        mz_repr.relation_and_scalar.ProtoRelationDesc desc = 1;
        repeated uint64 indices = 2;
    }

    message ProtoRelationKeyIndicesVec {
        repeated uint64 relation_key_indices = 1;
    }

    mz_dataflow_types.types.connections.ProtoKafkaConnection connection = 1;
    string topic = 2;
    string topic_prefix = 3;
    optional ProtoKeyDescAndIndices key_desc_and_indices = 4;
    optional ProtoRelationKeyIndicesVec relation_key_indices = 5;
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 6;
    optional ProtoPublishedSchemaInfo published_schema_info = 7;
    ProtoKafkaSinkConsistencyConnection consistency = 8;
    bool exactly_once = 9;
    repeated mz_repr.global_id.ProtoGlobalId transitive_source_dependencies = 10;
    uint64 fuel = 11;
}

message ProtoPublishedSchemaInfo {
    optional int32 key_schema_id = 1;
    int32 value_schema_id = 2;
}

message ProtoPersistSinkConnection {
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 1;
    mz_dataflow_types.client.controller.storage.ProtoCollectionMetadata storage_metadata = 2;
}
