# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc_test", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "mz_environmentd",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [] + glob([
        "src/http/static/**/*",
        "templates/*",
    ]),
    crate_features = [
        "default",
        "mz-alloc-default",
        "mz-frontegg-mock",
        "mz-tracing",
        "postgres",
        "postgres-openssl",
        "regex",
        "test",
        "tokio-console",
        "tracing-capture",
    ],
    data = [],
    disable_pipelining = True,
    proc_macro_deps = [] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        ":mz_environmentd_build_script",
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(normal = True),
)

rust_test(
    name = "mz_environmentd_lib_tests",
    size = "medium",
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate = ":mz_environmentd",
    crate_features = [
        "default",
        "mz-alloc-default",
        "mz-frontegg-mock",
        "mz-tracing",
        "postgres",
        "postgres-openssl",
        "regex",
        "test",
        "tokio-console",
        "tracing-capture",
    ],
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_doc_test(
    name = "mz_environmentd_doc_test",
    crate = ":mz_environmentd",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

cargo_build_script(
    name = "mz_environmentd_build_script",
    srcs = ["build.rs"],
    build_script_env = {},
    compile_data = [],
    data = ["src/environmentd/sys.c"],
    proc_macro_deps = [] + all_crate_deps(
        build_proc_macro = True,
        proc_macro = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    deps = ["//src/npm:mz_npm"] + all_crate_deps(
        build = True,
        normal = True,
    ),
)

rust_test(
    name = "mz_environmentd_auth_tests",
    size = "large",
    srcs = ["tests/auth.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "auth",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_cli_tests",
    size = "large",
    srcs = ["tests/cli.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "cli",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_pgwire_tests",
    size = "large",
    srcs = ["tests/pgwire.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "pgwire",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_server_tests",
    size = "large",
    srcs = ["tests/server.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "server",
    data = [],
    env = {"INSTA_WORKSPACE_ROOT": "."},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_sql_tests",
    size = "large",
    srcs = ["tests/sql.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "sql",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_timezones_tests",
    size = "large",
    srcs = ["tests/timezones.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "timezones",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_environmentd_tracing_tests",
    size = "large",
    srcs = ["tests/tracing.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "tracing",
    data = [],
    env = {},
    proc_macro_deps = [] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/environmentd:mz_environmentd",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgtest:mz_pgtest",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/sql-parser:mz_sql_parser",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_binary(
    name = "environmentd",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [],
    crate_root = "src/bin/environmentd.rs",
    data = [],
    env = {},
    features = [],
    proc_macro_deps = [] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.126.0-dev.0",
    deps = [
        ":mz_environmentd",
        "//src/adapter:mz_adapter",
        "//src/adapter-types:mz_adapter_types",
        "//src/alloc:mz_alloc",
        "//src/alloc-default:mz_alloc_default",
        "//src/aws-secrets-controller:mz_aws_secrets_controller",
        "//src/build-info:mz_build_info",
        "//src/catalog:mz_catalog",
        "//src/cloud-resources:mz_cloud_resources",
        "//src/controller:mz_controller",
        "//src/dyncfgs:mz_dyncfgs",
        "//src/expr:mz_expr",
        "//src/frontegg-auth:mz_frontegg_auth",
        "//src/frontegg-mock:mz_frontegg_mock",
        "//src/http-util:mz_http_util",
        "//src/interchange:mz_interchange",
        "//src/metrics:mz_metrics",
        "//src/orchestrator:mz_orchestrator",
        "//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
        "//src/orchestrator-process:mz_orchestrator_process",
        "//src/orchestrator-tracing:mz_orchestrator_tracing",
        "//src/ore:mz_ore",
        "//src/persist-client:mz_persist_client",
        "//src/pgrepr:mz_pgrepr",
        "//src/pgwire:mz_pgwire",
        "//src/pgwire-common:mz_pgwire_common",
        "//src/prof-http:mz_prof_http",
        "//src/repr:mz_repr",
        "//src/secrets:mz_secrets",
        "//src/segment:mz_segment",
        "//src/server-core:mz_server_core",
        "//src/service:mz_service",
        "//src/sql:mz_sql",
        "//src/storage-client:mz_storage_client",
        "//src/storage-types:mz_storage_types",
        "//src/tls-util:mz_tls_util",
        "//src/tracing:mz_tracing",
    ] + all_crate_deps(normal = True),
)
