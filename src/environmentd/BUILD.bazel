# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


package(default_visibility = ["//visibility:public"])

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test", "rust_doc_test", "rust_binary")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script")

rust_library(
	name = "mz_environmentd",
	version = "0.114.0-dev",
	srcs = glob(["src/**/*.rs"]),
	crate_features = [
		"default",
		"mz-alloc-default",
		"mz-frontegg-mock",
		"mz-tracing",
		"postgres",
		"postgres-openssl",
		"regex",
		"test",
		"tokio-console",
		"tracing-capture",
	],
	aliases = aliases(
		normal = True,
		proc_macro = True,
	),
	deps = [
		":mz_environmentd_build_script",
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(normal = True),
	proc_macro_deps = [] + all_crate_deps(proc_macro = True),
	compile_data = [] + glob([
		"src/http/static/**/*",
		"templates/*",
	]),
	data = [],
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_lib_tests",
	version = "0.114.0-dev",
	crate = ":mz_environmentd",
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "medium",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_doc_test(
	name = "mz_environmentd_doc_test",
	crate = ":mz_environmentd",
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
)

cargo_build_script(
	name = "mz_environmentd_build_script",
	srcs = ["build.rs"],
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/npm:mz_npm",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		build = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		build_proc_macro = True,
	),
	build_script_env = {},
	data = ["src/bin/environmentd/sys.c"],
	compile_data = [],
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_auth_tests",
	version = "0.114.0-dev",
	srcs = ["tests/auth.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_cli_tests",
	version = "0.114.0-dev",
	srcs = ["tests/cli.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_pgwire_tests",
	version = "0.114.0-dev",
	srcs = ["tests/pgwire.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_server_tests",
	version = "0.114.0-dev",
	srcs = ["tests/server.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_sql_tests",
	version = "0.114.0-dev",
	srcs = ["tests/sql.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_timezones_tests",
	version = "0.114.0-dev",
	srcs = ["tests/timezones.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_test(
	name = "mz_environmentd_tracing_tests",
	version = "0.114.0-dev",
	srcs = ["tests/tracing.rs"],
	aliases = aliases(
		normal = True,
		normal_dev = True,
		proc_macro = True,
		proc_macro_dev = True,
	),
	deps = [
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/environmentd:mz_environmentd",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgtest:mz_pgtest",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql-parser:mz_sql_parser",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(
		normal = True,
		normal_dev = True,
	),
	proc_macro_deps = [] + all_crate_deps(
		proc_macro = True,
		proc_macro_dev = True,
	),
	size = "large",
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)

rust_binary(
	name = "environmentd",
	version = "0.114.0-dev",
	crate_root = "src/bin/environmentd/main.rs",
	srcs = glob(["src/**/*.rs"]),
	features = [],
	aliases = aliases(
		normal = True,
		proc_macro = True,
	),
	deps = [
		":mz_environmentd",
		"//src/adapter-types:mz_adapter_types",
		"//src/adapter:mz_adapter",
		"//src/alloc-default:mz_alloc_default",
		"//src/alloc:mz_alloc",
		"//src/aws-secrets-controller:mz_aws_secrets_controller",
		"//src/build-info:mz_build_info",
		"//src/catalog:mz_catalog",
		"//src/cloud-resources:mz_cloud_resources",
		"//src/controller:mz_controller",
		"//src/dyncfgs:mz_dyncfgs",
		"//src/expr:mz_expr",
		"//src/frontegg-auth:mz_frontegg_auth",
		"//src/frontegg-mock:mz_frontegg_mock",
		"//src/http-util:mz_http_util",
		"//src/interchange:mz_interchange",
		"//src/metrics:mz_metrics",
		"//src/orchestrator-kubernetes:mz_orchestrator_kubernetes",
		"//src/orchestrator-process:mz_orchestrator_process",
		"//src/orchestrator-tracing:mz_orchestrator_tracing",
		"//src/orchestrator:mz_orchestrator",
		"//src/ore:mz_ore",
		"//src/persist-client:mz_persist_client",
		"//src/pgrepr:mz_pgrepr",
		"//src/pgwire-common:mz_pgwire_common",
		"//src/pgwire:mz_pgwire",
		"//src/prof-http:mz_prof_http",
		"//src/repr:mz_repr",
		"//src/secrets:mz_secrets",
		"//src/segment:mz_segment",
		"//src/server-core:mz_server_core",
		"//src/service:mz_service",
		"//src/sql:mz_sql",
		"//src/storage-client:mz_storage_client",
		"//src/storage-types:mz_storage_types",
		"//src/tls-util:mz_tls_util",
		"//src/tracing:mz_tracing",
	] + all_crate_deps(normal = True),
	proc_macro_deps = [] + all_crate_deps(proc_macro = True),
	compile_data = [],
	data = [],
	env = {},
	rustc_flags = [],
	rustc_env = {},
)
