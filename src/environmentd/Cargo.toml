[package]
name = "mz-environmentd"
description = "Manages a single Materialize environment."
version = "0.142.0-dev.0"
authors = ["Materialize, Inc."]
license = "proprietary"
edition.workspace = true
rust-version.workspace = true
publish = false

[lints]
workspace = true

[dependencies]
anyhow = "1.0.97"
askama = { version = "0.12.1", default-features = false, features = ["config", "serde-json"] }
async-trait = "0.1.88"
axum = { version = "0.7.5", features = ["ws"] }
axum-extra = { version = "0.9.3", features = ["typed-header"] }
base64 = "0.13.1"
bytes = "1.10.1"
bytesize = "1.3.0"
chrono = { version = "0.4.39", default-features = false, features = ["std"] }
clap = { version = "4.5.23", features = ["wrap_help", "env", "derive"] }
derivative = "2.2.0"
fail = { version = "0.5.1", features = ["failpoints"] }
futures = "0.3.31"
headers = "0.4.0"
http = "1.2.0"
humantime = "2.2.0"
hyper = { version = "1.4.1", features = ["http1", "server"] }
hyper-openssl = "0.10.2"
hyper-tls = "0.6.0"
hyper-util = "0.1.11"
include_dir = "0.7.4"
ipnet = "2.11.0"
itertools = "0.12.1"
jsonwebtoken = "9.3.1"
libc = "0.2.171"
mime = "0.3.16"
mz-alloc = { path = "../alloc" }
mz-alloc-default = { path = "../alloc-default", optional = true }
mz-aws-secrets-controller = { path = "../aws-secrets-controller" }
mz-build-info = { path = "../build-info" }
mz-adapter = { path = "../adapter" }
mz-adapter-types = { path = "../adapter-types" }
mz-catalog = { path = "../catalog" }
mz-cloud-resources = { path = "../cloud-resources" }
mz-controller = { path = "../controller" }
mz-dyncfg = { path = "../dyncfg" }
mz-dyncfgs = { path = "../dyncfgs" }
mz-frontegg-auth = { path = "../frontegg-auth" }
mz-frontegg-mock = { path = "../frontegg-mock", optional = true }
mz-http-util = { path = "../http-util" }
mz-interchange = { path = "../interchange" }
mz-license-keys = { path = "../license-keys" }
mz-metrics = { path = "../metrics" }
mz-orchestrator = { path = "../orchestrator" }
mz-orchestrator-kubernetes = { path = "../orchestrator-kubernetes" }
mz-orchestrator-process = { path = "../orchestrator-process" }
mz-orchestrator-tracing = { path = "../orchestrator-tracing" }
mz-orchestratord = { path = "../orchestratord", default-features = false }
mz-ore = { path = "../ore", features = ["async", "process", "tracing"] }
mz-persist-client = { path = "../persist-client" }
mz-pgrepr = { path = "../pgrepr" }
mz-pgwire = { path = "../pgwire" }
mz-pgwire-common = { path = "../pgwire-common" }
mz-prof-http = { path = "../prof-http" }
mz-repr = { path = "../repr" }
mz-secrets = { path = "../secrets" }
mz-segment = { path = "../segment" }
mz-server-core = { path = "../server-core" }
mz-service = { path = "../service" }
mz-sql = { path = "../sql" }
mz-storage-types = { path = "../storage-types" }
mz-tracing = { path = "../tracing", optional = true }
nix = "0.26.1"
num_cpus = "1.16.0"
openssl = { version = "0.10.71", features = ["vendored"] }
openssl-sys = { version = "0.9.106", features = ["vendored"] }
opentelemetry = { version = "0.24.0", features = ["trace"] }
opentelemetry_sdk = { version = "0.24.1", features = ["rt-tokio"] }
pin-project = "1.1.10"
postgres = { version = "0.19.5", optional = true }
postgres-openssl = { version = "0.5.0", optional = true }
prometheus = { version = "0.13.4", default-features = false }
rdkafka-sys = { version = "4.3.0", features = [
    "cmake-build",
    "ssl-vendored",
    "libz-static",
    "zstd",
] }
rand = "0.8.5"
regex = { version = "1.10.6", optional = true }
reqwest = { version = "0.11.13", features = ["json"] }
rlimit = "0.8.3"
semver = "1.0.26"
sentry = { version = "0.37.0", optional = true }
sentry-tracing = "0.37.0"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.127"
shell-words = "1.1.0"
stacker = "0.1.20"
sysctl = "0.6.0"
tempfile = "3.19.1"
thiserror = "2.0.12"
tokio = { version = "1.44.1", features = ["sync"] }
tokio-postgres = { version = "0.7.8" }
tokio-stream = { version = "0.1.17", features = ["net"] }
tower = { version = "0.4.13", features = ["buffer", "limit", "load-shed"] }
tower-http = { version = "0.5.2", features = ["cors"] }
tracing = "0.1.37"
tracing-capture = { version = "0.1.0", optional = true }
tracing-opentelemetry = { version = "0.25.0" }
tracing-subscriber = "0.3.19"
tungstenite = { version = "0.21.0" }
url = "2.3.1"
uuid = "1.16.0"
workspace-hack = { version = "0.0.0", path = "../workspace-hack", optional = true }

[dev-dependencies]
assert_cmd = "2.0.16"
bytes = "1.10.1"
datadriven = "0.8.0"
fallible-iterator = "0.2.0"
http-body-util = "0.1.3"
insta = { version = "1.42", features = ["json"] }
itertools = "0.12.1"
jsonwebtoken = "9.3.1"
mz-environmentd = { path = "../environmentd", features = ["test"] }
mz-pgrepr = { path = "../pgrepr" }
mz-pgtest = { path = "../pgtest" }
mz-repr = { path = "../repr" }
mz-sql-parser = { path = "../sql-parser" }
postgres = { version = "0.19.5", features = ["with-chrono-0_4"] }
postgres-protocol = { version = "0.6.5" }
postgres_array = { version = "0.11.0" }
predicates = "3.1.3"
proptest = { version = "1.6.0", default-features = false, features = ["std"] }
rdkafka = { version = "0.29.0", features = [
    "cmake-build",
    "ssl-vendored",
    "libz-static",
    "zstd",
] }
reqwest = { version = "0.11.13", features = ["blocking"] }
serde_json = "1.0.127"
serde_urlencoded = "0.7.1"
similar-asserts = "1.4"
timely = "0.20.0"
tokio-postgres = { version = "0.7.8", features = ["with-chrono-0_4"] }

[build-dependencies]
anyhow = "1.0.97"
cc = "1.2.19"
mz-npm = { path = "../npm" }

[features]
default = ["tokio-console", "mz-alloc-default", "workspace-hack"]
# When enabled, static assets for the web UI are loaded from disk on every HTTP
# request rather than compiled into the binary. This vastly speeds up the
# iteration cycle when developing the web UI.
#
# WARNING: For development use only! When enabled, may allow unrestricted read
# access to the file system.
dev-web = []
jemalloc = ["mz-alloc/jemalloc"]
test = [
    "postgres",
    "regex",
    "postgres-openssl",
    "mz-tracing",
    "mz-frontegg-mock",
    "tracing-capture",
    "mz-orchestrator-tracing/capture",
]
tokio-console = [
    "mz-ore/tokio-console",
    "mz-orchestrator-tracing/tokio-console",
]

[package.metadata.cargo-udeps.ignore]
# sysctl is only used on macOS.
normal = ["mz-alloc-default", "sysctl", "workspace-hack"]

[package.metadata.cargo-gazelle.lib]
compile_data = ["src/http/static/**/*", "templates/*"]

[package.metadata.cargo-gazelle.build]
data = ["src/environmentd/sys.c"]

[package.metadata.cargo-gazelle.test.server]
env = { INSTA_WORKSPACE_ROOT = "." }
