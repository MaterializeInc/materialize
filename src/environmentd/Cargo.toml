[package]
name = "mz-environmentd"
description = "Manages a single Materialize environment."
version = "0.55.0-dev"
authors = ["Materialize, Inc."]
license = "proprietary"
edition.workspace = true
rust-version.workspace = true
publish = false

[dependencies]
anyhow = { workspace = true }
askama = { workspace = true, default-features = false, features = ["config", "serde-json"] }
async-trait = { workspace = true }
axum = { workspace = true, features = ["headers", "ws"] }
base64 = { workspace = true }
bytes = { workspace = true }
bytesize = { workspace = true }
chrono = { workspace = true, default-features = false, features = ["std"] }
clap = { workspace = true, features = ["wrap_help", "env", "derive"] }
fail = { workspace = true, features = ["failpoints"] }
futures = { workspace = true }
headers = { workspace = true }
http = { workspace = true }
humantime = { workspace = true }
hyper = { workspace = true, features = ["http1", "server"] }
hyper-openssl = { workspace = true }
include_dir = { workspace = true }
itertools = { workspace = true }
jsonwebtoken = { workspace = true }
once_cell = { workspace = true }
libc = { workspace = true }
mime = { workspace = true }
mz-alloc = { workspace = true }
mz-build-info = { workspace = true }
mz-adapter = { workspace = true }
mz-cloud-resources = { workspace = true }
mz-controller = { workspace = true }
mz-frontegg-auth = { workspace = true }
mz-http-util = { workspace = true }
mz-interchange = { workspace = true }
mz-orchestrator = { workspace = true }
mz-orchestrator-kubernetes = { workspace = true }
mz-orchestrator-process = { workspace = true }
mz-orchestrator-tracing = { workspace = true }
mz-ore = { workspace = true, features = ["async", "tracing_"] }
mz-persist-client = { workspace = true }
mz-pgrepr = { workspace = true }
mz-pgwire = { workspace = true }
mz-postgres-util = { workspace = true }
mz-prof = { workspace = true }
mz-repr = { workspace = true }
mz-secrets = { workspace = true }
mz-segment = { workspace = true }
mz-service = { workspace = true }
mz-sql = { workspace = true }
mz-stash = { workspace = true }
mz-storage-client = { workspace = true }
nix = { workspace = true }
num_cpus = { workspace = true }
openssl = { workspace = true, features = ["vendored"] }
openssl-sys = { workspace = true, features = ["vendored"] }
opentelemetry = { workspace = true, features = ["rt-tokio", "trace"] }
prometheus = { workspace = true, default-features = false }
rdkafka-sys = { workspace = true, features = ["cmake-build", "ssl-vendored", "libz-static", "zstd"] }
rand = { workspace = true }
reqwest = { workspace = true, features = ["json"] }
rlimit = { workspace = true }
sentry = { workspace = true, optional = true }
sentry-tracing = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
shell-words = { workspace = true }
socket2 = { workspace = true }
sysctl = { workspace = true }
tempfile = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, features = ["sync"] }
tokio-openssl = { workspace = true }
tokio-postgres = { workspace = true }
tokio-stream = { workspace = true, features = ["net"] }
tower-http = { workspace = true, features = ["cors"] }
tracing = { workspace = true }
tracing-core = { workspace = true }
tracing-opentelemetry = { workspace = true }
tracing-subscriber = { workspace = true }
tungstenite = { workspace = true, features = ["native-tls"] }
url = { workspace = true }
uuid = { workspace = true }
workspace-hack = { version = "0.0.0", path = "../workspace-hack" }

[dev-dependencies]
assert_cmd = { workspace = true }
bytes = { workspace = true }
datadriven = { workspace = true }
fallible-iterator = { workspace = true }
itertools = { workspace = true }
jsonwebtoken = { workspace = true }
mz-pgrepr = { workspace = true }
mz-pgtest = { workspace = true }
mz-repr = { workspace = true }
mz-sql-parser = { workspace = true }
postgres = { workspace = true, features = ["with-chrono-0_4"] }
postgres-openssl = { workspace = true }
postgres-protocol = { workspace = true }
postgres_array = { workspace = true }
predicates = { workspace = true }
regex = { workspace = true }
reqwest = { workspace = true, features = ["blocking"] }
serde_json = { workspace = true }
serde_urlencoded = { workspace = true }
timely = { workspace = true, default-features = false, features = ["bincode"] }
tokio-postgres = { workspace = true, features = ["with-chrono-0_4"] }

[build-dependencies]
anyhow = { workspace = true }
cc = { workspace = true }
mz-npm = { workspace = true }

[features]
default = ["jemalloc"]
# When enabled, static assets for the web UI are loaded from disk on every HTTP
# request rather than compiled into the binary. This vastly speeds up the
# iteration cycle when developing the web UI.
#
# WARNING: For development use only! When enabled, may allow unrestricted read
# access to the file system.
dev-web = []
jemalloc = ["mz-alloc/jemalloc"]
tokio-console = ["mz-ore/tokio-console", "mz-orchestrator-tracing/tokio-console"]

[package.metadata.cargo-udeps.ignore]
# sysctl is only used on macOS.
normal = ["sysctl", "workspace-hack"]
