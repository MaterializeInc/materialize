---
source: src/expr-derive-impl/src/lib.rs
expression: "#[sqlfunc()]\nfn unary_fn<'a>(a: Datum<'a>, b: u16, temp_storage: &RowArena) -> bool {\n    unimplemented!()\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct UnaryFn;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for UnaryFn {
    type Input1 = Datum<'a>;
    type Input2 = u16;
    type Output = bool;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        unary_fn(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
}
impl std::fmt::Display for UnaryFn {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(unary_fn))
    }
}
fn unary_fn<'a>(a: Datum<'a>, b: u16, temp_storage: &RowArena) -> bool {
    unimplemented!()
}
