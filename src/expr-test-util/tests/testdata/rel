# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

build
(constant
  [[1 2 3]
   [4 5 6]]
  [int64 int64 int64])
----
----
Constant
  - (1, 2, 3)
  - (4, 5, 6)

----
----

build
(constant
  [[#0]]
  [int64])
----
error: TokenTree `#` cannot be interpreted as a literal.

build
(arrange_by
  (constant
    [[1 2 3]
     [4 5 6]]
    [int64 int64 int64])
  [[#0] [#1]])
----
----
ArrangeBy keys=[[#0], [#1]]
  Constant
    - (1, 2, 3)
    - (4, 5, 6)

----
----

build
(arrange_by
  (constant
    [[1 2 3]
     [4 5 6]]
    [int64 int64 int64])
  [[#0 #0] [#1]])
----
----
ArrangeBy keys=[[#0, #0], [#1]]
  Constant
    - (1, 2, 3)
    - (4, 5, 6)

----
----

cat
(defsource x [int32 int64])
----
ok

build
(filter
  (map (get x) [12345])
  [#0 #1])
----
----
Filter #0 AND #1
  Map (12345)
    Get u0

----
----

build
(let x (constant
      [[1 2 3]
       [4 5 6]]
      [int64 int64 int64])
   (get x))
----
----
Return
  Get l0
With
  cte l0 =
    Constant
      - (1, 2, 3)
      - (4, 5, 6)

----
----

cat
(defsource y [int32 int64 int32])
----
ok

build
(join
    [(get y) (get y)]
    [[#0 #3]]
    (delta_query [[[0 [#0] (false 1 true 1 (false false false 0 false) 0)] [1 [#0] (false 1 true 1 (false false false 0 false) 0)]]
                  [[1 [#0] (false 1 true 1 (false false false 0 false) 0)] [0 [#0] (false 1 true 1 (false false false 0 false) 0)]]]))
----
----
Join on=(#0 = #3) type=delta
  implementation
    %0:u1 » %0:u1[#0]KA|1| » %1:u1[#0]KA|1|
    %1:u1 » %1:u1[#0]KA|1| » %0:u1[#0]KA|1|
  Get u1
  Get u1

----
----

build
(top_k (get y) [1] [0] 5 1)
----
----
TopK group_by=[#1] order_by=[#0 asc nulls_first] limit=5 offset=1
  Get u1

----
----

build
(top_k (get y) [0 1] [(2 true true)] )
----
----
TopK group_by=[#0, #1] order_by=[#2 desc nulls_last]
  Get u1

----
----

build
(reduce (get y)
    [(call_unary cast_int32_to_int64 #0)]
    [(max_int64 #1) (sum_int32 #2 true)])
----
----
Reduce group_by=[integer_to_bigint(#0)] aggregates=[max(#1), sum(distinct #2)]
  Get u1

----
----

build
(reduce (get y) [#2] [])
----
----
Distinct group_by=[#2]
  Get u1

----
----

build
(union [(map (get x) [(null int32)]) (get y)])
----
----
Union
  Map (null)
    Get u0
  Get u1

----
----

build
(filter
  (get x)
  [(err multiple_rows_from_subquery)])
----
----
Filter error("more than one record produced in subquery")
  Get u0

----
----

build
(map
  (get x)
  [(err multiple_rows_from_subquery)])
----
----
Map (error("more than one record produced in subquery"))
  Get u0

----
----

build
(map
  (get x)
  [(err multiple_rows_from_subquery int64)])
----
----
Map (error("more than one record produced in subquery"))
  Get u0

----
----

# constant_err
build
(constant_err
  division_by_zero
  [int64 int32 int64])
----
----
Error "division by zero"

----
----


build
(constant_err
  (division_by_zero)
  [int64 int32 int64])
----
----
Error "division by zero"

----
----

# constant_err
build
(constant_err
  (invalid_layer 10 100)
  [int64 int32 int64])
----
----
Error "invalid layer: 100; must use value within [1, 10]"

----
----
