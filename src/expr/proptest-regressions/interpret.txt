# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.
#
# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 144f4b24f8d9fc77118d8426b43a5f36f2b6ec2472001f507f08f16f7e39faf4 # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Timestamp, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }], keys: [] }, rows: [Row{[String(""), String("'"), String("."), Timestamp(CheckedTimestamp { t: 1970-01-01T00:00:00 }), Null]}], expr: CallBinary { func: Eq, expr1: Column(3), expr2: Literal(Err(InvalidLayer { max_layer: 894424081221, val: -5100197640644868946 }), ColumnType { scalar_type: Timestamp, nullable: true }) } }
cc 319101261bbe2c9188f8cfe458d417a40f687dd8d4d4ecfaf55ea32433b4c127 # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Timestamp, nullable: true }, ColumnType { scalar_type: MzTimestamp, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: Timestamp, nullable: true }], keys: [] }, rows: [Row{[Null, Null, Null, Numeric(OrderedDecimal(0)), Null, Numeric(OrderedDecimal(9223372036854775807)), String("\""), Null, Null]}], expr: CallBinary { func: Eq, expr1: CallUnary { func: IsNull(IsNull), expr: Column(0) }, expr2: CallBinary { func: Eq, expr1: Literal(Err(IndexOutOfRange { provided: 304, valid_end: 1450076451 }), ColumnType { scalar_type: Timestamp, nullable: true }), expr2: Literal(Err(InvalidRoleId("—®üï¥\u{a51}{¬•a/%ëª†¬¶i%^\"VÍ©ï &8{êñò√õ\\Rk—®")), ColumnType { scalar_type: Timestamp, nullable: true }) } } }
cc 72c73e7e5ee0100ac9fe72f5a834f2e54bbf8f3c6079719a458c9fdbadb60e3f # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: MzTimestamp, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Numeric { max_scale: None }, nullable: true }, ColumnType { scalar_type: String, nullable: true }], keys: [] }, rows: [Row{[String("\""), MzTimestamp(18446744073709551615), Numeric(OrderedDecimal(-9223372036854775808)), Numeric(OrderedDecimal(-1)), String(".")]}], expr: CallBinary { func: Eq, expr1: CallVariadic { func: Coalesce, exprs: [Column(4)] }, expr2: Literal(Err(CharacterTooLargeForEncoding(-2)), ColumnType { scalar_type: String, nullable: true }) } }
cc e4b6f7d3b9ca2c93f0ac0ed4ebbcdf2f9b63e98d4c8cfde97ca13f18fda83d40 # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Numeric { max_scale: None }, nullable: true }, ColumnType { scalar_type: Timestamp, nullable: true }], keys: [] }, rows: [Row{[False, String("\""), Numeric(OrderedDecimal(1)), Timestamp(CheckedTimestamp { t: +262143-12-31T00:00:00 })]}], expr: CallBinary { func: Eq, expr1: Column(0), expr2: Literal(Err(OutOfDomain(Inclusive(193036210731426336), Exclusive(8911171453825494834), "ŒÑ\":O&")), ColumnType { scalar_type: Bool, nullable: true }) } }
cc ae42f25cc7f14b75be6395694e89ca7c9f189855500805d818ece7e1b17bf6c6 # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: MzTimestamp, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Numeric { max_scale: None }, nullable: true }], keys: [] }, rows: [Row{[Numeric(OrderedDecimal(0)), True, Null, True, Null, Numeric(OrderedDecimal(-9223372036854775808)), MzTimestamp(18446744073709551615), String("\""), Numeric(OrderedDecimal(Infinity))]}], expr: CallBinary { func: Eq, expr1: Column(5), expr2: Literal(Err(InvalidArray(TooManyDimensions(748104864))), ColumnType { scalar_type: Jsonb, nullable: true }) } }
cc b4be02ff4258b036922126866e86c66a0fbc8e9bf76f215e5a35c3ed77f8267c # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: Bool, nullable: true }], keys: [] }, rows: [Row{[Numeric(OrderedDecimal(-9223372036854775808)), True]}], expr: CallBinary { func: Eq, expr1: Column(1), expr2: CallBinary { func: Eq, expr1: Column(0), expr2: Literal(Err(CharacterNotValidForEncoding(0)), ColumnType { scalar_type: Jsonb, nullable: true }) } } }
cc da857bf872ee68f726ea2c7bc6ea3a869aa6d365b1eb6b01f92cc4bd777b0663 # shrinks to data = ExpressionData { relation_type: RelationType { column_types: [ColumnType { scalar_type: Jsonb, nullable: true }, ColumnType { scalar_type: MzTimestamp, nullable: true }, ColumnType { scalar_type: Timestamp, nullable: true }, ColumnType { scalar_type: String, nullable: true }, ColumnType { scalar_type: Timestamp, nullable: true }], keys: [] }, rows: [Row{[Numeric(OrderedDecimal(1)), Null, Timestamp(CheckedTimestamp { t: 1970-01-01T00:00:00 }), String("."), Timestamp(CheckedTimestamp { t: +262143-12-31T00:00:00 })]}], expr: CallBinary { func: Eq, expr1: Literal(Ok(Row{[True]}), ColumnType { scalar_type: Bool, nullable: true }), expr2: Literal(Err(CharacterNotValidForEncoding(0)), ColumnType { scalar_type: Bool, nullable: true }) } }
