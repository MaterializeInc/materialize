---
source: src/expr/src/scalar/func/impls/float64.rs
expression: "#[sqlfunc(\n    sqlname = \"double_to_smallint\",\n    preserves_uniqueness = false,\n    inverse = to_unary!(super::CastInt16ToFloat64),\n    is_monotone = true,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn cast_float64_to_int16<'a>(a: f64) -> Result<i16, EvalError> {\n    {\n        let f = round_float64(a);\n        #[allow(clippy::as_conversions)]\n        if (f >= (i16::MIN as f64)) && (f < -(i16::MIN as f64)) {\n            Ok(f as i16)\n        } else {\n            Err(EvalError::Int16OutOfRange(f.to_string().into()))\n        }\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct CastFloat64ToInt16;
impl<'a> crate::func::EagerUnaryFunc<'a> for CastFloat64ToInt16 {
    type Input = f64;
    type Output = Result<i16, EvalError>;
    fn call(&self, a: Self::Input) -> Self::Output {
        cast_float64_to_int16(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        to_unary!(super::CastInt16ToFloat64)
    }
    fn is_monotone(&self) -> bool {
        true
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for CastFloat64ToInt16 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("double_to_smallint")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn cast_float64_to_int16<'a>(a: f64) -> Result<i16, EvalError> {
    {
        let f = round_float64(a);
        #[allow(clippy::as_conversions)]
        if (f >= (i16::MIN as f64)) && (f < -(i16::MIN as f64)) {
            Ok(f as i16)
        } else {
            Err(EvalError::Int16OutOfRange(f.to_string().into()))
        }
    }
}
