---
source: src/expr/src/scalar/func/impls/interval.rs
expression: "#[sqlfunc(\n    sqlname = \"interval_to_time\",\n    preserves_uniqueness = false,\n    inverse = to_unary!(super::CastTimeToInterval),\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn cast_interval_to_time<'a>(i: Interval) -> NaiveTime {\n    {\n        let mut result = i.micros % *USECS_PER_DAY;\n        if result < 0 {\n            result += *USECS_PER_DAY;\n        }\n        let i = Interval::new(0, 0, result);\n        let hours: u32 = i\n            .hours()\n            .try_into()\n            .expect(\n                \"interval is positive and hours() returns a value in the range [-24, 24]\",\n            );\n        let minutes: u32 = i\n            .minutes()\n            .try_into()\n            .expect(\n                \"interval is positive and minutes() returns a value in the range [-60, 60]\",\n            );\n        let seconds: u32 = i64::cast_lossy(i.seconds::<f64>())\n            .try_into()\n            .expect(\n                \"interval is positive and seconds() returns a value in the range [-60.0, 60.0]\",\n            );\n        let nanoseconds: u32 = i\n            .nanoseconds()\n            .try_into()\n            .expect(\n                \"interval is positive and nanoseconds() returns a value in the range [-1_000_000_000, 1_000_000_000]\",\n            );\n        NaiveTime::from_hms_nano_opt(hours, minutes, seconds, nanoseconds).unwrap()\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct CastIntervalToTime;
impl<'a> crate::func::EagerUnaryFunc<'a> for CastIntervalToTime {
    type Input = Interval;
    type Output = NaiveTime;
    fn call(&self, a: Self::Input) -> Self::Output {
        cast_interval_to_time(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        to_unary!(super::CastTimeToInterval)
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for CastIntervalToTime {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("interval_to_time")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn cast_interval_to_time<'a>(i: Interval) -> NaiveTime {
    {
        let mut result = i.micros % *USECS_PER_DAY;
        if result < 0 {
            result += *USECS_PER_DAY;
        }
        let i = Interval::new(0, 0, result);
        let hours: u32 = i
            .hours()
            .try_into()
            .expect(
                "interval is positive and hours() returns a value in the range [-24, 24]",
            );
        let minutes: u32 = i
            .minutes()
            .try_into()
            .expect(
                "interval is positive and minutes() returns a value in the range [-60, 60]",
            );
        let seconds: u32 = i64::cast_lossy(i.seconds::<f64>())
            .try_into()
            .expect(
                "interval is positive and seconds() returns a value in the range [-60.0, 60.0]",
            );
        let nanoseconds: u32 = i
            .nanoseconds()
            .try_into()
            .expect(
                "interval is positive and nanoseconds() returns a value in the range [-1_000_000_000, 1_000_000_000]",
            );
        NaiveTime::from_hms_nano_opt(hours, minutes, seconds, nanoseconds).unwrap()
    }
}
