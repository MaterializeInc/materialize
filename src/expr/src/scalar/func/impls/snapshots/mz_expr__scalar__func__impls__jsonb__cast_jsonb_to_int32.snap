---
source: src/expr/src/scalar/func/impls/jsonb.rs
expression: "#[sqlfunc(\n    sqlname = \"jsonb_to_integer\",\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = true,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn cast_jsonb_to_int32<'a>(a: JsonbRef<'a>) -> Result<i32, EvalError> {\n    {\n        match a.into_datum() {\n            Datum::Numeric(a) => cast_numeric_to_int32(a.into_inner()),\n            datum => {\n                Err(EvalError::InvalidJsonbCast {\n                    from: jsonb_typeof(JsonbRef::from_datum(datum)).into(),\n                    to: \"integer\".into(),\n                })\n            }\n        }\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct CastJsonbToInt32;
impl<'a> crate::func::EagerUnaryFunc<'a> for CastJsonbToInt32 {
    type Input = JsonbRef<'a>;
    type Output = Result<i32, EvalError>;
    fn call(&self, a: Self::Input) -> Self::Output {
        cast_jsonb_to_int32(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        true
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for CastJsonbToInt32 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("jsonb_to_integer")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn cast_jsonb_to_int32<'a>(a: JsonbRef<'a>) -> Result<i32, EvalError> {
    {
        match a.into_datum() {
            Datum::Numeric(a) => cast_numeric_to_int32(a.into_inner()),
            datum => {
                Err(EvalError::InvalidJsonbCast {
                    from: jsonb_typeof(JsonbRef::from_datum(datum)).into(),
                    to: "integer".into(),
                })
            }
        }
    }
}
