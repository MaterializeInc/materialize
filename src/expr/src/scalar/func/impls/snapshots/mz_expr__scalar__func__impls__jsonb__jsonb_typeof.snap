---
source: src/expr/src/scalar/func/impls/jsonb.rs
expression: "#[sqlfunc(\n    sqlname = stringify!(jsonb_typeof),\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn jsonb_typeof<'a>(a: JsonbRef<'a>) -> &'a str {\n    {\n        match a.into_datum() {\n            Datum::Map(_) => \"object\",\n            Datum::List(_) => \"array\",\n            Datum::String(_) => \"string\",\n            Datum::Numeric(_) => \"number\",\n            Datum::True | Datum::False => \"boolean\",\n            Datum::JsonNull => \"null\",\n            d => panic!(\"Not jsonb: {:?}\", d),\n        }\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct JsonbTypeof;
impl<'a> crate::func::EagerUnaryFunc<'a> for JsonbTypeof {
    type Input = JsonbRef<'a>;
    type Output = &'a str;
    fn call(&self, a: Self::Input) -> Self::Output {
        jsonb_typeof(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for JsonbTypeof {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(jsonb_typeof))
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn jsonb_typeof<'a>(a: JsonbRef<'a>) -> &'a str {
    {
        match a.into_datum() {
            Datum::Map(_) => "object",
            Datum::List(_) => "array",
            Datum::String(_) => "string",
            Datum::Numeric(_) => "number",
            Datum::True | Datum::False => "boolean",
            Datum::JsonNull => "null",
            d => panic!("Not jsonb: {:?}", d),
        }
    }
}
