---
source: src/expr/src/scalar/func/impls/mz_timestamp.rs
expression: "#[sqlfunc(\n    sqlname = \"uint8_to_mz_timestamp\",\n    preserves_uniqueness = true,\n    inverse = None,\n    is_monotone = true,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn cast_uint64_to_mz_timestamp<'a>(a: u64) -> Timestamp {\n    { a.into() }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct CastUint64ToMzTimestamp;
impl<'a> crate::func::EagerUnaryFunc<'a> for CastUint64ToMzTimestamp {
    type Input = u64;
    type Output = Timestamp;
    fn call(&self, a: Self::Input) -> Self::Output {
        cast_uint64_to_mz_timestamp(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        true
    }
    fn preserves_uniqueness(&self) -> bool {
        true
    }
}
impl std::fmt::Display for CastUint64ToMzTimestamp {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("uint8_to_mz_timestamp")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn cast_uint64_to_mz_timestamp<'a>(a: u64) -> Timestamp {
    { a.into() }
}
