---
source: src/expr/src/scalar/func/impls/numeric.rs
expression: "#[sqlfunc(\n    sqlname = \"log10numeric\",\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn log10_numeric<'a>(a: Numeric) -> Result<Numeric, EvalError> {\n    { log_numeric(a, dec::Context::log10, \"log10\") }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Log10Numeric;
impl<'a> crate::func::EagerUnaryFunc<'a> for Log10Numeric {
    type Input = Numeric;
    type Output = Result<Numeric, EvalError>;
    fn call(&self, a: Self::Input) -> Self::Output {
        log10_numeric(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for Log10Numeric {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("log10numeric")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn log10_numeric<'a>(a: Numeric) -> Result<Numeric, EvalError> {
    { log_numeric(a, dec::Context::log10, "log10") }
}
