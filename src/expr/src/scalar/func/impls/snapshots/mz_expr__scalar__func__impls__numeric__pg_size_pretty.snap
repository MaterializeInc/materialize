---
source: src/expr/src/scalar/func/impls/numeric.rs
expression: "#[sqlfunc(\n    sqlname = \"pg_size_pretty\",\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn pg_size_pretty<'a>(a: Numeric) -> Result<String, EvalError> {\n    {\n        let mut a = a;\n        {\n            let mut cx = numeric::cx_datum();\n            let units = [\"bytes\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\"];\n            for (pos, unit) in units.iter().rev().skip(1).rev().enumerate() {\n                if Numeric::from(-10239.5) < a && a < Numeric::from(10239.5) {\n                    if pos > 0 {\n                        cx.round(&mut a);\n                    }\n                    return Ok(format!(\"{} {unit}\", a.to_standard_notation_string()));\n                }\n                cx.div(&mut a, &Numeric::from(1024));\n                numeric::munge_numeric(&mut a).unwrap();\n            }\n            cx.round(&mut a);\n            Ok(format!(\"{} {}\", a.to_standard_notation_string(), units.last().unwrap()))\n        }\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct PgSizePretty;
impl<'a> crate::func::EagerUnaryFunc<'a> for PgSizePretty {
    type Input = Numeric;
    type Output = Result<String, EvalError>;
    fn call(&self, a: Self::Input) -> Self::Output {
        pg_size_pretty(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for PgSizePretty {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("pg_size_pretty")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn pg_size_pretty<'a>(a: Numeric) -> Result<String, EvalError> {
    {
        let mut a = a;
        {
            let mut cx = numeric::cx_datum();
            let units = ["bytes", "kB", "MB", "GB", "TB", "PB"];
            for (pos, unit) in units.iter().rev().skip(1).rev().enumerate() {
                if Numeric::from(-10239.5) < a && a < Numeric::from(10239.5) {
                    if pos > 0 {
                        cx.round(&mut a);
                    }
                    return Ok(format!("{} {unit}", a.to_standard_notation_string()));
                }
                cx.div(&mut a, &Numeric::from(1024));
                numeric::munge_numeric(&mut a).unwrap();
            }
            cx.round(&mut a);
            Ok(format!("{} {}", a.to_standard_notation_string(), units.last().unwrap()))
        }
    }
}
