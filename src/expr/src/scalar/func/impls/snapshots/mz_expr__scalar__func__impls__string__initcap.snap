---
source: src/expr/src/scalar/func/impls/string.rs
expression: "#[sqlfunc(\n    sqlname = \"initcap\",\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn initcap<'a>(a: &'a str) -> String {\n    {\n        let mut out = String::new();\n        let mut capitalize_next = true;\n        for ch in a.chars() {\n            if capitalize_next {\n                out.extend(ch.to_uppercase())\n            } else {\n                out.extend(ch.to_lowercase())\n            };\n            capitalize_next = !ch.is_alphanumeric();\n        }\n        out\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Initcap;
impl<'a> crate::func::EagerUnaryFunc<'a> for Initcap {
    type Input = &'a str;
    type Output = String;
    fn call(&self, a: Self::Input) -> Self::Output {
        initcap(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for Initcap {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("initcap")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn initcap<'a>(a: &'a str) -> String {
    {
        let mut out = String::new();
        let mut capitalize_next = true;
        for ch in a.chars() {
            if capitalize_next {
                out.extend(ch.to_uppercase())
            } else {
                out.extend(ch.to_lowercase())
            };
            capitalize_next = !ch.is_alphanumeric();
        }
        out
    }
}
