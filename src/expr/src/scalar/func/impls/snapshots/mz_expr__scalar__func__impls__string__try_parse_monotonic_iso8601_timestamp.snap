---
source: src/expr/src/scalar/func/impls/string.rs
expression: "#[sqlfunc(\n    sqlname = \"try_parse_monotonic_iso8601_timestamp\",\n    preserves_uniqueness = false,\n    inverse = None,\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn try_parse_monotonic_iso8601_timestamp<'a>(\n    a: &'a str,\n) -> Option<CheckedTimestamp<NaiveDateTime>> {\n    {\n        let ts = mz_persist_types::timestamp::try_parse_monotonic_iso8601_timestamp(a)?;\n        let ts = CheckedTimestamp::from_timestamplike(ts)\n            .expect(\"monotonic_iso8601 range is a subset of CheckedTimestamp domain\");\n        Some(ts)\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct TryParseMonotonicIso8601Timestamp;
impl<'a> crate::func::EagerUnaryFunc<'a> for TryParseMonotonicIso8601Timestamp {
    type Input = &'a str;
    type Output = Option<CheckedTimestamp<NaiveDateTime>>;
    fn call(&self, a: Self::Input) -> Self::Output {
        try_parse_monotonic_iso8601_timestamp(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        None
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        false
    }
}
impl std::fmt::Display for TryParseMonotonicIso8601Timestamp {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("try_parse_monotonic_iso8601_timestamp")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn try_parse_monotonic_iso8601_timestamp<'a>(
    a: &'a str,
) -> Option<CheckedTimestamp<NaiveDateTime>> {
    {
        let ts = mz_persist_types::timestamp::try_parse_monotonic_iso8601_timestamp(a)?;
        let ts = CheckedTimestamp::from_timestamplike(ts)
            .expect("monotonic_iso8601 range is a subset of CheckedTimestamp domain");
        Some(ts)
    }
}
