---
source: src/expr/src/scalar/func/impls/timestamp.rs
expression: "#[sqlfunc(\n    sqlname = \"timestamp_with_time_zone_to_text\",\n    preserves_uniqueness = true,\n    inverse = to_unary!(super::CastStringToTimestampTz(None)),\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn cast_timestamp_tz_to_string<'a>(a: CheckedTimestamp<DateTime<Utc>>) -> String {\n    {\n        let mut buf = String::new();\n        strconv::format_timestamptz(&mut buf, &a);\n        buf\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct CastTimestampTzToString;
impl<'a> crate::func::EagerUnaryFunc<'a> for CastTimestampTzToString {
    type Input = CheckedTimestamp<DateTime<Utc>>;
    type Output = String;
    fn call(&self, a: Self::Input) -> Self::Output {
        cast_timestamp_tz_to_string(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        to_unary!(super::CastStringToTimestampTz(None))
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        true
    }
}
impl std::fmt::Display for CastTimestampTzToString {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("timestamp_with_time_zone_to_text")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn cast_timestamp_tz_to_string<'a>(a: CheckedTimestamp<DateTime<Utc>>) -> String {
    {
        let mut buf = String::new();
        strconv::format_timestamptz(&mut buf, &a);
        buf
    }
}
