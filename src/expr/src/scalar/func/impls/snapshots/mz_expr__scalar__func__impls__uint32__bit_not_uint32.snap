---
source: src/expr/src/scalar/func/impls/uint32.rs
expression: "#[sqlfunc(\n    sqlname = \"~\",\n    preserves_uniqueness = true,\n    inverse = to_unary!(super::BitNotUint32),\n    is_monotone = false,\n)]\n#[allow(clippy::extra_unused_lifetimes)]\npub fn bit_not_uint32<'a>(a: u32) -> u32 {\n    { !a }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct BitNotUint32;
impl<'a> crate::func::EagerUnaryFunc<'a> for BitNotUint32 {
    type Input = u32;
    type Output = u32;
    fn call(&self, a: Self::Input) -> Self::Output {
        bit_not_uint32(a)
    }
    fn output_type(&self, input_type: mz_repr::ColumnType) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::EagerUnaryFunc::propagates_nulls(self);
        let nullable = output.nullable;
        output.nullable(nullable || (propagates_nulls && input_type.nullable))
    }
    fn inverse(&self) -> Option<crate::UnaryFunc> {
        to_unary!(super::BitNotUint32)
    }
    fn is_monotone(&self) -> bool {
        false
    }
    fn preserves_uniqueness(&self) -> bool {
        true
    }
}
impl std::fmt::Display for BitNotUint32 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("~")
    }
}
#[allow(clippy::extra_unused_lifetimes)]
pub fn bit_not_uint32<'a>(a: u32) -> u32 {
    { !a }
}
