---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    is_monotone = \"(true, true)\",\n    output_type = \"Interval\",\n    sqlname = \"age\",\n    propagates_nulls = true\n)]\nfn age_timestamp(\n    a: CheckedTimestamp<chrono::NaiveDateTime>,\n    b: CheckedTimestamp<chrono::NaiveDateTime>,\n) -> Result<Interval, EvalError> {\n    Ok(a.age(&b)?)\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct AgeTimestamp;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for AgeTimestamp {
    type Input1 = CheckedTimestamp<chrono::NaiveDateTime>;
    type Input2 = CheckedTimestamp<chrono::NaiveDateTime>;
    type Output = Result<Interval, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        age_timestamp(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = <Interval>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <Interval as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn is_monotone(&self) -> (bool, bool) {
        (true, true)
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for AgeTimestamp {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("age")
    }
}
fn age_timestamp(
    a: CheckedTimestamp<chrono::NaiveDateTime>,
    b: CheckedTimestamp<chrono::NaiveDateTime>,
) -> Result<Interval, EvalError> {
    Ok(a.age(&b)?)
}
