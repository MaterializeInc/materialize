---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(sqlname = \"constant_time_compare_strings\", propagates_nulls = true)]\npub fn constant_time_eq_string(a: &str, b: &str) -> bool {\n    bool::from(a.as_bytes().ct_eq(b.as_bytes()))\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct ConstantTimeEqString;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for ConstantTimeEqString {
    type Input1 = &'a str;
    type Input2 = &'a str;
    type Output = bool;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        constant_time_eq_string(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for ConstantTimeEqString {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("constant_time_compare_strings")
    }
}
pub fn constant_time_eq_string(a: &str, b: &str) -> bool {
    bool::from(a.as_bytes().ct_eq(b.as_bytes()))
}
