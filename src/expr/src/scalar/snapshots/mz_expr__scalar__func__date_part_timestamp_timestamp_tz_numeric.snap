---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(output_type = \"Numeric\", sqlname = \"extracttstz\", propagates_nulls = true)]\n#[allow(dead_code)]\nfn date_part_timestamp_timestamp_tz_numeric<'a>(\n    units: &str,\n    ts: CheckedTimestamp<DateTime<Utc>>,\n) -> Result<Datum<'a>, EvalError> {\n    match units.parse() {\n        Ok(units) => Ok(date_part_timestamp_inner::<_, Numeric>(units, &*ts)?.into()),\n        Err(_) => Err(EvalError::UnknownUnits(units.into())),\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct DatePartTimestampTimestampTzNumeric;
impl<'a> crate::func::binary::EagerBinaryFunc<'a>
for DatePartTimestampTimestampTzNumeric {
    type Input1 = &'a str;
    type Input2 = CheckedTimestamp<DateTime<Utc>>;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        date_part_timestamp_timestamp_tz_numeric(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = <Numeric>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <Numeric as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for DatePartTimestampTimestampTzNumeric {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("extracttstz")
    }
}
#[allow(dead_code)]
fn date_part_timestamp_timestamp_tz_numeric<'a>(
    units: &str,
    ts: CheckedTimestamp<DateTime<Utc>>,
) -> Result<Datum<'a>, EvalError> {
    match units.parse() {
        Ok(units) => Ok(date_part_timestamp_inner::<_, Numeric>(units, &*ts)?.into()),
        Err(_) => Err(EvalError::UnknownUnits(units.into())),
    }
}
