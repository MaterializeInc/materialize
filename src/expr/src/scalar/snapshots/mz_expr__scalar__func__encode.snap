---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(propagates_nulls = true)]\nfn encode<'a>(\n    bytes: &[u8],\n    format: &str,\n    temp_storage: &'a RowArena,\n) -> Result<&'a str, EvalError> {\n    let format = encoding::lookup_format(format)?;\n    let out = format.encode(bytes);\n    Ok(temp_storage.push_string(out))\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Encode;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for Encode {
    type Input1 = &'a [u8];
    type Input2 = &'a str;
    type Output = Result<&'a str, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        encode(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for Encode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(encode))
    }
}
fn encode<'a>(
    bytes: &[u8],
    format: &str,
    temp_storage: &'a RowArena,
) -> Result<&'a str, EvalError> {
    let format = encoding::lookup_format(format)?;
    let out = format.encode(bytes);
    Ok(temp_storage.push_string(out))
}
