---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(propagates_nulls = true)]\nfn get_bit(bytes: &[u8], index: i32) -> Result<i32, EvalError> {\n    let err = EvalError::IndexOutOfRange {\n        provided: index,\n        valid_end: i32::try_from(bytes.len().saturating_mul(8)).unwrap() - 1,\n    };\n    let index = usize::try_from(index).map_err(|_| err.clone())?;\n    let byte_index = index / 8;\n    let bit_index = index % 8;\n    let i = bytes.get(byte_index).map(|b| (*b >> bit_index) & 1).ok_or(err)?;\n    assert!(i == 0 || i == 1);\n    Ok(i32::from(i))\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct GetBit;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for GetBit {
    type Input1 = &'a [u8];
    type Input2 = i32;
    type Output = Result<i32, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        get_bit(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for GetBit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(get_bit))
    }
}
fn get_bit(bytes: &[u8], index: i32) -> Result<i32, EvalError> {
    let err = EvalError::IndexOutOfRange {
        provided: index,
        valid_end: i32::try_from(bytes.len().saturating_mul(8)).unwrap() - 1,
    };
    let index = usize::try_from(index).map_err(|_| err.clone())?;
    let byte_index = index / 8;
    let bit_index = index % 8;
    let i = bytes.get(byte_index).map(|b| (*b >> bit_index) & 1).ok_or(err)?;
    assert!(i == 0 || i == 1);
    Ok(i32::from(i))
}
