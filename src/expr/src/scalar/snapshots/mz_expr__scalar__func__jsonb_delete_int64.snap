---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    output_type_expr = \"SqlScalarType::Jsonb.nullable(true)\",\n    is_infix_op = true,\n    sqlname = \"-\",\n    propagates_nulls = true,\n    introduces_nulls = true\n)]\nfn jsonb_delete_int64<'a>(\n    a: Datum<'a>,\n    b: Datum<'a>,\n    temp_storage: &'a RowArena,\n) -> Datum<'a> {\n    let i = b.unwrap_int64();\n    match a {\n        Datum::List(list) => {\n            let i = if i >= 0 {\n                usize::cast_from(i.unsigned_abs())\n            } else {\n                let i = usize::cast_from(i.unsigned_abs());\n                (list.iter().count()).wrapping_sub(i)\n            };\n            let elems = list\n                .iter()\n                .enumerate()\n                .filter(|(i2, _e)| i != *i2)\n                .map(|(_, e)| e);\n            temp_storage.make_datum(|packer| packer.push_list(elems))\n        }\n        _ => Datum::Null,\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct JsonbDeleteInt64;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for JsonbDeleteInt64 {
    type Input1 = Datum<'a>;
    type Input2 = Datum<'a>;
    type Output = Datum<'a>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        jsonb_delete_int64(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = SqlScalarType::Jsonb.nullable(true);
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        true
    }
    fn is_infix_op(&self) -> bool {
        true
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for JsonbDeleteInt64 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("-")
    }
}
fn jsonb_delete_int64<'a>(
    a: Datum<'a>,
    b: Datum<'a>,
    temp_storage: &'a RowArena,
) -> Datum<'a> {
    let i = b.unwrap_int64();
    match a {
        Datum::List(list) => {
            let i = if i >= 0 {
                usize::cast_from(i.unsigned_abs())
            } else {
                let i = usize::cast_from(i.unsigned_abs());
                (list.iter().count()).wrapping_sub(i)
            };
            let elems = list
                .iter()
                .enumerate()
                .filter(|(i2, _e)| i != *i2)
                .map(|(_, e)| e);
            temp_storage.make_datum(|packer| packer.push_list(elems))
        }
        _ => Datum::Null,
    }
}
