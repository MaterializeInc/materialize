---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(propagates_nulls = true, is_monotone = (false, false))]\nfn left<'a>(string: &'a str, b: i32) -> Result<&'a str, EvalError> {\n    let n = i64::from(b);\n    let mut byte_indices = string.char_indices().map(|(i, _)| i);\n    let end_in_bytes = match n.cmp(&0) {\n        Ordering::Equal => 0,\n        Ordering::Greater => {\n            let n = usize::try_from(n)\n                .map_err(|_| {\n                    EvalError::InvalidParameterValue(\n                        format!(\"invalid parameter n: {:?}\", n).into(),\n                    )\n                })?;\n            byte_indices.nth(n).unwrap_or(string.len())\n        }\n        Ordering::Less => {\n            let n = usize::try_from(n.abs() - 1)\n                .map_err(|_| {\n                    EvalError::InvalidParameterValue(\n                        format!(\"invalid parameter n: {:?}\", n).into(),\n                    )\n                })?;\n            byte_indices.rev().nth(n).unwrap_or(0)\n        }\n    };\n    Ok(&string[..end_in_bytes])\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Left;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for Left {
    type Input1 = &'a str;
    type Input2 = i32;
    type Output = Result<&'a str, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        left(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn is_monotone(&self) -> (bool, bool) {
        (false, false)
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for Left {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(left))
    }
}
fn left<'a>(string: &'a str, b: i32) -> Result<&'a str, EvalError> {
    let n = i64::from(b);
    let mut byte_indices = string.char_indices().map(|(i, _)| i);
    let end_in_bytes = match n.cmp(&0) {
        Ordering::Equal => 0,
        Ordering::Greater => {
            let n = usize::try_from(n)
                .map_err(|_| {
                    EvalError::InvalidParameterValue(
                        format!("invalid parameter n: {:?}", n).into(),
                    )
                })?;
            byte_indices.nth(n).unwrap_or(string.len())
        }
        Ordering::Less => {
            let n = usize::try_from(n.abs() - 1)
                .map_err(|_| {
                    EvalError::InvalidParameterValue(
                        format!("invalid parameter n: {:?}", n).into(),
                    )
                })?;
            byte_indices.rev().nth(n).unwrap_or(0)
        }
    };
    Ok(&string[..end_in_bytes])
}
