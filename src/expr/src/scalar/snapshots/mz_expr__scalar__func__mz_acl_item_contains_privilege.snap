---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    sqlname = \"mz_aclitem_contains_privilege\",\n    output_type = \"bool\",\n    propagates_nulls = true\n)]\n/// Determines if an mz_aclitem contains one of the specified privileges. This will return true if\n/// any of the listed privileges are contained in the mz_aclitem.\nfn mz_acl_item_contains_privilege(\n    mz_acl_item: MzAclItem,\n    privileges: &str,\n) -> Result<bool, EvalError> {\n    let acl_mode = AclMode::parse_multiple_privileges(privileges)\n        .map_err(|e: anyhow::Error| EvalError::InvalidPrivileges(e.to_string().into()))?;\n    let contains = !mz_acl_item.acl_mode.intersection(acl_mode).is_empty();\n    Ok(contains)\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct MzAclItemContainsPrivilege;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for MzAclItemContainsPrivilege {
    type Input1 = MzAclItem;
    type Input2 = &'a str;
    type Output = Result<bool, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        mz_acl_item_contains_privilege(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = <bool>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <bool as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for MzAclItemContainsPrivilege {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("mz_aclitem_contains_privilege")
    }
}
/// Determines if an mz_aclitem contains one of the specified privileges. This will return true if
/// any of the listed privileges are contained in the mz_aclitem.
fn mz_acl_item_contains_privilege(
    mz_acl_item: MzAclItem,
    privileges: &str,
) -> Result<bool, EvalError> {
    let acl_mode = AclMode::parse_multiple_privileges(privileges)
        .map_err(|e: anyhow::Error| EvalError::InvalidPrivileges(e.to_string().into()))?;
    let contains = !mz_acl_item.acl_mode.intersection(acl_mode).is_empty();
    Ok(contains)
}
