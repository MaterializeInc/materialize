---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    output_type = \"String\",\n    sqlname = \"mz_render_typmod\",\n    propagates_nulls = true,\n    introduces_nulls = false\n)]\nfn mz_render_typmod<'a>(\n    oid: u32,\n    typmod: i32,\n    temp_storage: &'a RowArena,\n) -> Result<Datum<'a>, EvalError> {\n    let s = match Type::from_oid_and_typmod(oid, typmod) {\n        Ok(typ) => typ.constraint().display_or(\"\").to_string(),\n        Err(_) if typmod >= 0 => format!(\"({typmod})\"),\n        Err(_) => \"\".into(),\n    };\n    Ok(Datum::String(temp_storage.push_string(s)))\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct MzRenderTypmod;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for MzRenderTypmod {
    type Input1 = u32;
    type Input2 = i32;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        mz_render_typmod(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = <String>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        false
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for MzRenderTypmod {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("mz_render_typmod")
    }
}
fn mz_render_typmod<'a>(
    oid: u32,
    typmod: i32,
    temp_storage: &'a RowArena,
) -> Result<Datum<'a>, EvalError> {
    let s = match Type::from_oid_and_typmod(oid, typmod) {
        Ok(typ) => typ.constraint().display_or("").to_string(),
        Err(_) if typmod >= 0 => format!("({typmod})"),
        Err(_) => "".into(),
    };
    Ok(Datum::String(temp_storage.push_string(s)))
}
