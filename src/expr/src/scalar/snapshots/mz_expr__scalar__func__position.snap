---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(propagates_nulls = true)]\nfn position(substring: &str, string: &str) -> Result<i32, EvalError> {\n    let char_index = string.find(substring);\n    if let Some(char_index) = char_index {\n        let string_prefix = &string[0..char_index];\n        let num_prefix_chars = string_prefix.chars().count();\n        let num_prefix_chars = i32::try_from(num_prefix_chars)\n            .map_err(|_| EvalError::Int32OutOfRange(\n                num_prefix_chars.to_string().into(),\n            ))?;\n        Ok(num_prefix_chars + 1)\n    } else {\n        Ok(0)\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Position;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for Position {
    type Input1 = &'a str;
    type Input2 = &'a str;
    type Output = Result<i32, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        position(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for Position {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(position))
    }
}
fn position(substring: &str, string: &str) -> Result<i32, EvalError> {
    let char_index = string.find(substring);
    if let Some(char_index) = char_index {
        let string_prefix = &string[0..char_index];
        let num_prefix_chars = string_prefix.chars().count();
        let num_prefix_chars = i32::try_from(num_prefix_chars)
            .map_err(|_| EvalError::Int32OutOfRange(
                num_prefix_chars.to_string().into(),
            ))?;
        Ok(num_prefix_chars + 1)
    } else {
        Ok(0)
    }
}
