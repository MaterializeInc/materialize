---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    is_monotone = \"(false, false)\",\n    output_type = \"Numeric\",\n    is_infix_op = false,\n    propagates_nulls = true\n)]\nfn power_numeric<'a>(a: Datum<'a>, b: Datum<'a>) -> Result<Datum<'a>, EvalError> {\n    let mut a = a.unwrap_numeric().0;\n    let b = b.unwrap_numeric().0;\n    if a.is_zero() {\n        if b.is_zero() {\n            return Ok(Datum::from(Numeric::from(1)));\n        }\n        if b.is_negative() {\n            return Err(EvalError::Undefined(\"zero raised to a negative power\".into()));\n        }\n    }\n    if a.is_negative() && b.exponent() < 0 {\n        return Err(EvalError::ComplexOutOfRange(\"pow\".into()));\n    }\n    let mut cx = numeric::cx_datum();\n    cx.pow(&mut a, &b);\n    let cx_status = cx.status();\n    if cx_status.overflow() || (cx_status.invalid_operation() && !b.is_negative()) {\n        Err(EvalError::FloatOverflow)\n    } else if cx_status.subnormal() || cx_status.invalid_operation() {\n        Err(EvalError::FloatUnderflow)\n    } else {\n        numeric::munge_numeric(&mut a).unwrap();\n        Ok(Datum::from(a))\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct PowerNumeric;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for PowerNumeric {
    type Input1 = Datum<'a>;
    type Input2 = Datum<'a>;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        power_numeric(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = <Numeric>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <Numeric as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn is_infix_op(&self) -> bool {
        false
    }
    fn is_monotone(&self) -> (bool, bool) {
        (false, false)
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for PowerNumeric {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(power_numeric))
    }
}
fn power_numeric<'a>(a: Datum<'a>, b: Datum<'a>) -> Result<Datum<'a>, EvalError> {
    let mut a = a.unwrap_numeric().0;
    let b = b.unwrap_numeric().0;
    if a.is_zero() {
        if b.is_zero() {
            return Ok(Datum::from(Numeric::from(1)));
        }
        if b.is_negative() {
            return Err(EvalError::Undefined("zero raised to a negative power".into()));
        }
    }
    if a.is_negative() && b.exponent() < 0 {
        return Err(EvalError::ComplexOutOfRange("pow".into()));
    }
    let mut cx = numeric::cx_datum();
    cx.pow(&mut a, &b);
    let cx_status = cx.status();
    if cx_status.overflow() || (cx_status.invalid_operation() && !b.is_negative()) {
        Err(EvalError::FloatOverflow)
    } else if cx_status.subnormal() || cx_status.invalid_operation() {
        Err(EvalError::FloatUnderflow)
    } else {
        numeric::munge_numeric(&mut a).unwrap();
        Ok(Datum::from(a))
    }
}
