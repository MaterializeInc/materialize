---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(output_type = \"String\", propagates_nulls = true)]\nfn pretty_sql<'a>(\n    sql: Datum<'a>,\n    width: Datum<'a>,\n    temp_storage: &'a RowArena,\n) -> Result<Datum<'a>, EvalError> {\n    let sql = sql.unwrap_str();\n    let width = width.unwrap_int32();\n    let width = usize::try_from(width)\n        .map_err(|_| EvalError::PrettyError(\"invalid width\".into()))?;\n    let pretty = pretty_str(\n            sql,\n            PrettyConfig {\n                width,\n                format_mode: FormatMode::Simple,\n            },\n        )\n        .map_err(|e| EvalError::PrettyError(e.to_string().into()))?;\n    let pretty = temp_storage.push_string(pretty);\n    Ok(Datum::String(pretty))\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct PrettySql;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for PrettySql {
    type Input1 = Datum<'a>;
    type Input2 = Datum<'a>;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        pretty_sql(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = <String>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <String as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for PrettySql {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(pretty_sql))
    }
}
fn pretty_sql<'a>(
    sql: Datum<'a>,
    width: Datum<'a>,
    temp_storage: &'a RowArena,
) -> Result<Datum<'a>, EvalError> {
    let sql = sql.unwrap_str();
    let width = width.unwrap_int32();
    let width = usize::try_from(width)
        .map_err(|_| EvalError::PrettyError("invalid width".into()))?;
    let pretty = pretty_str(
            sql,
            PrettyConfig {
                width,
                format_mode: FormatMode::Simple,
            },
        )
        .map_err(|e| EvalError::PrettyError(e.to_string().into()))?;
    let pretty = temp_storage.push_string(pretty);
    Ok(Datum::String(pretty))
}
