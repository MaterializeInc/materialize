---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(is_infix_op = true, sqlname = \"@>\", propagates_nulls = true)]\n#[allow(dead_code)]\nfn range_contains_numeric<'a>(\n    a: Range<Datum<'a>>,\n    elem: OrderedDecimal<Numeric>,\n) -> bool {\n    a.contains_elem(&elem)\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct RangeContainsNumeric;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for RangeContainsNumeric {
    type Input1 = Range<Datum<'a>>;
    type Input2 = OrderedDecimal<Numeric>;
    type Output = bool;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        range_contains_numeric(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn is_infix_op(&self) -> bool {
        true
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for RangeContainsNumeric {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("@>")
    }
}
#[allow(dead_code)]
fn range_contains_numeric<'a>(
    a: Range<Datum<'a>>,
    elem: OrderedDecimal<Numeric>,
) -> bool {
    a.contains_elem(&elem)
}
