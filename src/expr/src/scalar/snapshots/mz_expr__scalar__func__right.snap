---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(propagates_nulls = true)]\nfn right<'a>(string: &'a str, n: i32) -> Result<&'a str, EvalError> {\n    let mut byte_indices = string.char_indices().map(|(i, _)| i);\n    let start_in_bytes = if n == 0 {\n        string.len()\n    } else if n > 0 {\n        let n = usize::try_from(n - 1)\n            .map_err(|_| {\n                EvalError::InvalidParameterValue(\n                    format!(\"invalid parameter n: {:?}\", n).into(),\n                )\n            })?;\n        byte_indices.rev().nth(n).unwrap_or(0)\n    } else if n == i32::MIN {\n        0\n    } else {\n        let n = n.abs();\n        let n = usize::try_from(n)\n            .map_err(|_| {\n                EvalError::InvalidParameterValue(\n                    format!(\"invalid parameter n: {:?}\", n).into(),\n                )\n            })?;\n        byte_indices.nth(n).unwrap_or(string.len())\n    };\n    Ok(&string[start_in_bytes..])\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct Right;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for Right {
    type Input1 = &'a str;
    type Input2 = i32;
    type Output = Result<&'a str, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        right(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = Self::Output::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for Right {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(right))
    }
}
fn right<'a>(string: &'a str, n: i32) -> Result<&'a str, EvalError> {
    let mut byte_indices = string.char_indices().map(|(i, _)| i);
    let start_in_bytes = if n == 0 {
        string.len()
    } else if n > 0 {
        let n = usize::try_from(n - 1)
            .map_err(|_| {
                EvalError::InvalidParameterValue(
                    format!("invalid parameter n: {:?}", n).into(),
                )
            })?;
        byte_indices.rev().nth(n).unwrap_or(0)
    } else if n == i32::MIN {
        0
    } else {
        let n = n.abs();
        let n = usize::try_from(n)
            .map_err(|_| {
                EvalError::InvalidParameterValue(
                    format!("invalid parameter n: {:?}", n).into(),
                )
            })?;
        byte_indices.nth(n).unwrap_or(string.len())
    };
    Ok(&string[start_in_bytes..])
}
