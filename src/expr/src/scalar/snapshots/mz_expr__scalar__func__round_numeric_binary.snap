---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    is_monotone = (true, false),\n    output_type = \"Numeric\",\n    is_infix_op = false,\n    sqlname = \"round\",\n    propagates_nulls = true\n)]\nfn round_numeric_binary<'a>(a: Datum<'a>, b: Datum<'a>) -> Result<Datum<'a>, EvalError> {\n    let mut a = a.unwrap_numeric().0;\n    let mut b = b.unwrap_int32();\n    let mut cx = numeric::cx_datum();\n    let a_exp = a.exponent();\n    if a_exp > 0 && b > 0 || a_exp < 0 && -a_exp < b {\n        let max_remaining_scale = u32::from(numeric::NUMERIC_DATUM_MAX_PRECISION)\n            - (numeric::get_precision(&a) - numeric::get_scale(&a));\n        b = match i32::try_from(max_remaining_scale) {\n            Ok(max_remaining_scale) => std::cmp::min(b, max_remaining_scale),\n            Err(_) => b,\n        };\n        cx.rescale(&mut a, &numeric::Numeric::from(-b));\n    } else {\n        const MAX_P_LIMIT: i32 = 1\n            + cast::u8_to_i32(numeric::NUMERIC_DATUM_MAX_PRECISION);\n        b = std::cmp::min(MAX_P_LIMIT, b);\n        b = std::cmp::max(-MAX_P_LIMIT, b);\n        let mut b = numeric::Numeric::from(b);\n        cx.scaleb(&mut a, &b);\n        cx.round(&mut a);\n        cx.neg(&mut b);\n        cx.scaleb(&mut a, &b);\n    }\n    if cx.status().overflow() {\n        Err(EvalError::FloatOverflow)\n    } else if a.is_zero() {\n        Ok(Datum::from(numeric::Numeric::zero()))\n    } else {\n        numeric::munge_numeric(&mut a).unwrap();\n        Ok(Datum::from(a))\n    }\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct RoundNumericBinary;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for RoundNumericBinary {
    type Input1 = Datum<'a>;
    type Input2 = Datum<'a>;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        round_numeric_binary(a, b)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::ColumnType,
        input_type_b: mz_repr::ColumnType,
    ) -> mz_repr::ColumnType {
        use mz_repr::AsColumnType;
        let output = <Numeric>::as_column_type();
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        <Numeric as ::mz_repr::DatumType<'_, ()>>::nullable()
    }
    fn is_infix_op(&self) -> bool {
        false
    }
    fn is_monotone(&self) -> (bool, bool) {
        (true, false)
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for RoundNumericBinary {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str("round")
    }
}
fn round_numeric_binary<'a>(a: Datum<'a>, b: Datum<'a>) -> Result<Datum<'a>, EvalError> {
    let mut a = a.unwrap_numeric().0;
    let mut b = b.unwrap_int32();
    let mut cx = numeric::cx_datum();
    let a_exp = a.exponent();
    if a_exp > 0 && b > 0 || a_exp < 0 && -a_exp < b {
        let max_remaining_scale = u32::from(numeric::NUMERIC_DATUM_MAX_PRECISION)
            - (numeric::get_precision(&a) - numeric::get_scale(&a));
        b = match i32::try_from(max_remaining_scale) {
            Ok(max_remaining_scale) => std::cmp::min(b, max_remaining_scale),
            Err(_) => b,
        };
        cx.rescale(&mut a, &numeric::Numeric::from(-b));
    } else {
        const MAX_P_LIMIT: i32 = 1
            + cast::u8_to_i32(numeric::NUMERIC_DATUM_MAX_PRECISION);
        b = std::cmp::min(MAX_P_LIMIT, b);
        b = std::cmp::max(-MAX_P_LIMIT, b);
        let mut b = numeric::Numeric::from(b);
        cx.scaleb(&mut a, &b);
        cx.round(&mut a);
        cx.neg(&mut b);
        cx.scaleb(&mut a, &b);
    }
    if cx.status().overflow() {
        Err(EvalError::FloatOverflow)
    } else if a.is_zero() {
        Ok(Datum::from(numeric::Numeric::zero()))
    } else {
        numeric::munge_numeric(&mut a).unwrap();
        Ok(Datum::from(a))
    }
}
