---
source: src/expr/src/scalar/func.rs
expression: "#[sqlfunc(\n    output_type_expr = \"SqlScalarType::Record {\n                fields: [\n                    (\\\"abbrev\\\".into(), SqlScalarType::String.nullable(false)),\n                    (\\\"base_utc_offset\\\".into(), SqlScalarType::Interval.nullable(false)),\n                    (\\\"dst_offset\\\".into(), SqlScalarType::Interval.nullable(false)),\n                ].into(),\n                custom_id: None,\n            }.nullable(true)\",\n    propagates_nulls = true,\n    introduces_nulls = false\n)]\nfn timezone_offset<'a>(\n    a: Datum<'a>,\n    b: Datum<'a>,\n    temp_storage: &'a RowArena,\n) -> Result<Datum<'a>, EvalError> {\n    let tz_str = a.unwrap_str();\n    let tz = match Tz::from_str_insensitive(tz_str) {\n        Ok(tz) => tz,\n        Err(_) => return Err(EvalError::InvalidIanaTimezoneId(tz_str.into())),\n    };\n    let offset = tz.offset_from_utc_datetime(&b.unwrap_timestamptz().naive_utc());\n    Ok(\n        temp_storage\n            .make_datum(|packer| {\n                packer\n                    .push_list_with(|packer| {\n                        packer.push(Datum::from(offset.abbreviation()));\n                        packer.push(Datum::from(offset.base_utc_offset()));\n                        packer.push(Datum::from(offset.dst_offset()));\n                    });\n            }),\n    )\n}\n"
---
#[derive(
    proptest_derive::Arbitrary,
    Ord,
    PartialOrd,
    Clone,
    Debug,
    Eq,
    PartialEq,
    serde::Serialize,
    serde::Deserialize,
    Hash,
    mz_lowertest::MzReflect
)]
pub struct TimezoneOffset;
impl<'a> crate::func::binary::EagerBinaryFunc<'a> for TimezoneOffset {
    type Input1 = Datum<'a>;
    type Input2 = Datum<'a>;
    type Output = Result<Datum<'a>, EvalError>;
    fn call(
        &self,
        a: Self::Input1,
        b: Self::Input2,
        temp_storage: &'a mz_repr::RowArena,
    ) -> Self::Output {
        timezone_offset(a, b, temp_storage)
    }
    fn output_type(
        &self,
        input_type_a: mz_repr::SqlColumnType,
        input_type_b: mz_repr::SqlColumnType,
    ) -> mz_repr::SqlColumnType {
        use mz_repr::AsColumnType;
        let output = SqlScalarType::Record {
            fields: [
                ("abbrev".into(), SqlScalarType::String.nullable(false)),
                ("base_utc_offset".into(), SqlScalarType::Interval.nullable(false)),
                ("dst_offset".into(), SqlScalarType::Interval.nullable(false)),
            ]
                .into(),
            custom_id: None,
        }
            .nullable(true);
        let propagates_nulls = crate::func::binary::EagerBinaryFunc::propagates_nulls(
            self,
        );
        let nullable = output.nullable;
        output
            .nullable(
                nullable
                    || (propagates_nulls
                        && (input_type_a.nullable || input_type_b.nullable)),
            )
    }
    fn introduces_nulls(&self) -> bool {
        false
    }
    fn propagates_nulls(&self) -> bool {
        true
    }
}
impl std::fmt::Display for TimezoneOffset {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(stringify!(timezone_offset))
    }
}
fn timezone_offset<'a>(
    a: Datum<'a>,
    b: Datum<'a>,
    temp_storage: &'a RowArena,
) -> Result<Datum<'a>, EvalError> {
    let tz_str = a.unwrap_str();
    let tz = match Tz::from_str_insensitive(tz_str) {
        Ok(tz) => tz,
        Err(_) => return Err(EvalError::InvalidIanaTimezoneId(tz_str.into())),
    };
    let offset = tz.offset_from_utc_datetime(&b.unwrap_timestamptz().naive_utc());
    Ok(
        temp_storage
            .make_datum(|packer| {
                packer
                    .push_list_with(|packer| {
                        packer.push(Datum::from(offset.abbreviation()));
                        packer.push(Datum::from(offset.base_utc_offset()));
                        packer.push(Datum::from(offset.dst_offset()));
                    });
            }),
    )
}
