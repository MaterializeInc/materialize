// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::collapsible_if)]
#![warn(clippy::collapsible_else_if)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use std::ops::Sub;

use tokio::sync::Mutex;

use crate::{ApiTokenResponse, AppPassword, Client, Error, REFRESH_SUFFIX};
use chrono::{DateTime, Duration, Utc};

pub struct UnvalidatedAuthenticationConfig {
    pub admin_api_token_url: String,
    pub app_password: AppPassword,
}

pub struct UnvalidatedAuthentication {
    pub admin_api_token_url: String,
    pub client: Client,
    pub auth: Mutex<Option<ApiTokenResponse>>,
    pub app_password: AppPassword,
}

impl UnvalidatedAuthentication {
    /// Creates a new frontegg authentication without signature validation
    /// and handles the access token for a unique `app_password`.
    /// `UnvalidatedAuthentication` should be NEVER used on the server side.
    /// It should only be used in the client side. E.g.: Front-end apps, CLI, etc.
    /// Unvalidated authentication avoids carrying certs to validate the tokens.
    pub fn new(config: UnvalidatedAuthenticationConfig, client: Client) -> Self {
        UnvalidatedAuthentication {
            admin_api_token_url: config.admin_api_token_url,
            client,
            auth: None.into(),
            app_password: config.app_password,
        }
    }

    /// Authenticates with the server, if not already authenticated,
    /// and returns the authentication token.
    pub async fn auth(&self) -> Result<ApiTokenResponse, Error> {
        let mut auth = self.auth.lock().await;
        let req: Result<ApiTokenResponse, Error>;

        match &*auth {
            Some(auth) => {
                let expire_at = DateTime::parse_from_rfc2822(&auth.expires).unwrap();
                // Refresh twice as frequently as we need to, to be safe.
                let expire_at = expire_at.sub(Duration::seconds(auth.expires_in / 2));
                let current_time = Utc::now();

                if current_time < expire_at {
                    return Ok(auth.clone());
                } else {
                    let refreshing_url = format!("{}{}", self.admin_api_token_url, REFRESH_SUFFIX);

                    // Access token needs a refresh
                    req = self
                        .client
                        .refresh_token(&refreshing_url, &auth.refresh_token)
                        .await;
                }
            }
            _ => {
                // No auth available in the client, request a new one.
                req = self
                    .client
                    .exchange_client_secret_for_token(
                        self.app_password.client_id,
                        self.app_password.secret_key,
                        &self.admin_api_token_url,
                    )
                    .await;
            }
        }

        let new_auth = req.unwrap();
        *auth = Some(new_auth);

        Ok(auth.clone().unwrap())
    }
}
