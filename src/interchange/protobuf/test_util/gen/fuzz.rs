// Copyright 2019 Materialize, Inc. All rights reserved.
//
// This file is part of Materialize. Materialize may not be used or
// distributed without the express permission of Materialize, Inc.

// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `testdata/fuzz.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct TestRecord {
    // message fields
    pub int_field: i32,
    pub string_field: ::std::string::String,
    pub int64_field: i64,
    pub bytes_field: ::std::vec::Vec<u8>,
    pub color_field: Color,
    pub uint_field: u32,
    pub uint64_field: u64,
    pub float_field: f32,
    pub double_field: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestRecord {
    fn default() -> &'a TestRecord {
        <TestRecord as ::protobuf::Message>::default_instance()
    }
}

impl TestRecord {
    pub fn new() -> TestRecord {
        ::std::default::Default::default()
    }

    // int32 int_field = 1;


    pub fn get_int_field(&self) -> i32 {
        self.int_field
    }
    pub fn clear_int_field(&mut self) {
        self.int_field = 0;
    }

    // Param is passed by value, moved
    pub fn set_int_field(&mut self, v: i32) {
        self.int_field = v;
    }

    // string string_field = 2;


    pub fn get_string_field(&self) -> &str {
        &self.string_field
    }
    pub fn clear_string_field(&mut self) {
        self.string_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_field(&mut self, v: ::std::string::String) {
        self.string_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_field(&mut self) -> &mut ::std::string::String {
        &mut self.string_field
    }

    // Take field
    pub fn take_string_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.string_field, ::std::string::String::new())
    }

    // int64 int64_field = 3;


    pub fn get_int64_field(&self) -> i64 {
        self.int64_field
    }
    pub fn clear_int64_field(&mut self) {
        self.int64_field = 0;
    }

    // Param is passed by value, moved
    pub fn set_int64_field(&mut self, v: i64) {
        self.int64_field = v;
    }

    // bytes bytes_field = 4;


    pub fn get_bytes_field(&self) -> &[u8] {
        &self.bytes_field
    }
    pub fn clear_bytes_field(&mut self) {
        self.bytes_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes_field(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes_field(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes_field
    }

    // Take field
    pub fn take_bytes_field(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes_field, ::std::vec::Vec::new())
    }

    // .Color color_field = 5;


    pub fn get_color_field(&self) -> Color {
        self.color_field
    }
    pub fn clear_color_field(&mut self) {
        self.color_field = Color::RED;
    }

    // Param is passed by value, moved
    pub fn set_color_field(&mut self, v: Color) {
        self.color_field = v;
    }

    // uint32 uint_field = 6;


    pub fn get_uint_field(&self) -> u32 {
        self.uint_field
    }
    pub fn clear_uint_field(&mut self) {
        self.uint_field = 0;
    }

    // Param is passed by value, moved
    pub fn set_uint_field(&mut self, v: u32) {
        self.uint_field = v;
    }

    // uint64 uint64_field = 7;


    pub fn get_uint64_field(&self) -> u64 {
        self.uint64_field
    }
    pub fn clear_uint64_field(&mut self) {
        self.uint64_field = 0;
    }

    // Param is passed by value, moved
    pub fn set_uint64_field(&mut self, v: u64) {
        self.uint64_field = v;
    }

    // float float_field = 8;


    pub fn get_float_field(&self) -> f32 {
        self.float_field
    }
    pub fn clear_float_field(&mut self) {
        self.float_field = 0.;
    }

    // Param is passed by value, moved
    pub fn set_float_field(&mut self, v: f32) {
        self.float_field = v;
    }

    // double double_field = 9;


    pub fn get_double_field(&self) -> f64 {
        self.double_field
    }
    pub fn clear_double_field(&mut self) {
        self.double_field = 0.;
    }

    // Param is passed by value, moved
    pub fn set_double_field(&mut self, v: f64) {
        self.double_field = v;
    }
}

impl ::protobuf::Message for TestRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.int_field = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.string_field)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.int64_field = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_field)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.color_field, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.uint_field = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uint64_field = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.float_field = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.double_field = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.int_field != 0 {
            my_size += ::protobuf::rt::value_size(1, self.int_field, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.string_field.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.string_field);
        }
        if self.int64_field != 0 {
            my_size += ::protobuf::rt::value_size(3, self.int64_field, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bytes_field.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.bytes_field);
        }
        if self.color_field != Color::RED {
            my_size += ::protobuf::rt::enum_size(5, self.color_field);
        }
        if self.uint_field != 0 {
            my_size += ::protobuf::rt::value_size(6, self.uint_field, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.uint64_field != 0 {
            my_size += ::protobuf::rt::value_size(7, self.uint64_field, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.float_field != 0. {
            my_size += 5;
        }
        if self.double_field != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.int_field != 0 {
            os.write_int32(1, self.int_field)?;
        }
        if !self.string_field.is_empty() {
            os.write_string(2, &self.string_field)?;
        }
        if self.int64_field != 0 {
            os.write_int64(3, self.int64_field)?;
        }
        if !self.bytes_field.is_empty() {
            os.write_bytes(4, &self.bytes_field)?;
        }
        if self.color_field != Color::RED {
            os.write_enum(5, self.color_field.value())?;
        }
        if self.uint_field != 0 {
            os.write_uint32(6, self.uint_field)?;
        }
        if self.uint64_field != 0 {
            os.write_uint64(7, self.uint64_field)?;
        }
        if self.float_field != 0. {
            os.write_float(8, self.float_field)?;
        }
        if self.double_field != 0. {
            os.write_double(9, self.double_field)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestRecord {
        TestRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "int_field",
                    |m: &TestRecord| { &m.int_field },
                    |m: &mut TestRecord| { &mut m.int_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_field",
                    |m: &TestRecord| { &m.string_field },
                    |m: &mut TestRecord| { &mut m.string_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "int64_field",
                    |m: &TestRecord| { &m.int64_field },
                    |m: &mut TestRecord| { &mut m.int64_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bytes_field",
                    |m: &TestRecord| { &m.bytes_field },
                    |m: &mut TestRecord| { &mut m.bytes_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Color>>(
                    "color_field",
                    |m: &TestRecord| { &m.color_field },
                    |m: &mut TestRecord| { &mut m.color_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "uint_field",
                    |m: &TestRecord| { &m.uint_field },
                    |m: &mut TestRecord| { &mut m.uint_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "uint64_field",
                    |m: &TestRecord| { &m.uint64_field },
                    |m: &mut TestRecord| { &mut m.uint64_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "float_field",
                    |m: &TestRecord| { &m.float_field },
                    |m: &mut TestRecord| { &mut m.float_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "double_field",
                    |m: &TestRecord| { &m.double_field },
                    |m: &mut TestRecord| { &mut m.double_field },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestRecord>(
                    "TestRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestRecord {
        static mut instance: ::protobuf::lazy::Lazy<TestRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestRecord,
        };
        unsafe {
            instance.get(TestRecord::new)
        }
    }
}

impl ::protobuf::Clear for TestRecord {
    fn clear(&mut self) {
        self.int_field = 0;
        self.string_field.clear();
        self.int64_field = 0;
        self.bytes_field.clear();
        self.color_field = Color::RED;
        self.uint_field = 0;
        self.uint64_field = 0;
        self.float_field = 0.;
        self.double_field = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestRepeatedRecord {
    // message fields
    pub int_field: ::std::vec::Vec<i32>,
    pub double_field: ::std::vec::Vec<f64>,
    pub string_field: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestRepeatedRecord {
    fn default() -> &'a TestRepeatedRecord {
        <TestRepeatedRecord as ::protobuf::Message>::default_instance()
    }
}

impl TestRepeatedRecord {
    pub fn new() -> TestRepeatedRecord {
        ::std::default::Default::default()
    }

    // repeated int32 int_field = 1;


    pub fn get_int_field(&self) -> &[i32] {
        &self.int_field
    }
    pub fn clear_int_field(&mut self) {
        self.int_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_int_field(&mut self, v: ::std::vec::Vec<i32>) {
        self.int_field = v;
    }

    // Mutable pointer to the field.
    pub fn mut_int_field(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.int_field
    }

    // Take field
    pub fn take_int_field(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.int_field, ::std::vec::Vec::new())
    }

    // repeated double double_field = 2;


    pub fn get_double_field(&self) -> &[f64] {
        &self.double_field
    }
    pub fn clear_double_field(&mut self) {
        self.double_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_double_field(&mut self, v: ::std::vec::Vec<f64>) {
        self.double_field = v;
    }

    // Mutable pointer to the field.
    pub fn mut_double_field(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.double_field
    }

    // Take field
    pub fn take_double_field(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.double_field, ::std::vec::Vec::new())
    }

    // repeated string string_field = 3;


    pub fn get_string_field(&self) -> &[::std::string::String] {
        &self.string_field
    }
    pub fn clear_string_field(&mut self) {
        self.string_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_field(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.string_field = v;
    }

    // Mutable pointer to the field.
    pub fn mut_string_field(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.string_field
    }

    // Take field
    pub fn take_string_field(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.string_field, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TestRepeatedRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.int_field)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.double_field)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.string_field)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.int_field {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += 9 * self.double_field.len() as u32;
        for value in &self.string_field {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.int_field {
            os.write_int32(1, *v)?;
        };
        for v in &self.double_field {
            os.write_double(2, *v)?;
        };
        for v in &self.string_field {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestRepeatedRecord {
        TestRepeatedRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "int_field",
                    |m: &TestRepeatedRecord| { &m.int_field },
                    |m: &mut TestRepeatedRecord| { &mut m.int_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "double_field",
                    |m: &TestRepeatedRecord| { &m.double_field },
                    |m: &mut TestRepeatedRecord| { &mut m.double_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_field",
                    |m: &TestRepeatedRecord| { &m.string_field },
                    |m: &mut TestRepeatedRecord| { &mut m.string_field },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestRepeatedRecord>(
                    "TestRepeatedRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestRepeatedRecord {
        static mut instance: ::protobuf::lazy::Lazy<TestRepeatedRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestRepeatedRecord,
        };
        unsafe {
            instance.get(TestRepeatedRecord::new)
        }
    }
}

impl ::protobuf::Clear for TestRepeatedRecord {
    fn clear(&mut self) {
        self.int_field.clear();
        self.double_field.clear();
        self.string_field.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestRepeatedRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestRepeatedRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestNestedRecord {
    // message fields
    pub test_record: ::protobuf::SingularPtrField<TestRecord>,
    pub test_repeated_record: ::protobuf::SingularPtrField<TestRepeatedRecord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestNestedRecord {
    fn default() -> &'a TestNestedRecord {
        <TestNestedRecord as ::protobuf::Message>::default_instance()
    }
}

impl TestNestedRecord {
    pub fn new() -> TestNestedRecord {
        ::std::default::Default::default()
    }

    // .TestRecord test_record = 1;


    pub fn get_test_record(&self) -> &TestRecord {
        self.test_record.as_ref().unwrap_or_else(|| TestRecord::default_instance())
    }
    pub fn clear_test_record(&mut self) {
        self.test_record.clear();
    }

    pub fn has_test_record(&self) -> bool {
        self.test_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_record(&mut self, v: TestRecord) {
        self.test_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_record(&mut self) -> &mut TestRecord {
        if self.test_record.is_none() {
            self.test_record.set_default();
        }
        self.test_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_test_record(&mut self) -> TestRecord {
        self.test_record.take().unwrap_or_else(|| TestRecord::new())
    }

    // .TestRepeatedRecord test_repeated_record = 2;


    pub fn get_test_repeated_record(&self) -> &TestRepeatedRecord {
        self.test_repeated_record.as_ref().unwrap_or_else(|| TestRepeatedRecord::default_instance())
    }
    pub fn clear_test_repeated_record(&mut self) {
        self.test_repeated_record.clear();
    }

    pub fn has_test_repeated_record(&self) -> bool {
        self.test_repeated_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_test_repeated_record(&mut self, v: TestRepeatedRecord) {
        self.test_repeated_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_test_repeated_record(&mut self) -> &mut TestRepeatedRecord {
        if self.test_repeated_record.is_none() {
            self.test_repeated_record.set_default();
        }
        self.test_repeated_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_test_repeated_record(&mut self) -> TestRepeatedRecord {
        self.test_repeated_record.take().unwrap_or_else(|| TestRepeatedRecord::new())
    }
}

impl ::protobuf::Message for TestNestedRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.test_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.test_repeated_record {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.test_record)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.test_repeated_record)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.test_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.test_repeated_record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.test_record.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.test_repeated_record.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestNestedRecord {
        TestNestedRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestRecord>>(
                    "test_record",
                    |m: &TestNestedRecord| { &m.test_record },
                    |m: &mut TestNestedRecord| { &mut m.test_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestRepeatedRecord>>(
                    "test_repeated_record",
                    |m: &TestNestedRecord| { &m.test_repeated_record },
                    |m: &mut TestNestedRecord| { &mut m.test_repeated_record },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestNestedRecord>(
                    "TestNestedRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestNestedRecord {
        static mut instance: ::protobuf::lazy::Lazy<TestNestedRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestNestedRecord,
        };
        unsafe {
            instance.get(TestNestedRecord::new)
        }
    }
}

impl ::protobuf::Clear for TestNestedRecord {
    fn clear(&mut self) {
        self.test_record.clear();
        self.test_repeated_record.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestNestedRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNestedRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestRepeatedNestedRecord {
    // message fields
    pub test_record: ::protobuf::RepeatedField<TestRecord>,
    pub test_repeated_record: ::protobuf::RepeatedField<TestRepeatedRecord>,
    pub test_nested_record: ::protobuf::RepeatedField<TestNestedRecord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestRepeatedNestedRecord {
    fn default() -> &'a TestRepeatedNestedRecord {
        <TestRepeatedNestedRecord as ::protobuf::Message>::default_instance()
    }
}

impl TestRepeatedNestedRecord {
    pub fn new() -> TestRepeatedNestedRecord {
        ::std::default::Default::default()
    }

    // repeated .TestRecord test_record = 1;


    pub fn get_test_record(&self) -> &[TestRecord] {
        &self.test_record
    }
    pub fn clear_test_record(&mut self) {
        self.test_record.clear();
    }

    // Param is passed by value, moved
    pub fn set_test_record(&mut self, v: ::protobuf::RepeatedField<TestRecord>) {
        self.test_record = v;
    }

    // Mutable pointer to the field.
    pub fn mut_test_record(&mut self) -> &mut ::protobuf::RepeatedField<TestRecord> {
        &mut self.test_record
    }

    // Take field
    pub fn take_test_record(&mut self) -> ::protobuf::RepeatedField<TestRecord> {
        ::std::mem::replace(&mut self.test_record, ::protobuf::RepeatedField::new())
    }

    // repeated .TestRepeatedRecord test_repeated_record = 2;


    pub fn get_test_repeated_record(&self) -> &[TestRepeatedRecord] {
        &self.test_repeated_record
    }
    pub fn clear_test_repeated_record(&mut self) {
        self.test_repeated_record.clear();
    }

    // Param is passed by value, moved
    pub fn set_test_repeated_record(&mut self, v: ::protobuf::RepeatedField<TestRepeatedRecord>) {
        self.test_repeated_record = v;
    }

    // Mutable pointer to the field.
    pub fn mut_test_repeated_record(&mut self) -> &mut ::protobuf::RepeatedField<TestRepeatedRecord> {
        &mut self.test_repeated_record
    }

    // Take field
    pub fn take_test_repeated_record(&mut self) -> ::protobuf::RepeatedField<TestRepeatedRecord> {
        ::std::mem::replace(&mut self.test_repeated_record, ::protobuf::RepeatedField::new())
    }

    // repeated .TestNestedRecord test_nested_record = 3;


    pub fn get_test_nested_record(&self) -> &[TestNestedRecord] {
        &self.test_nested_record
    }
    pub fn clear_test_nested_record(&mut self) {
        self.test_nested_record.clear();
    }

    // Param is passed by value, moved
    pub fn set_test_nested_record(&mut self, v: ::protobuf::RepeatedField<TestNestedRecord>) {
        self.test_nested_record = v;
    }

    // Mutable pointer to the field.
    pub fn mut_test_nested_record(&mut self) -> &mut ::protobuf::RepeatedField<TestNestedRecord> {
        &mut self.test_nested_record
    }

    // Take field
    pub fn take_test_nested_record(&mut self) -> ::protobuf::RepeatedField<TestNestedRecord> {
        ::std::mem::replace(&mut self.test_nested_record, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TestRepeatedNestedRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.test_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.test_repeated_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.test_nested_record {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.test_record)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.test_repeated_record)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.test_nested_record)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.test_record {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.test_repeated_record {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.test_nested_record {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.test_record {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.test_repeated_record {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.test_nested_record {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestRepeatedNestedRecord {
        TestRepeatedNestedRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestRecord>>(
                    "test_record",
                    |m: &TestRepeatedNestedRecord| { &m.test_record },
                    |m: &mut TestRepeatedNestedRecord| { &mut m.test_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestRepeatedRecord>>(
                    "test_repeated_record",
                    |m: &TestRepeatedNestedRecord| { &m.test_repeated_record },
                    |m: &mut TestRepeatedNestedRecord| { &mut m.test_repeated_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestNestedRecord>>(
                    "test_nested_record",
                    |m: &TestRepeatedNestedRecord| { &m.test_nested_record },
                    |m: &mut TestRepeatedNestedRecord| { &mut m.test_nested_record },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestRepeatedNestedRecord>(
                    "TestRepeatedNestedRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestRepeatedNestedRecord {
        static mut instance: ::protobuf::lazy::Lazy<TestRepeatedNestedRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestRepeatedNestedRecord,
        };
        unsafe {
            instance.get(TestRepeatedNestedRecord::new)
        }
    }
}

impl ::protobuf::Clear for TestRepeatedNestedRecord {
    fn clear(&mut self) {
        self.test_record.clear();
        self.test_repeated_record.clear();
        self.test_nested_record.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestRepeatedNestedRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestRepeatedNestedRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Color {
    RED = 0,
    YELLOW = 1,
    BLUE = 2,
}

impl ::protobuf::ProtobufEnum for Color {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Color> {
        match value {
            0 => ::std::option::Option::Some(Color::RED),
            1 => ::std::option::Option::Some(Color::YELLOW),
            2 => ::std::option::Option::Some(Color::BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Color] = &[
            Color::RED,
            Color::YELLOW,
            Color::BLUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Color", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Color {
}

impl ::std::default::Default for Color {
    fn default() -> Self {
        Color::RED
    }
}

impl ::protobuf::reflect::ProtobufValue for Color {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13testdata/fuzz.proto\"\xbd\x02\n\nTestRecord\x12\x1b\n\tint_field\
    \x18\x01\x20\x01(\x05R\x08intField\x12!\n\x0cstring_field\x18\x02\x20\
    \x01(\tR\x0bstringField\x12\x1f\n\x0bint64_field\x18\x03\x20\x01(\x03R\n\
    int64Field\x12\x1f\n\x0bbytes_field\x18\x04\x20\x01(\x0cR\nbytesField\
    \x12'\n\x0bcolor_field\x18\x05\x20\x01(\x0e2\x06.ColorR\ncolorField\x12\
    \x1d\n\nuint_field\x18\x06\x20\x01(\rR\tuintField\x12!\n\x0cuint64_field\
    \x18\x07\x20\x01(\x04R\x0buint64Field\x12\x1f\n\x0bfloat_field\x18\x08\
    \x20\x01(\x02R\nfloatField\x12!\n\x0cdouble_field\x18\t\x20\x01(\x01R\
    \x0bdoubleField\"w\n\x12TestRepeatedRecord\x12\x1b\n\tint_field\x18\x01\
    \x20\x03(\x05R\x08intField\x12!\n\x0cdouble_field\x18\x02\x20\x03(\x01R\
    \x0bdoubleField\x12!\n\x0cstring_field\x18\x03\x20\x03(\tR\x0bstringFiel\
    d\"\x87\x01\n\x10TestNestedRecord\x12,\n\x0btest_record\x18\x01\x20\x01(\
    \x0b2\x0b.TestRecordR\ntestRecord\x12E\n\x14test_repeated_record\x18\x02\
    \x20\x01(\x0b2\x13.TestRepeatedRecordR\x12testRepeatedRecord\"\xd0\x01\n\
    \x18TestRepeatedNestedRecord\x12,\n\x0btest_record\x18\x01\x20\x03(\x0b2\
    \x0b.TestRecordR\ntestRecord\x12E\n\x14test_repeated_record\x18\x02\x20\
    \x03(\x0b2\x13.TestRepeatedRecordR\x12testRepeatedRecord\x12?\n\x12test_\
    nested_record\x18\x03\x20\x03(\x0b2\x11.TestNestedRecordR\x10testNestedR\
    ecord*&\n\x05Color\x12\x07\n\x03RED\x10\0\x12\n\n\x06YELLOW\x10\x01\x12\
    \x08\n\x04BLUE\x10\x02b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
