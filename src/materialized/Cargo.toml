[package]
name = "materialized"
description = "Streaming SQL materialized views."
version = "0.5.4-dev"
edition = "2018"
publish = false
default-run = "materialized"
# required for cargo-deb
authors = ["Materialize, Inc."]
license = "proprietary"

[dependencies]
anyhow = "1.0.34"
askama = { version = "0.10.5", features = ["serde-json"] }
async-trait = "0.1.42"
backtrace = { version = "0.3.54" }
build-info = { path = "../build-info" }
cfg-if = "1.0.0"
comm = { path = "../comm" }
compile-time-run = "0.2.11"
coord = { path = "../coord" }
dataflow = { path = "../dataflow" }
dataflow-types = { path = "../dataflow-types" }
futures = "0.3"
getopts = "0.2"
hex = "0.4"
hyper = "0.13.9"
include_dir = "0.6.0"
itertools = "0.9"
krb5-src = { version = "0.2.3", features = ["binaries"] }
lazy_static = "1.4.0"
log = "0.4.11"
mz-process-collector = { path = "../mz-process-collector" }
num_cpus = "1.0"
openssl = { version = "0.10.30", features = ["vendored"] }
openssl-sys = { version = "0.9.58", features = ["vendored"] }
ore = { path = "../ore" }
os_info = "3.0.1"
parse_duration = "2.1.0"
postgres_array = "0.10.0"
postgres-openssl = "0.3.0"
pgwire = { path = "../pgwire" }
prof = { path = "../prof", features = ["auto-jemalloc"] }
prometheus = { git = "https://github.com/MaterializeInc/rust-prometheus.git", default-features = false }
rdkafka-sys = { git = "https://github.com/fede1024/rust-rdkafka.git", features = ["cmake-build", "libz-static"] }
repr = { path = "../repr" }
reqwest = { version = "0.10.8", features = ["json"] }
rlimit = "0.5.2"
semver = "0.9"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1"
shell-words = "1.0"
sql = { path = "../sql" }
sql-parser = { path = "../sql-parser" }
sysctl = "0.4.0"
sysinfo = "0.15.3"
tempfile = "3.1"
tokio = { version = "0.2", features = ["sync"] }
tokio-openssl = "0.4.0"
tracing = "0.1.21"
tracing-subscriber = "0.2.7"
url = "2"

[dev-dependencies]
assert_cmd = "1.0.2"
chrono = "0.4"
datadriven = "0.4"
fallible-iterator = "0.2.0"
itertools = "0.9"
pgrepr = { path = "../pgrepr" }
pgtest = { path = "../pgtest" }
postgres = { version = "0.17", features = ["with-chrono-0_4"] }
predicates = "1.0.5"
repr = { path = "../repr" }
reqwest = { version = "0.10.8", features = ["blocking"] }
serde_json = "1"
tokio-postgres = { version = "0.5.5", features = ["with-chrono-0_4"] }

[features]
# When enabled, static assets for the web UI are loaded from disk on every HTTP
# request rather than compiled into the binary. This vastly speeds up the
# iteration cycle when developing the web UI.
#
# WARNING: For development use only! When enabled, may allow unrestricted read
# access to the file system.
dev-web = []

[target.'cfg(not(target_os = "macos"))'.dependencies]
# According to jemalloc developers, `background_threads` should always be
# enabled, except in "esoteric" situations that don't apply to Materialize
# (Namely: if the application relies on new threads not being created for whatever reason)
#
# See: https://github.com/jemalloc/jemalloc/issues/956#issuecomment-316224733
jemallocator = { version = "0.3", features = ["profiling", "unprefixed_malloc_on_supported_platforms", "background_threads"] }

[package.metadata.deb]
depends = "$auto"
conflicts = "materialized"
assets = [
    ["../../misc/dist/materialized.service", "lib/systemd/system/", "644"],
    ["target/release/materialized", "usr/bin/", "755"]
]
maintainer-scripts = "misc/dist/deb-scripts"

[package.metadata.deb.variants.materialized]
name = "materialized"
conflicts = "materialized-unstable"

[package.metadata.deb.variants.materialized-unstable]
name = "materialized-unstable"
conflicts = "materialized"
