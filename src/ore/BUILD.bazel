# Code generated by cargo-gazelle DO NOT EDIT

# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

load("@crates_io//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//cargo:defs.bzl", "extract_cargo_lints")
load("@rules_rust//rust:defs.bzl", "rust_doc_test", "rust_library", "rust_test")

package(default_visibility = ["//visibility:public"])

rust_library(
    name = "mz_ore",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(
        normal = True,
        proc_macro = True,
    ),
    compile_data = [],
    crate_features = [
        "anyhow",
        "assert",
        "async",
        "async-trait",
        "bytemuck",
        "bytes",
        "capture",
        "chrono",
        "clap",
        "cli",
        "columnar",
        "columnation",
        "compact_bytes",
        "console-subscriber",
        "ctor",
        "default",
        "derivative",
        "differential-dataflow",
        "futures",
        "hibitset",
        "http",
        "hyper-tls",
        "hyper-util",
        "id_gen",
        "lgalloc",
        "libc",
        "metrics",
        "native-tls",
        "network",
        "num-traits",
        "openssl",
        "opentelemetry",
        "opentelemetry-otlp",
        "opentelemetry_sdk",
        "parquet",
        "process",
        "prometheus",
        "proptest",
        "proptest-derive",
        "rand",
        "region",
        "sentry",
        "sentry-tracing",
        "smallvec",
        "stack",
        "stacker",
        "test",
        "tokio",
        "tokio-console",
        "tokio-native-tls",
        "tokio-openssl",
        "tonic",
        "tracing",
        "tracing-capture",
        "tracing-opentelemetry",
        "tracing-subscriber",
        "uuid",
        "yansi",
    ],
    data = [],
    lint_config = ":lints",
    proc_macro_deps = ["//src/ore-proc:mz_ore_proc"] + all_crate_deps(proc_macro = True),
    rustc_env = {},
    rustc_flags = [],
    version = "0.1.0",
    deps = [] + all_crate_deps(normal = True),
)

alias(
    name = "ore",
    actual = "mz_ore",
)

rust_test(
    name = "mz_ore_lib_tests",
    size = "medium",
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate = ":mz_ore",
    crate_features = [
        "anyhow",
        "assert",
        "async",
        "async-trait",
        "bytemuck",
        "bytes",
        "capture",
        "chrono",
        "clap",
        "cli",
        "columnar",
        "columnation",
        "compact_bytes",
        "console-subscriber",
        "ctor",
        "default",
        "derivative",
        "differential-dataflow",
        "futures",
        "hibitset",
        "http",
        "hyper-tls",
        "hyper-util",
        "id_gen",
        "lgalloc",
        "libc",
        "metrics",
        "native-tls",
        "network",
        "num-traits",
        "openssl",
        "opentelemetry",
        "opentelemetry-otlp",
        "opentelemetry_sdk",
        "parquet",
        "process",
        "prometheus",
        "proptest",
        "proptest-derive",
        "rand",
        "region",
        "sentry",
        "sentry-tracing",
        "smallvec",
        "stack",
        "stacker",
        "test",
        "tokio",
        "tokio-console",
        "tokio-native-tls",
        "tokio-openssl",
        "tonic",
        "tracing",
        "tracing-capture",
        "tracing-opentelemetry",
        "tracing-subscriber",
        "uuid",
        "yansi",
    ],
    data = [],
    env = {},
    lint_config = ":lints",
    proc_macro_deps = ["//src/ore-proc:mz_ore_proc"] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.1.0",
    deps = ["//src/ore:mz_ore"] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_doc_test(
    name = "mz_ore_doc_test",
    crate = ":mz_ore",
    deps = ["//src/ore:mz_ore"] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_ore_future_tests",
    size = "large",
    srcs = ["tests/future.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "future",
    data = [],
    env = {},
    lint_config = ":lints",
    proc_macro_deps = ["//src/ore-proc:mz_ore_proc"] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.1.0",
    deps = ["//src/ore:mz_ore"] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_ore_panic_tests",
    size = "large",
    srcs = ["tests/panic.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "panic",
    data = [],
    env = {},
    lint_config = ":lints",
    proc_macro_deps = ["//src/ore-proc:mz_ore_proc"] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.1.0",
    deps = ["//src/ore:mz_ore"] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

rust_test(
    name = "mz_ore_task_tests",
    size = "large",
    srcs = ["tests/task.rs"],
    aliases = aliases(
        normal = True,
        normal_dev = True,
        proc_macro = True,
        proc_macro_dev = True,
    ),
    compile_data = [],
    crate_features = [],
    crate_name = "task",
    data = [],
    env = {},
    lint_config = ":lints",
    proc_macro_deps = ["//src/ore-proc:mz_ore_proc"] + all_crate_deps(
        proc_macro = True,
        proc_macro_dev = True,
    ),
    rustc_env = {},
    rustc_flags = [],
    version = "0.1.0",
    deps = ["//src/ore:mz_ore"] + all_crate_deps(
        normal = True,
        normal_dev = True,
    ),
)

extract_cargo_lints(
    name = "lints",
    manifest = "Cargo.toml",
    workspace = "@//:Cargo.toml",
)
