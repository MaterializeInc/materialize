[package]
name = "mz-ore"
description = "Internal utility libraries for Materialize."
version = "0.1.0"
license = "Apache-2.0"
edition.workspace = true
rust-version.workspace = true
authors = ["Materialize, Inc."]

[dependencies]
anyhow = { workspace = true, optional = true }
# NB: ore is meant to be an extension of the Rust stdlib. To keep it
# lightweight, dependencies on external crates should be avoided if possible. If
# an external crate is required, it must be optional and feature-gated.
#
# The only exception to the above is the `either` crate, which itself has zero
# dependencies and is widely considered to be basically part of the stdlib.
async-trait = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }
chrono = { workspace = true, features = ["std"], optional = true }
clap = { workspace = true, features = ["env"], optional = true }
ctor = { workspace = true, optional = true }
either = { workspace = true }
futures = { workspace = true, optional = true }
once_cell = { workspace = true }
# The vendored feature is transitively depended upon by tokio-openssl.
openssl = { workspace = true, features = ["vendored"], optional = true }
paste = { workspace = true }
pin-project = { workspace = true }
prometheus = { workspace = true, optional = true }
smallvec = { workspace = true, optional = true }
stacker = { workspace = true, optional = true }
sentry = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"], optional = true }
tokio = { workspace = true, features = ["io-util", "net", "rt-multi-thread", "time"], optional = true }
tokio-openssl = { workspace = true, optional = true }
# TODO(guswynn): determine, when, if ever, we can remove `tracing-log`
# The `tracing-log` feature here is load-bearing: While our busiest-logging dependency (`rdkafka`) is now hooked-up
# to use `tracing`, we cannot remove this feature until we guarantee no dependencies log using the `log` crate, for
# log lines we care about.
# Note that this feature is distinct from `tracing`'s `log` feature, which has `tracing` macros emit `log` records if
# there is no global `tracing` subscriber.
tracing-subscriber = { workspace = true, features = ["env-filter", "fmt", "json", "tracing-log"], optional = true }
workspace-hack = { version = "0.0.0", path = "../workspace-hack", optional = true }


# For the `tracing` feature
atty = { workspace = true, optional = true }
http = { workspace = true, optional = true }
tracing = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
tonic = { workspace = true, features = ["transport"], optional = true }
tokio-native-tls = { workspace = true, optional = true }
native-tls = { workspace = true, features = ["alpn"], optional = true }
hyper = { workspace = true, features = ["http1", "server"], optional = true }
hyper-tls = { workspace = true, optional = true }
opentelemetry = { workspace = true, features = ["rt-tokio", "trace"], optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
console-subscriber = { workspace = true, optional = true }
sentry-tracing = { workspace = true, optional = true }
yansi = { workspace = true, optional = true }

[dev-dependencies]
anyhow = { workspace = true }
scopeguard = { workspace = true }
proptest = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }
tokio-test = { workspace = true }

[features]
default = ["workspace-hack"]
async = ["async-trait", "futures", "openssl", "tokio-openssl", "tokio"]
bytes_ = ["bytes", "smallvec", "smallvec/const_generics"]
network = ["async", "bytes", "hyper", "smallvec", "tonic", "tracing"]
tracing_ = [
  "anyhow",
  "atty",
  "tracing",
  "tracing-subscriber",
  "tracing-subscriber/ansi",
  "tracing-opentelemetry",
  "tokio-native-tls",
  "serde",
  "native-tls",
  "http",
  "hyper",
  "hyper-tls",
  "opentelemetry",
  "opentelemetry-otlp",
  "tonic",
  "sentry",
  "sentry-tracing",
  "yansi",
]
tokio-console = ["console-subscriber", "tokio", "tokio/tracing"]
cli = ["clap"]
stack = ["stacker"]
test = ["anyhow", "ctor", "tracing-subscriber"]
metrics = ["prometheus"]

[[test]]
name = "future"
required-features = ["async"]

[package.metadata.cargo-udeps.ignore]
normal = ["workspace-hack"]
