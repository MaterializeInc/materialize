# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This config supports bash-like environment variables, e.g.
# `${ENV_VAR:-default}`. The `default` value is optional, but `peeker`
# panics if the `ENV_VAR` is not present and no default value is provided.

[[sources]]
kafka_broker = "${KAFKA_HOST:-kafka}:${KAFKA_EXTERNAL_PORT:-9092}"
schema_registry = "http://${SR_HOST:-schema-registry}:8081"
topic_namespace = "debezium.tpcch."
materialized = false
names = [
    "customer",
    "item",
    "nation",
    "neworder",
    "order",
    "orderline",
    "stock",
    "supplier",

    # make these materialized once we support materialized sources
    "history",
    "district",
    "region",
    "warehouse",
]

[default_query]
# Spin up this many threads querying this view
# This affects the ratio of times this query is executed vs other queries
thread_count = 1

[default_query.sleep]
secs = 0
nanos = 0

[[groups]]
# group settings override per-query enabled, enable/disable groups with the `-q` flag,
# same as queries
#
# Groups spin up thread_count threads, and then within a thread go through each query in
# a continuous loop
name = "fast-complicated"
queries = ["q01", "q03", "q17", "q22"]
# default values for groups:
thread_count = 1
enabled = true

[groups.sleep]
secs = 0
nanos = 0

[[groups]]
name = "loadtest"
queries = ["q01", "q02", "q05", "q06", "q08", "q09", "q12", "q14", "q17", "q19"]
thread_count = ${OLAP_THREADS:-5}

[[groups]]
name = "count-sources"
queries = ["count_customer", "count_item", "count_nation", "count_neworder", "count_order", "count_orderline", "count_stock", "count_supplier",
           "count_history", "count_district", "count_region", "count_warehouse"]
thread_count = ${OLAP_THREADS:-5}

[[groups]]
name = "benchmark"
queries = ["q01", "q02", "q03", "q04", "q05", "q06", "q07", "q08", "q09", "q10", "q11", "q12", "q13", "q14", "q15", "q16", "q17", "q18", "q19", "q20", "q21", "q22"]
thread_count = ${OLAP_THREADS:-1}

[[queries]]
name = "q01"
enabled = true
query = """
SELECT
    ol_number,
    sum(ol_quantity) AS sum_qty,
    sum(ol_amount) AS sum_amount,
    avg(ol_quantity) AS avg_qty,
    avg(ol_amount) AS avg_amount,
    count(*) AS count_order
FROM orderline
WHERE ol_delivery_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_number
ORDER BY ol_number
"""
sources = ["orderline"]


[[queries]]
name = "q02"
query = """
SELECT su_suppkey, su_name, n_name, i_id, i_name, su_address, su_phone, su_comment
FROM
    item, supplier, stock, nation, region,
    (
        SELECT
            s_i_id AS m_i_id,
            min(s_quantity) AS m_s_quantity
        FROM stock, supplier, nation, region
        WHERE s_su_suppkey = su_suppkey
        AND su_nationkey = n_nationkey
        AND n_regionkey = r_regionkey
        AND r_name like 'EUROP%'
        GROUP BY s_i_id
    ) m
WHERE i_id = s_i_id
  AND s_su_suppkey = su_suppkey
  AND su_nationkey = n_nationkey
  AND n_regionkey = r_regionkey
  AND i_data like '%b'
  AND r_name like 'EUROP%'
  AND i_id = m_i_id
  AND s_quantity = m_s_quantity
ORDER BY n_name, su_name, i_id
"""
sources = ["item", "nation", "region", "stock", "supplier"]

[queries.sleep]
secs = 1
nanos = 0

[[queries]]
name = "q03"
query = """
SELECT ol_o_id, ol_w_id, ol_d_id, sum(ol_amount) AS revenue, o_entry_d
FROM customer, neworder, "order", orderline
WHERE c_state LIKE 'A%'
  AND c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND no_w_id = o_w_id
  AND no_d_id = o_d_id
  AND no_o_id = o_id
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND o_entry_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_o_id, ol_w_id, ol_d_id, o_entry_d
ORDER BY revenue DESC, o_entry_d
"""
sources = ["customer", "neworder", "order", "orderline"]

[[queries]]
name = "q04"
query = """
SELECT o_ol_cnt, count(*) AS order_count
FROM "order"
WHERE o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
  AND o_entry_d < TIMESTAMP '2020-01-02 00:00:00.000000'
  AND EXISTS (
    SELECT *
    FROM orderline
    WHERE o_id = ol_o_id
    AND o_w_id = ol_w_id
    AND o_d_id = ol_d_id
    AND ol_delivery_d >= o_entry_d
)
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt
"""
sources = ["order", "orderline"]

[[queries]]
name = "q05"
query = """
SELECT
    n_name,
    sum(ol_amount) AS revenue
FROM customer, "order", orderline, stock, supplier, nation, region
WHERE c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND ol_o_id = o_id
  AND ol_w_id = o_w_id
  AND ol_d_id=o_d_id
  AND ol_w_id = s_w_id
  AND ol_i_id = s_i_id
  AND s_su_suppkey = su_suppkey
  AND c_n_nationkey = su_nationkey
  AND su_nationkey = n_nationkey
  AND n_regionkey = r_regionkey
  AND r_name = 'EUROPE'
  AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY n_name
ORDER BY revenue DESC;
"""
sources = ["customer", "nation", "order", "orderline", "region", "stock", "supplier"]

[[queries]]
name = "q06"
query = """
SELECT sum(ol_amount) AS revenue
FROM orderline
WHERE ol_delivery_d >= TIMESTAMP '1999-01-01 00:00:00.000000'
  AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
  AND ol_quantity BETWEEN 1 AND 100000;
"""
sources = ["orderline"]

[[queries]]
name = "q07"
query = """
SELECT
    su_nationkey AS supp_nation,
    substr(c_state,1,1) AS cust_nation,
    extract(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS revenue
FROM
    supplier,
    stock,
    orderline,
    "order",
    customer,
    nation n1,
    nation n2
WHERE ol_supply_w_id = s_w_id
  AND ol_i_id = s_i_id
  AND s_su_suppkey = su_suppkey
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND su_nationkey = n1.n_nationkey
  AND c_n_nationkey = n2.n_nationkey
  AND (
      (n1.n_name = 'GERMANY' AND n2.n_name = 'CAMBODIA')
      OR
      (n1.n_name = 'CAMBODIA' AND n2.n_name = 'GERMANY')
  )
  AND ol_delivery_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2020-01-02 00:00:00.000000'
GROUP BY su_nationkey, substr(c_state, 1, 1), extract(year FROM o_entry_d)
ORDER BY su_nationkey, cust_nation, l_year;
"""
sources = ["customer", "nation", "order", "orderline", "stock", "supplier"]

[[queries]]
name = "q08"
query = """
SELECT
    extract(year FROM o_entry_d) AS l_year,
    sum(CASE WHEN n2.n_name = 'GERMANY' THEN ol_amount ELSE 0 END) / CASE WHEN sum(ol_amount) = 0 THEN 1 ELSE sum(ol_amount) END AS mkt_share
FROM item, supplier, stock, orderline, "order", customer, nation n1, nation n2, region
WHERE i_id = s_i_id
  AND ol_i_id = s_i_id
  AND ol_supply_w_id = s_w_id
  AND s_su_suppkey = su_suppkey
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND n1.n_nationkey = c_n_nationkey
  AND n1.n_regionkey = r_regionkey
  AND ol_i_id < 1000
  AND r_name = 'EUROPE'
  AND su_nationkey = n2.n_nationkey
  AND o_entry_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2020-01-02 00:00:00.000000'
  AND i_data like '%b'
  AND i_id = ol_i_id
GROUP BY extract(year FROM o_entry_d)
ORDER BY l_year;
"""
sources = ["customer", "item", "nation", "order", "orderline", "region", "stock", "supplier"]

[[queries]]
name = "q09"
query = """
SELECT
    n_name, extract(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS sum_profit
FROM item, stock, supplier, orderline, "order", nation
WHERE ol_i_id = s_i_id
  AND ol_supply_w_id = s_w_id
  AND s_su_suppkey = su_suppkey
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND ol_i_id = i_id
  AND su_nationkey = n_nationkey
  AND i_data like '%BB'
GROUP BY n_name, extract(year FROM o_entry_d)
ORDER BY n_name, l_year DESC;
"""
sources = ["item", "nation", "order", "orderline", "stock", "supplier"]

[[queries]]
name = "q10"
query = """
SELECT
    c_id, c_last, sum(ol_amount) AS revenue, c_city, c_phone, n_name
FROM customer, "order", orderline, nation
WHERE c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
  AND o_entry_d <= ol_delivery_d
  AND n_nationkey = c_n_nationkey
GROUP BY c_id, c_last, c_city, c_phone, n_name
ORDER BY revenue DESC;
"""
sources = ["customer", "nation", "order", "orderline"]

[[queries]]
name = "q11"
query = """
SELECT s_i_id, sum(s_order_cnt) AS ordercount
FROM stock, supplier, nation
WHERE s_su_suppkey = su_suppkey
  AND su_nationkey = n_nationkey
  AND n_name = 'GERMANY'
GROUP BY s_i_id
HAVING sum(s_order_cnt) > (
    SELECT sum(s_order_cnt) * 0.005
    FROM stock, supplier, nation
    WHERE s_su_suppkey = su_suppkey
    AND su_nationkey = n_nationkey
    AND n_name = 'GERMANY'
)
ORDER BY ordercount DESC;
"""
sources = ["nation", "stock", "supplier"]

[[queries]]
name = "q12"
query = """
SELECT
    o_ol_cnt,
    sum(CASE WHEN o_carrier_id = 1 OR o_carrier_id = 2 THEN 1 ELSE 0 END) AS high_line_count,
    sum(CASE WHEN o_carrier_id <> 1 AND o_carrier_id <> 2 THEN 1 ELSE 0 END) AS low_line_count
FROM
    "order", orderline
WHERE ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
  AND o_entry_d <= ol_delivery_d
  AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt;
"""
sources = ["order", "orderline"]

[[queries]]
name = "q13"
query = """
SELECT
    c_count, count(*) AS custdist
FROM (
    SELECT c_id, count(o_id) as c_count
    FROM customer
    LEFT OUTER JOIN "order" ON (
        c_w_id = o_w_id AND c_d_id = o_d_id AND c_id = o_c_id AND o_carrier_id > 8
    )
    GROUP BY c_id
) AS c_orders
GROUP BY c_count
ORDER BY custdist DESC, c_count DESC;
"""
sources = ["customer", "order"]

[[queries]]
name = "q14"
query = """
SELECT
    100.00 * sum(CASE WHEN i_data LIKE 'PR%' THEN ol_amount ELSE 0 END) / (1 + sum(ol_amount)) AS promo_revenue
FROM orderline, item
WHERE ol_i_id = i_id
  AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
  AND ol_delivery_d < TIMESTAMP '2020-01-02 00:00:00.000000'
"""
sources = ["item", "orderline"]

[[queries]]
name = "q15"
query = """
SELECT su_suppkey, su_name, su_address, su_phone, total_revenue
FROM
    supplier,
    (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
        FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
WHERE su_suppkey = supplier_no
  AND total_revenue = (
    SELECT max(total_revenue)
    FROM (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
            FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
)
ORDER BY su_suppkey;
"""
sources = ["orderline", "stock", "supplier"]

[[queries]]
name = "q16"
query = """
SELECT
    i_name,
    substr(i_data, 1, 3) AS brand,
    i_price,
    count(DISTINCT s_su_suppkey) AS supplier_cnt
FROM stock, item
WHERE i_id = s_i_id
  AND i_data NOT LIKE 'zz%'
  AND (
    s_su_suppkey NOT IN (SELECT su_suppkey FROM supplier WHERE su_comment like '%bad%')
)
GROUP BY i_name, substr(i_data, 1, 3), i_price
ORDER BY supplier_cnt DESC;
"""
sources = ["item", "stock", "supplier"]

[[queries]]
name = "q17"
query = """
SELECT
    sum(ol_amount) / 2.0 AS avg_yearly
FROM
    orderline,
    (
        SELECT i_id, avg(ol_quantity) AS a
        FROM item, orderline
        WHERE i_data LIKE '%b' AND ol_i_id = i_id
        GROUP BY i_id
    ) t
WHERE ol_i_id = t.i_id
  AND ol_quantity < t.a;
"""
sources = ["item", "orderline"]

[[queries]]
name = "q18"
query = """
SELECT c_last, c_id, o_id, o_entry_d, o_ol_cnt, sum(ol_amount) ol_amount_sum
FROM customer, "order", orderline
WHERE c_id = o_c_id
  AND c_w_id = o_w_id
  AND c_d_id = o_d_id
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_o_id = o_id
GROUP BY o_id, o_w_id, o_d_id, c_id, c_last, o_entry_d, o_ol_cnt
HAVING sum(ol_amount) > 200
ORDER BY sum(ol_amount);
"""
sources = ["customer", "order", "orderline"]

[[queries]]
name = "q19"
query = """
SELECT sum(ol_amount) AS revenue
FROM orderline, item
WHERE (
    ol_i_id = i_id
    AND i_data LIKE '%a'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 2, 3)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%b'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id IN (1, 2, 4)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%c'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 5, 3)
)
"""
sources = ["item", "orderline"]

[[queries]]
name = "q20"
query = """
SELECT su_name, su_address
FROM supplier, nation
WHERE su_suppkey IN (
    SELECT mod(s_i_id * s_w_id, 10000)
    FROM stock, orderline
    WHERE s_i_id IN (SELECT i_id FROM item WHERE i_data LIKE 'co%')
    AND ol_i_id = s_i_id
    AND ol_delivery_d > TIMESTAMP '2010-05-23 12:00:00'
    GROUP BY s_i_id, s_w_id, s_quantity
    HAVING 2 * s_quantity > sum(ol_quantity)
)
  AND su_nationkey = n_nationkey
  AND n_name = 'GERMANY'
ORDER BY su_name;
"""
sources = ["item", "nation", "orderline", "stock", "supplier"]

[[queries]]
name = "q21"
query = """
SELECT
    su_name, count(*) as numwait
FROM
    supplier, orderline l1, "order", stock, nation
WHERE ol_o_id = o_id
  AND ol_w_id = o_w_id
  AND ol_d_id = o_d_id
  AND ol_w_id = s_w_id
  AND ol_i_id = s_i_id
  AND s_su_suppkey = su_suppkey
  AND l1.ol_delivery_d > o_entry_d
  AND NOT EXISTS (
    SELECT *
    FROM orderline l2
    WHERE l2.ol_o_id = l1.ol_o_id
    AND l2.ol_w_id = l1.ol_w_id
    AND l2.ol_d_id = l1.ol_d_id
    AND l2.ol_delivery_d > l1.ol_delivery_d
)
  AND su_nationkey = n_nationkey
  AND n_name = 'GERMANY'
GROUP BY su_name
ORDER BY numwait DESC, su_name;
"""
sources = ["nation", "order", "orderline", "stock", "supplier"]

[[queries]]
name = "q22"
query = """
SELECT
    substr(c_state, 1, 1) AS country,
    count(*) AS numcust,
    sum(c_balance) AS totacctbal
FROM customer
WHERE substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
  AND c_balance > (
    SELECT avg(c_balance)
    FROM customer
    WHERE c_balance > 0.00
    AND substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
)
  AND NOT EXISTS (
    SELECT *
    FROM "order"
    WHERE o_c_id = c_id AND o_w_id = c_w_id AND o_d_id = c_d_id
)
GROUP BY substr(c_state, 1, 1)
ORDER BY substr(c_state, 1, 1);
"""
sources = ["customer", "order"]

[[queries]]
name = "count_customer"
query = """
SELECT
    count(*) AS num_customers
FROM customer;
"""
sources = ["customer"]

[[queries]]
name = "count_item"
query = """
SELECT
    count(*) AS num_items
FROM item;
"""
sources = ["item"]

[[queries]]
name = "count_nation"
query = """
SELECT
    count(*) AS num_nations
FROM nation;
"""
sources = ["nation"]

[[queries]]
name = "count_neworder"
query = """
SELECT
    count(*) AS num_neworders
FROM neworder;
"""
sources = ["neworder"]

[[queries]]
name = "count_order"
query = """
SELECT
    count(*) AS num_orders
FROM order;
"""
sources = ["order"]

[[queries]]
name = "count_orderline"
query = """
SELECT
    count(*) AS num_orderlines
FROM orderline;
"""
sources = ["orderline"]

[[queries]]
name = "count_stock"
query = """
SELECT
    count(*) AS num_stocks
FROM stock;
"""
sources = ["stock"]

[[queries]]
name = "count_supplier"
query = """
SELECT
    count(*) AS num_suppliers
FROM supplier;
"""
sources = ["supplier"]

[[queries]]
name = "count_history"
query = """
SELECT
    count(*) AS num_historys
FROM history;
"""
sources = ["history"]

[[queries]]
name = "count_district"
query = """
SELECT
    count(*) AS num_districts
FROM district;
"""
sources = ["district"]

[[queries]]
name = "count_region"
query = """
SELECT
    count(*) AS num_regions
FROM region;
"""
sources = ["region"]

[[queries]]
name = "count_warehouse"
query = """
SELECT
    count(*) AS num_warehouses
FROM warehouse;
"""
sources = ["warehouse"]
