[package]
name = "mz-persist-client"
description = "Client for Materialize pTVC durability system"
version = "0.55.0-dev"
edition.workspace = true
rust-version.workspace = true
publish = false
autobins = false
autoexamples = false
# Since we intentionally will only ever have one bench target, auto discovery of
# benches is unnecessary. Turning it off allows us to have helper code in
# src/benches.
autobenches = false

# Disable the ability to use benches in the library because the bench harness
# isn't overridable there and the stock one prevents using Criterion specific
# flags, e.g. `cargo bench -p persist -- --baseline=foo`.
[lib]
bench = false

# We intentionally have only a single bench target because it saves on linking
# time.
[[bench]]
name = "benches"
harness = false

[[example]]
name = "persistcli"
bench = false

[dependencies]
anyhow = { workspace = true, features = ["backtrace"] }
async-stream = { workspace = true }
async-trait = { workspace = true }
bytes = { workspace = true }
clap = { workspace = true, features = [ "derive" ] }
differential-dataflow = { workspace = true }
futures = { workspace = true }
futures-util = { workspace = true }
h2 = { workspace = true }
mz-build-info = { workspace = true }
mz-ore = { workspace = true, features = ["bytes_", "test", "tracing_"] }
mz-persist = { workspace = true }
mz-persist-types = { workspace = true }
mz-proto = { workspace = true }
mz-timely-util = { workspace = true }
prometheus = { workspace = true, default-features = false }
proptest = { workspace = true, default-features = false, features = ["std"] }
proptest-derive = { workspace = true, features = ["boxed_union"]}
prost = { workspace = true, features = ["no-recursion-limit"] }
sentry-tracing = { workspace = true }
semver = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
timely = { workspace = true, default-features = false, features = ["bincode"] }
thiserror = { workspace = true }
tokio = { workspace = true, default-features = false, features = ["macros", "sync", "rt", "rt-multi-thread", "time"] }
tokio-stream = { workspace = true }
tonic = { workspace = true }
tracing = { workspace = true }
uuid = { workspace = true, features = ["v4"] }
workspace-hack = { version = "0.0.0", path = "../workspace-hack" }

[features]
tokio-console = ["mz-ore/tokio-console"]

[dev-dependencies]
async-trait = { workspace = true }
axum = { workspace = true }
clap = { workspace = true, features = ["derive", "env"] }
criterion = { workspace = true, features = ["html_reports"] }
datadriven = { workspace = true, features = ["async"] }
futures-task = { workspace = true }
humantime = { workspace = true }
mz-http-util = { workspace = true }
mz-orchestrator-tracing = { workspace = true }
mz-ore = { workspace = true, features = ["network", "tracing_", "test"] }
num_cpus = { workspace = true }
num_enum = { workspace = true }
serde_json = { workspace = true }
tempfile = { workspace = true }

[build-dependencies]
prost-build = { workspace = true }
protobuf-src = { workspace = true }
tonic-build = { workspace = true }

[package.metadata.cargo-udeps.ignore]
normal = ["workspace-hack"]
