// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

package mz_persist_client.internal.state;

import "persist/src/persist.proto";

message ProtoU64Antichain {
    repeated int64 elements = 1;
}

message ProtoU64Description {
    ProtoU64Antichain lower = 1;
    ProtoU64Antichain upper = 2;
    ProtoU64Antichain since = 3;
}

message ProtoHollowBatchPart {
   oneof kind {
        string key = 1;
        bytes inline = 5;
    }
    ProtoU64Antichain ts_rewrite = 4;

    // Only set when Kind is Key
    uint64 encoded_size_bytes = 2;
    bytes key_lower = 3;
    optional bytes key_stats = 536870906;

    reserved 536870907 to 536870911;
}

message ProtoInlineBatchPart {
    ProtoU64Description desc = 1;
    uint64 index = 2;
    mz_persist.gen.persist.ProtoColumnarRecords updates = 3;
}

message ProtoHollowBatch {
    ProtoU64Description desc = 1;
    repeated ProtoHollowBatchPart parts = 4;
    uint64 len = 3;
    repeated uint64 runs = 5;

    repeated string deprecated_keys = 2;
}

message ProtoSpineId {
    uint64 lo = 1;
    uint64 hi = 2;
}

message ProtoIdHollowBatch {
    ProtoSpineId id = 1;
    ProtoHollowBatch batch = 2;
}

message ProtoSpineBatch {
    uint64 level = 1;
    ProtoU64Description desc = 2;
    repeated ProtoSpineId parts = 3;
}

message ProtoIdSpineBatch {
    ProtoSpineId id = 1;
    ProtoSpineBatch batch = 2;
}

message ProtoFuelingMerge {
    ProtoU64Antichain since = 1;
    uint64 remaining_work = 2;
}

message ProtoIdFuelingMerge {
    ProtoSpineId id = 1;
    ProtoFuelingMerge merge = 2;
}

message ProtoHollowRollup {
    string key = 1;
    optional uint64 encoded_size_bytes = 2;
}

message ProtoTrace {
    ProtoU64Antichain since = 1;
    repeated ProtoHollowBatch legacy_batches = 2;
    repeated ProtoIdHollowBatch hollow_batches = 3;
    repeated ProtoIdSpineBatch spine_batches = 4;
    repeated ProtoIdFuelingMerge merges = 5;
}

message ProtoLeasedReaderState {
    ProtoU64Antichain since = 1;
    uint64 seqno = 2;
    uint64 last_heartbeat_timestamp_ms = 3;
    uint64 lease_duration_ms = 4;
    ProtoHandleDebugState debug = 5;
}

message ProtoCriticalReaderState {
    ProtoU64Antichain since = 1;
    int64 opaque = 2;
    string opaque_codec = 3;
    ProtoHandleDebugState debug = 4;
}

message ProtoWriterState {
    uint64 last_heartbeat_timestamp_ms = 1;
    uint64 lease_duration_ms = 2;
    string most_recent_write_token = 3;
    ProtoU64Antichain most_recent_write_upper = 4;
    ProtoHandleDebugState debug = 5;
}

message ProtoHandleDebugState {
    string hostname = 1;
    string purpose = 2;
}

message ProtoVersionedData {
    uint64 seqno = 1;
    bytes data = 2;
}

message ProtoInlinedDiffs {
    uint64 lower = 1;
    uint64 upper = 2;

    repeated ProtoVersionedData diffs = 3;
}

message ProtoRollup {
    string applier_version = 11;

    string shard_id = 1;
    string key_codec = 2;
    string val_codec = 3;
    string ts_codec = 4;
    string diff_codec = 5;
    uint64 seqno = 6;
    uint64 walltime_ms = 15;
    string hostname = 14;
    uint64 last_gc_req = 10;
    map<uint64, ProtoHollowRollup> rollups = 16;

    ProtoTrace trace = 7;
    map<string, ProtoLeasedReaderState> leased_readers = 8;
    map<string, ProtoCriticalReaderState> critical_readers = 13;
    map<string, ProtoWriterState> writers = 9;

    ProtoInlinedDiffs diffs = 17;

    // MIGRATION: We previously stored rollups as a `SeqNo -> string Key` map,
    // but now the value is a `struct HollowRollup`.
    map<uint64, string> deprecated_rollups = 12;
}
