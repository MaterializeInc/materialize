# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Compaction with memory bounds

write-batch output=b0 lower=0 upper=3 target_size=0 parts_size_override=25
a 0 1
b 1 1
c 2 1
----
parts=3 len=3

write-batch output=b1 lower=3 upper=6 target_size=0 parts_size_override=25
a 3 1
b 4 1
d 5 1
----
parts=3 len=3

# compact b0 and b1 with enough memory and a large enough target size to hold all the keys
compact output=b0_1 inputs=(b0,b1) lower=0 upper=6 since=6 target_size=1000 memory_bound=10000
----
parts=1 len=4

fetch-batch input=b0_1
----
<part 0>
a 6 2
b 6 2
c 6 1
d 6 1
<run 0>
part 0

# compact b0 and b1 with enough memory for both runs, but a target size that can only hold 2 parts/keys in mem at a time.
# most importantly, we expect there to be a single run, as each input has a single run of ordered parts
compact output=b0_1 inputs=(b0,b1) lower=0 upper=6 since=6 target_size=50 memory_bound=10000
----
parts=3 len=4

fetch-batch input=b0_1
----
<part 0>
a 6 2
<part 1>
b 6 2
<part 2>
c 6 1
d 6 1
<run 0>
part 0
part 1
part 2

write-batch output=b2 lower=6 upper=9 target_size=0 parts_size_override=25
a 8 1
e 6 1
f 7 1
----
parts=3 len=3

# compact b0, b1, b2 with enough memory for all runs and all keys. we expect a single part with a single run
compact output=b0_1_2 inputs=(b0,b1,b2) lower=0 upper=9 since=8 target_size=1000 memory_bound=10000
----
parts=1 len=6

fetch-batch input=b0_1_2
----
<part 0>
a 8 3
b 8 2
c 8 1
d 8 1
e 8 1
f 8 1
<run 0>
part 0

# compact b0, b1, b2 with enough memory for all runs, but a target size that can only hold 2 keys in mem at a time.
# we expect `aaaa` to appear twice because we calculate part size by unconsolidated updates.
compact output=b0_1_2 inputs=(b0,b1,b2) lower=0 upper=9 since=8 target_size=50 memory_bound=1000
----
parts=5 len=8

fetch-batch input=b0_1_2
----
<part 0>
a 8 2
<part 1>
a 8 1
b 8 1
<part 2>
b 8 1
c 8 1
<part 3>
d 8 1
e 8 1
<part 4>
f 8 1
<run 0>
part 0
part 1
part 2
part 3
part 4

# compact b0, b1, b2 with enough memory for all keys, but only 2 runs at a time. this means
# b0 and b1 will be physically compacted together, but b2 will be compacted in isolation.
# we expect two part and two runs, one for (b0, b1) and (b2).

# manually fudge the size of our batch parts so compaction only processes at most 2 runs at a time
set-batch-parts-size input=b0 size=1000
----
ok

set-batch-parts-size input=b1 size=1000
----
ok

set-batch-parts-size input=b2 size=1000
----
ok

compact output=b0_1_2 inputs=(b0,b1,b2) lower=0 upper=9 since=8 target_size=1000 memory_bound=4000
----
parts=2 len=7

fetch-batch input=b0_1_2
----
<part 0>
a 8 2
b 8 2
c 8 1
d 8 1
<part 1>
a 8 1
e 8 1
f 8 1
<run 0>
part 0
<run 1>
part 1

# compact b0, b1, b2 with enough memory for only 2 runs at a time, and a target size that can only hold 2 keys in mem at a time.
# this means b0 and b1 will be physically compacted together, and then b2 compacted in isolation. evaluating b2 should
# produce a new run.
set-batch-parts-size input=b0 size=50
----
ok

set-batch-parts-size input=b1 size=50
----
ok

set-batch-parts-size input=b2 size=50
----
ok

compact output=b0_1_2 inputs=(b0,b1,b2) lower=0 upper=9 since=8 target_size=50 memory_bound=200
----
parts=5 len=7

fetch-batch input=b0_1_2
----
<part 0>
a 8 2
<part 1>
b 8 2
<part 2>
c 8 1
d 8 1
<part 3>
a 8 1
e 8 1
<part 4>
f 8 1
<run 0>
part 0
part 1
part 2
<run 1>
part 3
part 4

# compact b0, b1, b2 even though our memory isn't enough to hold any 2 runs at a time. this is an edge case
# where we still force 2 runs to be merged together when possible, even at the expense of our memory requirement.
# we set the target size so that we can hold 2 keys in memory at a time, so compaction should produce identical
# output to the test above, where b0 and b1 are compacted together, and b2 is compacted in isolation
set-batch-parts-size input=b0 size=1000
----
ok

set-batch-parts-size input=b1 size=1000
----
ok

set-batch-parts-size input=b2 size=1000
----
ok

compact output=b0_1_2 inputs=(b0,b1,b2) lower=0 upper=9 since=8 target_size=50 memory_bound=200
----
parts=5 len=7

fetch-batch input=b0_1_2
----
<part 0>
a 8 2
<part 1>
b 8 2
<part 2>
c 8 1
d 8 1
<part 3>
a 8 1
e 8 1
<part 4>
f 8 1
<run 0>
part 0
part 1
part 2
<run 1>
part 3
part 4

# for good measure, repeatedly compacting a single batch of several runs should eventually
# converge to 1 run even if there isn't enough memory to hold more than 2 runs at a time
set-batch-parts-size input=b0_1_2 size=1000
----
ok

compact output=b0_1_2_iter1 inputs=(b0_1_2) lower=0 upper=9 since=8 target_size=100 memory_bound=1000
----
parts=2 len=6

fetch-batch input=b0_1_2_iter1
----
<part 0>
a 8 3
b 8 2
c 8 1
<part 1>
d 8 1
e 8 1
f 8 1
<run 0>
part 0
part 1

set-batch-parts-size input=b0_1_2_iter1 size=1000
----
ok

compact output=b0_1_2_iter2 inputs=(b0_1_2_iter1) lower=0 upper=9 since=8 target_size=100 memory_bound=1000
----
parts=2 len=6

fetch-batch input=b0_1_2_iter2
----
<part 0>
a 8 3
b 8 2
c 8 1
d 8 1
<part 1>
e 8 1
f 8 1
<run 0>
part 0
part 1


# try compacting two batches with many empty (frontier update) batches in-between. we want to
# ensure we don't count the empty batches against the memory limit when calculating which chunks
# of runs to compact together.

write-batch output=e1 lower=3 upper=4
----
parts=0 len=0

write-batch output=e2 lower=4 upper=5
----
parts=0 len=0

write-batch output=e3 lower=5 upper=6
----
parts=0 len=0

write-batch output=e4 lower=6 upper=7
----
parts=0 len=0

write-batch output=e5 lower=7 upper=8
----
parts=0 len=0

write-batch output=e6 lower=8 upper=9
----
parts=0 len=0

write-batch output=e7 lower=9 upper=10
----
parts=0 len=0

write-batch output=e8 lower=10 upper=11
----
parts=0 len=0

write-batch output=e9 lower=11 upper=12
----
parts=0 len=0

write-batch output=e10 lower=12 upper=13
----
parts=0 len=0

write-batch output=b1 lower=13 upper=15 target_size=0 parts_size_override=25
a 13 1
b 13 1
d 13 1
----
parts=3 len=3

compact output=b0_1 inputs=(b0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,b1) lower=0 upper=15 since=14 target_size=200 memory_bound=800
----
parts=1 len=4

fetch-batch input=b0_1
----
<part 0>
a 14 2
b 14 2
c 14 1
d 14 1
<run 0>
part 0
