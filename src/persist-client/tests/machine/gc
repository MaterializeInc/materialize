# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This test uses a simplifying assumption that a batch is
# always made up of exactly 1 batch part. This is because
# batch parts are given random UUID names, meaning we can't
# easily reference them in our expected test results. We
# instead refer to a batch part by its batch name

write-batch output=b0 lower=0 upper=1
k1 0 1
----
parts=1 len=1

write-batch output=b1 lower=1 upper=2
k2 1 -1
k3 1 1
----
parts=1 len=2

write-batch output=b2 lower=2 upper=3
k3 2 -1
k4 2 1
----
parts=1 len=2

# insert our first batch into state
register-writer writer_id=w11111111-1111-1111-1111-111111111111
----
v2 [0]

compare-and-append input=b0 writer_id=w11111111-1111-1111-1111-111111111111
----
v3 [1]

# referencing seqnos directly is a bit fragile. as any changes
# that add or subtract linearized operations from Machine
# setup could throw off the indexing here.
#
# at the time of writing here, seqno 3 refers to the compare-
# and-append batch written above

# verify we have a new state that references the latest batch
consensus-scan from_seqno=v3
----
seqno=v3 batches=b0 rollups=v1

# insert a second batch into state
compare-and-append input=b1 writer_id=w11111111-1111-1111-1111-111111111111
----
v4 [2]

# verify we have a new state that references both batches
consensus-scan from_seqno=v3
----
seqno=v3 batches=b0 rollups=v1
seqno=v4 batches=b0,b1 rollups=v1

# run gc up to our latest seqno, but without introducing a new rollup.
# gc should _not_ perform any work in this case.
gc to_seqno=v4
----
v4 batch_parts=0 rollups=0 truncated= state_rollups=

# verify that consensus has not changed
consensus-scan from_seqno=v3
----
seqno=v3 batches=b0 rollups=v1
seqno=v4 batches=b0,b1 rollups=v1

# add a rollup
write-rollup seqno=v4
----
v5

# run gc up to our latest seqno. gc should truncate up to the latest rollup
# and introduce its own seqno (to remove the older rollup from state)
gc to_seqno=v5
----
v6 batch_parts=0 rollups=0 truncated=v4 state_rollups=v1

# verify that gc removed all seqno less than the latest
consensus-scan from_seqno=v0
----
seqno=v4 batches=b0,b1 rollups=v1
seqno=v5 batches=b0,b1 rollups=v1,v4
seqno=v6 batches=b0,b1 rollups=v4

# insert another batch
compare-and-append input=b2 writer_id=w11111111-1111-1111-1111-111111111111
----
v7 [3]

consensus-scan from_seqno=v0
----
seqno=v4 batches=b0,b1 rollups=v1
seqno=v5 batches=b0,b1 rollups=v1,v4
seqno=v6 batches=b0,b1 rollups=v4
seqno=v7 batches=b0,b1,b2 rollups=v4

# compact and merge b0 and b1 into b0_1
compact output=b0_1 inputs=(b0,b1) lower=0 upper=2 since=0 writer_id=w11111111-1111-1111-1111-111111111111
----
parts=1 len=3

apply-merge-res input=b0_1 writer_id=w11111111-1111-1111-1111-111111111111
----
v8 true

# verify that we b0_1 has replaced b0 and b1 in latest state
consensus-scan from_seqno=v0
----
seqno=v4 batches=b0,b1 rollups=v1
seqno=v5 batches=b0,b1 rollups=v1,v4
seqno=v6 batches=b0,b1 rollups=v4
seqno=v7 batches=b0,b1,b2 rollups=v4
seqno=v8 batches=b0_1,b2 rollups=v4

# write a rollup that contains last seqno referencing b0 and b1
write-rollup seqno=v7
----
v9

# run gc to clear only the b0,b1 seqnos
gc to_seqno=v9
----
v10 batch_parts=0 rollups=1 truncated=v7 state_rollups=v4

consensus-scan from_seqno=v0
----
seqno=v7 batches=b0,b1,b2 rollups=v4
seqno=v8 batches=b0_1,b2 rollups=v4
seqno=v9 batches=b0_1,b2 rollups=v4,v7
seqno=v10 batches=b0_1,b2 rollups=v7

# verify that b0 and b1 still exist, because they're referenced in seqno 7
fetch-batch input=b0
----
<part 0>
k1 0 1
<run 0>
part 0

fetch-batch input=b1
----
<part 0>
k2 1 -1
k3 1 1
<run 0>
part 0

# write a new rollup at v8 so we can GC v7 on our next call
write-rollup seqno=v8
----
v11

gc to_seqno=v8
----
v12 batch_parts=2 rollups=0 truncated=v8 state_rollups=v7

# we should only have b0_1,b2 now
consensus-scan from_seqno=v0
----
seqno=v8 batches=b0_1,b2 rollups=v4
seqno=v9 batches=b0_1,b2 rollups=v4,v7
seqno=v10 batches=b0_1,b2 rollups=v7
seqno=v11 batches=b0_1,b2 rollups=v7,v8
seqno=v12 batches=b0_1,b2 rollups=v8

# and b0 and b1 should no longer exist in the blob store, as no states still reference them
fetch-batch input=b0
----
<part 0>
<empty>
<run 0>
part 0

fetch-batch input=b1
----
<part 0>
<empty>
<run 0>
part 0

fetch-batch input=b0_1
----
<part 0>
k1 0 1
k2 1 -1
k3 1 1
<run 0>
part 0

fetch-batch input=b2
----
<part 0>
k3 2 -1
k4 2 1
<run 0>
part 0
