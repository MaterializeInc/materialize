// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

package mz_persist_types.stats;

message ProtoStructStats {
    uint64 len = 1;
    map<string, ProtoDynStats> cols = 2;
}

message ProtoDynStats {
    // ProtoOptionStats could instead be have a `ProtoDynStats some` field and
    // be in the oneof, but that's unnecesary (we don't need
    // `OptionStats<OptionStats<T>>`) and causes some problems (OptionStats
    // would need to represent `some` as a `Box<dyn DynStats>` instead of a `T`,
    // which is far less ergonomic).
    optional ProtoOptionStats option = 1;
    oneof kind {
        ProtoStructStats struct = 2;
        ProtoPrimitiveStats primitive = 3;
        ProtoBytesStats bytes = 4;
    }
}

message ProtoOptionStats {
    uint64 none = 1;
}

message ProtoPrimitiveStats {
    oneof lower {
        bool lower_bool = 1;
        uint32 lower_u8 = 2;
        uint32 lower_u16 = 3;
        uint32 lower_u32 = 4;
        uint64 lower_u64 = 5;
        int32 lower_i8 = 6;
        int32 lower_i16 = 7;
        int32 lower_i32 = 8;
        int64 lower_i64 = 9;
        float lower_f32 = 10;
        double lower_f64 = 11;
        bytes lower_bytes = 12;
        string lower_string = 13;
    }
    oneof upper {
        bool upper_bool = 14;
        uint32 upper_u8 = 15;
        uint32 upper_u16 = 16;
        uint32 upper_u32 = 17;
        uint64 upper_u64 = 18;
        int32 upper_i8 = 19;
        int32 upper_i16 = 20;
        int32 upper_i32 = 21;
        int64 upper_i64 = 22;
        float upper_f32 = 23;
        double upper_f64 = 24;
        bytes upper_bytes = 25;
        string upper_string = 26;
    }
}

message ProtoJsonStats {
    uint64 json_nulls = 1;
    ProtoPrimitiveStats bools = 2;
    ProtoPrimitiveStats string = 3;
    ProtoPrimitiveStats numeric = 4;
    uint64 list = 5;
    map<string, ProtoJsonStats> map = 6;
    // The inverse of what you might normally imagine, for backwards-compatibility.
    // TODO(mfp): make this more uniform.
    bool no_maps = 7;
}

message ProtoBytesStats {
    oneof kind {
        // TODO(mfp): Pull bytes out of ProtoPrimitiveStats and inline it here?
        ProtoPrimitiveStats primitive = 1;
        ProtoJsonStats json = 2;
    }
}
