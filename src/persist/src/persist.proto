// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// See https://developers.google.com/protocol-buffers for what's going on here.

syntax = "proto3";

package gen;

message ProtoMeta {
    // For data written by some vX.Y.Z of Materialize, we'll support reading it
    // back in by later versions (backward compatibility, so users can upgrade)
    // and earlier versions (forward compatiblity, so users can roll back an
    // upgrade). The specific policy is yet to be determined, but each of these
    // is likely to be bounded, especially forward compatatibility.
    //
    // For us to reason about this (e.g. to prevent startup if a binary is
    // pointed at data it can't handle), we store the version that wrote data
    // alongside the data itself.
    string version = 1;

    uint64 seqno = 2;
    map<uint64, ProtoStreamRegistration> id_mapping = 3;
    map<uint64, ProtoStreamRegistration> graveyard = 4;
    map<uint64, ProtoArrangement> arrangements = 5;
}

message ProtoStreamRegistration {
    string name = 1;
    string key_codec_name = 2;
    string val_codec_name = 3;
}

message ProtoArrangement {
    ProtoU64Antichain since = 1;
    ProtoU64Antichain seal = 2;
    repeated ProtoUnsealedBatchMeta unsealed_batches = 3;
    repeated ProtoTraceBatchMeta trace_batches = 4;
}

message ProtoUnsealedBatchMeta {
    string key = 1;
    uint64 seqno_lower = 2;
    uint64 seqno_upper = 3;
    uint64 ts_lower = 4;
    uint64 ts_upper = 5;
    uint64 size_bytes = 6;
}

message ProtoTraceBatchMeta {
    string key = 1;
    ProtoU64Description desc = 2;
    uint64 size_bytes = 3;
    uint64 level = 4;
}

message ProtoU64Antichain {
    repeated uint64 elements = 1;
}

message ProtoU64Description {
    ProtoU64Antichain lower = 1;
    ProtoU64Antichain upper = 2;
    ProtoU64Antichain since = 3;
}

message ProtoBatchInline {
    ProtoBatchFormat format = 1;
    oneof batch_type {
        // To save bytes, only the seqno_lower and seqno_upper fields are set on
        // this.
        ProtoUnsealedBatchMeta unsealed = 2;
        // To save bytes, only the desc field is set on this.
        ProtoTraceBatchMeta trace = 3;
    }
}

enum ProtoBatchFormat {
    Unknown = 0;
    ArrowKVTD = 1;
    ParquetKVTD = 2;
}
