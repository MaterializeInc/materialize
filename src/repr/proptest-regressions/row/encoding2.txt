# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 10fbaefa7d5c0cd9d37446743026e611df845be52dbd7ffe557da85c36330bfb # shrinks to datum = Timestamp(CheckedTimestamp { t: 1970-01-01T00:00:00.000000001 })
cc 5666b2ad088c23f8a610d0741191b84227764f0749a21e2171a793d4d25715cc # shrinks to (ty, datum) = (List { element_type: Numeric { max_scale: None }, custom_id: Some(Transient(427266576909169101)) }, List(PropList(Row{[List([Numeric(OrderedDecimal(-767))])]}, [Numeric(-767)])))
cc fe80dc9f3354b613cdd31199af38f24125600055bb259820eca1c85ba776e709 # shrinks to (ty, datum) = (Record { fields: [], custom_id: None }, Record(PropDict(Row{[List([])]}, [])))
cc 99bc1fecbd78903730664f137ed50776731115043d1aef6c8e7401c2c172666a # shrinks to (ty, datum) = (Record { fields: [(ColumnName("‡ßù‡¥¥.õ∞æ=)·ãÄùíû&±¥ê'\u{1e020}%¬•ëò°8üï¥üâ§"), ColumnType { scalar_type: Int64, nullable: false }), (ColumnName("?‡¢°,\u{1772}‡Æ®=.$'ûüº\\"), ColumnType { scalar_type: RegProc, nullable: true }), (ColumnName("`.‡∫•ûπü)?"), ColumnType { scalar_type: Char { length: None }, nullable: false }), (ColumnName(""), ColumnType { scalar_type: Array(TimestampTz { precision: Some(TimestampPrecision(130)) }), nullable: true }), (ColumnName(""), ColumnType { scalar_type: TimestampTz { precision: Some(TimestampPrecision(247)) }, nullable: false }), (ColumnName("S¬•%ë¢£\u{1cf44}\\ü™îûπµ3X#L<pv'‡≤ó#õÉ¶&ê†∑\\W/zü´°0>'h?."), ColumnType { scalar_type: TimestampTz { precision: None }, nullable: true }), (ColumnName(""), ColumnType { scalar_type: Map { value_type: Timestamp { precision: None }, custom_id: None }, nullable: true })], custom_id: Some(Explain) }, Record(PropDict(Row{[List([Int64(0), UInt32(0), String(""), Array(Array { elements: [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })], dims: [ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }] }), TimestampTz(CheckedTimestamp { t: +165001-03-15T21:29:30.007158Z }), TimestampTz(CheckedTimestamp { t: +53525-03-07T20:11:35.813855Z }), Map({"—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}": Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 })})])]}, [("‡ßù‡¥¥.õ∞æ=)·ãÄùíû&±¥ê'\u{1e020}%¬•ëò°8üï¥üâ§", Int64(0)), ("?‡¢°,\u{1772}‡Æ®=.$'ûüº\\", UInt32(0)), ("`.‡∫•ûπü)?", String("")), ("", Array(PropArray(Row{[Array(Array { elements: [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })], dims: [ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }] })]}, [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })]))), ("", TimestampTz(CheckedTimestamp { t: +165001-03-15T21:29:30.007158Z })), ("S¬•%ë¢£\u{1cf44}\\ü™îûπµ3X#L<pv'‡≤ó#õÉ¶&ê†∑\\W/zü´°0>'h?.", TimestampTz(CheckedTimestamp { t: +53525-03-07T20:11:35.813855Z })), ("", Map(PropDict(Row{[Map({"—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}": Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 })})]}, [("—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}", Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 }))])))])))
cc 47ace97d829ca901cd8cbe85cfd9f1716d13df1a48cbfa2a0c5eacc08c2fff68 # shrinks to (ty, datums) = (ColumnType { scalar_type: Int2Vector, nullable: true }, [Null, Array(PropArray(Row{[Array(Array { elements: [Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(-1), Int16(-24609), Int16(19737), Int16(32572), Int16(4745), Int16(20699), Int16(26254), Int16(-16447), Int16(640), Int16(-32022), Int16(25476), Int16(30655), Int16(19125), Int16(6344), Int16(17448), Int16(10343), Int16(17519), Int16(19120), Int16(-5267), Int16(7709), Int16(19307), Int16(-25600)], dims: [ArrayDimension { lower_bound: 1, length: 2 }, ArrayDimension { lower_bound: 1, length: 1 }, ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }, ArrayDimension { lower_bound: 1, length: 3 }] })]}, [Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(-1), Int16(-24609), Int16(19737), Int16(32572), Int16(4745), Int16(20699), Int16(26254), Int16(-16447), Int16(640), Int16(-32022), Int16(25476), Int16(30655), Int16(19125), Int16(6344), Int16(17448), Int16(10343), Int16(17519), Int16(19120), Int16(-5267), Int16(7709), Int16(19307), Int16(-25600)]))])
cc 5294d4b8646bf778aadf1dd930bd9109347cc6bf51aa72105d2c85744b842586 # shrinks to (ty, datums) = (ColumnType { scalar_type: Jsonb, nullable: false }, [])
cc d66b43db292454632fa92406fb76800ddb9e1ce4ab11e86e6f3d886d1db6c52a # shrinks to (ty, datums) = (ColumnType { scalar_type: MzAclItem, nullable: false }, [])
cc f065b348d11aee106ee8e1181d00a2eea34f0b2ee5ac346223eed55439fcef50 # shrinks to (ty, datums) = (ColumnType { scalar_type: Interval, nullable: false }, [Interval(Interval { months: 0, days: 0, micros: 0 }), Interval(Interval { months: 0, days: 0, micros: 0 })])
cc 5f62c36659c74608e5a92335cfc8973852831ccd118e32fa6d3b8a5afc7c1317 # shrinks to (desc, rows) = (RelationDesc { typ: RelationType { column_types: [ColumnType { scalar_type: List { element_type: PgLegacyChar, custom_id: Some(Explain) }, nullable: true }, ColumnType { scalar_type: RegProc, nullable: false }], keys: [] }, names: [ColumnName("\tL\u{e4ee3}\u{b4c83}"), ColumnName("\\")] }, [Row{[List([UInt8(0)]), UInt32(1028753045)]}, Row{[Null, UInt32(1028749883)]}])
cc ee9214e539fc092f7de2e4694719278709d598625a4cdab70086289998dbd1c4 # shrinks to (desc, rows) = (RelationDesc { typ: RelationType { column_types: [ColumnType { scalar_type: List { element_type: Uuid, custom_id: None }, nullable: true }, ColumnType { scalar_type: List { element_type: Float64, custom_id: None }, nullable: false }], keys: [] }, names: [ColumnName(",\u{dec1f}\u{4f277}:,"), ColumnName("üï¥\u{bc361}&M\u{b}")] }, [Row{[List([Uuid(00000000-0000-0008-704e-a11c545cf77c)]), List([Float64(OrderedFloat(9.20095329465101e244)), Float64(OrderedFloat(9.761372336741156e-309)), Float64(OrderedFloat(1.4757032414574082e-290)), Float64(OrderedFloat(-4.764873253101003e281)), Float64(OrderedFloat(-5.971894866585902e-160)), Float64(OrderedFloat(7.720608894972609e62)), Float64(OrderedFloat(-1.5976091873921496e-269)), Float64(OrderedFloat(-3.2172349268626623e168)), Float64(OrderedFloat(-3.677563922619856e-205)), Float64(OrderedFloat(1.2221490350273736e-273)), Float64(OrderedFloat(1.599661300383531e269)), Float64(OrderedFloat(-5.250996265449683e-203)), Float64(OrderedFloat(-4.67899380172524e-309)), Float64(OrderedFloat(2.0460821658768697e-215)), Float64(OrderedFloat(0.0)), Float64(OrderedFloat(-6.756971239455035e16)), Float64(OrderedFloat(2.4786583251176143e113)), Float64(OrderedFloat(6.54527650730179e-309)), Float64(OrderedFloat(-1.7376079101449375e133)), Float64(OrderedFloat(-9.15421883836813e37)), Float64(OrderedFloat(2.4813201679465696e-154)), Float64(OrderedFloat(-1.4135995411388533e-249)), Float64(OrderedFloat(2.3193796052679092e107)), Float64(OrderedFloat(1.975169066250457e-22)), Float64(OrderedFloat(-5.806934314822044e-202)), Float64(OrderedFloat(-4.640881250470618e296)), Float64(OrderedFloat(-1.87626140474167e-309)), Float64(OrderedFloat(9.684065198138442e-276)), Float64(OrderedFloat(-4.1016746997641185e-76)), Float64(OrderedFloat(-2.8889036763648928e116)), Float64(OrderedFloat(9.077773255312884e-309)), Float64(OrderedFloat(-3.0024218573722314e-154)), Float64(OrderedFloat(2.5716433942264244e-287)), Float64(OrderedFloat(-7.021852987968288e-274)), Float64(OrderedFloat(-1.144914326488651e-168)), Float64(OrderedFloat(-6.208282464843681e-245)), Float64(OrderedFloat(-3.4859770405442093e-194)), Float64(OrderedFloat(2.1641525664476726e-308)), Float64(OrderedFloat(2.8508353942885344e-102)), Float64(OrderedFloat(8.421785547266652e-246)), Null, Float64(OrderedFloat(-1.055756235789167e171)), Float64(OrderedFloat(-6.893875080538142e176)), Float64(OrderedFloat(1.5416332092524467e-103))])]}, Row{[List([Null, Uuid(5d81d920-da1b-d248-f47f-5199b71415e9), Null, Uuid(fe8834c5-858d-2924-8d08-206888c6a372), Uuid(3b7e12f6-e6c4-ad53-f78b-623af31ce79e), Null, Uuid(6626fa77-311e-3167-1641-247890a2fb49), Uuid(25302dfe-787b-6ee5-b268-72041a729062), Uuid(d558a84d-30ff-8945-95f3-f34bbc15a09a), Uuid(770953c4-a907-2d32-e44e-5b109436451c), Uuid(eeb8418d-0395-987d-b744-4e6add7d75eb), Uuid(c47416e8-4b77-3613-8d5f-b42d6ffd9b6d), Uuid(ac5346fc-679d-fb95-9907-b9e7ab45ceae), Uuid(e5f94387-d213-ef3a-74d3-833695ab8ae9), Uuid(4a119385-a752-dce2-d818-fb871ad4e6c8), Uuid(eadca348-784a-67f3-1274-ff467e4a61a2), Uuid(de7c8bdf-4eee-b645-19ac-b94e6fa88c68), Uuid(cc6fd97e-a34e-1caa-4bf8-7c0b136bb696), Uuid(3d1d328b-ee6d-08e3-543f-096809c9dd27), Uuid(6ac8f20b-35cc-6382-17fa-65eeb9e13535), Uuid(59013ea1-eccb-1ebf-2865-385cee8831cd), Uuid(46fb8e83-9fd3-339d-2369-ff00bdc68338), Uuid(c0a2106b-d838-e3e1-1445-189af8f0f7c6), Uuid(9f4922e3-b482-31cf-1872-99fadbfb3294), Uuid(191f8d3e-a9ac-4a4a-bd81-6d43a7a2e099), Uuid(b5fd8c53-af7b-5e11-f9e9-c73736e2ac04), Uuid(2aa7fa09-bbea-c37b-8d25-9dfa433c5461), Uuid(f4c410ab-1ed8-6d76-9cce-802ecdda1517), Uuid(7b9b7a07-034d-65a4-6465-87160011addb), Uuid(afb6530c-5c44-d0d9-ed50-c0182f36c470), Uuid(c45d9257-95e2-16b5-4268-1ba8180547da), Uuid(be61aaf6-74fc-2e88-9cf3-c925562b02ad), Uuid(0585d184-3d4d-ed05-fa02-349715a0b7c9), Uuid(0474ecdb-bfb1-91b6-e1af-dbdc013b633b), Uuid(06913967-7736-6988-980a-6a890adad65a), Uuid(1b2c5e0b-c92c-6b45-5534-0747faebf0e9), Null]), List([Float64(OrderedFloat(-6.685568040861805e-271)), Null, Float64(OrderedFloat(6.776664140578099e240)), Float64(OrderedFloat(-4.964074852935031e177)), Float64(OrderedFloat(4.135917500959833e-24)), Float64(OrderedFloat(1.5261035508799375e-308)), Float64(OrderedFloat(7.799135661032507e-282)), Float64(OrderedFloat(-1.3774250887522594e247)), Float64(OrderedFloat(-1.076755784253325e-308)), Float64(OrderedFloat(-8.296668243610742e23)), Null, Null, Float64(OrderedFloat(-2.0170178681829116e-200)), Float64(OrderedFloat(1.142060389088258e-126)), Float64(OrderedFloat(-2.532927421247502e71)), Float64(OrderedFloat(-4.4464992664561425e306)), Float64(OrderedFloat(-1.2249670116576222e-147)), Float64(OrderedFloat(-1.468763323580496e-308)), Float64(OrderedFloat(6.411414964527605e-286)), Float64(OrderedFloat(1.3612307266180033e58)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(1.1590055316029949e255)), Null, Float64(OrderedFloat(-2.041338973809341e-258)), Float64(OrderedFloat(-1.6295512910050047e-308)), Float64(OrderedFloat(2.395225202652682e-300)), Float64(OrderedFloat(-1.1660278471854348e-266)), Float64(OrderedFloat(-1.252220774250875e136)), Float64(OrderedFloat(-3.0552377953864162e125)), Float64(OrderedFloat(-3.183539823762226e-309)), Float64(OrderedFloat(-1.739892612611441e-308)), Float64(OrderedFloat(-1.378993371550825e-308)), Float64(OrderedFloat(9.868463146067762e-197)), Float64(OrderedFloat(0.0)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(2.139573964920476e132)), Float64(OrderedFloat(-1.385397282684188e-55)), Float64(OrderedFloat(1.9339069936515535e-26)), Float64(OrderedFloat(-1.6700014642599617e-196)), Float64(OrderedFloat(-6.674479764559115e-309)), Float64(OrderedFloat(9.077105991965221e202)), Float64(OrderedFloat(-1.961142319092357e-39)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(7.625559236686169e-290)), Float64(OrderedFloat(-2.5321918021725313e-144)), Float64(OrderedFloat(-0.0))])]}, Row{[Null, List([Float64(OrderedFloat(-0.00908308330622692)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(-2.6658697170492575e279)), Float64(OrderedFloat(6.164159423630783e221)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(-3.303500643724261e164)), Float64(OrderedFloat(1.214579687772014e-308)), Float64(OrderedFloat(7.01563163048722e-309)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(4.364023762010918e-264)), Float64(OrderedFloat(-2.0180786027621677e-215)), Float64(OrderedFloat(1.1476573964702164e226)), Float64(OrderedFloat(1.8016157422420205e-181)), Float64(OrderedFloat(0.0)), Float64(OrderedFloat(-8.066076248062133e41)), Float64(OrderedFloat(1.0600641191930067e-217)), Float64(OrderedFloat(2.6386422870942553e248)), Float64(OrderedFloat(-6.415725998447679e296)), Float64(OrderedFloat(7.967228185482049e141)), Float64(OrderedFloat(1.326269195667383e-198)), Float64(OrderedFloat(-4.816778369233091e16)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(-0.0)), Float64(OrderedFloat(-6.52309219925664e240)), Null, Float64(OrderedFloat(0.0)), Float64(OrderedFloat(-1.09244553662095e-309)), Float64(OrderedFloat(0.0)), Float64(OrderedFloat(9.476189872056419e-268)), Float64(OrderedFloat(7.206248456373799e-285)), Float64(OrderedFloat(3.4140034419067046e146)), Null, Null, Float64(OrderedFloat(-4.586796227185839e183)), Float64(OrderedFloat(3.473712414187403e-62)), Float64(OrderedFloat(0.0)), Float64(OrderedFloat(-3.767066128175533e-284)), Float64(OrderedFloat(-8.454318670595767e155))])]}])
cc 95ad32c791f9c51f3a562b76b24e8de362f14fb0190a92e346df506eee9f8c35 # shrinks to (desc, rows) = (RelationDesc { typ: RelationType { column_types: [ColumnType { scalar_type: Map { value_type: TimestampTz { precision: None }, custom_id: None }, nullable: true }, ColumnType { scalar_type: Map { value_type: Int32, custom_id: None }, nullable: true }, ColumnType { scalar_type: Range { element_type: Date }, nullable: true }, ColumnType { scalar_type: Range { element_type: Int32 }, nullable: true }, ColumnType { scalar_type: Jsonb, nullable: false }, ColumnType { scalar_type: Bytes, nullable: true }], keys: [] }, names: [ColumnName(""), ColumnName("\u{b}g\n"), ColumnName("&\u{9d84b}„£ô\u{b}üï¥\u{3d28c}`—®\u{fcc23}$'\u{fbc65}\u{d98b4}$"), ColumnName("\u{202e}{¬¥\u{1ae73}"), ColumnName("\u{63c56}&.\u{7b5e7}{\u{ffd4f}"), ColumnName("\u{10293b}∞ª´\0\u{e5471}")] }, [Row{[Map({"": TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z })}), Null, Null, Null, JsonNull, Bytes([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 15, 112, 136, 23, 62, 87, 221, 67, 238, 68, 225, 70, 83, 17, 81, 236, 93, 0, 140, 6, 182, 88, 162, 206, 50, 147, 225, 104, 94, 174, 208, 229, 62, 245, 187, 117, 6, 225, 24, 48, 120, 13, 127, 186, 229, 214, 248, 241, 114, 231, 210, 246, 212, 18, 5, 244, 25, 145, 242, 247, 193, 131, 71, 28, 248, 36, 119, 236, 196, 151, 88, 118, 99, 176, 122, 71, 122, 41, 74, 126, 164, 109, 201, 53, 147, 80, 119, 103, 161, 243, 145, 233, 183, 60, 130, 6, 178, 213, 208, 31, 13, 72, 10, 232, 229, 173, 65, 155, 51, 211, 8, 6, 42, 86, 128, 145, 184, 169, 246, 227, 1, 233, 233, 104, 220, 21, 102, 68, 134, 63, 189, 191, 127, 248, 105, 177, 12, 41, 216, 43, 243, 149, 209, 19, 140, 142, 59, 51, 118, 47, 223, 92, 71, 102, 219, 121, 118, 187, 120, 130, 236, 190, 22, 93, 194, 67, 41, 27, 71, 180, 239, 43, 83, 206, 120, 223, 83, 139, 143, 187, 178, 98, 212, 1, 89, 3, 93, 113, 117, 220, 64, 116, 43, 198, 179, 179, 236, 27, 177, 239, 104, 33, 218, 241])]}, Row{[Null, Map({"": Int32(-394507987), "\u{1}`\t¬©\0*\u{e83c4}\u{feff}\u{de6a0}\u{88}!\u{1b}'¶ûä/\u{ec862}'\t\u{78666}.\u{8e675}=»∫": Int32(88635156), "&y_\u{7f}\u{88bec}·£Ç": Int32(-1297902888), "&\u{38ded}'#O%0@\u{7dd81}\u{1c0c4}\u{ba653}\u{6bb04}»∫—®/\u{10edd8}\u{feff}\u{95237}\0ÔøΩ»∫\u{56a2b}B—®\u{1b}\r%H": Null, ":\u{573a3}*\u{3}\u{56cc7}&\u{50d18}*\u{33c3a}ÔøΩ\u{b234d}*b$a": Int32(932285518), ";%/\u{fd5ea}/\rc\u{202e}\u{f977f}\u{1b}\u{89635}I2D<?{": Int32(-1148217224), "=FS\u{73048}\t*$.üï¥<¬•l": Int32(569619506), "E4\u{feff}\0\u{1}\u{8a116}*.\u{4b67a}\01[*`*\u{7f}\\=1\u{73093}ÔøΩ\u{ee5d7}:Tq=,\u{8}{\u{10c9dc}*": Int32(229303540), "G$J/\u{fe0ec}\u{b950c}—®=*\tc'\r\u{bfef7}\r√¨$\\\tÔøΩj": Int32(1343146874), "G\\\u{3}": Int32(-1812183853), "_{\u{2}\u{1b})X\u{63157}\u{7f}:": Int32(-1565386210), "a\u{bcb5b}Eq\u{b}\u{4de14}üï¥\u{202e}'üï¥ÔøΩ\u{c0b89}√ï=—®Æé®\u{87de0}\u{c7c77}E\u{102490}»∫": Int32(1329059468), "f&√ñ\u{1ef73}»∫\0\0s@'$\u{65566}\u{1b}f\u{874e4}\u{1b}`/\rüï¥\u{439a4}\u{202e}\u{3e38b}\u{feff}\u{8f}\t\r": Int32(-2042388665), "kJ\"¬Ø\u{cdca8}U<\u{1}&*\u{f2bfc}\u{1b}\u{7ae5e}\u{e4081}s": Int32(437479372), "z/\u{1b}:": Int32(85190470), "√Å*\u{84}\u{60d54}&\u{8}\u{35dae}√æ`\t»∫-`\u{a6bd4}E$\u{93}<\"\u{1b}": Int32(1261325341), "√¨`\"\u{4139b}\"üï¥": Int32(-1642002570), "\u{202e}=\u{46169}<¬•mbS?<SÔøΩ\u{d771e}\"\u{3cf05}l?i\u{a998c}u:√Ø¬•\u{b}/": Int32(-664102359), "\u{202e}ZUi\\\\v?\"\u{feff}@E*\u{51b12}!%\u{7f}&\u{10da3c}": Int32(823460730), "„¶Ä$/\u{80b67}": Int32(-415500854), "\u{feff}\t\u{202e}{:/v\u{feff}<V>\u{2}\u{ddcf1}\u{b2d76}\0\to\u{8}\u{1609f}\u{b}—®\u{4}\u{64733}3\u{1b}`": Int32(-1138150241), "Æ≤µ\u{b}—®—®\u{2}\\": Null, "\u{52b9e}\tX\u{6a514}¨áç\u{a214c}`$F\tÔøΩ.\u{b}\0\u{202e}\u{10cf6e}": Int32(318886978), "\u{72861}\u{4f70c}\t\u{feff}<\r$\\\0%\u{ec04}—®±≥îJ#": Int32(1351136439), "\u{85ba8}\u{82e92}ÔøΩ0\u{dc6a7}\t\t=\u{7}\u{fa76a}\u{ded21}\u{ec8a0}{\u{202e}t\\9{&yÌÜÖ": Int32(-1869618845), "\u{860d8}/*\td\0t=\u{c442e}^*(†Üög\r\u{6bfa5}\t\u{1}ÔøΩ:\u{8}": Int32(610932855), "\u{d49f9}:\0": Int32(71696223), "\u{10ba1f}:$*\u{90449}\u{4b3ba}9¬•ÔøΩd\r»∫\u{202e}&W/\u{c1f15}\u{caa61}{üï¥\u{7aff2}.?%?$\t": Int32(466036228)}), Range(Range { inner: None }), Range(Range { inner: None }), False, Bytes([194, 226, 88, 118, 176, 204, 103, 162, 202, 183, 204, 9, 243, 104, 92, 4, 190, 23, 152, 12, 39, 213, 174, 203, 223, 128, 17, 141, 234, 129, 106, 32, 176, 205, 66, 138, 53, 18, 155, 181, 93, 234, 11, 150, 25, 147, 98, 34, 168, 20, 66, 232, 175, 129, 175, 50, 169, 47, 251, 42, 20, 95, 176, 124, 227, 227, 29, 153, 113, 240, 144, 20, 78, 53, 101, 84, 115, 35, 182, 59, 58, 38, 177, 151, 177, 27, 242, 84, 106, 155, 154, 147, 249, 46, 122, 102, 195, 196, 61, 230, 75, 192, 119, 245, 186, 244, 190, 200, 28, 63, 118, 165, 76, 97, 116, 111, 200, 7, 38, 105, 117, 66, 8, 151, 17, 48, 19, 16, 55, 181, 82, 100, 216, 252, 64, 138, 92, 185, 100, 178, 136, 165, 117, 189, 245, 91, 55, 221, 134, 144, 92, 81, 210, 236, 25, 61, 174, 5, 98, 228, 206, 195, 166, 248, 67, 91, 16, 74, 241, 195, 239, 193, 136, 89, 223, 161, 248, 127, 135, 251, 25, 64, 196, 41, 97, 136, 20, 216, 88, 146, 216, 8, 110, 182, 120, 62, 119, 139, 232, 108, 5, 148, 212, 26, 117, 120, 85, 57, 94, 221, 188, 168, 137, 109, 133, 236, 66, 128, 110, 225, 39, 39, 129, 74, 233, 213, 128, 66, 157, 57, 28, 148, 74, 184, 118, 19, 223, 227, 51, 177, 60, 74, 195, 227, 239, 87, 107, 178, 117, 176, 210, 147, 128, 203, 185, 234, 173, 170, 33, 165, 178, 230, 116, 26, 45, 139, 193, 183, 6, 82, 148, 82, 96, 244, 206, 173, 233, 249, 98, 40, 141, 26, 25, 90, 155, 189, 106, 248, 85, 62, 17, 49, 18, 127, 166, 239, 132, 17, 10, 117])]}])
cc f9c8404183dfa9d97179b38b555bedfea87aa7d0d1fe12c7369c8f0ee42d6962 # shrinks to (desc, rows) = (RelationDesc { typ: RelationType { column_types: [ColumnType { scalar_type: Map { value_type: PgLegacyChar, custom_id: Some(Explain) }, nullable: true }, ColumnType { scalar_type: Record { fields: [(ColumnName("?\\O¬±ü°∂ûü•üõ∞Uf/%\u{11300}z‡¥è·¥ó`\u{cc6}‡•πBñ≠û&"), ColumnType { scalar_type: Int64, nullable: true }), (ColumnName("ë¥É“è¬•"), ColumnType { scalar_type: Int32, nullable: true }), (ColumnName("cÍû†Gr?ë¶ß‡≥©ñø±‡∞ô´•ô'ÔøΩêÜê)w3&W\\"), ColumnType { scalar_type: UInt32, nullable: false })], custom_id: Some(User(4370583976733844965)) }, nullable: false }], keys: [] }, names: [ColumnName(""), ColumnName("&")] }, [Row{[Map({"": UInt8(0)}), List([Int64(0), Int32(0), UInt32(0)])]}, Row{[Null, List([Int64(0), Int32(-1), UInt32(0)])]}])
cc 5d3d696b3edeb6ea135f2e25a3e1e3a4f17b79f90b4c3478d7c8d84794db2d50 # shrinks to (desc, rows) = (RelationDesc { typ: RelationType { column_types: [ColumnType { scalar_type: Map { value_type: UInt16, custom_id: None }, nullable: true }, ColumnType { scalar_type: Int64, nullable: false }], keys: [] }, names: [ColumnName("&£Ñ•—®\"\u{c9f6a}\u{ebe5d}'"), ColumnName("¬•GR/:\\{ûÄø\r\"*:")] }, [Row{[Map({"": UInt16(0)}), Int64(0)]}, Row{[Null, Int64(-1)]}])
