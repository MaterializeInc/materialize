# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 10fbaefa7d5c0cd9d37446743026e611df845be52dbd7ffe557da85c36330bfb # shrinks to datum = Timestamp(CheckedTimestamp { t: 1970-01-01T00:00:00.000000001 })
cc 5666b2ad088c23f8a610d0741191b84227764f0749a21e2171a793d4d25715cc # shrinks to (ty, datum) = (List { element_type: Numeric { max_scale: None }, custom_id: Some(Transient(427266576909169101)) }, List(PropList(Row{[List([Numeric(OrderedDecimal(-767))])]}, [Numeric(-767)])))
cc fe80dc9f3354b613cdd31199af38f24125600055bb259820eca1c85ba776e709 # shrinks to (ty, datum) = (Record { fields: [], custom_id: None }, Record(PropDict(Row{[List([])]}, [])))
cc 99bc1fecbd78903730664f137ed50776731115043d1aef6c8e7401c2c172666a # shrinks to (ty, datum) = (Record { fields: [(ColumnName("‡ßù‡¥¥.õ∞æ=)·ãÄùíû&±¥ê'\u{1e020}%¬•ëò°8üï¥üâ§"), ColumnType { scalar_type: Int64, nullable: false }), (ColumnName("?‡¢°,\u{1772}‡Æ®=.$'ûüº\\"), ColumnType { scalar_type: RegProc, nullable: true }), (ColumnName("`.‡∫•ûπü)?"), ColumnType { scalar_type: Char { length: None }, nullable: false }), (ColumnName(""), ColumnType { scalar_type: Array(TimestampTz { precision: Some(TimestampPrecision(130)) }), nullable: true }), (ColumnName(""), ColumnType { scalar_type: TimestampTz { precision: Some(TimestampPrecision(247)) }, nullable: false }), (ColumnName("S¬•%ë¢£\u{1cf44}\\ü™îûπµ3X#L<pv'‡≤ó#õÉ¶&ê†∑\\W/zü´°0>'h?."), ColumnType { scalar_type: TimestampTz { precision: None }, nullable: true }), (ColumnName(""), ColumnType { scalar_type: Map { value_type: Timestamp { precision: None }, custom_id: None }, nullable: true })], custom_id: Some(Explain) }, Record(PropDict(Row{[List([Int64(0), UInt32(0), String(""), Array(Array { elements: [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })], dims: [ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }] }), TimestampTz(CheckedTimestamp { t: +165001-03-15T21:29:30.007158Z }), TimestampTz(CheckedTimestamp { t: +53525-03-07T20:11:35.813855Z }), Map({"—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}": Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 })})])]}, [("‡ßù‡¥¥.õ∞æ=)·ãÄùíû&±¥ê'\u{1e020}%¬•ëò°8üï¥üâ§", Int64(0)), ("?‡¢°,\u{1772}‡Æ®=.$'ûüº\\", UInt32(0)), ("`.‡∫•ûπü)?", String("")), ("", Array(PropArray(Row{[Array(Array { elements: [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })], dims: [ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }] })]}, [TimestampTz(CheckedTimestamp { t: 1970-01-01T00:00:00Z }), TimestampTz(CheckedTimestamp { t: 1970-01-01T00:01:01.583193Z }), TimestampTz(CheckedTimestamp { t: +100026-03-30T00:13:39.225856Z }), TimestampTz(CheckedTimestamp { t: +157842-07-19T23:37:15.207905Z }), TimestampTz(CheckedTimestamp { t: +128264-06-03T20:21:26.968778Z }), TimestampTz(CheckedTimestamp { t: +146499-06-19T13:30:52.641919Z })]))), ("", TimestampTz(CheckedTimestamp { t: +165001-03-15T21:29:30.007158Z })), ("S¬•%ë¢£\u{1cf44}\\ü™îûπµ3X#L<pv'‡≤ó#õÉ¶&ê†∑\\W/zü´°0>'h?.", TimestampTz(CheckedTimestamp { t: +53525-03-07T20:11:35.813855Z })), ("", Map(PropDict(Row{[Map({"—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}": Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 })})]}, [("—®\u{b89f7}t@\\\u{7f}\0üï¥\u{7f}", Timestamp(CheckedTimestamp { t: +30903-04-29T23:41:14.531629 }))])))])))
cc 47ace97d829ca901cd8cbe85cfd9f1716d13df1a48cbfa2a0c5eacc08c2fff68 # shrinks to (ty, datums) = (ColumnType { scalar_type: Int2Vector, nullable: true }, [Null, Array(PropArray(Row{[Array(Array { elements: [Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(-1), Int16(-24609), Int16(19737), Int16(32572), Int16(4745), Int16(20699), Int16(26254), Int16(-16447), Int16(640), Int16(-32022), Int16(25476), Int16(30655), Int16(19125), Int16(6344), Int16(17448), Int16(10343), Int16(17519), Int16(19120), Int16(-5267), Int16(7709), Int16(19307), Int16(-25600)], dims: [ArrayDimension { lower_bound: 1, length: 2 }, ArrayDimension { lower_bound: 1, length: 1 }, ArrayDimension { lower_bound: 1, length: 3 }, ArrayDimension { lower_bound: 1, length: 2 }, ArrayDimension { lower_bound: 1, length: 3 }] })]}, [Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(0), Int16(-1), Int16(-24609), Int16(19737), Int16(32572), Int16(4745), Int16(20699), Int16(26254), Int16(-16447), Int16(640), Int16(-32022), Int16(25476), Int16(30655), Int16(19125), Int16(6344), Int16(17448), Int16(10343), Int16(17519), Int16(19120), Int16(-5267), Int16(7709), Int16(19307), Int16(-25600)]))])
cc 5294d4b8646bf778aadf1dd930bd9109347cc6bf51aa72105d2c85744b842586 # shrinks to (ty, datums) = (ColumnType { scalar_type: Jsonb, nullable: false }, [])
cc d66b43db292454632fa92406fb76800ddb9e1ce4ab11e86e6f3d886d1db6c52a # shrinks to (ty, datums) = (ColumnType { scalar_type: MzAclItem, nullable: false }, [])
