// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "repr/src/chrono.proto";
import "repr/src/adt/date.proto";
import "repr/src/adt/interval.proto";
import "repr/src/adt/mz_acl_item.proto";

package mz_repr.row;

message ProtoRow {
    repeated ProtoDatum datums = 1;
}

message ProtoDatum {
    // NB: Proto oneof ids `1..=15` get encoded in 1 byte and so we should
    // reserve them for the datum types we expect to be most popular.
    //
    // Null, False, and True are all likely to be frequent, but the encoded
    // length is exactly the same if they're here or in ProtoDatumOther. In
    // general, anything that can be encoded purely as a proto enum variant
    // (i.e. doesn't have a payload) is better off that way. If we run out of
    // 1-byte encodings of ProtoDatumOther, we can always add ProtoDatumOther2.
    oneof datum_type {
        ProtoDatumOther other = 1;
        int32 int16 = 2;
        int32 int32 = 3;
        int64 int64 = 4;
        float float32 = 5;
        double float64 = 6;
        bytes bytes = 7;
        string string = 8;
        // Don't use 9-15 without truly understanding the NB above.

        // These get encoded with 2 bytes for the oneof id. It's a pretty easy
        // and low-debt migration to "bless" one of these into having a 1-byte
        // id (fill in the new field on write, but check if either field is set
        // on read). However, once a 1-byte id is used, it's gone forever, so
        // we're conservative in handing them out.
        //
        // Of these, I'd guess Timestamp and UUID are probably the first ones
        // we'd bless followed by Date and Time.
        mz_repr.adt.date.ProtoDate date = 16;
        mz_repr.chrono.ProtoNaiveTime time = 17;
        mz_repr.chrono.ProtoNaiveDateTime timestamp = 18;
        mz_repr.chrono.ProtoNaiveDateTime timestamp_tz = 19;
        mz_repr.adt.interval.ProtoInterval interval = 20;
        ProtoArray array = 21;
        ProtoRow list = 22;
        ProtoDict dict = 23;
        ProtoNumeric numeric = 24;
        bytes uuid = 25;
        uint32 uint32 = 26;
        uint32 uint8 = 27;
        uint32 uint16 = 28;
        uint64 uint64 = 29;
        uint64 mz_timestamp = 30;
        ProtoRange range = 31;
        mz_repr.adt.mz_acl_item.ProtoMzAclItem mz_acl_item = 32;
    }
}

enum ProtoDatumOther {
    // It's generally good practice to make id 0 (the default if the field is
    // unset) in proto enums be an Unknown sentinel. This allows for
    // distinguishing between unset and any of the enum variants.
    //
    // This enum is initially used only in a oneof, which means we can
    // distinguish unset without this sentinel. But stick one in here anyway,
    // in case this enum gets used somewhere else in the future.
    UNKNOWN = 0;
    NULL = 1;
    FALSE = 2;
    TRUE = 3;
    JSON_NULL = 4;
    DUMMY = 5;
    NUMERIC_POS_INF = 6;
    NUMERIC_NEG_INF = 7;
    NUMERIC_NA_N = 8;
}

message ProtoArray {
    // All array elements flattened into 1 dimension, encoded in row-major
    // order.
    ProtoRow elements = 1;
    // A list of metadata for each dimension in the array. Each dimension has a
    // lower bound (the index at which the dimension begins) and the length of
    // the dimension (the number of elements in that dimension). For a 3x4
    // matrix, for example, you'd have two entries in the dims array, the first
    // with length 3 and the second with length 4. ATM the lower bound for each
    // dimension is always 1, but Postgres technically lets you choose any lower
    // bound you like for each dimension.
    repeated ProtoArrayDimension dims = 2;
}

message ProtoArrayDimension {
    uint64 lower_bound = 1;
    uint64 length = 2;
}

message ProtoDict {
    repeated ProtoDictElement elements = 1;
}

message ProtoDictElement {
    string key = 1;
    ProtoDatum val = 2;
}

// See [dec::to_packed_bcd] and http://speleotrove.com/decimal/dnpack.html for
// more information on this format.
//
// NB: Special values like NaN, PosInf, and NegInf are represented as variants
// of ProtoDatumOther.
message ProtoNumeric {
       // A a sequence of Binary Coded Decimal digits, most significant first (at
       // the lowest offset into the byte array) and one per 4 bits (that is, each
       // digit taking a value of 0â€“9, and two digits per byte), with optional
       // leading zero digits.
       bytes bcd = 1;
       // The number of digits that follow the decimal point.
       int32 scale = 2;
   }

message ProtoRangeInner {
    bool lower_inclusive = 1;
    ProtoDatum lower = 2;
    bool upper_inclusive = 3;
    ProtoDatum upper = 4;
}

message ProtoRange {
    ProtoRangeInner inner = 1;
}
