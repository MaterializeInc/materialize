// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::collapsible_if)]
#![warn(clippy::collapsible_else_if)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use mz_ore::metrics::HistogramVecExt;
use mz_rocksdb::{Options, RocksDBInstance, RocksDBMetrics, UpsertResult, UpsertValue};
use prometheus::{HistogramOpts, HistogramVec};

fn metrics_for_tests() -> Result<RocksDBMetrics, anyhow::Error> {
    let fake_hist_vec =
        HistogramVec::new(HistogramOpts::new("fake", "fake_help"), &["fake_label"])?;

    Ok(RocksDBMetrics {
        multi_get_latency: fake_hist_vec.get_delete_on_drop_histogram(vec!["one".to_string()]),
        multi_get_batch_size: fake_hist_vec.get_delete_on_drop_histogram(vec!["two".to_string()]),
        write_latency: fake_hist_vec.get_delete_on_drop_histogram(vec!["three".to_string()]),
        write_batch_size: fake_hist_vec.get_delete_on_drop_histogram(vec!["four".to_string()]),
    })
}

#[tokio::test]
async fn basic() -> Result<(), anyhow::Error> {
    // If the test aborts, this may not be cleaned up.
    let t = tempfile::tempdir()?;

    let mut instance = RocksDBInstance::<String, String>::new(
        t.path(),
        Options::new_with_defaults()?,
        metrics_for_tests()?,
    )
    .await?;

    let ret = instance
        .upsert(vec![
            UpsertValue {
                key: "one".to_string(),
                val: Some("onev".to_string()),
            },
            UpsertValue {
                key: "two".to_string(),
                val: Some("twov".to_string()),
            },
            UpsertValue {
                key: "already not there".to_string(),
                val: None,
            },
        ])
        .await?;

    assert_eq!(
        ret,
        vec![
            UpsertResult {
                key: "one".to_string(),
                val: Some("onev".to_string()),
                previous_value: None,
            },
            UpsertResult {
                key: "two".to_string(),
                val: Some("twov".to_string()),
                previous_value: None,
            },
            UpsertResult {
                key: "already not there".to_string(),
                val: None,
                previous_value: None,
            },
        ]
    );

    let ret = instance
        .upsert(vec![
            UpsertValue {
                key: "one".to_string(),
                val: Some("onev2".to_string()),
            },
            UpsertValue {
                key: "two".to_string(),
                val: None,
            },
        ])
        .await?;

    assert_eq!(
        ret,
        vec![
            UpsertResult {
                key: "one".to_string(),
                val: Some("onev2".to_string()),
                previous_value: Some("onev".to_string()),
            },
            UpsertResult {
                key: "two".to_string(),
                val: None,
                previous_value: Some("twov".to_string()),
            },
        ]
    );

    let ret = instance
        .upsert(vec![UpsertValue {
            key: "two".to_string(),
            val: Some("twov2".to_string()),
        }])
        .await?;

    assert_eq!(
        ret,
        vec![UpsertResult {
            key: "two".to_string(),
            val: Some("twov2".to_string()),
            previous_value: None
        },]
    );

    instance.close().await?;

    Ok(())
}
