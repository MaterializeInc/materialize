# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
GRANT admin TO joe
----
GRANT admin TO joe
=>
GrantRole(GrantRoleStatement { role_names: [Ident("admin")], member_names: [Ident("joe")] })

parse-statement
GRANT scientist TO GROUP joseph
----
GRANT scientist TO joseph
=>
GrantRole(GrantRoleStatement { role_names: [Ident("scientist")], member_names: [Ident("joseph")] })

parse-statement
GRANT admin TO joe, mike
----
GRANT admin TO joe, mike
=>
GrantRole(GrantRoleStatement { role_names: [Ident("admin")], member_names: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT scientist TO GROUP joseph, michael
----
GRANT scientist TO joseph, michael
=>
GrantRole(GrantRoleStatement { role_names: [Ident("scientist")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
GRANT scientist TO GROUP joseph, GROUP michael
----
GRANT scientist TO joseph, michael
=>
GrantRole(GrantRoleStatement { role_names: [Ident("scientist")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
GRANT scientist TO joseph, GROUP michael
----
GRANT scientist TO joseph, michael
=>
GrantRole(GrantRoleStatement { role_names: [Ident("scientist")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
GRANT scientist TO GROUP joseph, GROUP michael, GROUP yisachar
----
GRANT scientist TO joseph, michael, yisachar
=>
GrantRole(GrantRoleStatement { role_names: [Ident("scientist")], member_names: [Ident("joseph"), Ident("michael"), Ident("yisachar")] })

parse-statement
GRANT surfaces, member_of_technical_staff TO joe
----
GRANT surfaces, member_of_technical_staff TO joe
=>
GrantRole(GrantRoleStatement { role_names: [Ident("surfaces"), Ident("member_of_technical_staff")], member_names: [Ident("joe")] })

parse-statement
REVOKE doctor FROM joe
----
REVOKE doctor FROM joe
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("doctor")], member_names: [Ident("joe")] })

parse-statement
REVOKE ability_to_practice_law_in_arkansas FROM GROUP joseph
----
REVOKE ability_to_practice_law_in_arkansas FROM joseph
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("ability_to_practice_law_in_arkansas")], member_names: [Ident("joseph")] })

parse-statement
REVOKE doctor FROM joe, mike
----
REVOKE doctor FROM joe, mike
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("doctor")], member_names: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE ability_to_practice_law_in_arkansas FROM GROUP joseph, michael
----
REVOKE ability_to_practice_law_in_arkansas FROM joseph, michael
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("ability_to_practice_law_in_arkansas")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
REVOKE ability_to_practice_law_in_arkansas FROM joseph, GROUP michael
----
REVOKE ability_to_practice_law_in_arkansas FROM joseph, michael
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("ability_to_practice_law_in_arkansas")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
REVOKE ability_to_practice_law_in_arkansas FROM GROUP joseph, GROUP michael
----
REVOKE ability_to_practice_law_in_arkansas FROM joseph, michael
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("ability_to_practice_law_in_arkansas")], member_names: [Ident("joseph"), Ident("michael")] })

parse-statement
REVOKE ability_to_practice_law_in_arkansas FROM GROUP joseph, GROUP michael, GROUP yisachar
----
REVOKE ability_to_practice_law_in_arkansas FROM joseph, michael, yisachar
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("ability_to_practice_law_in_arkansas")], member_names: [Ident("joseph"), Ident("michael"), Ident("yisachar")] })

parse-statement
REVOKE surfaces, member_of_technical_staff FROM joe
----
REVOKE surfaces, member_of_technical_staff FROM joe
=>
RevokeRole(RevokeRoleStatement { role_names: [Ident("surfaces"), Ident("member_of_technical_staff")], member_names: [Ident("joe")] })

parse-statement
ALTER CLUSTER foo OWNER TO joe
----
ALTER CLUSTER foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Cluster, if_exists: false, name: Cluster(Ident("foo")), new_owner: Ident("joe") })

parse-statement
ALTER CLUSTER IF EXISTS foo OWNER TO joe
----
ALTER CLUSTER IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Cluster, if_exists: true, name: Cluster(Ident("foo")), new_owner: Ident("joe") })

parse-statement
ALTER CLUSTER REPLICA c.foo OWNER TO joe
----
ALTER CLUSTER REPLICA c.foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: ClusterReplica, if_exists: false, name: ClusterReplica(QualifiedReplica { cluster: Ident("c"), replica: Ident("foo") }), new_owner: Ident("joe") })

parse-statement
ALTER CLUSTER REPLICA IF EXISTS c.foo OWNER TO joe
----
ALTER CLUSTER REPLICA IF EXISTS c.foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: ClusterReplica, if_exists: true, name: ClusterReplica(QualifiedReplica { cluster: Ident("c"), replica: Ident("foo") }), new_owner: Ident("joe") })

parse-statement
ALTER DATABASE foo OWNER TO joe
----
ALTER DATABASE foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Database, if_exists: false, name: Database(UnresolvedDatabaseName(Ident("foo"))), new_owner: Ident("joe") })

parse-statement
ALTER DATABASE IF EXISTS foo OWNER TO joe
----
ALTER DATABASE IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Database, if_exists: true, name: Database(UnresolvedDatabaseName(Ident("foo"))), new_owner: Ident("joe") })

parse-statement
ALTER SCHEMA foo OWNER TO joe
----
ALTER SCHEMA foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Schema, if_exists: false, name: Schema(UnresolvedSchemaName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SCHEMA IF EXISTS foo OWNER TO joe
----
ALTER SCHEMA IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Schema, if_exists: true, name: Schema(UnresolvedSchemaName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SCHEMA bar.foo OWNER TO joe
----
ALTER SCHEMA bar.foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Schema, if_exists: false, name: Schema(UnresolvedSchemaName([Ident("bar"), Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SCHEMA IF EXISTS bar.foo OWNER TO joe
----
ALTER SCHEMA IF EXISTS bar.foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Schema, if_exists: true, name: Schema(UnresolvedSchemaName([Ident("bar"), Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER TABLE foo OWNER TO joe
----
ALTER TABLE foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Table, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER TABLE IF EXISTS foo OWNER TO joe
----
ALTER TABLE IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Table, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SINK foo OWNER TO joe
----
ALTER SINK foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Sink, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SINK IF EXISTS foo OWNER TO joe
----
ALTER SINK IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Sink, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SOURCE foo OWNER TO joe
----
ALTER SOURCE foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Source, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SOURCE IF EXISTS foo OWNER TO joe
----
ALTER SOURCE IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Source, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER INDEX foo OWNER TO joe
----
ALTER INDEX foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Index, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER INDEX IF EXISTS foo OWNER TO joe
----
ALTER INDEX IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Index, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SECRET foo OWNER TO joe
----
ALTER SECRET foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Secret, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER SECRET IF EXISTS foo OWNER TO joe
----
ALTER SECRET IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Secret, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER CONNECTION foo OWNER TO joe
----
ALTER CONNECTION foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Connection, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER CONNECTION IF EXISTS foo OWNER TO joe
----
ALTER CONNECTION IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: Connection, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER VIEW foo OWNER TO joe
----
ALTER VIEW foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: View, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER VIEW IF EXISTS foo OWNER TO joe
----
ALTER VIEW IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: View, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER MATERIALIZED VIEW foo OWNER TO joe
----
ALTER MATERIALIZED VIEW foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: MaterializedView, if_exists: false, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
ALTER MATERIALIZED VIEW IF EXISTS foo OWNER TO joe
----
ALTER MATERIALIZED VIEW IF EXISTS foo OWNER TO joe
=>
AlterOwner(AlterOwnerStatement { object_type: MaterializedView, if_exists: true, name: Item(UnresolvedItemName([Ident("foo")])), new_owner: Ident("joe") })

parse-statement
GRANT USAGE, CREATE ON CLUSTER foo TO joe
----
GRANT USAGE, CREATE ON CLUSTER foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE, CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("foo"))] } }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE, CREATE ON CLUSTER REPLICA foo.r TO joe
----
error: Unsupported GRANT on CLUSTER REPLICA
GRANT USAGE, CREATE ON CLUSTER REPLICA foo.r TO joe
                               ^

parse-statement
GRANT CREATE ON DATABASE foo TO joe
----
GRANT CREATE ON DATABASE foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("foo")))] } }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE ON SCHEMA foo TO joe
----
GRANT USAGE ON SCHEMA foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Schema, object_spec_inner: Objects { names: [Schema(UnresolvedSchemaName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE foo TO joe
----
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT, INSERT, UPDATE, DELETE]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE ON foo TO joe
----
GRANT USAGE ON TABLE foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE ON SINK foo TO joe
----
error: Unsupported GRANT on SINK
GRANT USAGE ON SINK foo TO joe
               ^

parse-statement
GRANT USAGE ON SOURCE foo TO joe
----
error: For object type SOURCE, you must specify 'TABLE' or omit the object type
GRANT USAGE ON SOURCE foo TO joe
               ^

parse-statement
GRANT USAGE ON INDEX foo TO joe
----
error: Unsupported GRANT on INDEX
GRANT USAGE ON INDEX foo TO joe
               ^

parse-statement
GRANT USAGE ON SECRET foo TO joe
----
GRANT USAGE ON SECRET foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE ON CONNECTION foo TO joe
----
GRANT USAGE ON CONNECTION foo TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Connection, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT SELECT ON VIEW foo TO joe
----
error: For object type VIEW, you must specify 'TABLE' or omit the object type
GRANT SELECT ON VIEW foo TO joe
                ^

parse-statement
GRANT SELECT ON MATERIALIZED VIEW foo TO joe
----
error: For object type MATERIALIZED VIEW, you must specify 'TABLE' or omit the object type
GRANT SELECT ON MATERIALIZED VIEW foo TO joe
                             ^

parse-statement
GRANT FAKE ON TABLE t TO joe
----
error: Expected TO, found ON
GRANT FAKE ON TABLE t TO joe
           ^

parse-statement
GRANT SELECT, INSERT ON t TO joe, mike
----
GRANT SELECT, INSERT ON TABLE t TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t")]))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT USAGE ON DATABASE d TO joe, mike
----
GRANT USAGE ON DATABASE d TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("d")))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT ALL ON DATABASE d TO joe, mike
----
GRANT ALL ON DATABASE d TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: All, target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("d")))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT ALL PRIVILEGES ON TYPE t TO joe
----
GRANT ALL ON TYPE t TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: All, target: GrantTargetSpecification { object_type: Type, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t")]))] } }, roles: [Ident("joe")] })

parse-statement
GRANT CREATE ON CLUSTER c TO GROUP joe, GROUP mike
----
GRANT CREATE ON CLUSTER c TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT CREATE ON CLUSTER c TO joe, GROUP mike
----
GRANT CREATE ON CLUSTER c TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT CREATE ON CLUSTER c TO joe, GROUP mike, GROUP yisachar
----
GRANT CREATE ON CLUSTER c TO joe, mike, yisachar
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike"), Ident("yisachar")] })

parse-statement
GRANT SELECT, INSERT ON TABLE t1, t2 TO joe, mike
----
GRANT SELECT, INSERT ON TABLE t1, t2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t1")])), Item(UnresolvedItemName([Ident("t2")]))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT SELECT, INSERT ON ALL TABLES IN SCHEMA s1, d.s2 TO joe, mike
----
GRANT SELECT, INSERT ON ALL TABLES IN SCHEMA s1, d.s2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT SELECT, INSERT ON ALL TABLE IN SCHEMA s1, d.s2 TO joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
GRANT SELECT, INSERT ON ALL TABLE IN SCHEMA s1, d.s2 TO joe, mike
                            ^

parse-statement
GRANT USAGE ON ALL TYPES IN SCHEMA s1, d.s2 TO joe, mike
----
GRANT USAGE ON ALL TYPES IN SCHEMA s1, d.s2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Type, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT USAGE ON ALL TYPE IN SCHEMA s1, d.s2 TO joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TYPE
GRANT USAGE ON ALL TYPE IN SCHEMA s1, d.s2 TO joe, mike
                   ^

parse-statement
GRANT USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 TO joe, mike
----
GRANT USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT USAGE ON ALL SECRET IN SCHEMA s1, d.s2 TO joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found SECRET
GRANT USAGE ON ALL SECRET IN SCHEMA s1, d.s2 TO joe, mike
                   ^

parse-statement
GRANT USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 TO joe, mike
----
GRANT USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT USAGE ON ALL SECRET IN SCHEMA s1, d.s2 TO joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found SECRET
GRANT USAGE ON ALL SECRET IN SCHEMA s1, d.s2 TO joe, mike
                   ^

parse-statement
GRANT USAGE ON ALL CONNECTIONS IN SCHEMA s1, d.s2 TO joe, mike
----
GRANT USAGE ON ALL CONNECTIONS IN SCHEMA s1, d.s2 TO joe, mike
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Connection, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
GRANT USAGE ON ALL CONNECTION IN SCHEMA s1, d.s2 TO joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found CONNECTION
GRANT USAGE ON ALL CONNECTION IN SCHEMA s1, d.s2 TO joe, mike
                   ^

parse-statement
GRANT USAGE ON ALL DATABASES IN SCHEMA s1, d.s2 TO joe, mike
----
error: IN invalid for DATABASES
GRANT USAGE ON ALL DATABASES IN SCHEMA s1, d.s2 TO joe, mike
                             ^

parse-statement
GRANT CREATE ON ALL SCHEMAS IN SCHEMA sq TO joe
----
error: Expected DATABASE, found SCHEMA
GRANT CREATE ON ALL SCHEMAS IN SCHEMA sq TO joe
                               ^

parse-statement
GRANT SELECT ON ALL TABLES IN DATABASE d1, d2 TO joe
----
GRANT SELECT ON ALL TABLES IN DATABASE d1, d2 TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: All(AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }) }, roles: [Ident("joe")] })

parse-statement
GRANT USAGE ON ALL SCHEMAS IN DATABASE d1, d2 TO joe
----
GRANT USAGE ON ALL SCHEMAS IN DATABASE d1, d2 TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Schema, object_spec_inner: All(AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }) }, roles: [Ident("joe")] })

parse-statement
GRANT CREATE ON ALL CLUSTERS IN DATABASE d1, d2 TO joe
----
error: IN invalid for CLUSTERS
GRANT CREATE ON ALL CLUSTERS IN DATABASE d1, d2 TO joe
                             ^

parse-statement
GRANT CREATE ON ALL TABLE IN DATABASE d1, d2 TO joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
GRANT CREATE ON ALL TABLE IN DATABASE d1, d2 TO joe
                    ^

parse-statement
GRANT SELECT ON ALL TYPES TO joe
----
GRANT SELECT ON ALL TYPES TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([SELECT]), target: GrantTargetSpecification { object_type: Type, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
GRANT CREATE ON ALL DATABASES TO joe
----
GRANT CREATE ON ALL DATABASES TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
GRANT CREATE ON ALL CLUSTERS TO joe
----
GRANT CREATE ON ALL CLUSTERS TO joe
=>
GrantPrivileges(GrantPrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
GRANT CREATE ON ALL CLUSTER TO joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found CLUSTER
GRANT CREATE ON ALL CLUSTER TO joe
                    ^

parse-statement
REVOKE USAGE, CREATE ON CLUSTER foo FROM joe
----
REVOKE USAGE, CREATE ON CLUSTER foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE, CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("foo"))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE, CREATE ON CLUSTER REPLICA foo.r FROM joe
----
error: Unsupported REVOKE on CLUSTER REPLICA
REVOKE USAGE, CREATE ON CLUSTER REPLICA foo.r FROM joe
                                ^

parse-statement
REVOKE CREATE ON DATABASE foo FROM joe
----
REVOKE CREATE ON DATABASE foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("foo")))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE ON SCHEMA foo FROM joe
----
REVOKE USAGE ON SCHEMA foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Schema, object_spec_inner: Objects { names: [Schema(UnresolvedSchemaName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE foo FROM joe
----
REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT, INSERT, UPDATE, DELETE]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE ON foo FROM joe
----
REVOKE USAGE ON TABLE foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE ON SINK foo FROM joe
----
error: Unsupported REVOKE on SINK
REVOKE USAGE ON SINK foo FROM joe
                ^

parse-statement
REVOKE USAGE ON SOURCE foo FROM joe
----
error: For object type SOURCE, you must specify 'TABLE' or omit the object type
REVOKE USAGE ON SOURCE foo FROM joe
                ^

parse-statement
REVOKE USAGE ON INDEX foo FROM joe
----
error: Unsupported REVOKE on INDEX
REVOKE USAGE ON INDEX foo FROM joe
                ^

parse-statement
REVOKE USAGE ON SECRET foo FROM joe
----
REVOKE USAGE ON SECRET foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE ON CONNECTION foo FROM joe
----
REVOKE USAGE ON CONNECTION foo FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Connection, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("foo")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE SELECT ON VIEW foo FROM joe
----
error: For object type VIEW, you must specify 'TABLE' or omit the object type
REVOKE SELECT ON VIEW foo FROM joe
                 ^

parse-statement
REVOKE SELECT ON MATERIALIZED VIEW foo FROM joe
----
error: For object type MATERIALIZED VIEW, you must specify 'TABLE' or omit the object type
REVOKE SELECT ON MATERIALIZED VIEW foo FROM joe
                              ^

parse-statement
REVOKE FAKE ON TABLE t FROM joe
----
error: Expected FROM, found ON
REVOKE FAKE ON TABLE t FROM joe
            ^

parse-statement
REVOKE SELECT, INSERT ON t FROM joe, mike
----
REVOKE SELECT, INSERT ON TABLE t FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t")]))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE USAGE ON DATABASE d FROM joe, mike
----
REVOKE USAGE ON DATABASE d FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("d")))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE ALL ON DATABASE d FROM joe, mike
----
REVOKE ALL ON DATABASE d FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: All, target: GrantTargetSpecification { object_type: Database, object_spec_inner: Objects { names: [Database(UnresolvedDatabaseName(Ident("d")))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE ALL PRIVILEGES ON TYPE t FROM joe
----
REVOKE ALL ON TYPE t FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: All, target: GrantTargetSpecification { object_type: Type, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t")]))] } }, roles: [Ident("joe")] })

parse-statement
REVOKE CREATE ON CLUSTER c FROM GROUP joe, GROUP mike
----
REVOKE CREATE ON CLUSTER c FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE CREATE ON CLUSTER c FROM joe, GROUP mike
----
REVOKE CREATE ON CLUSTER c FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE CREATE ON CLUSTER c FROM joe, GROUP mike, GROUP yisachar
----
REVOKE CREATE ON CLUSTER c FROM joe, mike, yisachar
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: Objects { names: [Cluster(Ident("c"))] } }, roles: [Ident("joe"), Ident("mike"), Ident("yisachar")] })

parse-statement
REVOKE SELECT, INSERT ON TABLE t1, t2 FROM joe, mike
----
REVOKE SELECT, INSERT ON TABLE t1, t2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: Objects { names: [Item(UnresolvedItemName([Ident("t1")])), Item(UnresolvedItemName([Ident("t2")]))] } }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE SELECT, INSERT ON ALL TABLES IN SCHEMA s1, d.s2 FROM joe, mike
----
REVOKE SELECT, INSERT ON ALL TABLES IN SCHEMA s1, d.s2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT, INSERT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE SELECT, INSERT ON ALL TABLE IN SCHEMA s1, d.s2 FROM joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
REVOKE SELECT, INSERT ON ALL TABLE IN SCHEMA s1, d.s2 FROM joe, mike
                             ^

parse-statement
REVOKE USAGE ON ALL TYPES IN SCHEMA s1, d.s2 FROM joe, mike
----
REVOKE USAGE ON ALL TYPES IN SCHEMA s1, d.s2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Type, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE USAGE ON ALL TYPE IN SCHEMA s1, d.s2 FROM joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TYPE
REVOKE USAGE ON ALL TYPE IN SCHEMA s1, d.s2 FROM joe, mike
                    ^

parse-statement
REVOKE USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 FROM joe, mike
----
REVOKE USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE USAGE ON ALL SECRET IN SCHEMA s1, d.s2 FROM joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found SECRET
REVOKE USAGE ON ALL SECRET IN SCHEMA s1, d.s2 FROM joe, mike
                    ^

parse-statement
REVOKE USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 FROM joe, mike
----
REVOKE USAGE ON ALL SECRETS IN SCHEMA s1, d.s2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Secret, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE USAGE ON ALL SECRET IN SCHEMA s1, d.s2 FROM joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found SECRET
REVOKE USAGE ON ALL SECRET IN SCHEMA s1, d.s2 FROM joe, mike
                    ^

parse-statement
REVOKE USAGE ON ALL CONNECTIONS IN SCHEMA s1, d.s2 FROM joe, mike
----
REVOKE USAGE ON ALL CONNECTIONS IN SCHEMA s1, d.s2 FROM joe, mike
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Connection, object_spec_inner: All(AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d"), Ident("s2")])] }) }, roles: [Ident("joe"), Ident("mike")] })

parse-statement
REVOKE USAGE ON ALL CONNECTION IN SCHEMA s1, d.s2 FROM joe, mike
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found CONNECTION
REVOKE USAGE ON ALL CONNECTION IN SCHEMA s1, d.s2 FROM joe, mike
                    ^

parse-statement
REVOKE USAGE ON ALL DATABASES IN SCHEMA s1, d.s2 FROM joe, mike
----
error: IN invalid for DATABASES
REVOKE USAGE ON ALL DATABASES IN SCHEMA s1, d.s2 FROM joe, mike
                              ^

parse-statement
REVOKE CREATE ON ALL SCHEMAS IN SCHEMA sq FROM joe
----
error: Expected DATABASE, found SCHEMA
REVOKE CREATE ON ALL SCHEMAS IN SCHEMA sq FROM joe
                                ^

parse-statement
REVOKE SELECT ON ALL TABLES IN DATABASE d1, d2 FROM joe
----
REVOKE SELECT ON ALL TABLES IN DATABASE d1, d2 FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT]), target: GrantTargetSpecification { object_type: Table, object_spec_inner: All(AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }) }, roles: [Ident("joe")] })

parse-statement
REVOKE USAGE ON ALL SCHEMAS IN DATABASE d1, d2 FROM joe
----
REVOKE USAGE ON ALL SCHEMAS IN DATABASE d1, d2 FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([USAGE]), target: GrantTargetSpecification { object_type: Schema, object_spec_inner: All(AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }) }, roles: [Ident("joe")] })

parse-statement
REVOKE CREATE ON ALL CLUSTERS IN DATABASE d1, d2 FROM joe
----
error: IN invalid for CLUSTERS
REVOKE CREATE ON ALL CLUSTERS IN DATABASE d1, d2 FROM joe
                              ^

parse-statement
REVOKE CREATE ON ALL TABLE IN DATABASE d1, d2 FROM joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
REVOKE CREATE ON ALL TABLE IN DATABASE d1, d2 FROM joe
                     ^

parse-statement
REVOKE SELECT ON ALL TYPES FROM joe
----
REVOKE SELECT ON ALL TYPES FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([SELECT]), target: GrantTargetSpecification { object_type: Type, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
REVOKE CREATE ON ALL DATABASES FROM joe
----
REVOKE CREATE ON ALL DATABASES FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Database, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
REVOKE CREATE ON ALL CLUSTERS FROM joe
----
REVOKE CREATE ON ALL CLUSTERS FROM joe
=>
RevokePrivileges(RevokePrivilegesStatement { privileges: Privileges([CREATE]), target: GrantTargetSpecification { object_type: Cluster, object_spec_inner: All(All) }, roles: [Ident("joe")] })

parse-statement
REVOKE CREATE ON ALL CLUSTER FROM joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found CLUSTER
REVOKE CREATE ON ALL CLUSTER FROM joe
                     ^

parse-statement
ALTER DEFAULT PRIVILEGES GRANT SELECT ON TABLES TO joe
----
ALTER DEFAULT PRIVILEGES GRANT SELECT ON TABLES TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([SELECT]), object_type: Table, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES GRANT SELECT ON TABLE TO joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
ALTER DEFAULT PRIVILEGES GRANT SELECT ON TABLE TO joe
                                         ^

parse-statement
ALTER DEFAULT PRIVILEGES GRANT USAGE, CREATE ON SCHEMAS TO joe, GROUP mike
----
ALTER DEFAULT PRIVILEGES GRANT USAGE, CREATE ON SCHEMAS TO joe, mike
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([USAGE, CREATE]), object_type: Schema, grantees: [Ident("joe"), Ident("mike")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES GRANT ALL ON DATABASES TO GROUP joe
----
ALTER DEFAULT PRIVILEGES GRANT ALL ON DATABASES TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: All, object_type: Database, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES GRANT ALL PRIVILEGES ON CLUSTERS TO joe
----
ALTER DEFAULT PRIVILEGES GRANT ALL ON CLUSTERS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: All, object_type: Cluster, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN SCHEMA s1 GRANT USAGE ON TYPES TO joe
----
ALTER DEFAULT PRIVILEGES IN SCHEMA s1 GRANT USAGE ON TYPES TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")])] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([USAGE]), object_type: Type, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN SCHEMA s1, d1.s2 GRANT USAGE ON SECRETS TO joe
----
ALTER DEFAULT PRIVILEGES IN SCHEMA s1, d1.s2 GRANT USAGE ON SECRETS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d1"), Ident("s2")])] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([USAGE]), object_type: Secret, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN DATABASE d1 GRANT USAGE ON CONNECTIONS TO joe
----
ALTER DEFAULT PRIVILEGES IN DATABASE d1 GRANT USAGE ON CONNECTIONS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1"))] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([USAGE]), object_type: Connection, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN DATABASE d1, d2 GRANT INSERT, DELETE ON TABLES TO joe
----
ALTER DEFAULT PRIVILEGES IN DATABASE d1, d2 GRANT INSERT, DELETE ON TABLES TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([INSERT, DELETE]), object_type: Table, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 GRANT ALL ON CLUSTERS TO joe
----
ALTER DEFAULT PRIVILEGES FOR r1 GRANT ALL ON CLUSTERS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: All, object_type: Cluster, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR ROLE r1 GRANT ALL ON CLUSTERS TO joe
----
ALTER DEFAULT PRIVILEGES FOR r1 GRANT ALL ON CLUSTERS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: All, object_type: Cluster, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR USER r1 GRANT ALL ON CLUSTERS TO joe
----
ALTER DEFAULT PRIVILEGES FOR r1 GRANT ALL ON CLUSTERS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: All, object_type: Cluster, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1, r2 GRANT CREATE ON DATABASES TO joe, mike
----
ALTER DEFAULT PRIVILEGES FOR r1, r2 GRANT CREATE ON DATABASES TO joe, mike
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1"), Ident("r2")]), target_objects: All, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([CREATE]), object_type: Database, grantees: [Ident("joe"), Ident("mike")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 IN SCHEMA s1 GRANT CREATE ON SCHEMAS TO joe
----
ALTER DEFAULT PRIVILEGES FOR r1 IN SCHEMA s1 GRANT CREATE ON SCHEMAS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")])] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([CREATE]), object_type: Schema, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 IN DATABASE d1 GRANT USAGE ON SECRETS TO joe
----
ALTER DEFAULT PRIVILEGES FOR r1 IN DATABASE d1 GRANT USAGE ON SECRETS TO joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1"))] }, grant_or_revoke: Grant(AbbreviatedGrantStatement { privileges: Privileges([USAGE]), object_type: Secret, grantees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN GRANT USAGE ON CONNECTIONS TO joe
----
error: Expected one of SCHEMA or DATABASE, found GRANT
ALTER DEFAULT PRIVILEGES IN GRANT USAGE ON CONNECTIONS TO joe
                            ^

parse-statement
ALTER DEFAULT PRIVILEGES REVOKE SELECT ON TABLES FROM joe
----
ALTER DEFAULT PRIVILEGES REVOKE SELECT ON TABLES FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([SELECT]), object_type: Table, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES REVOKE SELECT ON TABLE FROM joe
----
error: Expected one of TABLES or TYPES or SECRETS or CONNECTIONS or SCHEMAS or DATABASES or CLUSTERS, found TABLE
ALTER DEFAULT PRIVILEGES REVOKE SELECT ON TABLE FROM joe
                                          ^

parse-statement
ALTER DEFAULT PRIVILEGES REVOKE USAGE, CREATE ON SCHEMAS FROM joe, GROUP mike
----
ALTER DEFAULT PRIVILEGES REVOKE USAGE, CREATE ON SCHEMAS FROM joe, mike
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([USAGE, CREATE]), object_type: Schema, revokees: [Ident("joe"), Ident("mike")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES REVOKE ALL ON DATABASES FROM GROUP joe
----
ALTER DEFAULT PRIVILEGES REVOKE ALL ON DATABASES FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: All, object_type: Database, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES REVOKE ALL PRIVILEGES ON CLUSTERS FROM joe
----
ALTER DEFAULT PRIVILEGES REVOKE ALL ON CLUSTERS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: All, object_type: Cluster, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN SCHEMA s1 REVOKE USAGE ON TYPES FROM joe
----
ALTER DEFAULT PRIVILEGES IN SCHEMA s1 REVOKE USAGE ON TYPES FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")])] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([USAGE]), object_type: Type, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN SCHEMA s1, d1.s2 REVOKE USAGE ON SECRETS FROM joe
----
ALTER DEFAULT PRIVILEGES IN SCHEMA s1, d1.s2 REVOKE USAGE ON SECRETS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")]), UnresolvedSchemaName([Ident("d1"), Ident("s2")])] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([USAGE]), object_type: Secret, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN DATABASE d1 REVOKE USAGE ON CONNECTIONS FROM joe
----
ALTER DEFAULT PRIVILEGES IN DATABASE d1 REVOKE USAGE ON CONNECTIONS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1"))] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([USAGE]), object_type: Connection, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN DATABASE d1, d2 REVOKE INSERT, DELETE ON TABLES FROM joe
----
ALTER DEFAULT PRIVILEGES IN DATABASE d1, d2 REVOKE INSERT, DELETE ON TABLES FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: None, target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1")), UnresolvedDatabaseName(Ident("d2"))] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([INSERT, DELETE]), object_type: Table, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 REVOKE ALL ON CLUSTERS FROM joe
----
ALTER DEFAULT PRIVILEGES FOR r1 REVOKE ALL ON CLUSTERS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: All, object_type: Cluster, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR ROLE r1 REVOKE ALL ON CLUSTERS FROM joe
----
ALTER DEFAULT PRIVILEGES FOR r1 REVOKE ALL ON CLUSTERS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: All, object_type: Cluster, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR USER r1 REVOKE ALL ON CLUSTERS FROM joe
----
ALTER DEFAULT PRIVILEGES FOR r1 REVOKE ALL ON CLUSTERS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: All, object_type: Cluster, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1, r2 REVOKE CREATE ON DATABASES FROM joe, mike
----
ALTER DEFAULT PRIVILEGES FOR r1, r2 REVOKE CREATE ON DATABASES FROM joe, mike
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1"), Ident("r2")]), target_objects: All, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([CREATE]), object_type: Database, revokees: [Ident("joe"), Ident("mike")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 IN SCHEMA s1 REVOKE CREATE ON SCHEMAS FROM joe
----
ALTER DEFAULT PRIVILEGES FOR r1 IN SCHEMA s1 REVOKE CREATE ON SCHEMAS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: AllSchemas { schemas: [UnresolvedSchemaName([Ident("s1")])] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([CREATE]), object_type: Schema, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES FOR r1 IN DATABASE d1 REVOKE USAGE ON SECRETS FROM joe
----
ALTER DEFAULT PRIVILEGES FOR r1 IN DATABASE d1 REVOKE USAGE ON SECRETS FROM joe
=>
AlterDefaultPrivileges(AlterDefaultPrivilegesStatement { target_roles: Some([Ident("r1")]), target_objects: AllDatabases { databases: [UnresolvedDatabaseName(Ident("d1"))] }, grant_or_revoke: Revoke(AbbreviatedRevokeStatement { privileges: Privileges([USAGE]), object_type: Secret, revokees: [Ident("joe")] }) })

parse-statement
ALTER DEFAULT PRIVILEGES IN REVOKE USAGE ON CONNECTIONS FROM joe
----
error: Expected one of SCHEMA or DATABASE, found REVOKE
ALTER DEFAULT PRIVILEGES IN REVOKE USAGE ON CONNECTIONS FROM joe
                            ^

parse-statement
REASSIGN OWNED BY joe TO yisachar
----
REASSIGN OWNED BY joe TO yisachar
=>
ReassignOwned(ReassignOwnedStatement { old_roles: [Ident("joe")], new_role: Ident("yisachar") })

parse-statement
REASSIGN OWNED BY joe, mike TO yisachar
----
REASSIGN OWNED BY joe, mike TO yisachar
=>
ReassignOwned(ReassignOwnedStatement { old_roles: [Ident("joe"), Ident("mike")], new_role: Ident("yisachar") })
