# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
COMMENT ON TABLE my_table IS 'hello world this is a cool table.'
----
COMMENT ON TABLE my_table IS 'hello world this is a cool table.'
=>
Comment(CommentStatement { object: Table { name: UnresolvedItemName([Ident("my_table")]) }, comment: Some("hello world this is a cool table.") })

parse-statement
COMMENT ON VIEW amazing_view IS 'this view powers a 1,000,000x startup'
----
COMMENT ON VIEW amazing_view IS 'this view powers a 1,000,000x startup'
=>
Comment(CommentStatement { object: View { name: UnresolvedItemName([Ident("amazing_view")]) }, comment: Some("this view powers a 1,000,000x startup") })

parse-statement
COMMENT ON COLUMN building.load_bearing_column IS 'do not move this column, it is load bearing'
----
COMMENT ON COLUMN building.load_bearing_column IS 'do not move this column, it is load bearing'
=>
Comment(CommentStatement { object: Column { relation_name: UnresolvedItemName([Ident("building")]), column_name: Ident("load_bearing_column") }, comment: Some("do not move this column, it is load bearing") })

parse-statement
COMMENT ON TABLE my_table
----
error: Expected IS, found EOF
COMMENT ON TABLE my_table
                         ^

parse-statement
COMMENT ON TABLE escaping IS 'it''s a single '' within a single '' string'
----
COMMENT ON TABLE escaping IS 'it''s a single '' within a single '' string'
=>
Comment(CommentStatement { object: Table { name: UnresolvedItemName([Ident("escaping")]) }, comment: Some("it's a single ' within a single ' string") })

parse-statement
COMMENT ON VIEW emoji_movie IS 'this movie was not that good ðŸ“‰ðŸ˜­'
----
COMMENT ON VIEW emoji_movie IS 'this movie was not that good ðŸ“‰ðŸ˜­'
=>
Comment(CommentStatement { object: View { name: UnresolvedItemName([Ident("emoji_movie")]) }, comment: Some("this movie was not that good ðŸ“‰ðŸ˜­") })

parse-statement
COMMENT ON COLUMN cool_table.bad_column IS NULL
----
COMMENT ON COLUMN cool_table.bad_column IS NULL
=>
Comment(CommentStatement { object: Column { relation_name: UnresolvedItemName([Ident("cool_table")]), column_name: Ident("bad_column") }, comment: None })
