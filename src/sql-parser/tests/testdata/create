# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool)
----
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: Map { options: [CreateTypeMapOption { name: KeyType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] })) }, CreateTypeMapOption { name: ValueType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("bool")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS (a int, b text)
----
CREATE TYPE custom AS (a int4, b text)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = custom_type)
----
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = custom_type)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: Map { options: [CreateTypeMapOption { name: KeyType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] })) }, CreateTypeMapOption { name: ValueType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("custom_type")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text)
----
CREATE TYPE custom AS MAP (KEY TYPE = text)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: Map { options: [CreateTypeMapOption { name: KeyType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (VALUE TYPE = bool)
----
CREATE TYPE custom AS MAP (VALUE TYPE = bool)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: Map { options: [CreateTypeMapOption { name: ValueType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("bool")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool, random_type=int)
----
error: Expected one of KEY or VALUE, found identifier "random_type"
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool, random_type=int)
                                                               ^

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, random_type=int)
----
error: Expected one of KEY or VALUE, found identifier "random_type"
CREATE TYPE custom AS MAP (KEY TYPE = text, random_type=int)
                                            ^

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=text)
----
CREATE TYPE custom AS LIST (ELEMENT TYPE = text)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=x)
----
CREATE TYPE custom AS LIST (ELEMENT TYPE = x)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("x")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=_text)
----
CREATE TYPE custom AS LIST (ELEMENT TYPE = _text)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("custom")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("_text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE schema.t2 AS LIST (ELEMENT TYPE=schema.t1)
----
CREATE TYPE schema.t2 AS LIST (ELEMENT TYPE = schema.t1)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("schema"), Ident("t2")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("schema"), Ident("t1")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE db2.schema2.t2 AS LIST (ELEMENT TYPE=db1.schema1.t1)
----
CREATE TYPE db2.schema2.t2 AS LIST (ELEMENT TYPE = db1.schema1.t1)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("db2"), Ident("schema2"), Ident("t2")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("db1"), Ident("schema1"), Ident("t1")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE numeric_list AS LIST (ELEMENT TYPE=numeric(100,100,100))
----
CREATE TYPE numeric_list AS LIST (ELEMENT TYPE = numeric(100, 100, 100))
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("numeric_list")]), as_type: List { options: [CreateTypeListOption { name: ElementType, value: Some(DataType(Other { name: Name(UnresolvedItemName([Ident("numeric")])), typ_mod: [100, 100, 100] })) }] } })

parse-statement
CREATE TYPE named_composite AS (a int, b text, c float8);
----
CREATE TYPE named_composite AS (a int4, b text, c float8)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedItemName([Ident("float8")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE TYPE named_composite AS (a InT,     b text, c flOAt8   );
----
CREATE TYPE named_composite AS (a int4, b text, c float8)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedItemName([Ident("float8")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE TYPE named_composite AS (a int, b other_type, c yet_another_type);
----
CREATE TYPE named_composite AS (a int4, b other_type, c yet_another_type)
=>
CreateType(CreateTypeStatement { name: UnresolvedItemName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedItemName([Ident("other_type")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedItemName([Ident("yet_another_type")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE ROLE arjun
----
CREATE ROLE arjun
=>
CreateRole(CreateRoleStatement { name: Ident("arjun"), options: [] })

parse-statement
CREATE ROLE frank SUPERUSER
----
CREATE ROLE frank SUPERUSER
=>
CreateRole(CreateRoleStatement { name: Ident("frank"), options: [SuperUser] })

parse-statement
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN INHERIT NOINHERIT CREATECLUSTER NOCREATECLUSTER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE
----
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN INHERIT NOINHERIT CREATECLUSTER NOCREATECLUSTER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE
=>
CreateRole(CreateRoleStatement { name: Ident("other_usr"), options: [Login, NoSuperUser, SuperUser, NoLogin, Inherit, NoInherit, CreateCluster, NoCreateCluster, CreateDB, NoCreateDB, CreateRole, NoCreateRole] })

parse-statement
CREATE ROLE bad.qualification
----
error: Expected end of statement, found dot
CREATE ROLE bad.qualification
               ^

parse-statement
CREATE ROLE usr WITH LOGIN
----
CREATE ROLE usr LOGIN
=>
CreateRole(CreateRoleStatement { name: Ident("usr"), options: [Login] })

parse-statement
CREATE ROLE usr WITH badopt
----
error: Expected end of statement, found identifier "badopt"
CREATE ROLE usr WITH badopt
                     ^

parse-statement
ALTER ROLE arjun
----
ALTER ROLE arjun
=>
AlterRole(AlterRoleStatement { name: Ident("arjun"), options: [] })

parse-statement
ALTER ROLE frank SUPERUSER
----
ALTER ROLE frank SUPERUSER
=>
AlterRole(AlterRoleStatement { name: Ident("frank"), options: [SuperUser] })

parse-statement
ALTER ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN INHERIT NOINHERIT CREATECLUSTER NOCREATECLUSTER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE
----
ALTER ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN INHERIT NOINHERIT CREATECLUSTER NOCREATECLUSTER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE
=>
AlterRole(AlterRoleStatement { name: Ident("other_usr"), options: [Login, NoSuperUser, SuperUser, NoLogin, Inherit, NoInherit, CreateCluster, NoCreateCluster, CreateDB, NoCreateDB, CreateRole, NoCreateRole] })

parse-statement
ALTER ROLE bad.qualification
----
error: Expected end of statement, found dot
ALTER ROLE bad.qualification
              ^

parse-statement
ALTER ROLE usr WITH LOGIN
----
ALTER ROLE usr LOGIN
=>
AlterRole(AlterRoleStatement { name: Ident("usr"), options: [Login] })

parse-statement
ALTER ROLE usr WITH badopt
----
error: Expected end of statement, found identifier "badopt"
ALTER ROLE usr WITH badopt
                    ^

parse-statement
DROP ROLE IF EXISTS usr
----
DROP ROLE IF EXISTS usr
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: true, names: [Role(Ident("usr"))], cascade: false })

parse-statement
DROP ROLE a, b, c
----
DROP ROLE a, b, c
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: false, names: [Role(Ident("a")), Role(Ident("b")), Role(Ident("c"))], cascade: false })

parse-statement
DROP USER usr
----
DROP ROLE usr
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: false, names: [Role(Ident("usr"))], cascade: false })

parse-statement
CREATE TABLE "table_name" (col_name int)
----
CREATE TABLE table_name (col_name int4)
=>
CreateTable(CreateTableStatement { name: UnresolvedItemName([Ident("table_name")]), columns: [ColumnDef { name: Ident("col_name"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }], constraints: [], if_not_exists: false, temporary: false })

parse-statement
CREATE TABLE schema_name.table_name (col_name int)
----
CREATE TABLE schema_name.table_name (col_name int4)
=>
CreateTable(CreateTableStatement { name: UnresolvedItemName([Ident("schema_name"), Ident("table_name")]), columns: [ColumnDef { name: Ident("col_name"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }], constraints: [], if_not_exists: false, temporary: false })

parse-statement
CREATE TABLE schema_name.table_name (col_name text COLLATE en)
----
CREATE TABLE schema_name.table_name (col_name text COLLATE en)
=>
CreateTable(CreateTableStatement { name: UnresolvedItemName([Ident("schema_name"), Ident("table_name")]), columns: [ColumnDef { name: Ident("col_name"), data_type: Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] }, collation: Some(UnresolvedItemName([Ident("en")])), options: [] }], constraints: [], if_not_exists: false, temporary: false })

parse-statement
CREATE TABLE "" (col_name int)
----
error: zero-length delimited identifier
CREATE TABLE "" (col_name int)
             ^

parse-statement
CREATE TABLE "".table_name (col_name int)
----
error: zero-length delimited identifier
CREATE TABLE "".table_name (col_name int)
             ^

# NOTE: There is a null character in
# between the quotes in this source file.
# Apparently, not all tools show it
# (including e.g. the GitHub PR tool)
parse-statement
CREATE TABLE " " (x int)
----
error: null character in quoted identifier
CREATE TABLE " " (x int)
             ^

parse-statement
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON INCLUDE HEADERS
----
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON INCLUDE HEADERS
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_json")]), if_not_exists: false, body_format: Json, include_headers: true, validate_using: None })

parse-statement
CREATE SOURCE IF NOT EXISTS webhook_text FROM WEBHOOK BODY FORMAT TEXT
----
CREATE SOURCE IF NOT EXISTS webhook_text FROM WEBHOOK BODY FORMAT TEXT
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_text")]), if_not_exists: true, body_format: Text, include_headers: false, validate_using: None })

parse-statement
CREATE SOURCE webhook_json_no_headers FROM WEBHOOK BODY FORMAT JSON
----
CREATE SOURCE webhook_json_no_headers FROM WEBHOOK BODY FORMAT JSON
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_json_no_headers")]), if_not_exists: false, body_format: Json, include_headers: false, validate_using: None })

parse-statement
CREATE SOURCE webhook_bytes FROM WEBHOOK BODY FORMAT BYTES
----
CREATE SOURCE webhook_bytes FROM WEBHOOK BODY FORMAT BYTES
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_bytes")]), if_not_exists: false, body_format: Bytes, include_headers: false, validate_using: None })

parse-statement
CREATE SOURCE webhook_proto FROM WEBHOOK BODY FORMAT PROTOBUF INCLUDE HEADERS
----
error: Expected one of JSON or TEXT or BYTES, found PROTOBUF
CREATE SOURCE webhook_proto FROM WEBHOOK BODY FORMAT PROTOBUF INCLUDE HEADERS
                                                     ^

parse-statement
CREATE SOURCE webhook_avro FROM WEBHOOK BODY FORMAT AVRO
----
error: Expected one of JSON or TEXT or BYTES, found AVRO
CREATE SOURCE webhook_avro FROM WEBHOOK BODY FORMAT AVRO
                                                    ^

parse-statement
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON VALIDATE USING ( headers['signature'] = 'test' )
----
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON VALIDATE USING ( headers['signature'] = 'test' )
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_json")]), if_not_exists: false, body_format: Json, include_headers: false, validate_using: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Subscript { expr: Identifier([Ident("headers")]), positions: [SubscriptPosition { start: Some(Value(String("signature"))), end: None, explicit_slice: false }] }, expr2: Some(Value(String("test"))) }) })


parse-statement
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON VALIDATE USING ( headers['signature'] = hmac(sha256, 'body=' || body) )
----
CREATE SOURCE webhook_json FROM WEBHOOK BODY FORMAT JSON VALIDATE USING ( headers['signature'] = hmac(sha256, 'body=' || body) )
=>
CreateWebhookSource(CreateWebhookSourceStatement { name: UnresolvedItemName([Ident("webhook_json")]), if_not_exists: false, body_format: Json, include_headers: false, validate_using: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Subscript { expr: Identifier([Ident("headers")]), positions: [SubscriptPosition { start: Some(Value(String("signature"))), end: None, explicit_slice: false }] }, expr2: Some(Function(Function { name: Name(UnresolvedItemName([Ident("hmac")])), args: Args { args: [Identifier([Ident("sha256")]), Op { op: Op { namespace: [], op: "||" }, expr1: Value(String("body=")), expr2: Some(Identifier([Ident("body")])) }], order_by: [] }, filter: None, over: None, distinct: false })) }) })

parse-statement
CREATE DATABASE IF NOT EXISTS db
----
CREATE DATABASE IF NOT EXISTS db
=>
CreateDatabase(CreateDatabaseStatement { name: UnresolvedDatabaseName(Ident("db")), if_not_exists: true })

parse-statement
CREATE SUBSOURCE IF NOT EXISTS source.sub (a int, b text) WITH (PROGRESS, REFERENCES)
----
CREATE SUBSOURCE IF NOT EXISTS source.sub (a int4, b text) WITH (PROGRESS, REFERENCES)
=>
CreateSubsource(CreateSubsourceStatement { name: UnresolvedItemName([Ident("source"), Ident("sub")]), columns: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedItemName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedItemName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }], constraints: [], if_not_exists: true, with_options: [CreateSubsourceOption { name: Progress, value: None }, CreateSubsourceOption { name: References, value: None }] })
