# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool)
----
CREATE TYPE custom AS MAP ( KEY TYPE   = text, VALUE TYPE   = bool )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("KEY TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }, WithOption { key: Ident("VALUE TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = custom_type)
----
CREATE TYPE custom AS MAP ( KEY TYPE   = text, VALUE TYPE   = custom_type )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("KEY TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }, WithOption { key: Ident("VALUE TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("custom_type")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text)
----
CREATE TYPE custom AS MAP ( KEY TYPE   = text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("KEY TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (VALUE TYPE = bool)
----
CREATE TYPE custom AS MAP ( VALUE TYPE   = bool )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("VALUE TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, VALUE TYPE = bool, random_type=int)
----
CREATE TYPE custom AS MAP ( KEY TYPE   = text, VALUE TYPE   = bool, random_type = int4 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("KEY TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }, WithOption { key: Ident("VALUE TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] })) }, WithOption { key: Ident("random_type"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS MAP (KEY TYPE = text, random_type=int)
----
CREATE TYPE custom AS MAP ( KEY TYPE   = text, random_type = int4 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map { with_options: [WithOption { key: Ident("KEY TYPE " ), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }, WithOption { key: Ident("random_type"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=text)
----
CREATE TYPE custom AS LIST ( ELEMENT TYPE = text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=x)
----
CREATE TYPE custom AS LIST ( ELEMENT TYPE = x )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("x")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE custom AS LIST (ELEMENT TYPE=_text)
----
CREATE TYPE custom AS LIST ( ELEMENT TYPE = _text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("_text")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE schema.t2 AS LIST (ELEMENT TYPE=schema.t1)
----
CREATE TYPE schema.t2 AS LIST ( ELEMENT TYPE = schema.t1 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("schema"), Ident("t2")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("schema"), Ident("t1")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE db2.schema2.t2 AS LIST (ELEMENT TYPE=db1.schema1.t1)
----
CREATE TYPE db2.schema2.t2 AS LIST ( ELEMENT TYPE = db1.schema1.t1 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("db2"), Ident("schema2"), Ident("t2")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("db1"), Ident("schema1"), Ident("t1")])), typ_mod: [] })) }] } })

parse-statement
CREATE TYPE numeric_list AS LIST (ELEMENT TYPE=numeric(100,100,100))
----
CREATE TYPE numeric_list AS LIST ( ELEMENT TYPE = numeric(100, 100, 100) )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("numeric_list")]), as_type: List { with_options: [WithOption { key: Ident("ELEMENT TYPE"), value: Some(DataType(Other { name: Name(UnresolvedObjectName([Ident("numeric")])), typ_mod: [100, 100, 100] })) }] } })

parse-statement
CREATE TYPE named_composite AS (a int, b text, c float8);
----
CREATE TYPE named_composite AS ( a int4, b text, c float8 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedObjectName([Ident("float8")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE TYPE named_composite AS (a InT,     b text, c flOAt8   );
----
CREATE TYPE named_composite AS ( a int4, b text, c float8 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedObjectName([Ident("float8")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE TYPE named_composite AS (a int, b other_type, c yet_another_type);
----
CREATE TYPE named_composite AS ( a int4, b other_type, c yet_another_type )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("named_composite")]), as_type: Record { column_defs: [ColumnDef { name: Ident("a"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("b"), data_type: Other { name: Name(UnresolvedObjectName([Ident("other_type")])), typ_mod: [] }, collation: None, options: [] }, ColumnDef { name: Ident("c"), data_type: Other { name: Name(UnresolvedObjectName([Ident("yet_another_type")])), typ_mod: [] }, collation: None, options: [] }] } })

parse-statement
CREATE ROLE arjun
----
CREATE ROLE arjun
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("arjun"), options: [] })

parse-statement
CREATE USER arjun
----
CREATE USER arjun
=>
CreateRole(CreateRoleStatement { is_user: true, name: Ident("arjun"), options: [] })

parse-statement
CREATE ROLE frank SUPERUSER
----
CREATE ROLE frank SUPERUSER
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("frank"), options: [SuperUser] })

parse-statement
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN
----
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("other_usr"), options: [Login, NoSuperUser, SuperUser, NoLogin] })

parse-statement
CREATE ROLE bad.qualification
----
error: Expected end of statement, found dot
CREATE ROLE bad.qualification
               ^

parse-statement
CREATE ROLE usr WITH LOGIN
----
CREATE ROLE usr LOGIN
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("usr"), options: [Login] })

parse-statement
CREATE ROLE usr WITH badopt
----
error: Expected end of statement, found identifier "badopt"
CREATE ROLE usr WITH badopt
                     ^

parse-statement
DROP ROLE IF EXISTS usr
----
DROP ROLE IF EXISTS usr
=>
DropRoles(DropRolesStatement { if_exists: true, names: [UnresolvedObjectName([Ident("usr")])] })

parse-statement
DROP ROLE a, b, c
----
DROP ROLE a, b, c
=>
DropRoles(DropRolesStatement { if_exists: false, names: [UnresolvedObjectName([Ident("a")]), UnresolvedObjectName([Ident("b")]), UnresolvedObjectName([Ident("c")])] })

parse-statement
DROP USER usr
----
DROP ROLE usr
=>
DropRoles(DropRolesStatement { if_exists: false, names: [UnresolvedObjectName([Ident("usr")])] })

parse-statement
CREATE TABLE "table_name" (col_name int)
----
CREATE TABLE table_name (col_name int4)
=>
CreateTable(CreateTableStatement { name: UnresolvedObjectName([Ident("table_name")]), columns: [ColumnDef { name: Ident("col_name"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }], constraints: [], with_options: [], if_not_exists: false, temporary: false })

parse-statement
CREATE TABLE schema_name.table_name (col_name int)
----
CREATE TABLE schema_name.table_name (col_name int4)
=>
CreateTable(CreateTableStatement { name: UnresolvedObjectName([Ident("schema_name"), Ident("table_name")]), columns: [ColumnDef { name: Ident("col_name"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] }, collation: None, options: [] }], constraints: [], with_options: [], if_not_exists: false, temporary: false })

parse-statement
CREATE TABLE "" (col_name int)
----
error: zero-length delimited identifier
CREATE TABLE "" (col_name int)
             ^

parse-statement
CREATE TABLE "".table_name (col_name int)
----
error: zero-length delimited identifier
CREATE TABLE "".table_name (col_name int)
             ^
