# Copyright Materialize, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
CREATE TYPE custom AS MAP (key_type=text, value_type=bool)
----
CREATE TYPE custom AS MAP ( key_type = text, value_type = bool )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("key_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }, DataType { name: Ident("value_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS MAP (KEY_TYPE=text, VaLuE_tYpE=custom_type)
----
CREATE TYPE custom AS MAP ( key_type = text, value_type = custom_type )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("key_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }, DataType { name: Ident("value_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("custom_type")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS MAP (key_type=text)
----
CREATE TYPE custom AS MAP ( key_type = text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("key_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS MAP (value_type=bool)
----
CREATE TYPE custom AS MAP ( value_type = bool )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("value_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS MAP (key_type=text, value_type=bool, random_type=int)
----
CREATE TYPE custom AS MAP ( key_type = text, value_type = bool, random_type = int4 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("key_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }, DataType { name: Ident("value_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("bool")])), typ_mod: [] } }, DataType { name: Ident("random_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS MAP (key_type=text, random_type=int)
----
CREATE TYPE custom AS MAP ( key_type = text, random_type = int4 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: Map, with_options: [DataType { name: Ident("key_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }, DataType { name: Ident("random_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("int4")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS LIST (element_type=text)
----
CREATE TYPE custom AS LIST ( element_type = text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("text")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS LIST (element_type=x)
----
CREATE TYPE custom AS LIST ( element_type = x )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("x")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE custom AS LIST (element_type=_text)
----
CREATE TYPE custom AS LIST ( element_type = _text )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("custom")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("_text")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE schema.t2 AS LIST (element_type=schema.t1)
----
CREATE TYPE schema.t2 AS LIST ( element_type = schema.t1 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("schema"), Ident("t2")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("schema"), Ident("t1")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE db2.schema2.t2 AS LIST (element_type=db1.schema1.t1)
----
CREATE TYPE db2.schema2.t2 AS LIST ( element_type = db1.schema1.t1 )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("db2"), Ident("schema2"), Ident("t2")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("db1"), Ident("schema1"), Ident("t1")])), typ_mod: [] } }] })

parse-statement
CREATE TYPE numeric_list AS LIST (element_type=numeric(100,100,100))
----
CREATE TYPE numeric_list AS LIST ( element_type = numeric(100, 100, 100) )
=>
CreateType(CreateTypeStatement { name: UnresolvedObjectName([Ident("numeric_list")]), as_type: List, with_options: [DataType { name: Ident("element_type"), data_type: Other { name: Name(UnresolvedObjectName([Ident("numeric")])), typ_mod: [100, 100, 100] } }] })

parse-statement
CREATE ROLE arjun
----
CREATE ROLE arjun
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("arjun"), options: [] })

parse-statement
CREATE USER arjun
----
CREATE USER arjun
=>
CreateRole(CreateRoleStatement { is_user: true, name: Ident("arjun"), options: [] })

parse-statement
CREATE ROLE frank SUPERUSER
----
CREATE ROLE frank SUPERUSER
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("frank"), options: [SuperUser] })

parse-statement
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN
----
CREATE ROLE other_usr LOGIN NOSUPERUSER SUPERUSER NOLOGIN
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("other_usr"), options: [Login, NoSuperUser, SuperUser, NoLogin] })

parse-statement
CREATE ROLE bad.qualification
----
error: Expected end of statement, found dot
CREATE ROLE bad.qualification
               ^

parse-statement
CREATE ROLE usr WITH LOGIN
----
CREATE ROLE usr LOGIN
=>
CreateRole(CreateRoleStatement { is_user: false, name: Ident("usr"), options: [Login] })

parse-statement
CREATE ROLE usr WITH badopt
----
error: Expected end of statement, found identifier 'badopt'
CREATE ROLE usr WITH badopt
                     ^

parse-statement
DROP ROLE IF EXISTS usr
----
DROP ROLE IF EXISTS usr
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: true, names: [UnresolvedObjectName([Ident("usr")])], cascade: false })

parse-statement
DROP ROLE a, b, c
----
DROP ROLE a, b, c
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: false, names: [UnresolvedObjectName([Ident("a")]), UnresolvedObjectName([Ident("b")]), UnresolvedObjectName([Ident("c")])], cascade: false })

parse-statement
DROP USER usr
----
DROP ROLE usr
=>
DropObjects(DropObjectsStatement { object_type: Role, if_exists: false, names: [UnresolvedObjectName([Ident("usr")])], cascade: false })
