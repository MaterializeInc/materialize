# Copyright Materialize, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
DECLARE "c" CURSOR WITHOUT HOLD FOR SELECT * FROM t
----
DECLARE c CURSOR FOR SELECT * FROM t
=>
Declare(DeclareStatement { name: Ident("c"), stmt: Select(SelectStatement { query: Query { ctes: [], body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("t")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }) })

parse-statement
DECLARE c CURSOR FOR TAIL t
----
DECLARE c CURSOR FOR TAIL t
=>
Declare(DeclareStatement { name: Ident("c"), stmt: Tail(TailStatement { name: UnresolvedObjectName([Ident("t")]), options: [], as_of: None }) })

parse-statement
CLOSE c
----
CLOSE c
=>
Close(CloseStatement { name: Ident("c") })

parse-statement
FETCH FORWARD 2000 FROM c
----
FETCH 2000 c
=>
Fetch(FetchStatement { name: Ident("c"), count: Some(ForwardCount(2000)), options: [] })

parse-statement
FETCH c
----
FETCH c
=>
Fetch(FetchStatement { name: Ident("c"), count: None, options: [] })

parse-statement
FETCH FORWARD c
----
FETCH c
=>
Fetch(FetchStatement { name: Ident("c"), count: None, options: [] })

parse-statement
FETCH FROM c
----
FETCH c
=>
Fetch(FetchStatement { name: Ident("c"), count: None, options: [] })

parse-statement
FETCH FROM c WITH (TIMEOUT = '5s')
----
FETCH c WITH (timeout = '5s')
=>
Fetch(FetchStatement { name: Ident("c"), count: None, options: [WithOption { key: Ident("timeout"), value: Some(Value(String("5s"))) }] })


parse-statement
FETCH ALL c
----
FETCH ALL c
=>
Fetch(FetchStatement { name: Ident("c"), count: Some(ForwardAll), options: [] })
