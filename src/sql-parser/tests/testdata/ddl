# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
CREATE TABLE uk_cities (
    name VARCHAR(100) NOT NULL,
    lat DOUBLE NULL,
    lng DOUBLE,
    constrained INT NULL CONSTRAINT pkey PRIMARY KEY NOT NULL UNIQUE CHECK (constrained > 0),
    ref INT REFERENCES othertable (a, b)
)
----
CREATE TABLE uk_cities (name character varying(100) NOT NULL, lat double NULL, lng double, constrained int NULL CONSTRAINT pkey PRIMARY KEY NOT NULL UNIQUE CHECK (constrained > 0), ref int REFERENCES othertable (a, b))
=>
CreateTable { name: ObjectName([Ident("uk_cities")]), columns: [ColumnDef { name: Ident("name"), data_type: Varchar(Some(100)), collation: None, options: [ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("lat"), data_type: Double, collation: None, options: [ColumnOptionDef { name: None, option: Null }] }, ColumnDef { name: Ident("lng"), data_type: Double, collation: None, options: [] }, ColumnDef { name: Ident("constrained"), data_type: Int, collation: None, options: [ColumnOptionDef { name: None, option: Null }, ColumnOptionDef { name: Some(Ident("pkey")), option: Unique { is_primary: true } }, ColumnOptionDef { name: None, option: NotNull }, ColumnOptionDef { name: None, option: Unique { is_primary: false } }, ColumnOptionDef { name: None, option: Check(BinaryOp { left: Identifier([Ident("constrained")]), op: Gt, right: Value(Number("0")) }) }] }, ColumnDef { name: Ident("ref"), data_type: Int, collation: None, options: [ColumnOptionDef { name: None, option: ForeignKey { foreign_table: ObjectName([Ident("othertable")]), referred_columns: [Ident("a"), Ident("b")] } }] }], constraints: [], with_options: [], if_not_exists: false }

parse-statement
CREATE TABLE t (a int NOT NULL GARBAGE)
----
error:
Parse error:
CREATE TABLE t (a int NOT NULL GARBAGE)
                               ^^^^^^^
Expected column option, found: GARBAGE

parse-statement
CREATE TABLE t (c int) WITH (foo = 'bar', a = 123)
----
CREATE TABLE t (c int) WITH (foo = 'bar', a = 123)
=>
CreateTable { name: ObjectName([Ident("t")]), columns: [ColumnDef { name: Ident("c"), data_type: Int, collation: None, options: [] }], constraints: [], with_options: [SqlOption { name: Ident("foo"), value: String("bar") }, SqlOption { name: Ident("a"), value: Number("123") }], if_not_exists: false }

parse-statement
CREATE TABLE foo (bar int,)
----
CREATE TABLE foo (bar int)
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("bar"), data_type: Int, collation: None, options: [] }], constraints: [], with_options: [], if_not_exists: false }

parse-statement
CREATE TABLE t ()
----
CREATE TABLE t ()
=>
CreateTable { name: ObjectName([Ident("t")]), columns: [], constraints: [], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD
----
error:
Parse error:
ALTER TABLE tab ADD
                   ^
Expected a constraint in ALTER TABLE .. ADD, found: EOF

parse-statement
CREATE TABLE tab (foo int,
----
error:
Parse error:
CREATE TABLE tab (foo int,
                          ^
Expected column name or constraint definition, found: EOF

parse-statement
ALTER TABLE tab ADD CONSTRAINT address_pkey PRIMARY KEY (address_id)
----
ALTER TABLE tab ADD CONSTRAINT address_pkey PRIMARY KEY (address_id)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Unique { name: Some(Ident("address_pkey")), columns: [Ident("address_id")], is_primary: true }) }

parse-statement
CREATE TABLE foo (id int, CONSTRAINT address_pkey PRIMARY KEY (address_id))
----
CREATE TABLE foo (id int, CONSTRAINT address_pkey PRIMARY KEY (address_id))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Unique { name: Some(Ident("address_pkey")), columns: [Ident("address_id")], is_primary: true }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD CONSTRAINT uk_task UNIQUE (report_date, task_id)
----
ALTER TABLE tab ADD CONSTRAINT uk_task UNIQUE (report_date, task_id)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Unique { name: Some(Ident("uk_task")), columns: [Ident("report_date"), Ident("task_id")], is_primary: false }) }

parse-statement
CREATE TABLE foo (id int, CONSTRAINT uk_task UNIQUE (report_date, task_id))
----
CREATE TABLE foo (id int, CONSTRAINT uk_task UNIQUE (report_date, task_id))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Unique { name: Some(Ident("uk_task")), columns: [Ident("report_date"), Ident("task_id")], is_primary: false }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id) REFERENCES public.address(address_id)
----
ALTER TABLE tab ADD CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id) REFERENCES public.address(address_id)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(ForeignKey { name: Some(Ident("customer_address_id_fkey")), columns: [Ident("address_id")], foreign_table: ObjectName([Ident("public"), Ident("address")]), referred_columns: [Ident("address_id")] }) }

parse-statement
CREATE TABLE foo (id int, CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id) REFERENCES public.address(address_id))
----
CREATE TABLE foo (id int, CONSTRAINT customer_address_id_fkey FOREIGN KEY (address_id) REFERENCES public.address(address_id))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [ForeignKey { name: Some(Ident("customer_address_id_fkey")), columns: [Ident("address_id")], foreign_table: ObjectName([Ident("public"), Ident("address")]), referred_columns: [Ident("address_id")] }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD CONSTRAINT ck CHECK (rtrim(ltrim(ref_code)) <> '')
----
ALTER TABLE tab ADD CONSTRAINT ck CHECK (rtrim(ltrim(ref_code)) <> '')
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Check { name: Some(Ident("ck")), expr: BinaryOp { left: Function(Function { name: ObjectName([Ident("rtrim")]), args: Args([Function(Function { name: ObjectName([Ident("ltrim")]), args: Args([Identifier([Ident("ref_code")])]), filter: None, over: None, distinct: false })]), filter: None, over: None, distinct: false }), op: NotEq, right: Value(String("")) } }) }

parse-statement
CREATE TABLE foo (id int, CONSTRAINT ck CHECK (rtrim(ltrim(ref_code)) <> ''))
----
CREATE TABLE foo (id int, CONSTRAINT ck CHECK (rtrim(ltrim(ref_code)) <> ''))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Check { name: Some(Ident("ck")), expr: BinaryOp { left: Function(Function { name: ObjectName([Ident("rtrim")]), args: Args([Function(Function { name: ObjectName([Ident("ltrim")]), args: Args([Identifier([Ident("ref_code")])]), filter: None, over: None, distinct: false })]), filter: None, over: None, distinct: false }), op: NotEq, right: Value(String("")) } }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD PRIMARY KEY (foo, bar)
----
ALTER TABLE tab ADD PRIMARY KEY (foo, bar)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Unique { name: None, columns: [Ident("foo"), Ident("bar")], is_primary: true }) }

parse-statement
CREATE TABLE foo (id int, PRIMARY KEY (foo, bar))
----
CREATE TABLE foo (id int, PRIMARY KEY (foo, bar))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Unique { name: None, columns: [Ident("foo"), Ident("bar")], is_primary: true }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD UNIQUE (id)
----
ALTER TABLE tab ADD UNIQUE (id)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Unique { name: None, columns: [Ident("id")], is_primary: false }) }

parse-statement
CREATE TABLE foo (id int, UNIQUE (id))
----
CREATE TABLE foo (id int, UNIQUE (id))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Unique { name: None, columns: [Ident("id")], is_primary: false }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD FOREIGN KEY (foo, bar) REFERENCES anothertable(foo, bar)
----
ALTER TABLE tab ADD FOREIGN KEY (foo, bar) REFERENCES anothertable(foo, bar)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(ForeignKey { name: None, columns: [Ident("foo"), Ident("bar")], foreign_table: ObjectName([Ident("anothertable")]), referred_columns: [Ident("foo"), Ident("bar")] }) }

parse-statement
CREATE TABLE foo (id int, FOREIGN KEY (foo, bar) REFERENCES anothertable(foo, bar))
----
CREATE TABLE foo (id int, FOREIGN KEY (foo, bar) REFERENCES anothertable(foo, bar))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [ForeignKey { name: None, columns: [Ident("foo"), Ident("bar")], foreign_table: ObjectName([Ident("anothertable")]), referred_columns: [Ident("foo"), Ident("bar")] }], with_options: [], if_not_exists: false }

parse-statement
ALTER TABLE tab ADD CHECK (end_date > start_date OR end_date IS NULL)
----
ALTER TABLE tab ADD CHECK (end_date > start_date OR end_date IS NULL)
=>
AlterTable { name: ObjectName([Ident("tab")]), operation: AddConstraint(Check { name: None, expr: BinaryOp { left: BinaryOp { left: Identifier([Ident("end_date")]), op: Gt, right: Identifier([Ident("start_date")]) }, op: Or, right: IsNull(Identifier([Ident("end_date")])) } }) }

parse-statement
CREATE TABLE foo (id int, CHECK (end_date > start_date OR end_date IS NULL))
----
CREATE TABLE foo (id int, CHECK (end_date > start_date OR end_date IS NULL))
=>
CreateTable { name: ObjectName([Ident("foo")]), columns: [ColumnDef { name: Ident("id"), data_type: Int, collation: None, options: [] }], constraints: [Check { name: None, expr: BinaryOp { left: BinaryOp { left: Identifier([Ident("end_date")]), op: Gt, right: Identifier([Ident("start_date")]) }, op: Or, right: IsNull(Identifier([Ident("end_date")])) } }], with_options: [], if_not_exists: false }

parse-statement
CREATE DATABASE foo
----
CREATE DATABASE foo
=>
CreateDatabase { name: Ident("foo"), if_not_exists: false }

parse-statement
CREATE DATABASE IF NOT EXISTS foo
----
CREATE DATABASE IF NOT EXISTS foo
=>
CreateDatabase { name: Ident("foo"), if_not_exists: true }

parse-statement
CREATE DATABASE IF EXISTS foo
----
error:
Parse error:
CREATE DATABASE IF EXISTS foo
                   ^^^^^^
Expected NOT, found: EXISTS

parse-statement
CREATE DATABASE foo.bar
----
error:
Parse error:
CREATE DATABASE foo.bar
                   ^
Expected end of statement, found: .

parse-statement
CREATE SCHEMA foo.bar
----
CREATE SCHEMA foo.bar
=>
CreateSchema { name: ObjectName([Ident("foo"), Ident("bar")]), if_not_exists: false }

parse-statement
CREATE SCHEMA IF NOT EXISTS foo
----
CREATE SCHEMA IF NOT EXISTS foo
=>
CreateSchema { name: ObjectName([Ident("foo")]), if_not_exists: true }

parse-statement
CREATE SCHEMA IF EXISTS foo
----
error:
Parse error:
CREATE SCHEMA IF EXISTS foo
                 ^^^^^^
Expected NOT, found: EXISTS

parse-statement
CREATE VIEW myschema.myview AS SELECT foo FROM bar
----
CREATE VIEW myschema.myview AS SELECT foo FROM bar
=>
CreateView { name: ObjectName([Ident("myschema"), Ident("myview")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("foo")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("bar")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: false, materialized: false }

parse-statement
CREATE TEMPORARY VIEW myview AS SELECT foo FROM bar
----
CREATE TEMPORARY VIEW myview AS SELECT foo FROM bar
=>
CreateView { name: ObjectName([Ident("myview")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("foo")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("bar")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: true, materialized: false }

parse-statement
CREATE TEMP VIEW myview AS SELECT foo FROM bar
----
CREATE TEMPORARY VIEW myview AS SELECT foo FROM bar
=>
CreateView { name: ObjectName([Ident("myview")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("foo")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("bar")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: true, materialized: false }

parse-statement
CREATE OR REPLACE VIEW v AS SELECT 1
----
CREATE OR REPLACE VIEW v AS SELECT 1
=>
CreateView { name: ObjectName([Ident("v")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Value(Number("1")))], from: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Replace, temporary: false, materialized: false }

parse-statement
CREATE VIEW IF NOT EXISTS v AS SELECT 1
----
CREATE VIEW IF NOT EXISTS v AS SELECT 1
=>
CreateView { name: ObjectName([Ident("v")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Value(Number("1")))], from: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Skip, temporary: false, materialized: false }

parse-statement
CREATE OR REPLACE VIEW IF NOT EXISTS v AS SELECT 1
----
error:
Parse error:
CREATE OR REPLACE VIEW IF NOT EXISTS v AS SELECT 1
                          ^^^
Expected AS, found: NOT

parse-statement
CREATE VIEW v WITH (foo = 'bar', a = 123) AS SELECT 1
----
CREATE VIEW v WITH (foo = 'bar', a = 123) AS SELECT 1
=>
CreateView { name: ObjectName([Ident("v")]), columns: [], with_options: [SqlOption { name: Ident("foo"), value: String("bar") }, SqlOption { name: Ident("a"), value: Number("123") }], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Value(Number("1")))], from: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: false, materialized: false }

parse-statement
CREATE VIEW v (has, cols) AS SELECT 1, 2
----
CREATE VIEW v (has, cols) AS SELECT 1, 2
=>
CreateView { name: ObjectName([Ident("v")]), columns: [Ident("has"), Ident("cols")], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Value(Number("1"))), UnnamedExpr(Value(Number("2")))], from: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: false, materialized: false }

parse-statement
CREATE MATERIALIZED VIEW myschema.myview AS SELECT foo FROM bar
----
CREATE MATERIALIZED VIEW myschema.myview AS SELECT foo FROM bar
=>
CreateView { name: ObjectName([Ident("myschema"), Ident("myview")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("foo")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("bar")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Error, temporary: false, materialized: true }

parse-statement
CREATE MATERIALIZED VIEW IF NOT EXISTS myschema.myview AS SELECT foo FROM bar
----
CREATE MATERIALIZED VIEW IF NOT EXISTS myschema.myview AS SELECT foo FROM bar
=>
CreateView { name: ObjectName([Ident("myschema"), Ident("myview")]), columns: [], with_options: [], query: Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("foo")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("bar")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, if_exists: Skip, temporary: false, materialized: true }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING SCHEMA 'baz'
----
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING SCHEMA 'baz'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Avro(Schema(Inline("baz")))), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo
FROM KAFKA BROKER 'bar' TOPIC 'baz' WITH (consistency = 'lug', ssl_certificate_file = '/Path/to/file')
FORMAT BYTES
----
CREATE SOURCE foo FROM KAFKA BROKER 'bar' TOPIC 'baz' WITH (consistency = 'lug', ssl_certificate_file = '/Path/to/file') FORMAT BYTES
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: Kafka { broker: "bar", topic: "baz" }, with_options: [SqlOption { name: Ident("consistency"), value: String("lug") }, SqlOption { name: Ident("ssl_certificate_file"), value: String("/Path/to/file") }], format: Some(Bytes), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE MATERIALIZED SOURCE foo FROM FILE 'bar' FORMAT PROTOBUF MESSAGE
'somemessage' USING SCHEMA FILE 'path'
----
CREATE MATERIALIZED SOURCE foo FROM FILE 'bar' FORMAT PROTOBUF MESSAGE 'somemessage' USING SCHEMA FILE 'path'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Protobuf { message_name: "somemessage", schema: File("path") }), envelope: None, if_not_exists: false, materialized: true }

parse-statement
CREATE SOURCE IF NOT EXISTS foo FROM FILE 'bar' WITH (tail = true) FORMAT REGEX '(asdf)|(jkl)'
----
CREATE SOURCE IF NOT EXISTS foo FROM FILE 'bar' WITH (tail = true) FORMAT REGEX '(asdf)|(jkl)'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [SqlOption { name: Ident("tail"), value: Boolean(true) }], format: Some(Regex("(asdf)|(jkl)")), envelope: None, if_not_exists: true, materialized: false }

parse-statement
CREATE SOURCE IF NOT EXISTS foo (one, two) FROM FILE 'bar' WITH (tail = true) FORMAT REGEX '(asdf)|(jkl)'
----
CREATE SOURCE IF NOT EXISTS foo (one, two) FROM FILE 'bar' WITH (tail = true) FORMAT REGEX '(asdf)|(jkl)'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [Ident("one"), Ident("two")], connector: File { path: "bar" }, with_options: [SqlOption { name: Ident("tail"), value: Boolean(true) }], format: Some(Regex("(asdf)|(jkl)")), envelope: None, if_not_exists: true, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = false) FORMAT CSV WITH HEADER
----
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = false) FORMAT CSV WITH HEADER
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [SqlOption { name: Ident("tail"), value: Boolean(false) }], format: Some(Csv { header_row: true, n_cols: None, delimiter: ',' }), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = false) FORMAT CSV WITH 3 COLUMNS
----
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = false) FORMAT CSV WITH 3 COLUMNS
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [SqlOption { name: Ident("tail"), value: Boolean(false) }], format: Some(Csv { header_row: false, n_cols: Some(3), delimiter: ',' }), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo (one, two) FROM FILE 'bar' FORMAT CSV WITH HEADER
----
CREATE SOURCE foo (one, two) FROM FILE 'bar' FORMAT CSV WITH HEADER
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [Ident("one"), Ident("two")], connector: File { path: "bar" }, with_options: [], format: Some(Csv { header_row: true, n_cols: None, delimiter: ',' }), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = true) FORMAT CSV WITH 3 COLUMNS DELIMITED BY '|'
----
CREATE SOURCE foo FROM FILE 'bar' WITH (tail = true) FORMAT CSV WITH 3 COLUMNS DELIMITED BY '|'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [SqlOption { name: Ident("tail"), value: Boolean(true) }], format: Some(Csv { header_row: false, n_cols: Some(3), delimiter: '|' }), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE MATERIALIZED OR VIEW foo as SELECT * from bar
----
error:
Parse error:
CREATE MATERIALIZED OR VIEW foo as SELECT * from bar
                    ^^
Expected VIEW or SOURCE after CREATE MATERIALIZED, found: OR

parse-statement
CREATE SOURCE foo FROM AVRO OCF '/tmp/bar'
----
CREATE SOURCE foo FROM AVRO OCF '/tmp/bar'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: AvroOcf { path: "/tmp/bar" }, with_options: [], format: None, envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' ENVELOPE DEBEZIUM
----
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' ENVELOPE DEBEZIUM
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Avro(CsrUrl { url: "http://localhost:8081", seed: None })), envelope: Debezium, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' SEED VALUE SCHEMA 'blah'
----
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' SEED VALUE SCHEMA 'blah'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Avro(CsrUrl { url: "http://localhost:8081", seed: Some(CsrSeed { key_schema: None, value_schema: "blah" }) })), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' SEED KEY SCHEMA 'a' VALUE SCHEMA 'b'
----
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' SEED KEY SCHEMA 'a' VALUE SCHEMA 'b'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Avro(CsrUrl { url: "http://localhost:8081", seed: Some(CsrSeed { key_schema: Some("a"), value_schema: "b" }) })), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081'
----
CREATE SOURCE foo FROM FILE 'bar' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081'
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Avro(CsrUrl { url: "http://localhost:8081", seed: None })), envelope: None, if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' ENVELOPE UPSERT
----
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY 'http://localhost:8081' ENVELOPE UPSERT
=>
CreateSource { name: ObjectName([Ident("crobat")]), col_names: [], connector: Kafka { broker: "zubat", topic: "hoothoot" }, with_options: [], format: Some(Avro(CsrUrl { url: "http://localhost:8081", seed: None })), envelope: Upsert(None), if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING SCHEMA 'string' ENVELOPE UPSERT FORMAT AVRO USING SCHEMA 'long'
----
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING SCHEMA 'string' ENVELOPE UPSERT FORMAT AVRO USING SCHEMA 'long'
=>
CreateSource { name: ObjectName([Ident("crobat")]), col_names: [], connector: Kafka { broker: "zubat", topic: "hoothoot" }, with_options: [], format: Some(Avro(Schema(Inline("string")))), envelope: Upsert(Some(Avro(Schema(Inline("long"))))), if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING SCHEMA FILE 'path' ENVELOPE UPSERT FORMAT TEXT
----
CREATE SOURCE crobat FROM KAFKA BROKER 'zubat' TOPIC 'hoothoot' FORMAT AVRO USING SCHEMA FILE 'path' ENVELOPE UPSERT FORMAT TEXT
=>
CreateSource { name: ObjectName([Ident("crobat")]), col_names: [], connector: Kafka { broker: "zubat", topic: "hoothoot" }, with_options: [], format: Some(Avro(Schema(File("path")))), envelope: Upsert(Some(Text)), if_not_exists: false, materialized: false }

parse-statement
CREATE SOURCE IF NOT EXISTS foo FROM FILE 'bar' FORMAT BYTES
----
CREATE SOURCE IF NOT EXISTS foo FROM FILE 'bar' FORMAT BYTES
=>
CreateSource { name: ObjectName([Ident("foo")]), col_names: [], connector: File { path: "bar" }, with_options: [], format: Some(Bytes), envelope: None, if_not_exists: true, materialized: false }

parse-statement
CREATE SOURCE IF EXISTS foo FROM FILE 'bar' USING SCHEMA ''
----
error:
Parse error:
CREATE SOURCE IF EXISTS foo FROM FILE 'bar' USING SCHEMA ''
                 ^^^^^^
Expected NOT, found: EXISTS

parse-statement
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES
----
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITH SNAPSHOT
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: true, as_of: None, if_not_exists: false }

parse-statement
CREATE SINK foo FROM bar INTO FILE 'baz' WITH SNAPSHOT FORMAT BYTES
----
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITH SNAPSHOT
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: true, as_of: None, if_not_exists: false }

parse-statement
CREATE SINK foo FROM bar INTO KAFKA BROKER 'baz' TOPIC 'topic' WITH (replication_factor = 7) FORMAT BYTES
----
CREATE SINK foo FROM bar INTO KAFKA BROKER 'baz' TOPIC 'topic' WITH (replication_factor = 7) FORMAT BYTES WITH SNAPSHOT
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: Kafka { broker: "baz", topic: "topic" }, with_options: [SqlOption { name: Ident("replication_factor"), value: Number("7") }], format: Some(Bytes), with_snapshot: true, as_of: None, if_not_exists: false }

parse-statement
CREATE SINK foo FROM bar INTO AVRO OCF 'baz'
----
CREATE SINK foo FROM bar INTO AVRO OCF 'baz' WITH SNAPSHOT
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: AvroOcf { path: "baz" }, with_options: [], format: None, with_snapshot: true, as_of: None, if_not_exists: false }

parse-statement
CREATE SINK IF NOT EXISTS foo FROM bar INTO FILE 'baz' FORMAT BYTES
----
CREATE SINK IF NOT EXISTS foo FROM bar INTO FILE 'baz' FORMAT BYTES WITH SNAPSHOT
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: true, as_of: None, if_not_exists: true }

parse-statement
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES AS OF 123
----
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITH SNAPSHOT AS OF 123
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: true, as_of: Some(Value(Number("123"))), if_not_exists: false }

parse-statement
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITHOUT SNAPSHOT AS OF 123
----
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITHOUT SNAPSHOT AS OF 123
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: false, as_of: Some(Value(Number("123"))), if_not_exists: false }

parse-statement
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES AS OF now()
----
CREATE SINK foo FROM bar INTO FILE 'baz' FORMAT BYTES WITH SNAPSHOT AS OF now()
=>
CreateSink { name: ObjectName([Ident("foo")]), from: ObjectName([Ident("bar")]), connector: File { path: "baz" }, with_options: [], format: Some(Bytes), with_snapshot: true, as_of: Some(Function(Function { name: ObjectName([Ident("now")]), args: Args([]), filter: None, over: None, distinct: false })), if_not_exists: false }


parse-statement
CREATE SINK IF EXISTS foo FROM bar INTO 'baz'
----
error:
Parse error:
CREATE SINK IF EXISTS foo FROM bar INTO 'baz'
               ^^^^^^
Expected NOT, found: EXISTS

parse-statement
CREATE INDEX foo ON myschema.bar (a, b)
----
CREATE INDEX foo ON myschema.bar (a, b)
=>
CreateIndex { name: Some(Ident("foo")), on_name: ObjectName([Ident("myschema"), Ident("bar")]), key_parts: Some([Identifier([Ident("a")]), Identifier([Ident("b")])]), if_not_exists: false }

parse-statement
CREATE INDEX fizz ON baz (ascii(x), a IS NOT NULL, (EXISTS (SELECT y FROM boop WHERE boop.z = z)), delta)
----
CREATE INDEX fizz ON baz (ascii(x), a IS NOT NULL, (EXISTS (SELECT y FROM boop WHERE boop.z = z)), delta)
=>
CreateIndex { name: Some(Ident("fizz")), on_name: ObjectName([Ident("baz")]), key_parts: Some([Function(Function { name: ObjectName([Ident("ascii")]), args: Args([Identifier([Ident("x")])]), filter: None, over: None, distinct: false }), IsNotNull(Identifier([Ident("a")])), Nested(Exists(Query { ctes: [], body: Select(Select { distinct: false, projection: [UnnamedExpr(Identifier([Ident("y")]))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident("boop")]), args: None, alias: None, with_hints: [] }, joins: [] }], selection: Some(BinaryOp { left: Identifier([Ident("boop"), Ident("z")]), op: Eq, right: Identifier([Ident("z")]) }), group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None })), Identifier([Ident("delta")])]), if_not_exists: false }

parse-statement
CREATE INDEX ind ON tab ((col + 1))
----
CREATE INDEX ind ON tab ((col + 1))
=>
CreateIndex { name: Some(Ident("ind")), on_name: ObjectName([Ident("tab")]), key_parts: Some([Nested(BinaryOp { left: Identifier([Ident("col")]), op: Plus, right: Value(Number("1")) })]), if_not_exists: false }

parse-statement
CREATE INDEX qualifiers ON no_parentheses (alpha.omega)
----
CREATE INDEX qualifiers ON no_parentheses (alpha.omega)
=>
CreateIndex { name: Some(Ident("qualifiers")), on_name: ObjectName([Ident("no_parentheses")]), key_parts: Some([Identifier([Ident("alpha"), Ident("omega")])]), if_not_exists: false }

parse-statement
CREATE DEFAULT INDEX ON tab
----
CREATE DEFAULT INDEX ON tab
=>
CreateIndex { name: None, on_name: ObjectName([Ident("tab")]), key_parts: None, if_not_exists: false }

parse-statement
CREATE DEFAULT INDEX IF NOT EXISTS ON tab
----
CREATE DEFAULT INDEX IF NOT EXISTS ON tab
=>
CreateIndex { name: None, on_name: ObjectName([Ident("tab")]), key_parts: None, if_not_exists: true }

parse-statement
CREATE DEFAULT INDEX ON tab (a, b)
----
error:
Parse error:
CREATE DEFAULT INDEX ON tab (a, b)
                            ^
Expected end of statement, found: (

parse-statement
CREATE INDEX ON tab;
----
error:
Parse error:
CREATE INDEX ON tab;
                   ^
Expected (, found: ;

parse-statement
CREATE INDEX ON tab (a, b)
----
CREATE INDEX ON tab (a, b)
=>
CreateIndex { name: None, on_name: ObjectName([Ident("tab")]), key_parts: Some([Identifier([Ident("a")]), Identifier([Ident("b")])]), if_not_exists: false }

parse-statement
CREATE INDEX IF NOT EXISTS ON tab (a, b)
----
error:
Parse error:
CREATE INDEX IF NOT EXISTS ON tab (a, b)
                           ^^
Expected index name, found: ON

parse-statement
CREATE INDEX myschema.ind ON foo(b)
----
error:
Parse error:
CREATE INDEX myschema.ind ON foo(b)
                     ^
Expected ON, found: .

parse-statement
CREATE INDEX IF EXISTS myschema.ind ON foo(b)
----
error:
Parse error:
CREATE INDEX IF EXISTS myschema.ind ON foo(b)
                ^^^^^^
Expected NOT, found: EXISTS

parse-statement
DROP DATABASE mydb
----
DROP DATABASE mydb
=>
DropDatabase { name: Ident("mydb"), if_exists: false }

parse-statement
DROP DATABASE IF EXISTS mydb
----
DROP DATABASE IF EXISTS mydb
=>
DropDatabase { name: Ident("mydb"), if_exists: true }

parse-statement
DROP DATABASE mydb.nope
----
error:
Parse error:
DROP DATABASE mydb.nope
                  ^
Expected end of statement, found: .

parse-statement
DROP SCHEMA mydb.myschema
----
DROP SCHEMA mydb.myschema
=>
DropObjects { object_type: Schema, if_exists: false, names: [ObjectName([Ident("mydb"), Ident("myschema")])], cascade: false }

parse-statement
DROP TABLE foo
----
DROP TABLE foo
=>
DropObjects { object_type: Table, if_exists: false, names: [ObjectName([Ident("foo")])], cascade: false }

parse-statement
DROP TABLE IF EXISTS foo, bar CASCADE
----
DROP TABLE IF EXISTS foo, bar CASCADE
=>
DropObjects { object_type: Table, if_exists: true, names: [ObjectName([Ident("foo")]), ObjectName([Ident("bar")])], cascade: true }

parse-statement
DROP TABLE
----
error:
Parse error:
DROP TABLE
          ^
Expected identifier, found: EOF

parse-statement
DROP TABLE IF EXISTS foo, bar CASCADE RESTRICT
----
error:
Parse error:
DROP TABLE IF EXISTS foo, bar CASCADE RESTRICT
                              ^^^^^^^^^^^^^^^^
Cannot specify both CASCADE and RESTRICT in DROP

parse-statement
DROP VIEW myschema.myview
----
DROP VIEW myschema.myview
=>
DropObjects { object_type: View, if_exists: false, names: [ObjectName([Ident("myschema"), Ident("myview")])], cascade: false }

parse-statement
DROP SOURCE myschema.mydatasource
----
DROP SOURCE myschema.mydatasource
=>
DropObjects { object_type: Source, if_exists: false, names: [ObjectName([Ident("myschema"), Ident("mydatasource")])], cascade: false }

parse-statement
DROP INDEX IF EXISTS myschema.myindex
----
DROP INDEX IF EXISTS myschema.myindex
=>
DropObjects { object_type: Index, if_exists: true, names: [ObjectName([Ident("myschema"), Ident("myindex")])], cascade: false }

parse-statement
TAIL foo.bar
----
TAIL foo.bar
=>
Tail { name: ObjectName([Ident("foo"), Ident("bar")]), with_snapshot: false, as_of: None }

parse-statement
TAIL foo.bar AS OF 123
----
TAIL foo.bar AS OF 123
=>
Tail { name: ObjectName([Ident("foo"), Ident("bar")]), with_snapshot: false, as_of: Some(Value(Number("123"))) }

parse-statement
TAIL foo.bar AS OF now()
----
TAIL foo.bar AS OF now()
=>
Tail { name: ObjectName([Ident("foo"), Ident("bar")]), with_snapshot: false, as_of: Some(Function(Function { name: ObjectName([Ident("now")]), args: Args([]), filter: None, over: None, distinct: false })) }

parse-statement
TAIL foo.bar WITH SNAPSHOT AS OF now()
----
TAIL foo.bar WITH SNAPSHOT AS OF now()
=>
Tail { name: ObjectName([Ident("foo"), Ident("bar")]), with_snapshot: true, as_of: Some(Function(Function { name: ObjectName([Ident("now")]), args: Args([]), filter: None, over: None, distinct: false })) }

parse-statement
CREATE TABLE public.customer (
        customer_id integer DEFAULT nextval(public.customer_customer_id_seq),
        store_id smallint NOT NULL,
        first_name character varying(45) NOT NULL,
        last_name character varying(45) COLLATE "es_ES" NOT NULL,
        email character varying(50),
        address_id smallint NOT NULL,
        activebool boolean DEFAULT true NOT NULL,
        create_date date DEFAULT now()::text NOT NULL,
        last_update timestamp without time zone DEFAULT now() NOT NULL,
        last_update_tz timestamp with time zone,
        active integer NOT NULL
) WITH (fillfactor = 20, user_catalog_table = true, autovacuum_vacuum_threshold = 100)
----
CREATE TABLE public.customer (customer_id int DEFAULT nextval(public.customer_customer_id_seq), store_id smallint NOT NULL, first_name character varying(45) NOT NULL, last_name character varying(45) NOT NULL, email character varying(50), address_id smallint NOT NULL, activebool boolean DEFAULT true NOT NULL, create_date date DEFAULT now()::text NOT NULL, last_update timestamp DEFAULT now() NOT NULL, last_update_tz timestamp with time zone, active int NOT NULL) WITH (fillfactor = 20, user_catalog_table = true, autovacuum_vacuum_threshold = 100)
=>
CreateTable { name: ObjectName([Ident("public"), Ident("customer")]), columns: [ColumnDef { name: Ident("customer_id"), data_type: Int, collation: None, options: [ColumnOptionDef { name: None, option: Default(Function(Function { name: ObjectName([Ident("nextval")]), args: Args([Identifier([Ident("public"), Ident("customer_customer_id_seq")])]), filter: None, over: None, distinct: false })) }] }, ColumnDef { name: Ident("store_id"), data_type: SmallInt, collation: None, options: [ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("first_name"), data_type: Varchar(Some(45)), collation: None, options: [ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("last_name"), data_type: Varchar(Some(45)), collation: Some(ObjectName([Ident("es_ES")])), options: [ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("email"), data_type: Varchar(Some(50)), collation: None, options: [] }, ColumnDef { name: Ident("address_id"), data_type: SmallInt, collation: None, options: [ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("activebool"), data_type: Boolean, collation: None, options: [ColumnOptionDef { name: None, option: Default(Value(Boolean(true))) }, ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("create_date"), data_type: Date, collation: None, options: [ColumnOptionDef { name: None, option: Default(Cast { expr: Function(Function { name: ObjectName([Ident("now")]), args: Args([]), filter: None, over: None, distinct: false }), data_type: Text }) }, ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("last_update"), data_type: Timestamp, collation: None, options: [ColumnOptionDef { name: None, option: Default(Function(Function { name: ObjectName([Ident("now")]), args: Args([]), filter: None, over: None, distinct: false })) }, ColumnOptionDef { name: None, option: NotNull }] }, ColumnDef { name: Ident("last_update_tz"), data_type: TimestampTz, collation: None, options: [] }, ColumnDef { name: Ident("active"), data_type: Int, collation: None, options: [ColumnOptionDef { name: None, option: NotNull }] }], constraints: [], with_options: [SqlOption { name: Ident("fillfactor"), value: Number("20") }, SqlOption { name: Ident("user_catalog_table"), value: Boolean(true) }, SqlOption { name: Ident("autovacuum_vacuum_threshold"), value: Number("100") }], if_not_exists: false }

parse-statement roundtrip
CREATE TABLE public.customer (
    customer_id int DEFAULT nextval('public.customer_customer_id_seq'::regclass) NOT NULL,
    store_id smallint NOT NULL,
    first_name character varying(45) NOT NULL,
    last_name character varying(45) NOT NULL,
    info text,
    address_id smallint NOT NULL,
    activebool boolean DEFAULT true NOT NULL,
    create_date date DEFAULT now()::date NOT NULL,
    create_date1 date DEFAULT 'now'::text::date NOT NULL,
    last_update timestamp DEFAULT now(),
    active int
)
----
CREATE TABLE public.customer (customer_id int DEFAULT nextval('public.customer_customer_id_seq'::regclass) NOT NULL, store_id smallint NOT NULL, first_name character varying(45) NOT NULL, last_name character varying(45) NOT NULL, info text, address_id smallint NOT NULL, activebool boolean DEFAULT true NOT NULL, create_date date DEFAULT now()::date NOT NULL, create_date1 date DEFAULT 'now'::text::date NOT NULL, last_update timestamp DEFAULT now(), active int)

parse-statement roundtrip
CREATE TABLE bazaar.settings (
  settings_id uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL,
  user_id uuid UNIQUE,
  value text,
  use_metric boolean DEFAULT true
)
----
CREATE TABLE bazaar.settings (settings_id uuid PRIMARY KEY DEFAULT uuid_generate_v4() NOT NULL, user_id uuid UNIQUE, value text, use_metric boolean DEFAULT true)

parse-statement roundtrip
CREATE TABLE IF NOT EXISTS foo (bar int)
----
CREATE TABLE IF NOT EXISTS foo (bar int)
