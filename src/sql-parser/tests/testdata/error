# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
SELECT 1, 2, FROM a
----
error:
Parse error:
SELECT 1, 2, FROM a
             ^^^^
expected expression, but found reserved keyword

parse-statement
UPDATE t WHERE 1
----
error:
Parse error:
UPDATE t WHERE 1
         ^^^^^
Expected SET, found WHERE

parse-statement
UPDATE t SET a = 1 extrabadstuff
----
error:
Parse error:
UPDATE t SET a = 1 extrabadstuff
                   ^^^^^^^^^^^^^
Expected end of statement, found identifier

parse-statement
SELECT ALL DISTINCT name FROM customer
----
error:
Parse error:
SELECT ALL DISTINCT name FROM customer
       ^^^^^^^^^^^^
Cannot specify both ALL and DISTINCT in SELECT

parse-statement
INSERT public.customer (id, name, active) VALUES (1, 2, 3)
----
error:
Parse error:
INSERT public.customer (id, name, active) VALUES (1, 2, 3)
       ^^^^^^
Expected INTO, found identifier

parse-statement
SELECT foo AS
----
error:
Parse error:
SELECT foo AS
             ^
Expected an identifier after AS, found EOF

parse-statement
SELECT 1 FROM foo AS
----
error:
Parse error:
SELECT 1 FROM foo AS
                    ^
Expected an identifier after AS, found EOF

parse-statement
SELECT count(ALL DISTINCT + x) FROM customer
----
error:
Parse error:
SELECT count(ALL DISTINCT + x) FROM customer
             ^^^^^^^^^^^^
Cannot specify both ALL and DISTINCT in function: count

parse-statement
SELECT INTERVAL '01:01.01' MINUTE (5) TO SECOND (5)
----
error:
Parse error:
SELECT INTERVAL '01:01.01' MINUTE (5) TO SECOND (5)
                                  ^
Expected end of statement, found left parenthesis

parse-statement
SELECT 1 WHERE 1 < ANY SELECT 2
----
error:
Parse error:
SELECT 1 WHERE 1 < ANY SELECT 2
                       ^^^^^^
Expected left parenthesis, found SELECT

parse-statement
SELECT 1 WHERE 1 < NONE (SELECT 2)
----
error:
Parse error:
SELECT 1 WHERE 1 < NONE (SELECT 2)
                                ^
Expected right parenthesis, found number

parse-statement
SELECT 1 WHERE 1 < ANY (SELECT 2
----
error:
Parse error:
SELECT 1 WHERE 1 < ANY (SELECT 2
                                ^
Expected right parenthesis, found EOF

parse-statement
SELECT 1 WHERE 1 + ANY (SELECT 2)
----
SELECT 1 WHERE 1 +ANY (SELECT 2)
=>
Select(SelectStatement { query: Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: Some(AnySubquery { left: Value(Number("1")), op: "+", right: Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("2")), alias: None }], from: [], selection: None, group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None } }), group_by: [], having: None }), order_by: [], limit: None, offset: None, fetch: None }, as_of: None })

parse-statement
SELECT EXISTS (NULL)
----
error:
Parse error:
SELECT EXISTS (NULL)
               ^^^^
Expected SELECT, VALUES, or a subquery in the query body, found NULL

parse-statement
SELECT SELECT 1 FROM bar WHERE 1=1 FROM baz
----
error:
Parse error:
SELECT SELECT 1 FROM bar WHERE 1=1 FROM baz
              ^
Expected end of statement, found number

parse-statement
SELECT foo FROM

----
----
error:
Parse error:

^
Expected identifier, found EOF
----
----

parse-statement


SEL

ECT
----
error:
Parse error:
SEL
^^^
Expected a keyword at the beginning of a statement, found identifier

parse-statement
SELECT foo
FROM bar+1 ORDER
BY
----
error:
Parse error:
FROM bar+1 ORDER
        ^
Expected end of statement, found operator

parse-statement
SELECT * FROM db.public..customer
----
error:
Parse error:
SELECT * FROM db.public..customer
                        ^
Expected identifier, found dot

parse-statement
SELECT * FROM
----
error:
Parse error:
SELECT * FROM
             ^
Expected identifier, found EOF

parse-statement
SELECT '
----
error:
Parse error:
SELECT '
       ^
unterminated quoted string

parse-statement
SELECT E'
----
error:
Parse error:
SELECT E'
        ^
unterminated quoted string

parse-statement
SELECT E'\u&'
----
error:
Parse error:
SELECT E'\u&'
         ^^^^
invalid unicode escape

parse-statement
SELECT E'\u&&&&'
----
error:
Parse error:
SELECT E'\u&&&&'
         ^^^^^^
invalid unicode escape

# List literal expressions must begin with `LIST` before interior lists can
# omit it.
parse-statement
SELECT [1, 2]
----
error:
Parse error:
SELECT [1, 2]
       ^
Expected an expression, found left square bracket

# Subscripts must have values
parse-statement
SELECT LIST[1][]
----
error:
Parse error:
SELECT LIST[1][]
               ^
Expected an expression, found right square bracket

# Multi-dimensional subscripts must all be slices
parse-statement
SELECT LIST[1][1:2, 1]
----
error:
Parse error:
SELECT LIST[1][1:2, 1]
                     ^
Expected colon, found right square bracket

parse-statement
SELECT LIST[1][1, 1]
----
error:
Parse error:
SELECT LIST[1][1, 1]
                ^
Expected right square bracket, found comma

parse-statement
SELECT LIST[1][1, 1:1]
----
error:
Parse error:
SELECT LIST[1][1, 1:1]
                ^
Expected right square bracket, found comma

parse-statement
SELECT LIST[1][1:1, ]
----
error:
Parse error:
SELECT LIST[1][1:1, ]
                    ^
Expected an expression, found right square bracket

parse-scalar
ARRAY[]::int[1 + 1]
----
error:
Parse error:
ARRAY[]::int[1 + 1]
               ^
Expected right square bracket, found operator
