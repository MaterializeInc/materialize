# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
EXPLAIN SELECT 665
----
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN RAW PLAN FOR SELECT 665
----
EXPLAIN RAW PLAN FOR SELECT 665
=>
Explain(ExplainStatement { stage: RawPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN DECORRELATED PLAN FOR SELECT 665
----
EXPLAIN DECORRELATED PLAN FOR SELECT 665
=>
Explain(ExplainStatement { stage: DecorrelatedPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
----
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN PLAN FOR SELECT 665
----
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN TYPED OPTIMIZED PLAN FOR VIEW foo
----
EXPLAIN TYPED OPTIMIZED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: true, timing: false } })

parse-statement
EXPLAIN (TIMING false) TYPED OPTIMIZED PLAN FOR VIEW foo
----
error: Expected SELECT, VALUES, or a subquery in the query body, found TYPED
EXPLAIN (TIMING false) TYPED OPTIMIZED PLAN FOR VIEW foo
                       ^

parse-statement
EXPLAIN (TIMING on) OPTIMIZED PLAN FOR VIEW foo
----
error: Expected boolean value, found ON
EXPLAIN (TIMING on) OPTIMIZED PLAN FOR VIEW foo
                ^

parse-statement
EXPLAIN (TIMING true, INVALID_OPTION false) VIEW foo
----
error: Expected one of TIMING, found identifier "invalid_option"
EXPLAIN (TIMING true, INVALID_OPTION false) VIEW foo
                      ^

parse-statement
EXPLAIN (TIMING false) VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN (TIMING false, TIMING true) VIEW foo
----
EXPLAIN (TIMING true) OPTIMIZED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: false, timing: true } })

parse-statement
EXPLAIN (TIMING false, TIMING true) DECORRELATED PLAN FOR VIEW foo
----
EXPLAIN (TIMING true) DECORRELATED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: DecorrelatedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: false, timing: true } })

parse-statement
EXPLAIN TYPED (TIMING false) OPTIMIZED PLAN FOR VIEW foo
----
EXPLAIN TYPED OPTIMIZED PLAN FOR VIEW foo
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: View(UnresolvedObjectName([Ident("foo")])), options: ExplainOptions { typed: true, timing: false } })

parse-statement
EXPLAIN ((SELECT 1))
----
EXPLAIN OPTIMIZED PLAN FOR SELECT 1
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: Query(Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })

parse-statement
EXPLAIN (WITH A AS (SELECT 1) SELECT * from A)
----
EXPLAIN OPTIMIZED PLAN FOR WITH a AS (SELECT 1) SELECT * FROM a
=>
Explain(ExplainStatement { stage: OptimizedPlan, explainee: Query(Query { ctes: [Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: [], body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }], body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedObjectName([Ident("a")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), options: ExplainOptions { typed: false, timing: false } })
