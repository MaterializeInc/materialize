# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
EXPLAIN SELECT 665
----
EXPLAIN SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN RAW PLAN FOR SELECT 665
----
EXPLAIN RAW PLAN FOR SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(RawPlan), with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN DECORRELATED PLAN FOR SELECT 665
----
EXPLAIN DECORRELATED PLAN FOR SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(DecorrelatedPlan), with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
----
EXPLAIN OPTIMIZED PLAN FOR SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN PHYSICAL PLAN FOR SELECT 665
----
EXPLAIN PHYSICAL PLAN FOR SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(PhysicalPlan), with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN SELECT 665
----
EXPLAIN SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: View(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR MATERIALIZED VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR MATERIALIZED VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: MaterializedView(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR INDEX foo
----
EXPLAIN OPTIMIZED PLAN FOR INDEX foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: Index(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR REPLAN VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR REPLAN VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: ReplanView(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN LOCALLY OPTIMIZED PLAN FOR REPLAN VIEW foo
----
EXPLAIN LOCALLY OPTIMIZED PLAN FOR REPLAN VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(LocalPlan), with_options: [], format: None, explainee: ReplanView(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN PLAN FOR REPLAN VIEW foo
----
error: EXPLAIN statement for a view needs an explicit stage
EXPLAIN PLAN FOR REPLAN VIEW foo
        ^

parse-statement
EXPLAIN OPTIMIZED PLAN FOR REPLAN MATERIALIZED VIEW foo
----
EXPLAIN OPTIMIZED PLAN FOR REPLAN MATERIALIZED VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: ReplanMaterializedView(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR REPLAN INDEX foo
----
EXPLAIN OPTIMIZED PLAN FOR REPLAN INDEX foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: ReplanIndex(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN LOCALLY OPTIMIZED PLAN FOR VIEW foo
----
EXPLAIN LOCALLY OPTIMIZED PLAN FOR VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(LocalPlan), with_options: [], format: None, explainee: View(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN PLAN FOR VIEW foo
----
error: EXPLAIN statement for a view needs an explicit stage
EXPLAIN PLAN FOR VIEW foo
        ^

parse-statement
EXPLAIN OPTIMIZED PLAN WITH(types) FOR VIEW foo
----
EXPLAIN OPTIMIZED PLAN WITH (TYPES) FOR VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [ExplainPlanOption { name: Types, value: None }], format: None, explainee: View(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN OPTIMIZED PLAN WITH(arity, types) FOR VIEW foo
----
EXPLAIN OPTIMIZED PLAN WITH (ARITY, TYPES) FOR VIEW foo
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [ExplainPlanOption { name: Arity, value: None }, ExplainPlanOption { name: Types, value: None }], format: None, explainee: View(Name(UnresolvedItemName([Ident("foo")]))) })

parse-statement
EXPLAIN ((SELECT 1))
----
EXPLAIN SELECT 1
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN OPTIMIZED PLAN AS TEXT FOR WITH a AS (SELECT 1) SELECT * FROM a
----
EXPLAIN OPTIMIZED PLAN AS TEXT FOR WITH a AS (SELECT 1) SELECT * FROM a
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: Some(Text), explainee: Select(SelectStatement { query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

# regression test for #16029
parse-statement
EXPLAIN WITH a AS (SELECT 1) SELECT * FROM a
----
EXPLAIN WITH a AS (SELECT 1) SELECT * FROM a
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN TIMESTAMP FOR SELECT 1
----
EXPLAIN TIMESTAMP FOR SELECT 1
=>
ExplainTimestamp(ExplainTimestampStatement { format: None, select: SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None } })

parse-statement
EXPLAIN TIMESTAMP AS TEXT FOR SELECT 1
----
EXPLAIN TIMESTAMP AS TEXT FOR SELECT 1
=>
ExplainTimestamp(ExplainTimestampStatement { format: Some(Text), select: SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None } })

parse-statement
EXPLAIN TIMESTAMP AS JSON FOR SELECT 1
----
EXPLAIN TIMESTAMP AS JSON FOR SELECT 1
=>
ExplainTimestamp(ExplainTimestampStatement { format: Some(Json), select: SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None } })

parse-statement
EXPLAIN AS JSON SELECT * FROM foo
----
EXPLAIN AS JSON SELECT * FROM foo
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: Some(Json), explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("foo")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN OPTIMIZER TRACE WITH (types) AS TEXT FOR BROKEN SELECT 1 + 1
----
EXPLAIN OPTIMIZER TRACE WITH (TYPES) AS TEXT FOR BROKEN SELECT 1 + 1
=>
ExplainPlan(ExplainPlanStatement { stage: Some(Trace), with_options: [ExplainPlanOption { name: Types, value: None }], format: Some(Text), explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: None, op: "+" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, true) })

parse-statement
EXPLAIN LOCALLY OPTIMIZED PLAN FOR CREATE VIEW mv AS SELECT 665
----
EXPLAIN LOCALLY OPTIMIZED PLAN FOR CREATE VIEW mv AS SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(LocalPlan), with_options: [], format: None, explainee: CreateView(CreateViewStatement { if_exists: Error, temporary: false, definition: ViewDefinition { name: UnresolvedItemName([Ident("mv")]), columns: [], query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } } }, false) })

parse-statement
EXPLAIN LOCALLY OPTIMIZED PLAN FOR CREATE OR REPLACE VIEW mv AS SELECT 665
----
EXPLAIN LOCALLY OPTIMIZED PLAN FOR CREATE OR REPLACE VIEW mv AS SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: Some(LocalPlan), with_options: [], format: None, explainee: CreateView(CreateViewStatement { if_exists: Replace, temporary: false, definition: ViewDefinition { name: UnresolvedItemName([Ident("mv")]), columns: [], query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } } }, false) })

parse-statement
EXPLAIN CREATE VIEW mv AS SELECT 665
----
error: EXPLAIN statement for a view needs an explicit stage
EXPLAIN CREATE VIEW mv AS SELECT 665
        ^

parse-statement
EXPLAIN WITH (humanized expressions) CREATE MATERIALIZED VIEW mv AS SELECT 665
----
EXPLAIN WITH (HUMANIZED EXPRESSIONS) CREATE MATERIALIZED VIEW mv AS SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [ExplainPlanOption { name: HumanizedExpressions, value: None }], format: None, explainee: CreateMaterializedView(CreateMaterializedViewStatement { if_exists: Error, name: UnresolvedItemName([Ident("mv")]), columns: [], in_cluster: None, query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None, with_options: [] }, false) })

parse-statement
EXPLAIN BROKEN CREATE MATERIALIZED VIEW mv AS SELECT 665
----
EXPLAIN BROKEN CREATE MATERIALIZED VIEW mv AS SELECT 665
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: CreateMaterializedView(CreateMaterializedViewStatement { if_exists: Error, name: UnresolvedItemName([Ident("mv")]), columns: [], in_cluster: None, query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None, with_options: [] }, true) })

parse-statement
EXPLAIN BROKEN CREATE DEFAULT INDEX ON q1
----
EXPLAIN BROKEN CREATE DEFAULT INDEX ON q1
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: CreateIndex(CreateIndexStatement { name: None, in_cluster: None, on_name: Name(UnresolvedItemName([Ident("q1")])), key_parts: None, with_options: [], if_not_exists: false }, true) })

parse-statement
EXPLAIN OPTIMIZED PLAN FOR CREATE INDEX ON v(auction_id)
----
EXPLAIN OPTIMIZED PLAN FOR CREATE INDEX ON v (auction_id)
=>
ExplainPlan(ExplainPlanStatement { stage: Some(GlobalPlan), with_options: [], format: None, explainee: CreateIndex(CreateIndexStatement { name: None, in_cluster: None, on_name: Name(UnresolvedItemName([Ident("v")])), key_parts: Some([Identifier([Ident("auction_id")])]), with_options: [], if_not_exists: false }, false) })

parse-statement
EXPLAIN VALUE SCHEMA AS TEXT FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
----
error: Expected JSON, found TEXT
EXPLAIN VALUE SCHEMA AS TEXT FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
                        ^

parse-statement
EXPLAIN VALUE SCHEMA FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
----
EXPLAIN VALUE SCHEMA FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC = 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
=>
ExplainSinkSchema(ExplainSinkSchemaStatement { schema_for: Value, format: None, statement: CreateSinkStatement { name: Some(UnresolvedItemName([Ident("foo")])), in_cluster: None, if_not_exists: false, from: Name(UnresolvedItemName([Ident("bar")])), connection: Kafka { connection: Name(UnresolvedItemName([Ident("baz")])), options: [KafkaSinkConfigOption { name: Topic, value: Some(Value(String("topic"))) }], key: None, headers: None }, format: Some(Avro(Csr { csr_connection: CsrConnectionAvro { connection: CsrConnection { connection: Name(UnresolvedItemName([Ident("conn2")])), options: [] }, key_strategy: None, value_strategy: None, seed: None } })), envelope: Some(Upsert), with_options: [] } })

parse-statement
EXPLAIN KEY SCHEMA AS JSON FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
----
EXPLAIN KEY SCHEMA AS JSON FOR CREATE SINK foo FROM bar INTO KAFKA CONNECTION baz (TOPIC = 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
=>
ExplainSinkSchema(ExplainSinkSchemaStatement { schema_for: Key, format: Some(Json), statement: CreateSinkStatement { name: Some(UnresolvedItemName([Ident("foo")])), in_cluster: None, if_not_exists: false, from: Name(UnresolvedItemName([Ident("bar")])), connection: Kafka { connection: Name(UnresolvedItemName([Ident("baz")])), options: [KafkaSinkConfigOption { name: Topic, value: Some(Value(String("topic"))) }], key: None, headers: None }, format: Some(Avro(Csr { csr_connection: CsrConnectionAvro { connection: CsrConnection { connection: Name(UnresolvedItemName([Ident("conn2")])), options: [] }, key_strategy: None, value_strategy: None, seed: None } })), envelope: Some(Upsert), with_options: [] } })

parse-statement
EXPLAIN KEY SCHEMA FOR CREATE SINK FROM bar INTO KAFKA CONNECTION baz (TOPIC 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
----
EXPLAIN KEY SCHEMA FOR CREATE SINK FROM bar INTO KAFKA CONNECTION baz (TOPIC = 'topic') FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY CONNECTION conn2 ENVELOPE UPSERT
=>
ExplainSinkSchema(ExplainSinkSchemaStatement { schema_for: Key, format: None, statement: CreateSinkStatement { name: None, in_cluster: None, if_not_exists: false, from: Name(UnresolvedItemName([Ident("bar")])), connection: Kafka { connection: Name(UnresolvedItemName([Ident("baz")])), options: [KafkaSinkConfigOption { name: Topic, value: Some(Value(String("topic"))) }], key: None, headers: None }, format: Some(Avro(Csr { csr_connection: CsrConnectionAvro { connection: CsrConnection { connection: Name(UnresolvedItemName([Ident("conn2")])), options: [] }, key_strategy: None, value_strategy: None, seed: None } })), envelope: Some(Upsert), with_options: [] } })

parse-statement
EXPLAIN SELECT 665 AS OF 3
----
EXPLAIN SELECT 665 AS OF 3
=>
ExplainPlan(ExplainPlanStatement { stage: None, with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("665")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(At(Value(Number("3")))) }, false) })

parse-statement
EXPLAIN FILTER PUSHDOWN FOR SELECT * FROM numbers where value > 10
----
EXPLAIN FILTER PUSHDOWN FOR SELECT * FROM numbers WHERE value > 10
=>
ExplainPushdown(ExplainPushdownStatement { explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("numbers")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: None, op: ">" }, expr1: Identifier([Ident("value")]), expr2: Some(Value(Number("10"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN PLAN INSIGHTS FOR SELECT 1
----
EXPLAIN PLAN INSIGHTS FOR SELECT 1
=>
ExplainPlan(ExplainPlanStatement { stage: Some(PlanInsights), with_options: [], format: None, explainee: Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None }, false) })

parse-statement
EXPLAIN FILTER PUSHDOWN FOR MATERIALIZED VIEW whatever
----
EXPLAIN FILTER PUSHDOWN FOR MATERIALIZED VIEW whatever
=>
ExplainPushdown(ExplainPushdownStatement { explainee: MaterializedView(Name(UnresolvedItemName([Ident("whatever")]))) })
