# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement roundtrip
SELECT 1
----
SELECT 1

parse-statement roundtrip
(SELECT 1)
----
SELECT 1

parse-statement
((SELECT 1))
----
SELECT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT (((SELECT 2)) + 3)
----
SELECT ((SELECT 2) + 3)

parse-statement roundtrip
SELECT ((((2 + 3)) - 4)) * 5
----
SELECT ((((2 + 3)) - 4)) * 5

parse-statement roundtrip
((SELECT 2)) UNION SELECT 2
----
(SELECT 2) UNION SELECT 2

parse-statement roundtrip
SELECT (((SELECT 2)) UNION SELECT 2)
----
SELECT ((SELECT 2) UNION SELECT 2)

parse-statement roundtrip
SELECT (((2)) UNION SELECT 2)
----
error: Expected right parenthesis, found UNION
SELECT (((2)) UNION SELECT 2)
              ^

parse-statement roundtrip
SELECT (SELECT 2) UNION (SELECT 2), 1
----
error: Expected end of statement, found comma
SELECT (SELECT 2) UNION (SELECT 2), 1
                                  ^

parse-statement roundtrip
(SELECT LIMIT 1) LIMIT 1
----
error: multiple LIMIT/FETCH clauses not allowed
(SELECT LIMIT 1) LIMIT 1
                 ^

parse-statement roundtrip
(SELECT LIMIT 1) FETCH FIRST ROW
----
error: Expected end of statement, found FETCH
(SELECT LIMIT 1) FETCH FIRST ROW
                 ^

parse-statement roundtrip
(SELECT 1) LIMIT 1
----
SELECT 1 LIMIT 1

parse-statement roundtrip
(SELECT 1 ORDER BY 1) ORDER BY 1
----
error: multiple ORDER BY clauses not allowed
(SELECT 1 ORDER BY 1) ORDER BY 1
                            ^

parse-statement roundtrip
(SELECT 1) ORDER BY 1
----
SELECT 1 ORDER BY 1

parse-statement roundtrip
WITH a AS (SELECT 1) (WITH b AS (SELECT 2) SELECT 3)
----
error: multiple WITH clauses not allowed
WITH a AS (SELECT 1) (WITH b AS (SELECT 2) SELECT 3)
                                                    ^

parse-statement roundtrip
(WITH b AS (SELECT 2) SELECT 3)
----
WITH b AS (SELECT 2) SELECT 3

parse-statement roundtrip
VALUES (1)
----
VALUES (1)

parse-statement roundtrip
SELECT (1)
----
SELECT (1)

parse-statement roundtrip
SELECT
----
SELECT

parse-statement
SELECT (SELECT)
----
SELECT (SELECT)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Subquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT )
----
error: Expected end of statement, found right parenthesis
SELECT )
       ^

parse-statement roundtrip
SELECT LIMIT 1
----
SELECT LIMIT 1

parse-statement roundtrip
SELECT (1, 2)
----
SELECT ROW(1, 2)

parse-statement roundtrip
SELECT (1, 2)
----
SELECT ROW(1, 2)

parse-statement roundtrip
SELECT ROW()
----
SELECT ROW()

parse-statement roundtrip
SELECT ROW(1)
----
SELECT ROW(1)

parse-statement roundtrip
SELECT ROW(1, 2)
----
SELECT ROW(1, 2)

parse-statement
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT 5
----
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("1"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("5")) }), offset: None }, as_of: None })

# LIMIT should not be parsed as an alias.

parse-statement
SELECT id FROM customer LIMIT 1
----
SELECT id FROM customer LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT 1 LIMIT 5
----
SELECT 1 LIMIT 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("5")) }), offset: None }, as_of: None })

parse-statement
SELECT DISTINCT name FROM customer
----
SELECT DISTINCT name FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(EntireRow), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Identifier([Ident("a")]), Identifier([Ident("b")])])), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }, Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Identifier([Ident("a")]), Identifier([Ident("b")])])), projection: [Expr { expr: Identifier([Ident("name")]), alias: None }, Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT DISTINCT ON (a, b) name, a, b FROM customer
----
SELECT DISTINCT ON (a, b) name, a, b FROM customer

parse-statement
SELECT DISTINCT ON (a + b, NOT c) a, b, c FROM customer
----
SELECT DISTINCT ON (a + b, NOT c) a, b, c FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: Some(On([Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("a")]), expr2: Some(Identifier([Ident("b")])) }, Not { expr: Identifier([Ident("c")]) }])), projection: [Expr { expr: Identifier([Ident("a")]), alias: None }, Expr { expr: Identifier([Ident("b")]), alias: None }, Expr { expr: Identifier([Ident("c")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT ALL name FROM customer
----
SELECT name FROM customer

parse-statement
SELECT * FROM foo
----
SELECT * FROM foo
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("foo")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo.* FROM foo
----
SELECT foo.* FROM foo
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: QualifiedWildcard([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("foo")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT (x).a, (x).a.b.c
----
SELECT (x).a, (x).a.b.c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: FieldAccess { expr: Nested(Identifier([Ident("x")])), field: Ident("a") }, alias: None }, Expr { expr: FieldAccess { expr: FieldAccess { expr: FieldAccess { expr: Nested(Identifier([Ident("x")])), field: Ident("a") }, field: Ident("b") }, field: Ident("c") }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT (1.a)
----
error: Expected right parenthesis, found identifier "a"
SELECT (1.a)
          ^

parse-statement
SELECT (x).*.*
----
SELECT (x).*.*
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: WildcardAccess(WildcardAccess(Nested(Identifier([Ident("x")])))), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(employee.*) FROM "order" JOIN employee ON "order".employee = employee.id
----
SELECT count(employee.*) FROM "order" JOIN employee ON "order".employee = employee.id

parse-statement
SELECT a.col + 1 AS newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("a"), Ident("col")]), expr2: Some(Value(Number("1"))) }, alias: Some(Ident("newname")) }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("foo")])), alias: Some(TableAlias { name: Ident("a"), columns: [], strict: false }) }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT a.col + 1 AS newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a

parse-statement roundtrip
SELECT a.col + 1 newname FROM foo AS a
----
SELECT a.col + 1 AS newname FROM foo AS a

parse-statement roundtrip
SELECT concat('CONCAT', ' ', 'function')
----
SELECT concat('CONCAT', ' ', 'function')

parse-statement roundtrip
SELECT concat(first_name, ' ', last_name) FROM customer
----
SELECT concat(first_name, ' ', last_name) FROM customer

parse-statement roundtrip
SELECT concat('Concat with ', NULL) AS result_string
----
SELECT concat('Concat with ', NULL) AS result_string

parse-statement roundtrip
SELECT first_name, concat('A', 3, 'chars') FROM customer
----
SELECT first_name, concat('A', 3, 'chars') FROM customer

parse-statement roundtrip
SELECT count(*) FROM customer
----
SELECT count(*) FROM customer

parse-statement
SELECT count(*) FILTER (WHERE foo) FROM customer
----
SELECT count(*) FILTER (WHERE foo) FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: Name(UnresolvedItemName([Ident("count")])), args: Star, filter: Some(Identifier([Ident("foo")])), over: None, distinct: false }), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT count(DISTINCT + x) FROM customer
----
SELECT count(DISTINCT + x) FROM customer
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: Name(UnresolvedItemName([Ident("count")])), args: Args { args: [Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("x")]), expr2: None }], order_by: [] }, filter: None, over: None, distinct: true }), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(ALL + x) FROM customer
----
SELECT count(+ x) FROM customer

parse-statement roundtrip
SELECT count(+ x) FROM customer
----
SELECT count(+ x) FROM customer

parse-statement
SELECT count(* ORDER BY a)
----
error: Expected right parenthesis, found ORDER
SELECT count(* ORDER BY a)
               ^

parse-statement
SELECT array_agg(ORDER BY a)
----
error: expected expression, but found reserved keyword
SELECT array_agg(ORDER BY a)
                 ^


parse-statement
SELECT array_agg(b ORDER BY a)
----
SELECT array_agg(b ORDER BY a)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Function(Function { name: Name(UnresolvedItemName([Ident("array_agg")])), args: Args { args: [Identifier([Ident("b")])], order_by: [OrderByExpr { expr: Identifier([Ident("a")]), asc: None, nulls_last: None }] }, filter: None, over: None, distinct: false }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })


# Parameters

parse-statement
SELECT $
----
error: unterminated dollar-quoted string
SELECT $
       ^

parse-statement
SELECT $q
----
error: unterminated dollar-quoted string
SELECT $q
       ^

parse-statement
SELECT $1$2
----
error: Expected end of statement, found parameter "$2"
SELECT $1$2
         ^

parse-statement
SELECT $18446744073709551616
----
error: invalid parameter number
SELECT $18446744073709551616
       ^

parse-statement
SELECT c FROM t WHERE c NOT (
----
error: Expected end of statement, found NOT
SELECT c FROM t WHERE c NOT (
                        ^

parse-statement roundtrip
SELECT name COLLATE "de_DE" FROM customer
----
SELECT name COLLATE "de_DE" FROM customer

parse-statement roundtrip
SELECT customer.address.state FROM foo
----
SELECT customer.address.state FROM foo

parse-statement
SELECT * FROM customers WHERE segment IN (SELECT segm FROM bar)
----
SELECT * FROM customers WHERE segment IN (SELECT segm FROM bar)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(InSubquery { expr: Identifier([Ident("segment")]), subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("segm")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE x IN (VALUES (1))
----
SELECT * FROM t WHERE x IN (VALUES (1))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t")])), alias: None }, joins: [] }], selection: Some(InSubquery { expr: Identifier([Ident("x")]), subquery: Query { ctes: Simple([]), body: Values(Values([[Value(Number("1"))]])), order_by: [], limit: None, offset: None }, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customers WHERE age BETWEEN 25 AND 32
----
SELECT * FROM customers WHERE age BETWEEN 25 AND 32
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(Between { expr: Identifier([Ident("age")]), negated: false, low: Value(Number("25")), high: Value(Number("32")) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customers WHERE age NOT BETWEEN 25 AND 32
----
SELECT * FROM customers WHERE age NOT BETWEEN 25 AND 32
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customers")])), alias: None }, joins: [] }], selection: Some(Between { expr: Identifier([Ident("age")]), negated: true, low: Value(Number("25")), high: Value(Number("32")) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NULL
----
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NULL
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t")])), alias: None }, joins: [] }], selection: Some(IsExpr { expr: Between { expr: Value(Number("1")), negated: false, low: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) }, high: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("3")), expr2: Some(Value(Number("4"))) } }, construct: Null, negated: false }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NOT FALSE
----
SELECT * FROM t WHERE 1 BETWEEN 1 + 2 AND 3 + 4 IS NOT FALSE
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t")])), alias: None }, joins: [] }], selection: Some(IsExpr { expr: Between { expr: Value(Number("1")), negated: false, low: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) }, high: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("3")), expr2: Some(Value(Number("4"))) } }, construct: False, negated: true }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })


parse-statement
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
----
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t")])), alias: None }, joins: [] }], selection: Some(And { left: Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }, right: Between { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Identifier([Ident("x")])) }, negated: false, low: Value(Number("1")), high: Value(Number("2")) } }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
----
SELECT * FROM t WHERE 1 = 1 AND 1 + x BETWEEN 1 AND 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t")])), alias: None }, joins: [] }], selection: Some(And { left: Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }, right: Between { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Value(Number("1")), expr2: Some(Identifier([Ident("x")])) }, negated: false, low: Value(Number("1")), high: Value(Number("2")) } }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC, id
----
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC, id
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "<" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("5"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: None }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id
----
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: None }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id NULLS FIRST
----
SELECT id, fname, lname FROM customer ORDER BY lname ASC, fname DESC, id NULLS FIRST
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("id")]), asc: None, nulls_last: Some(false) }], limit: None, offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer WHERE id < 5
ORDER BY lname ASC, fname DESC NULLS LAST LIMIT 2
----
SELECT id, fname, lname FROM customer WHERE id < 5 ORDER BY lname ASC, fname DESC NULLS LAST LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "<" }, expr1: Identifier([Ident("id")]), expr2: Some(Value(Number("5"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("lname")]), asc: Some(true), nulls_last: None }, OrderByExpr { expr: Identifier([Ident("fname")]), asc: Some(false), nulls_last: Some(true) }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT id, fname, lname FROM customer GROUP BY lname, fname
----
SELECT id, fname, lname FROM customer GROUP BY lname, fname
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("id")]), alias: None }, Expr { expr: Identifier([Ident("fname")]), alias: None }, Expr { expr: Identifier([Ident("lname")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("lname")]), Identifier([Ident("fname")])], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
----
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: ">" }, expr1: Function(Function { name: Name(UnresolvedItemName([Ident("count")])), args: Star, filter: None, over: None, distinct: false }), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
----
SELECT foo FROM bar GROUP BY foo HAVING count(*) > 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: ">" }, expr1: Function(Function { name: Name(UnresolvedItemName([Ident("count")])), args: Star, filter: None, over: None, distinct: false }), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar GROUP BY foo HAVING 1 = 1
----
SELECT foo FROM bar GROUP BY foo HAVING 1 = 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [Identifier([Ident("foo")])], having: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("1"))) }), options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT id, fname, lname FROM customer WHERE id = 1 LIMIT ALL
----
SELECT id, fname, lname FROM customer WHERE id = 1

parse-statement roundtrip
SELECT row_number() OVER (ORDER BY dt DESC),
       sum(foo) OVER (PARTITION BY a, b ORDER BY c, d
           ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),
       avg(bar) OVER (ORDER BY a
           RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       max(baz) OVER (ORDER BY a
           ROWS UNBOUNDED PRECEDING)
       FROM foo
----
SELECT row_number() OVER (ORDER BY dt DESC), sum(foo) OVER (PARTITION BY a, b ORDER BY c, d ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), avg(bar) OVER (ORDER BY a RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING), max(baz) OVER (ORDER BY a ROWS UNBOUNDED PRECEDING) FROM foo

parse-statement roundtrip
SELECT a, count(1), min(b), max(b) FROM foo GROUP BY a
----
SELECT a, count(1), min(b), max(b) FROM foo GROUP BY a

parse-statement roundtrip
SELECT a + b, 2 + a, 2.5 + a, a_f + b_f, 2 + a_f, 2.5 + a_f FROM c
----
SELECT a + b, 2 + a, 2.5 + a, a_f + b_f, 2 + a_f, 2.5 + a_f FROM c

parse-statement roundtrip
SELECT a - b, 2 - a, 2.5 - a, a_f - b_f, 2 - a_f, 2.5 - a_f FROM c
----
SELECT a - b, 2 - a, 2.5 - a, a_f - b_f, 2 - a_f, 2.5 - a_f FROM c

parse-statement roundtrip
SELECT alias."bar baz", myfun(), "simple id" AS "column alias" FROM "a table" AS alias
----
SELECT alias."bar baz", myfun(), "simple id" AS "column alias" FROM "a table" AS alias

parse-statement roundtrip
CREATE TABLE foo (bar int)
----
CREATE TABLE foo (bar int4)

parse-statement roundtrip
SELECT * FROM fn(1, 2) AS foo, schema.bar AS bar WITH (nolock)
----
error: Expected end of statement, found WITH
SELECT * FROM fn(1, 2) AS foo, schema.bar AS bar WITH (nolock)
                                                 ^

parse-statement
SELECT * FROM t1, t2
----
SELECT * FROM t1, t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1a NATURAL JOIN t1b, t2a NATURAL JOIN t2b
----
SELECT * FROM t1a NATURAL JOIN t1b, t2a NATURAL JOIN t2b
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t1b")])), alias: None }, join_operator: Inner(Natural) }] }, TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t2a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2b")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 CROSS JOIN t2
----
SELECT * FROM t1 CROSS JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: CrossJoin }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
----
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: Some(TableAlias { name: Ident("foo"), columns: [], strict: false }) }, join_operator: Inner(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 JOIN t2 foo USING (c1)
----
SELECT * FROM t1 JOIN t2 AS foo USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: Some(TableAlias { name: Ident("foo"), columns: [], strict: false }) }, join_operator: Inner(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL JOIN t2
----
SELECT * FROM t1 NATURAL JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL LEFT JOIN t2
----
SELECT * FROM t1 NATURAL LEFT JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: LeftOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL RIGHT JOIN t2
----
SELECT * FROM t1 NATURAL RIGHT JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: RightOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 NATURAL FULL JOIN t2
----
SELECT * FROM t1 NATURAL FULL JOIN t2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: FullOuter(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 natural
----
error: Expected a join type after NATURAL, found EOF
SELECT * FROM t1 natural
                        ^

parse-statement
SELECT c1, c2 FROM t1, t4 JOIN t2 ON t2.c = t1.c LEFT JOIN t3 USING (q, c) WHERE t4.c = t1.c
----
SELECT c1, c2 FROM t1, t4 JOIN t2 ON t2.c = t1.c LEFT JOIN t3 USING (q, c) WHERE t4.c = t1.c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }, Expr { expr: Identifier([Ident("c2")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t4")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("t2"), Ident("c")]), expr2: Some(Identifier([Ident("t1"), Ident("c")])) })) }, Join { relation: Table { name: Name(UnresolvedItemName([Ident("t3")])), alias: None }, join_operator: LeftOuter(Using { columns: [Ident("q"), Ident("c")], alias: None }) }] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("t4"), Ident("c")]), expr2: Some(Identifier([Ident("t1"), Ident("c")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM a NATURAL JOIN (b NATURAL JOIN (c NATURAL JOIN d NATURAL JOIN e)) NATURAL JOIN (f NATURAL JOIN (g NATURAL JOIN h))
----
SELECT * FROM a NATURAL JOIN (b NATURAL JOIN (c NATURAL JOIN d NATURAL JOIN e)) NATURAL JOIN (f NATURAL JOIN (g NATURAL JOIN h))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("c")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("d")])), alias: None }, join_operator: Inner(Natural) }, Join { relation: Table { name: Name(UnresolvedItemName([Ident("e")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }, Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("f")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("g")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("h")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }, alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN b) NATURAL JOIN c
----
SELECT * FROM (a NATURAL JOIN b) NATURAL JOIN c
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("c")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN b) c NATURAL JOIN d
----
SELECT * FROM (a NATURAL JOIN b) AS c NATURAL JOIN d
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: Some(TableAlias { name: Ident("c"), columns: [], strict: false }) }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("d")])), alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (((a NATURAL JOIN b)))
----
SELECT * FROM (((a NATURAL JOIN b)))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [] }, alias: None }, joins: [] }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM a NATURAL JOIN (((b NATURAL JOIN c)))
----
SELECT * FROM a NATURAL JOIN (((b NATURAL JOIN c)))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [Join { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: NestedJoin { join: TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("c")])), alias: None }, join_operator: Inner(Natural) }] }, alias: None }, joins: [] }, alias: None }, joins: [] }, alias: None }, join_operator: Inner(Natural) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM (a NATURAL JOIN (b))
----
error: Expected joined table, found right parenthesis
SELECT * FROM (a NATURAL JOIN (b))
                                ^

parse-statement
SELECT c1 FROM t1 INNER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: Inner(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT x.c1 FROM t1 INNER JOIN t2 USING (c1) AS x
----
SELECT x.c1 FROM t1 JOIN t2 USING (c1) AS x
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("x"), Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: Inner(Using { columns: [Ident("c1")], alias: Some(Ident("x")) }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })


parse-statement
SELECT c1 FROM t1 LEFT OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 LEFT JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: LeftOuter(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT x.c1 FROM t1 LEFT OUTER JOIN t2 USING (c1) AS x
----
SELECT x.c1 FROM t1 LEFT JOIN t2 USING (c1) AS x
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("x"), Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: LeftOuter(Using { columns: [Ident("c1")], alias: Some(Ident("x")) }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT c1 FROM t1 RIGHT OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 RIGHT JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: RightOuter(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT x.c1 FROM t1 RIGHT OUTER JOIN t2 USING (c1) AS x
----
SELECT x.c1 FROM t1 RIGHT JOIN t2 USING (c1) AS x
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("x"), Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: RightOuter(Using { columns: [Ident("c1")], alias: Some(Ident("x")) }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT c1 FROM t1 FULL OUTER JOIN t2 USING (c1)
----
SELECT c1 FROM t1 FULL JOIN t2 USING (c1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: FullOuter(Using { columns: [Ident("c1")], alias: None }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT x.c1 FROM t1 FULL OUTER JOIN t2 USING (c1) AS x
----
SELECT x.c1 FROM t1 FULL JOIN t2 USING (c1) AS x
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("x"), Ident("c1")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("t1")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("t2")])), alias: None }, join_operator: FullOuter(Using { columns: [Ident("c1")], alias: Some(Ident("x")) }) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM t1 JOIN t2 USING (c1) AS
----
error: Expected identifier, found EOF
SELECT * FROM t1 JOIN t2 USING (c1) AS
                                      ^

parse-statement
SELECT * FROM a OUTER JOIN b ON 1
----
error: Expected LEFT, RIGHT, or FULL, found OUTER
SELECT * FROM a OUTER JOIN b ON 1
                ^

parse-statement
WITH
  a AS (SELECT 1 AS foo),
  b AS (SELECT 2 AS bar)
SELECT foo + bar FROM a, b
----
WITH a AS (SELECT 1 AS foo), b AS (SELECT 2 AS bar) SELECT foo + bar FROM a, b
=>
Select(SelectStatement { query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: Some(Ident("foo")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }, Cte { alias: TableAlias { name: Ident("b"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("2")), alias: Some(Ident("bar")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("foo")]), expr2: Some(Identifier([Ident("bar")])) }, alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
CREATE VIEW v AS
  WITH
    a AS (SELECT 1 AS foo),
    b AS (SELECT 2 AS bar)
  SELECT foo + bar FROM a, b
----
CREATE VIEW v AS WITH a AS (SELECT 1 AS foo), b AS (SELECT 2 AS bar) SELECT foo + bar FROM a, b
=>
CreateView(CreateViewStatement { if_exists: Error, temporary: false, definition: ViewDefinition { name: UnresolvedItemName([Ident("v")]), columns: [], query: Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("a"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: Some(Ident("foo")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }, Cte { alias: TableAlias { name: Ident("b"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("2")), alias: Some(Ident("bar")) }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "+" }, expr1: Identifier([Ident("foo")]), expr2: Some(Identifier([Ident("bar")])) }, alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("a")])), alias: None }, joins: [] }, TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("b")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } } })

parse-statement roundtrip
WITH cte (col1, col2) AS (SELECT foo, bar FROM baz) SELECT * FROM cte
----
WITH cte (col1, col2) AS (SELECT foo, bar FROM baz) SELECT * FROM cte

parse-statement roundtrip
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a CROSS JOIN (SELECT y FROM bar) AS b
----
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a CROSS JOIN (SELECT y FROM bar) AS b

parse-statement roundtrip
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a (x) CROSS JOIN (SELECT y FROM bar) AS b (y)
----
SELECT a.x, b.y FROM (SELECT x FROM foo) AS a (x) CROSS JOIN (SELECT y FROM bar) AS b (y)

parse-statement roundtrip
SELECT * FROM (((SELECT 1)))
----
SELECT * FROM (SELECT 1)

parse-statement roundtrip
SELECT * FROM t NATURAL JOIN (((SELECT 1)))
----
SELECT * FROM t NATURAL JOIN (SELECT 1)

parse-statement roundtrip
SELECT * FROM (((SELECT 1) UNION (SELECT 2)) AS t1 NATURAL JOIN t2)
----
SELECT * FROM (((SELECT 1) UNION (SELECT 2)) AS t1 NATURAL JOIN t2)

parse-statement roundtrip
SELECT * FROM ((SELECT 1) AS t)
----
error: Expected joined table, found right parenthesis
SELECT * FROM ((SELECT 1) AS t)
                              ^

parse-statement roundtrip
SELECT * FROM (VALUES (1), (2), (3))
----
SELECT * FROM (VALUES (1), (2), (3))

parse-statement roundtrip
SELECT * FROM (VALUES (1), (2), (3)), (VALUES (1, 2, 3))
----
SELECT * FROM (VALUES (1), (2), (3)), (VALUES (1, 2, 3))

parse-statement roundtrip
SELECT * FROM (VALUES (1)) UNION VALUES (1)
----
SELECT * FROM (VALUES (1)) UNION VALUES (1)

parse-statement roundtrip
SELECT * FROM t WHERE EXISTS (SELECT 1)
----
SELECT * FROM t WHERE EXISTS (SELECT 1)

parse-statement roundtrip
SELECT * FROM t WHERE NOT EXISTS (SELECT 1)
----
SELECT * FROM t WHERE NOT EXISTS (SELECT 1)

parse-statement roundtrip
SELECT * FROM t WHERE EXISTS (WITH u AS (SELECT 1) SELECT * FROM u)
----
SELECT * FROM t WHERE EXISTS (WITH u AS (SELECT 1) SELECT * FROM u)

parse-statement roundtrip
SELECT EXISTS (SELECT 1)
----
SELECT EXISTS (SELECT 1)

parse-statement
SELECT foo FROM bar OFFSET 2 ROWS
----
SELECT foo FROM bar OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 OFFSET 2 ROWS
----
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz OFFSET 2 ROWS
----
SELECT foo FROM bar ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2 ROWS
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS) OFFSET 2 ROWS
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM LATERAL bar(1)
----
SELECT foo FROM bar(1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Function { function: TableFunction { name: Name(UnresolvedItemName([Ident("bar")])), args: Args { args: [Value(Number("1"))], order_by: [] } }, alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT foo FROM LATERAL bar
----
error: Expected left parenthesis, found EOF
SELECT foo FROM LATERAL bar
                           ^

parse-statement
SELECT 'foo' OFFSET 0 ROWS
----
SELECT 'foo' OFFSET 0
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("0"))) }, as_of: None })

parse-statement
SELECT foo FROM bar OFFSET 2
----
SELECT foo FROM bar OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
----
SELECT foo FROM bar WHERE foo = 4 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz OFFSET 2
----
SELECT foo FROM bar ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS) OFFSET 2
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2 ROWS
----
SELECT foo FROM (SELECT * FROM bar OFFSET 2) OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT 'foo' OFFSET 0
----
SELECT 'foo' OFFSET 0
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: Some(Value(Number("0"))) }, as_of: None })

parse-statement roundtrip
SELECT foo FROM bar OFFSET 1 ROW
----
SELECT foo FROM bar OFFSET 1

parse-statement
SELECT foo FROM bar FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT 'foo' FETCH FIRST 2 ROWS ONLY
----
SELECT 'foo' LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(String("foo")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST ROWS ONLY
----
SELECT foo FROM bar LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar WHERE foo = 4 LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar ORDER BY baz FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar ORDER BY baz LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz FETCH FIRST 2 ROWS WITH TIES
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz FETCH FIRST 2 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: true, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST 50 PERCENT ROWS ONLY
----
error: Expected one of ROW or ROWS, found identifier "percent"
SELECT foo FROM bar FETCH FIRST 50 PERCENT ROWS ONLY
                                   ^

parse-statement
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM bar WHERE foo = 4 ORDER BY baz LIMIT 2 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("foo")]), expr2: Some(Value(Number("4"))) }), group_by: [], having: None, options: [] }), order_by: [OrderByExpr { expr: Identifier([Ident("baz")]), asc: None, nulls_last: None }], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar FETCH FIRST 2 ROWS ONLY) FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM (SELECT * FROM bar LIMIT 2) LIMIT 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM (SELECT * FROM bar OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY) OFFSET 2 ROWS FETCH FIRST 2 ROWS ONLY
----
SELECT foo FROM (SELECT * FROM bar LIMIT 2 OFFSET 2) LIMIT 2 OFFSET 2
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("2")) }), offset: Some(Value(Number("2"))) }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST 10 ROW ONLY
----
SELECT foo FROM bar LIMIT 10
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT 10 ROW ONLY
----
SELECT foo FROM bar LIMIT 10
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT 10 ROWS WITH TIES
----
SELECT foo FROM bar FETCH FIRST 10 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: true, quantity: Value(Number("10")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH NEXT ROWS WITH TIES
----
SELECT foo FROM bar FETCH FIRST 1 ROWS WITH TIES
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: true, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT foo FROM bar FETCH FIRST ROWS ONLY
----
SELECT foo FROM bar LIMIT 1
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("foo")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("bar")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("1")) }), offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
----
SELECT * FROM customer LEFT JOIN (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("order")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("order"), Ident("customer")]), expr2: Some(Identifier([Ident("customer"), Ident("id")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("3")) }), offset: None }, alias: Some(TableAlias { name: Ident("order"), columns: [], strict: false }) }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN LATERAL (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
----
SELECT * FROM customer LEFT JOIN LATERAL (SELECT * FROM "order" WHERE "order".customer = customer.id LIMIT 3) AS "order" ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Derived { lateral: true, subquery: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("order")])), alias: None }, joins: [] }], selection: Some(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("order"), Ident("customer")]), expr2: Some(Identifier([Ident("customer"), Ident("id")])) }), group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("3")) }), offset: None }, alias: Some(TableAlias { name: Ident("order"), columns: [], strict: false }) }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM customer LEFT JOIN LATERAL generate_series(1, customer.id) ON true
----
SELECT * FROM customer LEFT JOIN generate_series(1, customer.id) ON true
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Function { function: TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Identifier([Ident("customer"), Ident("id")])], order_by: [] } }, alias: None, with_ordinality: false }, join_operator: LeftOuter(On(Value(Boolean(true)))) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM LATERAL ROWS FROM (generate_series(1, 2), generate_series(3, 5))
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM LATERAL ROWS FROM (generate_series(1, 2), generate_series(3, 5)) AS alias
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) AS alias
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: Some(TableAlias { name: Ident("alias"), columns: [], strict: false }), with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM generate_series(1, 2) WITH ORDINALITY
----
SELECT * FROM generate_series(1, 2) WITH ORDINALITY
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Function { function: TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, alias: None, with_ordinality: true }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2) WITH ORDINALITY)
----
error: Expected right parenthesis, found WITH
SELECT * FROM ROWS FROM (generate_series(1, 2) WITH ORDINALITY)
                                               ^

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) WITH ORDINALITY
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5)) WITH ORDINALITY
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: true }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
----
SELECT * FROM ROWS FROM (generate_series(1, 2), generate_series(3, 5))
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: RowsFrom { functions: [TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("1")), Value(Number("2"))], order_by: [] } }, TableFunction { name: Name(UnresolvedItemName([Ident("generate_series")])), args: Args { args: [Value(Number("3")), Value(Number("5"))], order_by: [] } }], alias: None, with_ordinality: false }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# Ensure parsing AS OF is case-insensitive
parse-statement
SELECT * FROM data as of now()
----
SELECT * FROM data AS OF now()
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(At(Function(Function { name: Name(UnresolvedItemName([Ident("now")])), args: Args { args: [], order_by: [] }, filter: None, over: None, distinct: false }))) })

parse-statement
SELECT * FROM data AS OF now()
----
SELECT * FROM data AS OF now()
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(At(Function(Function { name: Name(UnresolvedItemName([Ident("now")])), args: Args { args: [], order_by: [] }, filter: None, over: None, distinct: false }))) })


parse-statement
SELECT * FROM data AS OF AT LEAST 5
----
SELECT * FROM data AS OF AT LEAST 5
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("data")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: Some(AtLeast(Value(Number("5")))) })

# Query hints
parse-statement
SELECT * FROM foo OPTIONS (bar = 7)
----
error: Expected EXPECTED, found identifier "bar"
SELECT * FROM foo OPTIONS (bar = 7)
                           ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 7)
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 7)
                                                    ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 'baz')
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar = 'baz')
                                                    ^

parse-statement
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar)
----
error: Expected EXPECTED, found identifier "bar"
SELECT a, b, min(c) FROM foo GROUP BY a, b OPTIONS (bar)
                                                    ^

parse-statement
SELECT a, b, min(c) FROM ( SELECT a, b, min(d) as c GROUP BY a, b OPTIONS (bar = 7)) as agg GROUP BY a, b
----
error: Expected joined table, found comma
SELECT a, b, min(c) FROM ( SELECT a, b, min(d) as c GROUP BY a, b OPTIONS (bar = 7)) as agg GROUP BY a, b
                                   ^

# List subqueries
parse-statement
SELECT LIST[1, 2, 3]
----
SELECT LIST[1, 2, 3]
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: List([Value(Number("1")), Value(Number("2")), Value(Number("3"))]), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT 1)
----
SELECT LIST(SELECT 1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT 2 * 10)
----
SELECT LIST(SELECT 2 * 10)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "*" }, expr1: Value(Number("2")), expr2: Some(Value(Number("10"))) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(SELECT customer.id FROM customer JOIN user on customer.id = user.id LIMIT 12)
----
SELECT LIST(SELECT customer.id FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("customer"), Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(
  WITH usps AS (SELECT 42)
    SELECT
      LIST[customer.id,
      LIST[customer.first_name, customer.last_name],
      LIST[LIST[customer.zip]]]
    FROM
      customer
    JOIN user on customer.id = user.id
  LIMIT 12)
----
SELECT LIST(WITH usps AS (SELECT 42) SELECT LIST[customer.id, LIST[customer.first_name, customer.last_name], LIST[LIST[customer.zip]]] FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: List([Identifier([Ident("customer"), Ident("id")]), List([Identifier([Ident("customer"), Ident("first_name")]), Identifier([Ident("customer"), Ident("last_name")])]), List([List([Identifier([Ident("customer"), Ident("zip")])])])]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT LIST(
  WITH usps AS (SELECT 42)
    SELECT * FROM usps
)
----
SELECT LIST(WITH usps AS (SELECT 42) SELECT * FROM usps)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ListSubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("usps")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# Array subqueries
parse-statement
SELECT ARRAY[1, 2, 3]
----
SELECT ARRAY[1, 2, 3]
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Array([Value(Number("1")), Value(Number("2")), Value(Number("3"))]), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT 1)
----
SELECT ARRAY(SELECT 1)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("1")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT 2 * 10)
----
SELECT ARRAY(SELECT 2 * 10)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Op { op: Op { namespace: [], op: "*" }, expr1: Value(Number("2")), expr2: Some(Value(Number("10"))) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(SELECT customer.id FROM customer JOIN user on customer.id = user.id LIMIT 12)
----
SELECT ARRAY(SELECT customer.id FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Identifier([Ident("customer"), Ident("id")]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(
  WITH usps AS (SELECT 42)
    SELECT
      ARRAY[customer.id,
      ARRAY[customer.first_name, customer.last_name],
      ARRAY[ARRAY[customer.zip]]]
    FROM
      customer
    JOIN user on customer.id = user.id
  LIMIT 12)
----
SELECT ARRAY(WITH usps AS (SELECT 42) SELECT ARRAY[customer.id, ARRAY[customer.first_name, customer.last_name], ARRAY[ARRAY[customer.zip]]] FROM customer JOIN user ON customer.id = user.id LIMIT 12)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Expr { expr: Array([Identifier([Ident("customer"), Ident("id")]), Array([Identifier([Ident("customer"), Ident("first_name")]), Identifier([Ident("customer"), Ident("last_name")])]), Array([Array([Identifier([Ident("customer"), Ident("zip")])])])]), alias: None }], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("customer")])), alias: None }, joins: [Join { relation: Table { name: Name(UnresolvedItemName([Ident("user")])), alias: None }, join_operator: Inner(On(Op { op: Op { namespace: [], op: "=" }, expr1: Identifier([Ident("customer"), Ident("id")]), expr2: Some(Identifier([Ident("user"), Ident("id")])) })) }] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: Some(Limit { with_ties: false, quantity: Value(Number("12")) }), offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT ARRAY(
  WITH usps AS (SELECT 42)
    SELECT * FROM usps
)
----
SELECT ARRAY(WITH usps AS (SELECT 42) SELECT * FROM usps)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: ArraySubquery(Query { ctes: Simple([Cte { alias: TableAlias { name: Ident("usps"), columns: [], strict: false }, id: (), query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: Value(Number("42")), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None } }]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Table { name: Name(UnresolvedItemName([Ident("usps")])), alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }), alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement roundtrip
SELECT count(DISTINCT *) FROM foo
----
error: DISTINCT * not supported as function args
SELECT count(DISTINCT *) FROM foo
                      ^

parse-statement
SELECT * FROM (SHOW TABLES)
----
SELECT * FROM (SHOW TABLES)
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Wildcard], from: [TableWithJoins { relation: Derived { lateral: false, subquery: Query { ctes: Simple([]), body: Show(ShowObjects(ShowObjectsStatement { object_type: Table, from: None, filter: None })), order_by: [], limit: None, offset: None }, alias: None }, joins: [] }], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

parse-statement
SELECT NULLIF(x, '')
----
SELECT NULLIF(x, '')
=>
Select(SelectStatement { query: Query { ctes: Simple([]), body: Select(Select { distinct: None, projection: [Expr { expr: NullIf { l_expr: Identifier([Ident("x")]), r_expr: Value(String("")) }, alias: None }], from: [], selection: None, group_by: [], having: None, options: [] }), order_by: [], limit: None, offset: None }, as_of: None })

# parse a plausibly correct WITH MUTUALLY RECURSIVE query.
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
WITH MUTUALLY RECURSIVE foo (a int4, b int4) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int4) AS (SELECT a FROM foo) SELECT * FROM bar


# parse a semantically unacceptable but parseable WITH MUTUALLY RECURSIVE.
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
WITH MUTUALLY RECURSIVE foo (a int4) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int4) AS (SELECT a FROM foo) SELECT * FROM bar

# fail to parse bindings that do not specify types
parse-statement roundtrip
WITH MUTUALLY RECURSIVE foo (a, b) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
----
error: Expected a data type name, found comma
WITH MUTUALLY RECURSIVE foo (a, b) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar), bar (a int) as (SELECT a FROM foo) SELECT * FROM bar
                              ^

# WITH MUTUALLY RECURSIVE -- RECURSION LIMIT
parse-statement roundtrip
WITH MUTUALLY RECURSIVE (RECURSION LIMIT 17)
    foo (a int8) AS (
        (WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 11)
            bar (b int8) AS (
                SELECT * FROM foo
            )
        SELECT * FROM (SELECT * FROM bar))
        UNION ALL
        (WITH MUTUALLY RECURSIVE (ERROR AT RECURSION LIMIT 15)
            bar (b int8) AS (
                SELECT * FROM foo
            )
        SELECT * FROM (SELECT * FROM bar))
    )
SELECT * FROM foo
----
WITH MUTUALLY RECURSIVE (RECURSION LIMIT = 17) foo (a int8) AS ((WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT = 11) bar (b int8) AS (SELECT * FROM foo) SELECT * FROM (SELECT * FROM bar)) UNION ALL (WITH MUTUALLY RECURSIVE (ERROR AT RECURSION LIMIT = 15) bar (b int8) AS (SELECT * FROM foo) SELECT * FROM (SELECT * FROM bar))) SELECT * FROM foo
