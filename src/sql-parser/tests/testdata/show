# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
SHOW DATABASES
----
SHOW DATABASES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Database, from: None, filter: None }))

parse-statement
SHOW DATABASES LIKE 'blah'
----
SHOW DATABASES LIKE 'blah'
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Database, from: None, filter: Some(Like("blah")) }))

parse-statement
SHOW DATABASES FROM foo
----
error: Expected end of statement, found FROM
SHOW DATABASES FROM foo
               ^

parse-statement
SHOW ROLES
----
SHOW ROLES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Role, from: None, filter: None }))

parse-statement
SHOW ROLES FROM BAR
----
error: Expected end of statement, found FROM
SHOW ROLES FROM BAR
           ^

parse-statement
SHOW CLUSTERS
----
SHOW CLUSTERS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Cluster, from: None, filter: None }))

parse-statement
SHOW CLUSTERS FROM foobar
----
error: Expected end of statement, found FROM
SHOW CLUSTERS FROM foobar
              ^

parse-statement
SHOW CLUSTER REPLICAS FROM ny
----
error: Expected end of statement, found FROM
SHOW CLUSTER REPLICAS FROM ny
                      ^

parse-statement
SHOW USERS
----
SHOW ROLES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Role, from: None, filter: None }))

parse-statement
SHOW SCHEMAS
----
SHOW SCHEMAS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Schema { from: None }, from: None, filter: None }))

parse-statement
SHOW SCHEMAS FROM foo.bar
----
error: Expected end of statement, found dot
SHOW SCHEMAS FROM foo.bar
                     ^

parse-statement
SHOW SOURCES
----
SHOW SOURCES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Source, from: None, filter: None }))

parse-statement
SHOW SOURCES FROM foo.bar
----
SHOW SOURCES FROM foo.bar
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Source, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW VIEWS
----
SHOW VIEWS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: View, from: None, filter: None }))

parse-statement
SHOW VIEWS FROM foo.bar
----
SHOW VIEWS FROM foo.bar
=>
Show(ShowObjects(ShowObjectsStatement { object_type: View, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW MATERIALIZED VIEWS
----
SHOW MATERIALIZED VIEWS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: MaterializedView { in_cluster: None }, from: None, filter: None }))

parse-statement
SHOW MATERIALIZED VIEWS FROM foo.bar
----
SHOW MATERIALIZED VIEWS FROM foo.bar
=>
Show(ShowObjects(ShowObjectsStatement { object_type: MaterializedView { in_cluster: None }, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW MATERIALIZED VIEWS FROM foo.bar IN CLUSTER baz
----
SHOW MATERIALIZED VIEWS FROM foo.bar IN CLUSTER baz
=>
Show(ShowObjects(ShowObjectsStatement { object_type: MaterializedView { in_cluster: Some(Unresolved(Ident("baz"))) }, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW MATERIALIZED VIEWS IN CLUSTER baz
----
SHOW MATERIALIZED VIEWS IN CLUSTER baz
=>
Show(ShowObjects(ShowObjectsStatement { object_type: MaterializedView { in_cluster: Some(Unresolved(Ident("baz"))) }, from: None, filter: None }))

parse-statement
SHOW TABLES
----
SHOW TABLES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Table, from: None, filter: None }))

parse-statement
SHOW TABLES FROM foo.bar
----
SHOW TABLES FROM foo.bar
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Table, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW TABLES IN CLUSTER baz
----
error: Expected end of statement, found IN
SHOW TABLES IN CLUSTER baz
            ^

parse-statement
SHOW SINKS
----
SHOW SINKS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Sink, from: None, filter: None }))

parse-statement
SHOW SINKS FROM foo.bar
----
SHOW SINKS FROM foo.bar
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Sink, from: Some(UnresolvedSchemaName([Ident("foo"), Ident("bar")])), filter: None }))

parse-statement
SHOW SINKS FROM foo.bar IN CLUSTER baz
----
error: Expected end of statement, found IN
SHOW SINKS FROM foo.bar IN CLUSTER baz
                        ^

parse-statement
SHOW TABLES LIKE '%foo%'
----
SHOW TABLES LIKE '%foo%'
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Table, from: None, filter: Some(Like("%foo%")) }))

parse-statement
SHOW SOURCES
----
SHOW SOURCES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Source, from: None, filter: None }))

parse-statement
SHOW VIEWS FROM foo LIKE '%foo%'
----
SHOW VIEWS FROM foo LIKE '%foo%'
=>
Show(ShowObjects(ShowObjectsStatement { object_type: View, from: Some(UnresolvedSchemaName([Ident("foo")])), filter: Some(Like("%foo%")) }))

parse-statement
SHOW INDEXES ON foo
----
SHOW INDEXES ON foo
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: None, on_object: Some(Name(UnresolvedItemName([Ident("foo")]))) }, from: None, filter: None }))

parse-statement
SHOW INDEXES
----
SHOW INDEXES
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: None, on_object: None }, from: None, filter: None }))

parse-statement
SHOW INDEXES IN CLUSTER c
----
SHOW INDEXES IN CLUSTER c
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: Some(Unresolved(Ident("c"))), on_object: None }, from: None, filter: None }))

parse-statement
SHOW INDEXES ON t IN CLUSTER c
----
SHOW INDEXES ON t IN CLUSTER c
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: Some(Unresolved(Ident("c"))), on_object: Some(Name(UnresolvedItemName([Ident("t")]))) }, from: None, filter: None }))

parse-statement
SHOW INDEXES FROM s
----
SHOW INDEXES FROM s
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: None, on_object: None }, from: Some(UnresolvedSchemaName([Ident("s")])), filter: None }))

parse-statement
SHOW INDEXES FROM s IN CLUSTER c
----
SHOW INDEXES FROM s IN CLUSTER c
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: Some(Unresolved(Ident("c"))), on_object: None }, from: Some(UnresolvedSchemaName([Ident("s")])), filter: None }))

parse-statement
SHOW INDEXES LIKE 'pattern'
----
SHOW INDEXES LIKE 'pattern'
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Index { in_cluster: None, on_object: None }, from: None, filter: Some(Like("pattern")) }))

parse-statement
SHOW INDEXES FROM s ON t
----
error: Cannot specify both FROM and ON
SHOW INDEXES FROM s ON t
                       ^

parse-statement
SHOW CREATE VIEW foo
----
SHOW CREATE VIEW foo
=>
Show(ShowCreateView(ShowCreateViewStatement { view_name: Name(UnresolvedItemName([Ident("foo")])) }))

parse-statement
SHOW CREATE MATERIALIZED VIEW foo
----
SHOW CREATE MATERIALIZED VIEW foo
=>
Show(ShowCreateMaterializedView(ShowCreateMaterializedViewStatement { materialized_view_name: Name(UnresolvedItemName([Ident("foo")])) }))

parse-statement
SHOW CREATE SINK foo
----
SHOW CREATE SINK foo
=>
Show(ShowCreateSink(ShowCreateSinkStatement { sink_name: Name(UnresolvedItemName([Ident("foo")])) }))

parse-statement
SHOW CREATE INDEX foo
----
SHOW CREATE INDEX foo
=>
Show(ShowCreateIndex(ShowCreateIndexStatement { index_name: Name(UnresolvedItemName([Ident("foo")])) }))

parse-statement
SHOW COLUMNS FROM mytable
----
SHOW COLUMNS FROM mytable
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: None }))

parse-statement
SHOW COLUMNS FROM mydb.mytable
----
SHOW COLUMNS FROM mydb.mytable
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mydb"), Ident("mytable")])), filter: None }))

parse-statement
SHOW COLUMNS FROM mytable LIKE 'pattern'
----
SHOW COLUMNS FROM mytable LIKE 'pattern'
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: Some(Like("pattern")) }))

parse-statement
SHOW COLUMNS FROM mytable WHERE 1 = 2
----
SHOW COLUMNS FROM mytable WHERE 1 = 2
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: Some(Where(Op { op: Op { namespace: [], op: "=" }, expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) })) }))

parse-statement
SHOW FIELDS FROM mytable
----
SHOW COLUMNS FROM mytable
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: None }))

parse-statement
SHOW COLUMNS IN mytable
----
SHOW COLUMNS FROM mytable
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: None }))

parse-statement
SHOW FIELDS IN mytable
----
SHOW COLUMNS FROM mytable
=>
Show(ShowColumns(ShowColumnsStatement { table_name: Name(UnresolvedItemName([Ident("mytable")])), filter: None }))

parse-statement
SHOW a
----
SHOW a
=>
Show(ShowVariable(ShowVariableStatement { variable: Ident("a") }))

parse-statement
SHOW CLUSTERS
----
SHOW CLUSTERS
=>
Show(ShowObjects(ShowObjectsStatement { object_type: Cluster, from: None, filter: None }))

# TODO(justin): "all" here should be its own token so that it doesn't get
# downcased.
parse-statement
SHOW ALL
----
SHOW all
=>
Show(ShowVariable(ShowVariableStatement { variable: Ident("all") }))

parse-statement
SET a = b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Ident(Ident("b"))]) })

parse-statement
SET a = 'b'
----
SET a = 'b'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Literal(String("b"))]) })

parse-statement
SET a = 0
----
SET a = 0
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Literal(Number("0"))]) })

parse-statement
SET a = default
----
SET a = DEFAULT
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Default })

parse-statement
SET a = 'default'
----
SET a = 'default'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Literal(String("default"))]) })

parse-statement
SET LOCAL a = b
----
SET LOCAL a = b
=>
SetVariable(SetVariableStatement { local: true, variable: Ident("a"), to: Values([Ident(Ident("b"))]) })

parse-statement
SET TIME ZONE utc
----
SET timezone = utc
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("timezone"), to: Values([Ident(Ident("utc"))]) })

parse-statement
SET a TO b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Ident(Ident("b"))]) })

parse-statement
SET SESSION a = b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Ident(Ident("b"))]) })

parse-statement
SET tiMe ZoNE 7
----
SET timezone = 7
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("timezone"), to: Values([Literal(Number("7"))]) })

parse-statement
SET LOCAL tiMe ZoNE 7
----
SET LOCAL timezone = 7
=>
SetVariable(SetVariableStatement { local: true, variable: Ident("timezone"), to: Values([Literal(Number("7"))]) })

parse-statement
SET a = b, c, d
----
SET a = b, c, d
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Ident(Ident("b")), Ident(Ident("c")), Ident(Ident("d"))]) })

parse-statement
SET a TO b, c, d
----
SET a = b, c, d
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Ident(Ident("b")), Ident(Ident("c")), Ident(Ident("d"))]) })

parse-statement
SET a = 1, '2', 3.0, four
----
SET a = 1, '2', 3.0, four
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), to: Values([Literal(Number("1")), Literal(String("2")), Literal(Number("3.0")), Ident(Ident("four"))]) })

parse-statement
SET
----
error: Expected identifier, found EOF
SET
   ^

parse-statement
SET a b
----
error: Expected equals sign or TO, found identifier "b"
SET a b
      ^

parse-statement
SET a =
----
error: Expected variable value, found EOF
SET a =
       ^

parse-statement
RESET a
----
RESET a
=>
ResetVariable(ResetVariableStatement { variable: Ident("a") })

parse-statement
RESET
----
error: Expected identifier, found EOF
RESET
     ^

parse-statement
DISCARD ALL
----
DISCARD ALL
=>
Discard(DiscardStatement { target: All })

parse-statement
DISCARD PLANS
----
DISCARD PLANS
=>
Discard(DiscardStatement { target: Plans })

parse-statement
DISCARD SEQUENCES
----
DISCARD SEQUENCES
=>
Discard(DiscardStatement { target: Sequences })

parse-statement
DISCARD TEMP
----
DISCARD TEMP
=>
Discard(DiscardStatement { target: Temp })

parse-statement
DISCARD TEMPORARY
----
DISCARD TEMP
=>
Discard(DiscardStatement { target: Temp })

parse-statement
DISCARD BAD
----
error: Expected one of ALL or PLANS or SEQUENCES or TEMP or TEMPORARY, found identifier "bad"
DISCARD BAD
        ^

parse-statement
SET SCHEMA TO 'public'
----
SET search_path = 'public'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("search_path"), to: Values([Literal(String("public"))]) })

parse-statement
SET schema = 'public'
----
SET search_path = 'public'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("search_path"), to: Values([Literal(String("public"))]) })

parse-statement
SET LOCAL schema = 'public'
----
SET LOCAL search_path = 'public'
=>
SetVariable(SetVariableStatement { local: true, variable: Ident("search_path"), to: Values([Literal(String("public"))]) })

parse-statement
SET SESSION schema = 'public'
----
SET search_path = 'public'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("search_path"), to: Values([Literal(String("public"))]) })

parse-statement
SET SESSION schema = public, private
----
error: Expected end of statement, found comma
SET SESSION schema = public, private
                           ^
