# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
SHOW DATABASES
----
SHOW DATABASES
=>
ShowDatabases(ShowDatabasesStatement { filter: None })

parse-statement
SHOW DATABASES LIKE 'blah'
----
SHOW DATABASES LIKE 'blah'
=>
ShowDatabases(ShowDatabasesStatement { filter: Some(Like("blah")) })

parse-statement
SHOW ROLES
----
SHOW ROLES
=>
ShowObjects(ShowObjectsStatement { object_type: Role, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW USERS
----
SHOW ROLES
=>
ShowObjects(ShowObjectsStatement { object_type: Role, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SCHEMAS
----
SHOW SCHEMAS
=>
ShowObjects(ShowObjectsStatement { object_type: Schema, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SCHEMAS FROM foo.bar
----
SHOW SCHEMAS FROM foo.bar
=>
ShowObjects(ShowObjectsStatement { object_type: Schema, from: Some(UnresolvedObjectName([Ident("foo"), Ident("bar")])), extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SOURCES
----
SHOW SOURCES
=>
ShowObjects(ShowObjectsStatement { object_type: Source, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SOURCES FROM foo.bar
----
SHOW SOURCES FROM foo.bar
=>
ShowObjects(ShowObjectsStatement { object_type: Source, from: Some(UnresolvedObjectName([Ident("foo"), Ident("bar")])), extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW VIEWS
----
SHOW VIEWS
=>
ShowObjects(ShowObjectsStatement { object_type: View, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW VIEWS FROM foo.bar
----
SHOW VIEWS FROM foo.bar
=>
ShowObjects(ShowObjectsStatement { object_type: View, from: Some(UnresolvedObjectName([Ident("foo"), Ident("bar")])), extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW TABLES
----
SHOW TABLES
=>
ShowObjects(ShowObjectsStatement { object_type: Table, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW TABLES FROM foo.bar
----
SHOW TABLES FROM foo.bar
=>
ShowObjects(ShowObjectsStatement { object_type: Table, from: Some(UnresolvedObjectName([Ident("foo"), Ident("bar")])), extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SINKS
----
SHOW SINKS
=>
ShowObjects(ShowObjectsStatement { object_type: Sink, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW SINKS FROM foo.bar
----
SHOW SINKS FROM foo.bar
=>
ShowObjects(ShowObjectsStatement { object_type: Sink, from: Some(UnresolvedObjectName([Ident("foo"), Ident("bar")])), extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW TABLES LIKE '%foo%'
----
SHOW TABLES LIKE '%foo%'
=>
ShowObjects(ShowObjectsStatement { object_type: Table, from: None, extended: false, full: false, materialized: false, filter: Some(Like("%foo%")) })

parse-statement
SHOW FULL VIEWS
----
SHOW FULL VIEWS
=>
ShowObjects(ShowObjectsStatement { object_type: View, from: None, extended: false, full: true, materialized: false, filter: None })

parse-statement
SHOW SOURCES
----
SHOW SOURCES
=>
ShowObjects(ShowObjectsStatement { object_type: Source, from: None, extended: false, full: false, materialized: false, filter: None })

parse-statement
SHOW MATERIALIZED SOURCES FROM foo
----
SHOW MATERIALIZED SOURCES FROM foo
=>
ShowObjects(ShowObjectsStatement { object_type: Source, from: Some(UnresolvedObjectName([Ident("foo")])), extended: false, full: false, materialized: true, filter: None })

parse-statement
SHOW MATERIALIZED VIEWS FROM foo LIKE '%foo%'
----
SHOW MATERIALIZED VIEWS FROM foo LIKE '%foo%'
=>
ShowObjects(ShowObjectsStatement { object_type: View, from: Some(UnresolvedObjectName([Ident("foo")])), extended: false, full: false, materialized: true, filter: Some(Like("%foo%")) })

parse-statement
SHOW INDEXES FROM foo
----
SHOW INDEXES FROM foo
=>
ShowIndexes(ShowIndexesStatement { table_name: UnresolvedObjectName([Ident("foo")]), extended: false, filter: None })

parse-statement
SHOW INDEXES IN foo
----
SHOW INDEXES FROM foo
=>
ShowIndexes(ShowIndexesStatement { table_name: UnresolvedObjectName([Ident("foo")]), extended: false, filter: None })

parse-statement
SHOW EXTENDED INDEXES FROM foo
----
SHOW EXTENDED INDEXES FROM foo
=>
ShowIndexes(ShowIndexesStatement { table_name: UnresolvedObjectName([Ident("foo")]), extended: true, filter: None })

parse-statement
SHOW EXTENDED INDEXES FROM foo WHERE index_name = 'bar'
----
SHOW EXTENDED INDEXES FROM foo WHERE index_name = 'bar'
=>
ShowIndexes(ShowIndexesStatement { table_name: UnresolvedObjectName([Ident("foo")]), extended: true, filter: Some(Where(Op { op: "=", expr1: Identifier([Ident("index_name")]), expr2: Some(Value(String("bar"))) })) })

parse-statement
SHOW CREATE VIEW foo
----
SHOW CREATE VIEW foo
=>
ShowCreateView(ShowCreateViewStatement { view_name: UnresolvedObjectName([Ident("foo")]) })

parse-statement
SHOW CREATE SINK foo
----
SHOW CREATE SINK foo
=>
ShowCreateSink(ShowCreateSinkStatement { sink_name: UnresolvedObjectName([Ident("foo")]) })

parse-statement
SHOW CREATE INDEX foo
----
SHOW CREATE INDEX foo
=>
ShowCreateIndex(ShowCreateIndexStatement { index_name: UnresolvedObjectName([Ident("foo")]) })

parse-statement
SHOW COLUMNS FROM mytable
----
SHOW COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW COLUMNS FROM mydb.mytable
----
SHOW COLUMNS FROM mydb.mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mydb"), Ident("mytable")]), filter: None })

parse-statement
SHOW EXTENDED COLUMNS FROM mytable
----
SHOW EXTENDED COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: true, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW FULL COLUMNS FROM mytable
----
SHOW FULL COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: true, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW EXTENDED FULL COLUMNS FROM mytable
----
SHOW EXTENDED FULL COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: true, full: true, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW COLUMNS FROM mytable LIKE 'pattern'
----
SHOW COLUMNS FROM mytable LIKE 'pattern'
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: Some(Like("pattern")) })

parse-statement
SHOW COLUMNS FROM mytable WHERE 1 = 2
----
SHOW COLUMNS FROM mytable WHERE 1 = 2
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: Some(Where(Op { op: "=", expr1: Value(Number("1")), expr2: Some(Value(Number("2"))) })) })

parse-statement
SHOW FIELDS FROM mytable
----
SHOW COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW COLUMNS IN mytable
----
SHOW COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW FIELDS IN mytable
----
SHOW COLUMNS FROM mytable
=>
ShowColumns(ShowColumnsStatement { extended: false, full: false, table_name: UnresolvedObjectName([Ident("mytable")]), filter: None })

parse-statement
SHOW a
----
SHOW a
=>
ShowVariable(ShowVariableStatement { variable: Ident("a") })

# TODO(justin): "all" here should be its own token so that it doesn't get
# downcased.
parse-statement
SHOW ALL
----
SHOW all
=>
ShowVariable(ShowVariableStatement { variable: Ident("all") })

parse-statement
SET a = b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Ident(Ident("b")) })

parse-statement
SET a = 'b'
----
SET a = 'b'
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Literal(String("b")) })

parse-statement
SET a = 0
----
SET a = 0
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Literal(Number("0")) })

parse-statement
SET a = default
----
SET a = default
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Ident(Ident("default")) })

parse-statement
SET LOCAL a = b
----
SET LOCAL a = b
=>
SetVariable(SetVariableStatement { local: true, variable: Ident("a"), value: Ident(Ident("b")) })

parse-statement
SET TIME ZONE utc
----
SET timezone = utc
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("timezone"), value: Ident(Ident("utc")) })

parse-statement
SET a TO b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Ident(Ident("b")) })

parse-statement
SET SESSION a = b
----
SET a = b
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("a"), value: Ident(Ident("b")) })

parse-statement
SET tiMe ZoNE 7
----
SET timezone = 7
=>
SetVariable(SetVariableStatement { local: false, variable: Ident("timezone"), value: Literal(Number("7")) })

parse-statement
SET LOCAL tiMe ZoNE 7
----
SET LOCAL timezone = 7
=>
SetVariable(SetVariableStatement { local: true, variable: Ident("timezone"), value: Literal(Number("7")) })

parse-statement
SET
----
error: Expected identifier, found EOF
SET
   ^

parse-statement
SET a b
----
error: Expected equals sign or TO, found identifier 'b'
SET a b
      ^

parse-statement
SET a =
----
error: Expected variable value, found EOF
SET a =
       ^

parse-statement
DISCARD ALL
----
DISCARD ALL
=>
Discard(DiscardStatement { target: All })

parse-statement
DISCARD PLANS
----
DISCARD PLANS
=>
Discard(DiscardStatement { target: Plans })

parse-statement
DISCARD SEQUENCES
----
DISCARD SEQUENCES
=>
Discard(DiscardStatement { target: Sequences })

parse-statement
DISCARD TEMP
----
DISCARD TEMP
=>
Discard(DiscardStatement { target: Temp })

parse-statement
DISCARD TEMPORARY
----
DISCARD TEMP
=>
Discard(DiscardStatement { target: Temp })

parse-statement
DISCARD BAD
----
error: Expected one of ALL or PLANS or SEQUENCES or TEMP or TEMPORARY, found identifier 'bad'
DISCARD BAD
        ^
