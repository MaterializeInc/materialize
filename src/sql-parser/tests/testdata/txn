# Copyright 2020 sqlparser-rs contributors. All rights reserved.
# Copyright Materialize, Inc. All rights reserved.
#
# This file is derived from the sqlparser-rs project, available at
# https://github.com/andygrove/sqlparser-rs. It was incorporated
# directly into Materialize on December 21, 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the LICENSE file at the
# root of this repository, or online at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parse-statement
START TRANSACTION READ ONLY, READ WRITE, ISOLATION LEVEL SERIALIZABLE
----
START TRANSACTION READ ONLY, READ WRITE, ISOLATION LEVEL SERIALIZABLE
=>
StartTransaction(StartTransactionStatement { modes: [AccessMode(ReadOnly), AccessMode(ReadWrite), IsolationLevel(Serializable)] })

parse-statement
START TRANSACTION READ ONLY READ WRITE ISOLATION LEVEL SERIALIZABLE
----
START TRANSACTION READ ONLY, READ WRITE, ISOLATION LEVEL SERIALIZABLE
=>
StartTransaction(StartTransactionStatement { modes: [AccessMode(ReadOnly), AccessMode(ReadWrite), IsolationLevel(Serializable)] })

parse-statement
START TRANSACTION
----
START TRANSACTION
=>
StartTransaction(StartTransactionStatement { modes: [] })

parse-statement
BEGIN
----
START TRANSACTION
=>
StartTransaction(StartTransactionStatement { modes: [] })

parse-statement
BEGIN WORK
----
START TRANSACTION
=>
StartTransaction(StartTransactionStatement { modes: [] })

parse-statement
BEGIN TRANSACTION
----
START TRANSACTION
=>
StartTransaction(StartTransactionStatement { modes: [] })

# Semicolon at EOS.
parse-statement
BEGIN TRANSACTION;
----
START TRANSACTION
=>
StartTransaction(StartTransactionStatement { modes: [] })

parse-statement
START TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
----
START TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
=>
StartTransaction(StartTransactionStatement { modes: [IsolationLevel(ReadUncommitted)] })

parse-statement
START TRANSACTION ISOLATION LEVEL READ COMMITTED
----
START TRANSACTION ISOLATION LEVEL READ COMMITTED
=>
StartTransaction(StartTransactionStatement { modes: [IsolationLevel(ReadCommitted)] })

parse-statement
START TRANSACTION ISOLATION LEVEL REPEATABLE READ
----
START TRANSACTION ISOLATION LEVEL REPEATABLE READ
=>
StartTransaction(StartTransactionStatement { modes: [IsolationLevel(RepeatableRead)] })

parse-statement
START TRANSACTION ISOLATION LEVEL SERIALIZABLE
----
START TRANSACTION ISOLATION LEVEL SERIALIZABLE
=>
StartTransaction(StartTransactionStatement { modes: [IsolationLevel(Serializable)] })

parse-statement
START TRANSACTION ISOLATION LEVEL BAD
----
error: Expected isolation level, found identifier 'bad'
START TRANSACTION ISOLATION LEVEL BAD
                                  ^

parse-statement
START TRANSACTION BAD
----
error: Expected end of statement, found identifier 'bad'
START TRANSACTION BAD
                  ^

parse-statement
START TRANSACTION READ ONLY,
----
error: Expected transaction mode, found EOF
START TRANSACTION READ ONLY,
                            ^

parse-statement
SET TRANSACTION READ ONLY, READ WRITE, ISOLATION LEVEL SERIALIZABLE
----
SET TRANSACTION READ ONLY, READ WRITE, ISOLATION LEVEL SERIALIZABLE
=>
SetTransaction(SetTransactionStatement { modes: [AccessMode(ReadOnly), AccessMode(ReadWrite), IsolationLevel(Serializable)] })

parse-statement
COMMIT
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
COMMIT AND CHAIN
----
COMMIT AND CHAIN
=>
Commit(CommitStatement { chain: true })

parse-statement
COMMIT AND NO CHAIN
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
COMMIT WORK AND NO CHAIN
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
COMMIT TRANSACTION AND NO CHAIN
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
COMMIT WORK AND CHAIN
----
COMMIT AND CHAIN
=>
Commit(CommitStatement { chain: true })

parse-statement
COMMIT TRANSACTION AND CHAIN
----
COMMIT AND CHAIN
=>
Commit(CommitStatement { chain: true })

parse-statement
COMMIT WORK
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
COMMIT TRANSACTION
----
COMMIT
=>
Commit(CommitStatement { chain: false })

parse-statement
ROLLBACK
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })

parse-statement
ROLLBACK AND CHAIN
----
ROLLBACK AND CHAIN
=>
Rollback(RollbackStatement { chain: true })

parse-statement
ROLLBACK AND NO CHAIN
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })

parse-statement
ROLLBACK WORK AND NO CHAIN
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })

parse-statement
ROLLBACK TRANSACTION AND NO CHAIN
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })

parse-statement
ROLLBACK WORK AND CHAIN
----
ROLLBACK AND CHAIN
=>
Rollback(RollbackStatement { chain: true })

parse-statement
ROLLBACK TRANSACTION AND CHAIN
----
ROLLBACK AND CHAIN
=>
Rollback(RollbackStatement { chain: true })

parse-statement
ROLLBACK WORK
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })

parse-statement
ROLLBACK TRANSACTION
----
ROLLBACK
=>
Rollback(RollbackStatement { chain: false })
