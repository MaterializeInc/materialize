# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

lower
select;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project ()
----
----

lower
select 1;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map 1
| Project (#0)
----
----

lower
select a, a from (select 1 as a);
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map 1
| Project (#0)
| Project (#0, #0)
----
----


lower
select a, b, a from (select 1 as a, 2 as b);
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map 1, 2
| Project (#0, #1)
| Project (#0, #1, #0)
----
----

lower
select x.a from (select true as a) x join (select false as b) y on x.a;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map true
| Project (#0)

%3 =
| Constant ()

%4 =
| Join %0 %3
| | implementation = Unimplemented
| Map false
| Project (#0)

%5 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0, #1)
| Filter #0
| Project (#0, #1)
| Project (#0)
----
----

lower
select mz_logical_timestamp(), case when true = false then -(1 + 1) else
coalesce(0, 2, 1) end
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map mz_logical_timestamp(), if (true = false) then {-((1 + 1))} else {coalesce(0, 2, 1)}
| Project (#0, #1)
----
----

lower
select case when x.a > x.b then x.c else lpad(x.d, 4, 'ab') end
from (select 10 as a, 5 as b, 'world' as c, 'realm' as d) x
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map 10, 5, "world", "realm"
| Project (#0..=#3)
| Map #0, #1, #2, #3, if (#0 > #1) then {#2} else {lpad(#3, integer_to_bigint(4), "ab")}
| Project (#4..=#8)
| Project (#4)
----
----

cat
(defsource x (([(int32 false) int64 int32] [[0]]) [a b c]))
(defsource y (([(int32 false) int32] [[0]]) [a b]))
----
ok

lower format=types
select * from x;
----
----
%0 = Let l0 =
| Constant ()
| | types = ()
| | keys = (())

%1 =
| Get ? (u0)
| | types = (Int32, Int64?, Int32?)
| | keys = ((#0))

%2 =
| Join %0 %1
| | implementation = Unimplemented
| | types = (Int32, Int64?, Int32?)
| | keys = ()
| Project (#0..=#2)
| | types = (Int32, Int64?, Int32?)
| | keys = ()
----
----

lower format=types
select y.c, z.c from (select a, c from x where x.a = 0) y inner join (select b,
c from x where x.b is not null) z on y.a = z.b
----
----
%0 = Let l0 =
| Constant ()
| | types = ()
| | keys = (())

%1 =
| Get ? (u0)
| | types = (Int32, Int64?, Int32?)
| | keys = ((#0))

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| | types = (Int32, Int64?, Int32?)
| | keys = ()

%3 =
| Get %2 (l1)
| | types = (Int32, Int64?, Int32?)
| | keys = ()
| Filter (#0 = 0)
| | types = (Int32, Int64?, Int32?)
| | keys = ()
| Project (#0..=#2)
| | types = (Int32, Int64?, Int32?)
| | keys = ()
| Project (#0, #2)
| | types = (Int32, Int32?)
| | keys = ()

%4 =
| Get %2 (l1)
| | types = (Int32, Int64?, Int32?)
| | keys = ()
| Filter (#1) IS NOT NULL
| | types = (Int32, Int64, Int32?)
| | keys = ()
| Project (#0..=#2)
| | types = (Int32, Int64, Int32?)
| | keys = ()
| Project (#1, #2)
| | types = (Int64, Int32?)
| | keys = ()

%5 =
| Join %3 %4
| | implementation = Unimplemented
| | types = (Int32, Int32?, Int64, Int32?)
| | keys = ()
| Project (#0..=#3)
| | types = (Int32, Int32?, Int64, Int32?)
| | keys = ()
| Filter (integer_to_bigint(#0) = #2)
| | types = (Int32, Int32?, Int64, Int32?)
| | keys = ()
| Project (#0..=#3)
| | types = (Int32, Int32?, Int64, Int32?)
| | keys = ()
| Project (#1, #3)
| | types = (Int32?, Int32?)
| | keys = ()
----
----

lower
select a, b, a from (select 1 as a, 2 as b) where (select true);
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Constant ()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Map 1, 2
| Project (#0, #1)

%3 =
| Constant ()

%4 = Let l1 =
| Join %0 %3
| | implementation = Unimplemented
| Map true
| Project (#0)

%5 =
| Get %4 (l1)
| Reduce group=()
| | agg count(true)
| Filter (#0 > 1)
| Project ()
| Map (err: more than one record produced in subquery)

%6 = Let l2 =
| Union %4 %5

%7 =
| Get %6 (l2)
| Distinct group=()
| Negate

%8 =
| Get %0 (l0)
| Distinct group=()

%9 =
| Union %7 %8

%10 =
| Join %9 %0
| | implementation = Unimplemented
| Project ()

%11 =
| Constant (null)

%12 =
| Join %10 %11
| | implementation = Unimplemented

%13 =
| Union %6 %12

%14 =
| Join %2 %13
| | implementation = Unimplemented
| Project (#0..=#2)
| Filter #2
| Project (#0, #1)
| Project (#0, #1, #0)
----
----

lower
select distinct c, b, a from x;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#2, #1, #0)
| Distinct group=(#0, #1, #2)
----
----

lower
select distinct b from x;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#1)
| Distinct group=(#0)
----
----

lower
select b from x group by c, b;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0..=#2, #2, #1)
| Project (#3, #4)
| Distinct group=(#0, #1)
| Project (#0, #1)
| Project (#1)
----
----

lower
select min(a), c, count(*), b, max(a) from x group by c, b;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0..=#2, #2, #1)
| Map #3, #4, #0, true
| Project (#5..=#8)
| Reduce group=(#0, #1)
| | agg min(#2)
| | agg count(#3)
| | agg max(#2)
| Project (#0..=#4)
| Project (#2, #0, #3, #1, #4)
----
----

lower
select min(a), count(*), max(a) from x;
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Map #0, true
| Project (#3, #4)
| Reduce group=()
| | agg min(#0)
| | agg count(#1)
| | agg max(#0)

%3 =
| Get %2 (l1)
| Distinct group=()
| Negate

%4 =
| Get %0 (l0)
| Distinct group=()

%5 =
| Union %3 %4

%6 =
| Join %5 %0
| | implementation = Unimplemented
| Project ()

%7 =
| Constant (null, 0, null)

%8 =
| Join %6 %7
| | implementation = Unimplemented

%9 =
| Union %2 %8
| Project (#0..=#2)
----
----

lower
select x.a, x.b, y.a from x left join y on x.a > y.b
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 > #4)

%6 =
| Get %5 (l3)
| Distinct group=(#0, #1, #2)
| Negate

%7 =
| Get %2 (l1)
| Distinct group=(#0, #1, #2)

%8 =
| Union %6 %7

%9 =
| Join %8 %2 (= #0 #3) (= #1 #4) (= #2 #5)
| | implementation = Unimplemented
| Project (#0..=#2)

%10 =
| Constant (null, null)

%11 =
| Join %9 %10
| | implementation = Unimplemented

%12 =
| Union %5 %11
| Project (#0..=#4)
| Project (#0, #1, #3)
----
----

lower
select * from x right join y on x.a > y.b
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 > #4)

%6 =
| Get %5 (l3)
| Project (#3, #4, #0..=#2)
| Distinct group=(#0, #1)
| Negate

%7 =
| Get %4 (l2)
| Distinct group=(#0, #1)

%8 =
| Union %6 %7

%9 =
| Join %8 %4 (= #0 #2) (= #1 #3)
| | implementation = Unimplemented
| Project (#0, #1)

%10 =
| Constant (null, null, null)

%11 =
| Join %9 %10
| | implementation = Unimplemented
| Project (#2..=#4, #0, #1)

%12 =
| Union %5 %11
| Project (#0..=#4)
| Project (#0..=#4)
----
----

lower
select * from x full join y on x.a > y.b
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 > #4)

%6 =
| Get %5 (l3)
| Distinct group=(#0, #1, #2)
| Negate

%7 =
| Get %2 (l1)
| Distinct group=(#0, #1, #2)

%8 =
| Union %6 %7

%9 =
| Join %8 %2 (= #0 #3) (= #1 #4) (= #2 #5)
| | implementation = Unimplemented
| Project (#0..=#2)

%10 =
| Constant (null, null)

%11 =
| Join %9 %10
| | implementation = Unimplemented

%12 =
| Union %5 %11

%13 =
| Get %5 (l3)
| Project (#3, #4, #0..=#2)
| Distinct group=(#0, #1)
| Negate

%14 =
| Get %4 (l2)
| Distinct group=(#0, #1)

%15 =
| Union %13 %14

%16 =
| Join %15 %4 (= #0 #2) (= #1 #3)
| | implementation = Unimplemented
| Project (#0, #1)

%17 =
| Constant (null, null, null)

%18 =
| Join %16 %17
| | implementation = Unimplemented
| Project (#2..=#4, #0, #1)

%19 =
| Union %12 %18
| Project (#0..=#4)
| Project (#0..=#4)
----
----

lower
select x.a, x.b, y.a from x right join y on x.a = y.b and x.c = y.a
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter ((#0 = #4) AND (#2 = #3))

%6 = Let l4 =
| Get %5 (l3)
| Project (#2, #0)
| Distinct group=(#0, #1)

%7 =
| Join %4 %6 (= #0 #2) (= #1 #3)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%8 =
| Union %7 %4
| Map null, null, null
| Project (#2..=#4, #0, #1)

%9 =
| Union %8 %5
| Project (#0..=#4)
| Project (#0, #1, #3)
----
----

lower
select * from x left join y on x.a = y.b
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 = #4)

%6 = Let l4 =
| Get %5 (l3)
| Project (#0)
| Distinct group=(#0)

%7 =
| Join %2 %6 (= #0 #3)
| | implementation = Unimplemented
| Project (#0..=#2)
| Negate

%8 =
| Union %7 %2
| Map null, null

%9 =
| Union %8 %5
| Project (#0..=#4)
| Project (#0..=#4)
----
----

end_to_end
select * from x full outer join y on x.a = y.b
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 = #4)

%6 = Let l4 =
| Get %5 (l3)
| Project (#0)
| Distinct group=(#0)

%7 =
| Join %4 %6 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%8 =
| Union %7 %4
| Map null, null, null
| Project (#2..=#4, #0, #1)

%9 =
| Join %2 %6 (= #0 #3)
| | implementation = Unimplemented
| Project (#0..=#2)
| Negate

%10 =
| Union %9 %2
| Map null, null

%11 =
| Union %10 %5

%12 =
| Union %8 %11
| Project (#0..=#4)
| Project (#0..=#4)
----
----

lower
WITH w(f1, f2, f3, f4, f5) as (select * from x full outer join y on x.a = y.a)
select * from w w1 inner join w w2 on w1.f1 = w1.f5
----
----
%0 = Let l0 =
| Constant ()

%1 =
| Get ? (u0)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented

%3 =
| Get ? (u1)

%4 = Let l2 =
| Join %0 %3
| | implementation = Unimplemented

%5 = Let l3 =
| Join %2 %4
| | implementation = Unimplemented
| Project (#0..=#4)
| Filter (#0 = #3)

%6 = Let l4 =
| Get %5 (l3)
| Project (#0)
| Distinct group=(#0)

%7 =
| Join %4 %6 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%8 =
| Union %7 %4
| Map null, null, null
| Project (#2..=#4, #0, #1)

%9 =
| Join %2 %6 (= #0 #3)
| | implementation = Unimplemented
| Project (#0..=#2)
| Negate

%10 =
| Union %9 %2
| Map null, null

%11 =
| Union %10 %5

%12 = Let l5 =
| Union %8 %11
| Project (#0..=#4)

%13 =
| Join %12 %12
| | implementation = Unimplemented
| Project (#0..=#9)
| Filter (#0 = #4)
| Project (#0..=#9)
----
----
