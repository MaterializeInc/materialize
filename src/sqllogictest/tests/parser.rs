// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// BEGIN LINT CONFIG
// DO NOT EDIT. Automatically generated by bin/gen-lints.
// Have complaints about the noise? See the note in misc/python/materialize/cli/gen-lints.py first.
#![allow(clippy::style)]
#![allow(clippy::complexity)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::mutable_key_type)]
#![allow(clippy::stable_sort_primitive)]
#![allow(clippy::map_entry)]
#![allow(clippy::box_default)]
#![warn(clippy::bool_comparison)]
#![warn(clippy::clone_on_ref_ptr)]
#![warn(clippy::no_effect)]
#![warn(clippy::unnecessary_unwrap)]
#![warn(clippy::dbg_macro)]
#![warn(clippy::todo)]
#![warn(clippy::wildcard_dependencies)]
#![warn(clippy::zero_prefixed_literal)]
#![warn(clippy::borrowed_box)]
#![warn(clippy::deref_addrof)]
#![warn(clippy::double_must_use)]
#![warn(clippy::double_parens)]
#![warn(clippy::extra_unused_lifetimes)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::needless_question_mark)]
#![warn(clippy::needless_return)]
#![warn(clippy::redundant_pattern)]
#![warn(clippy::redundant_slicing)]
#![warn(clippy::redundant_static_lifetimes)]
#![warn(clippy::single_component_path_imports)]
#![warn(clippy::unnecessary_cast)]
#![warn(clippy::useless_asref)]
#![warn(clippy::useless_conversion)]
#![warn(clippy::builtin_type_shadow)]
#![warn(clippy::duplicate_underscore_argument)]
#![warn(clippy::double_neg)]
#![warn(clippy::unnecessary_mut_passed)]
#![warn(clippy::wildcard_in_or_patterns)]
#![warn(clippy::crosspointer_transmute)]
#![warn(clippy::excessive_precision)]
#![warn(clippy::overflow_check_conditional)]
#![warn(clippy::as_conversions)]
#![warn(clippy::match_overlapping_arm)]
#![warn(clippy::zero_divided_by_zero)]
#![warn(clippy::must_use_unit)]
#![warn(clippy::suspicious_assignment_formatting)]
#![warn(clippy::suspicious_else_formatting)]
#![warn(clippy::suspicious_unary_op_formatting)]
#![warn(clippy::mut_mutex_lock)]
#![warn(clippy::print_literal)]
#![warn(clippy::same_item_push)]
#![warn(clippy::useless_format)]
#![warn(clippy::write_literal)]
#![warn(clippy::redundant_closure)]
#![warn(clippy::redundant_closure_call)]
#![warn(clippy::unnecessary_lazy_evaluations)]
#![warn(clippy::partialeq_ne_impl)]
#![warn(clippy::redundant_field_names)]
#![warn(clippy::transmutes_expressible_as_ptr_casts)]
#![warn(clippy::unused_async)]
#![warn(clippy::disallowed_methods)]
#![warn(clippy::disallowed_macros)]
#![warn(clippy::disallowed_types)]
#![warn(clippy::from_over_into)]
// END LINT CONFIG

use mz_sqllogictest::ast::{Location, Record};
use mz_sqllogictest::parser;

#[test]
fn test_parser() {
    struct TestCase {
        input: &'static str,
        output: Vec<Record<'static>>,
    }

    fn linenum(n: usize) -> Location {
        Location {
            file: "<test>".to_string(),
            line: n,
        }
    }

    let test_cases = vec![
        TestCase {
            input: "statement ok
SELECT 1",
            output: vec![Record::Statement {
                expected_error: None,
                rows_affected: None,
                sql: "SELECT 1",
                location: linenum(2),
            }],
        },
        TestCase {
            input: "statement OK
SELECT 1",
            output: vec![Record::Statement {
                expected_error: None,
                rows_affected: None,
                sql: "SELECT 1",
                location: linenum(2),
            }],
        },
        TestCase {
            input: "statement count 7
SELECT 1",
            output: vec![Record::Statement {
                expected_error: None,
                rows_affected: Some(7),
                sql: "SELECT 1",
                location: linenum(2),
            }],
        },
        TestCase {
            input: "statement error this statement is wrong
SELECT blargh",
            output: vec![Record::Statement {
                expected_error: Some("this statement is wrong"),
                rows_affected: None,
                sql: "SELECT blargh",
                location: linenum(2),
            }],
        },
        TestCase {
            input: "halt

statement ok
SELECT disappear",
            output: vec![],
        },
        TestCase {
            input: "skipif postgresql
statement ok
SELECT not_postgresql

onlyif postgresql
statement ok
SELECT only_postgresql

statement ok
SELECT everybody

skipif bloop
skipif blorp
statement ok
SELECT multiskip_not_us

skipif bloop
skipif postgresql
skipif blorp
statement ok
SELECT multiskip_including_us

onlyif postgresql
halt

statement ok
SELECT disappear",
            output: vec![
                Record::Statement {
                    expected_error: None,
                    rows_affected: None,
                    sql: "SELECT only_postgresql",
                    location: linenum(7),
                },
                Record::Statement {
                    expected_error: None,
                    rows_affected: None,
                    sql: "SELECT everybody",
                    location: linenum(10),
                },
                Record::Statement {
                    expected_error: None,
                    rows_affected: None,
                    sql: "SELECT multiskip_not_us",
                    location: linenum(15),
                },
            ],
        },
    ];

    for tc in test_cases {
        let mut parser = crate::parser::Parser::new("<test>", tc.input);
        let records = parser.parse_records().unwrap();
        assert_eq!(records, tc.output);
    }
}
