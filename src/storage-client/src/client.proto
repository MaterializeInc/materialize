// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// buf breaking: ignore (does currently not require backward-compatibility)

syntax = "proto3";

package mz_storage_client.client;

import "cluster-client/src/client.proto";
import "google/protobuf/empty.proto";
import "persist-client/src/batch.proto";
import "proto/src/chrono.proto";
import "proto/src/proto.proto";
import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "storage-client/src/statistics.proto";
import "storage-types/src/controller.proto";
import "storage-types/src/oneshot_sources.proto";
import "storage-types/src/parameters.proto";
import "storage-types/src/sinks.proto";
import "storage-types/src/sources.proto";

service ProtoStorage {
  rpc CommandResponseStream(stream ProtoStorageCommand) returns (stream ProtoStorageResponse);
}

message ProtoCompaction {
  mz_repr.global_id.ProtoGlobalId id = 1;
  mz_repr.antichain.ProtoU64Antichain frontier = 2;
}

message ProtoRunIngestionCommand {
  reserved 3;
  reserved "update";

  mz_repr.global_id.ProtoGlobalId id = 1;
  mz_storage_types.sources.ProtoIngestionDescription description = 2;
}

message ProtoRunOneshotIngestion {
  mz_proto.ProtoU128 ingestion_id = 1;
  mz_repr.global_id.ProtoGlobalId collection_id = 2;
  mz_storage_types.controller.ProtoCollectionMetadata storage_metadata = 3;
  mz_storage_types.oneshot_sources.ProtoOneshotIngestionRequest request = 4;
}

message ProtoRunSinkCommand {
  reserved 3;
  reserved "update";

  mz_repr.global_id.ProtoGlobalId id = 1;
  mz_storage_types.sinks.ProtoStorageSinkDesc description = 2;
}

message ProtoStorageCommand {
  message ProtoCreateTimely {
    mz_cluster_client.client.ProtoTimelyConfig config = 1;
    mz_proto.ProtoU128 nonce = 2;
  }

  oneof kind {
    ProtoCreateTimely create_timely = 6;
    ProtoRunIngestionCommand run_ingestion = 1;
    ProtoCompaction allow_compaction = 2;
    google.protobuf.Empty initialization_complete = 3;
    google.protobuf.Empty allow_writes = 7;
    ProtoRunSinkCommand run_sink = 4;
    mz_storage_types.parameters.ProtoStorageParameters update_configuration = 5;
    ProtoRunOneshotIngestion run_oneshot_ingestion = 10;
    mz_proto.ProtoU128 cancel_oneshot_ingestion = 11;
  }
}

message ProtoStorageResponse {
  message ProtoFrontierUpper {
    mz_repr.global_id.ProtoGlobalId id = 1;
    mz_repr.antichain.ProtoU64Antichain upper = 2;
  }

  message ProtoStatisticsUpdates {
    repeated mz_storage_client.statistics.ProtoSourceStatisticsUpdate source_updates = 1;
    repeated mz_storage_client.statistics.ProtoSinkStatisticsUpdate sink_updates = 2;
  }

  message ProtoStatus {
    oneof kind {
      google.protobuf.Empty starting = 1;
      google.protobuf.Empty running = 2;
      google.protobuf.Empty paused = 3;
      google.protobuf.Empty stalled = 4;
      google.protobuf.Empty ceased = 5;
      google.protobuf.Empty dropped = 6;
    }
  }

  message ProtoStatusUpdate {
    mz_repr.global_id.ProtoGlobalId id = 1;
    ProtoStatus status = 2;
    mz_proto.chrono.ProtoNaiveDateTime timestamp = 3;
    optional string error = 4;
    repeated string hints = 5;
    map<string, string> namespaced_errors = 6;
    optional string replica_id = 7;
  }

  message ProtoDroppedId {
    mz_repr.global_id.ProtoGlobalId id = 1;
  }

  message ProtoStagedBatches {
    message BatchResult {
      oneof value {
        mz_persist_client.batch.ProtoBatch batch = 1;
        string error = 2;
      }
    }

    message Inner {
      mz_proto.ProtoU128 id = 1;
      repeated BatchResult batches = 2;
    }

    repeated Inner batches = 1;
  }

  oneof kind {
    ProtoFrontierUpper frontier_upper = 1;
    ProtoDroppedId dropped_id = 2;
    ProtoStatisticsUpdates stats = 3;
    ProtoStatusUpdate status_update = 4;
    ProtoStagedBatches staged_batches = 5;
  }
}
