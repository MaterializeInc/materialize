// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "kafka-util/src/addr.proto";
import "repr/src/global_id.proto";
import "repr/src/url.proto";
import "proto/src/tokio_postgres.proto";
import "storage-client/src/types/errors.proto";

package mz_storage_client.types.connections;

message ProtoStringOrSecret {
    oneof kind {
        string string = 1;
        mz_repr.global_id.ProtoGlobalId secret = 2;
    }
}

message ProtoTlsIdentity {
    ProtoStringOrSecret cert = 1;
    mz_repr.global_id.ProtoGlobalId key = 2;
}

message ProtoKafkaConnectionTlsConfig {
    ProtoStringOrSecret root_cert = 1;
    ProtoTlsIdentity identity = 2;
}

message ProtoKafkaConnectionSaslConfig {
    string mechanisms = 1;
    ProtoStringOrSecret username = 2;
    mz_repr.global_id.ProtoGlobalId password = 3;
    ProtoStringOrSecret tls_root_cert = 4;
}

message ProtoKafkaConnectionSecurity {
    oneof kind {
        ProtoKafkaConnectionTlsConfig tls = 1;
        ProtoKafkaConnectionSaslConfig sasl = 2;
    }
}

message ProtoKafkaConnection {
    reserved 1, 2;
    reserved "broker", "options";
    repeated string brokers = 3;
    optional string progress_topic = 5;
    optional ProtoKafkaConnectionSecurity security = 4;
}

message ProtoCsrConnection {
    mz_repr.url.ProtoUrl url = 1;
    ProtoStringOrSecret tls_root_cert = 2;
    ProtoTlsIdentity tls_identity = 3;
    ProtoCsrConnectionHttpAuth http_auth = 4;
}

message ProtoCsrConnectionHttpAuth {
    ProtoStringOrSecret username = 1;
    mz_repr.global_id.ProtoGlobalId password = 2;
}

message ProtoPostgresConnection {
    string host = 1;
    uint32 port = 2;
    string database = 3;
    ProtoStringOrSecret user = 4;
    mz_repr.global_id.ProtoGlobalId password = 5;
    mz_proto.tokio_postgres.ProtoSslMode tls_mode = 6;
    ProtoStringOrSecret tls_root_cert = 7;
    ProtoTlsIdentity tls_identity = 8;
    mz_repr.global_id.ProtoGlobalId ssh_tunnel_id = 9;
    ProtoSshConnection ssh_tunnel = 10;
}

message ProtoSshConnection {
    message ProtoPublicKeys {
        string primary_public_key = 1;
        string secondary_public_key = 2;
    }

    string host = 1;
    uint32 port = 2;
    string user = 3;
    ProtoPublicKeys public_keys = 4;
}
