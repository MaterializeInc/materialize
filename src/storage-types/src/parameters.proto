// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "tracing/src/params.proto";
import "proto/src/proto.proto";
import "dyncfg/src/dyncfg.proto";
import "rocksdb-types/src/config.proto";
import "service/src/params.proto";

package mz_storage_types.parameters;

message ProtoStorageParameters {
    reserved 1, 2, 3, 25;
    mz_dyncfg.ConfigUpdates persist = 26;
    uint64 keep_n_source_status_history_entries = 4;
    mz_rocksdb_types.config.ProtoRocksDbTuningParameters upsert_rocksdb_tuning_config = 5;
    bool finalize_shards = 6;
    uint64 keep_n_sink_status_history_entries = 7;
    mz_tracing.params.ProtoTracingParameters tracing = 8;
    ProtoUpsertAutoSpillConfig upsert_auto_spill_config = 9;
    ProtoStorageMaxInflightBytesConfig storage_dataflow_max_inflight_bytes_config = 10;
    mz_service.params.ProtoGrpcClientParameters grpc_client = 11;
    bool storage_dataflow_delay_sources_past_rehydration = 12;
    uint64 shrink_upsert_unused_buffers_by_ratio = 13;
    reserved 14, 15;
    ProtoPgSourceTcpTimeouts pg_source_tcp_timeouts = 16;
    mz_proto.ProtoDuration pg_source_snapshot_statement_timeout = 17;
    bool record_namespaced_errors = 18;
    uint64 keep_n_privatelink_status_history_entries = 19;
    ProtoSshTimeoutConfig ssh_timeout_config = 20;
    ProtoKafkaTimeouts kafka_timeout_config = 21;
    mz_proto.ProtoDuration statistics_interval = 22;
    mz_proto.ProtoDuration statistics_collection_interval = 23;
    ProtoPgSourceSnapshotConfig pg_snapshot_config = 24;
    bool enable_dependency_read_hold_asserts = 27;
    mz_proto.ProtoDuration user_storage_managed_collections_batch_duration = 28;
}


message ProtoPgSourceTcpTimeouts {
    optional mz_proto.ProtoDuration connect_timeout = 1;
    optional uint32 keepalives_retries = 2;
    optional mz_proto.ProtoDuration keepalives_idle = 3;
    optional mz_proto.ProtoDuration keepalives_interval = 4;
    optional mz_proto.ProtoDuration tcp_user_timeout = 5;
}

message ProtoPgSourceSnapshotConfig {
    bool collect_strict_count = 1;
    bool fallback_to_strict_count = 2;
    bool wait_for_count = 3;
}

message ProtoKafkaTimeouts {
    reserved 6;
    bool keepalive = 1;
    mz_proto.ProtoDuration socket_timeout = 2;
    mz_proto.ProtoDuration transaction_timeout = 5;
    mz_proto.ProtoDuration socket_connection_setup_timeout = 3;
    mz_proto.ProtoDuration fetch_metadata_timeout = 4;
    mz_proto.ProtoDuration progress_record_fetch_timeout = 7;
    mz_proto.ProtoDuration default_metadata_fetch_interval = 8;
}
message ProtoSshTimeoutConfig {
    mz_proto.ProtoDuration check_interval = 1;
    mz_proto.ProtoDuration connect_timeout = 2;
    mz_proto.ProtoDuration keepalives_idle = 3;
}

message ProtoUpsertAutoSpillConfig {
    bool allow_spilling_to_disk = 1;
    uint64 spill_to_disk_threshold_bytes = 2;
}

message ProtoStorageMaxInflightBytesConfig {
    reserved 2, 3, 5;
    optional uint64 max_in_flight_bytes_default = 1;
    bool disk_only = 4;
    optional double max_in_flight_bytes_cluster_size_fraction = 6;
}
