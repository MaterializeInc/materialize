// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "google/protobuf/empty.proto";

import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "repr/src/relation_and_scalar.proto";
import "storage-types/src/controller.proto";
import "storage-types/src/connections.proto";

package mz_storage_types.sinks;

message ProtoStorageSinkDesc {
    mz_repr.global_id.ProtoGlobalId from = 1;
    mz_repr.relation_and_scalar.ProtoRelationDesc from_desc = 2;
    ProtoStorageSinkConnection connection = 3;
    optional ProtoSinkEnvelope envelope = 4;
    ProtoSinkAsOf as_of = 5;
    optional mz_storage_types.controller.ProtoCollectionMetadata from_storage_metadata = 6;
    optional string status_id = 7;
}

message ProtoSinkEnvelope {
    oneof kind {
        google.protobuf.Empty debezium = 1;
        google.protobuf.Empty upsert = 2;
    }
}

message ProtoStorageSinkConnection {
    reserved 1;
    reserved "kafka";

    oneof kind {
        ProtoKafkaSinkConnectionV2 kafka_v2 = 2;
    }
}

message ProtoSinkAsOf {
    mz_repr.antichain.ProtoU64Antichain frontier = 1;
    bool strict = 2;
}

message ProtoKafkaSinkFormat {
    message ProtoKafkaSinkAvroFormat {
        optional string key_schema = 1;
        string value_schema = 2;
        mz_storage_types.connections.ProtoCsrConnection csr_connection = 3;
    }

    reserved 1, 3;

    oneof kind {
        google.protobuf.Empty json = 2;
        ProtoKafkaSinkAvroFormat avro = 4;
    }
}

message ProtoKafkaConsistencyConfig {
    message ProtoKafkaConsistencyConfigProgress {
        string topic = 1;
    }

    oneof kind {
        ProtoKafkaConsistencyConfigProgress progress = 1;
    }
}

message ProtoKafkaSinkConnectionRetention {
    optional int64 duration = 1;
    optional int64 bytes = 2;
}

message ProtoKafkaSinkConnectionV2 {
    message ProtoKeyDescAndIndices {
        mz_repr.relation_and_scalar.ProtoRelationDesc desc = 1;
        repeated uint64 indices = 2;
    }

    message ProtoRelationKeyIndicesVec {
        repeated uint64 relation_key_indices = 1;
    }

    mz_repr.global_id.ProtoGlobalId connection_id = 1;
    mz_storage_types.connections.ProtoKafkaConnection connection = 2;
    string topic = 3;
    optional ProtoKeyDescAndIndices key_desc_and_indices = 4;
    optional ProtoRelationKeyIndicesVec relation_key_indices = 5;
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 6;
    uint64 fuel = 7;
    ProtoKafkaSinkConnectionRetention retention = 8;
    int32 replication_factor = 9;
    ProtoKafkaConsistencyConfig consistency_config = 10;
    ProtoKafkaSinkFormat format = 11;
    int32 partition_count = 12;
    map<string, mz_storage_types.connections.ProtoStringOrSecret> connection_options = 13;
}

message ProtoPersistSinkConnection {
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 1;
    mz_storage_types.controller.ProtoCollectionMetadata storage_metadata = 2;
}

message ProtoDurableExportMetadata {
    // This message is persisted to disk. Changes must be backwards compatible.
    mz_storage_types.sinks.ProtoSinkAsOf initial_as_of = 1;
}
