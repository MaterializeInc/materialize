// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "google/protobuf/empty.proto";

import "pgcopy/src/copy.proto";
import "repr/src/antichain.proto";
import "repr/src/global_id.proto";
import "repr/src/relation_and_scalar.proto";
import "storage-types/src/controller.proto";
import "storage-types/src/connections.proto";

package mz_storage_types.sinks;

message ProtoStorageSinkDesc {
    reserved 5, 8, 9, 10;
    mz_repr.global_id.ProtoGlobalId from = 1;
    mz_repr.relation_and_scalar.ProtoRelationDesc from_desc = 2;
    ProtoStorageSinkConnection connection = 3;
    optional ProtoSinkEnvelope envelope = 4;
    optional mz_storage_types.controller.ProtoCollectionMetadata from_storage_metadata = 6;
    optional string status_id = 7;
    mz_repr.antichain.ProtoU64Antichain as_of = 11;
    bool with_snapshot = 12;
}

message ProtoSinkEnvelope {
    oneof kind {
        google.protobuf.Empty debezium = 1;
        google.protobuf.Empty upsert = 2;
    }
}

message ProtoStorageSinkConnection {
    reserved 1;
    reserved "kafka";

    oneof kind {
        ProtoKafkaSinkConnectionV2 kafka_v2 = 2;
    }
}

message ProtoKafkaSinkFormat {
    message ProtoKafkaSinkAvroFormat {
        optional string key_schema = 1;
        string value_schema = 2;
        mz_storage_types.connections.ProtoCsrConnection csr_connection = 3;
    }

    reserved 1, 3;

    oneof kind {
        google.protobuf.Empty json = 2;
        ProtoKafkaSinkAvroFormat avro = 4;
    }
}

message ProtoKafkaSinkConnectionV2 {
    message ProtoKeyDescAndIndices {
        mz_repr.relation_and_scalar.ProtoRelationDesc desc = 1;
        repeated uint64 indices = 2;
    }

    message ProtoRelationKeyIndicesVec {
        repeated uint64 relation_key_indices = 1;
    }

    reserved 7 to 10, 12, 13, 21;

    mz_repr.global_id.ProtoGlobalId connection_id = 1;
    mz_storage_types.connections.ProtoKafkaConnection connection = 2;
    string topic = 3;
    optional ProtoKeyDescAndIndices key_desc_and_indices = 4;
    optional ProtoRelationKeyIndicesVec relation_key_indices = 5;
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 6;
    ProtoKafkaSinkFormat format = 11;
    oneof compression_type {
        google.protobuf.Empty none = 14;
        google.protobuf.Empty gzip = 15;
        google.protobuf.Empty snappy = 16;
        google.protobuf.Empty lz4 = 17;
        google.protobuf.Empty zstd = 18;
    }
    ProtoKafkaIdStyle progress_group_id = 19;
    ProtoKafkaIdStyle transactional_id = 20;
}

message ProtoKafkaIdStyle {
    message ProtoKafkaIdStylePrefix {
        optional string prefix = 1;
    }
    oneof kind {
        ProtoKafkaIdStylePrefix prefix = 1;
        google.protobuf.Empty legacy = 2;
    }
}

message ProtoPersistSinkConnection {
    mz_repr.relation_and_scalar.ProtoRelationDesc value_desc = 1;
    mz_storage_types.controller.ProtoCollectionMetadata storage_metadata = 2;
}

message ProtoS3UploadInfo {
    string prefix = 1;
    uint64 max_file_size = 2;
    mz_repr.relation_and_scalar.ProtoRelationDesc desc = 3;
    mz_pgcopy.copy.ProtoCopyFormatParams format = 4;
}
