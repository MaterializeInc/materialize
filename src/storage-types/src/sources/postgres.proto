// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "postgres-util/src/desc.proto";
import "repr/src/global_id.proto";
import "storage-types/src/connections.proto";
import "expr/src/scalar.proto";

package mz_storage_types.sources.postgres;

message ProtoPostgresSourceConnection {
    message ProtoCastType {
        oneof kind {
            google.protobuf.Empty natural = 1;
            google.protobuf.Empty text = 2;
        }
    }

    message ProtoPostgresTableCast {
        repeated mz_expr.scalar.ProtoMirScalarExpr column_casts = 1;
        repeated ProtoCastType column_cast_types = 2;
    }

    mz_repr.global_id.ProtoGlobalId connection_id = 6;
    mz_storage_types.connections.ProtoPostgresConnection connection = 1;
    string publication = 2;
    ProtoPostgresSourcePublicationDetails details = 4;
    repeated ProtoPostgresTableCast table_casts = 5;
    // Describes the position in the source's publication that the table cast
    // correlates to; meant to be iterated over in tandem with table_casts
    repeated uint64 table_cast_pos = 7;
}

message ProtoPostgresSourcePublicationDetails {
    repeated mz_postgres_util.desc.ProtoPostgresTableDesc tables = 1;
    string slot = 2;
    optional uint64 timeline_id = 3;
    string database = 4;
}
