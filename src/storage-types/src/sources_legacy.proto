// Copyright Materialize, Inc. and contributors. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

// #21510 accidentally made an incompatible change to `ProtoUpsertValueError`
// which we didn't catch in time. That made Materialize unable to decode a
// number of persisted proto types. This file contains the old representations
// of these types, to make it possible to decode them as a fallback.

syntax = "proto3";

import "expr/src/scalar.proto";
import "repr/src/row.proto";
import "storage-types/src/errors.proto";

package mz_storage_types.sources_legacy;

message ProtoSourceDataLegacy {
    oneof kind {
        mz_repr.row.ProtoRow ok = 1;
        ProtoDataflowErrorLegacy err = 2;
    }
}

message ProtoDataflowErrorLegacy {
    oneof kind {
        errors.ProtoDecodeError decode_error = 1;
        mz_expr.scalar.ProtoEvalError eval_error = 2;
        errors.ProtoSourceError source_error = 3;
        ProtoEnvelopeErrorV1Legacy envelope_error_v1 = 4;
    }
}

message ProtoEnvelopeErrorV1Legacy {
    oneof kind {
        string debezium = 1;
        ProtoUpsertErrorLegacy upsert = 2;
        string flat = 3;
    }
}

message ProtoUpsertErrorLegacy {
    oneof kind {
        errors.ProtoDecodeError key_decode = 1;
        ProtoUpsertValueErrorLegacy value = 2;
        errors.ProtoUpsertNullKeyError null_key = 3;
    }
}

message ProtoUpsertValueErrorLegacy {
    ProtoDataflowErrorLegacy inner = 1;
    mz_repr.row.ProtoRow for_key = 2;
}
