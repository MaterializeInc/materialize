# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64 int64])
----
ok

cat
(defsource t1 ([(Int32 true) (Int32 true)] []))
(defsource t2 ([(Int32 true) (Int32 true)] []))
----
ok

# regression test for #8235
build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_binary add_int64 #1 #2)])
        [(call_binary add_int64 null #3)])
     [#1])
----
error: Object spec [Ident { sym: filter, span: bytes(13531..13537) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(13547..13550) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(13552..13555) }, Ident { sym: x, span: bytes(13556..13557) }], span: bytes(13551..13558) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13561..13572) }, Ident { sym: add_int64, span: bytes(13573..13582) }, Punct { char: '#', spacing: Alone, span: bytes(13583..13584) }, Literal { lit: 1, span: bytes(13584..13585) }, Punct { char: '#', spacing: Alone, span: bytes(13586..13587) }, Literal { lit: 2, span: bytes(13587..13588) }], span: bytes(13560..13589) }], span: bytes(13559..13590) }], span: bytes(13546..13591) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13602..13613) }, Ident { sym: add_int64, span: bytes(13614..13623) }, Ident { sym: null, span: bytes(13624..13628) }, Punct { char: '#', spacing: Alone, span: bytes(13629..13630) }, Literal { lit: 3, span: bytes(13630..13631) }], span: bytes(13601..13632) }], span: bytes(13600..13633) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# pushdown filters with a map. filters should be fused and re-sorted with the expression inlined
build apply=CanonicalizeMfp
(project
    (filter
        (filter
            (map (get x) [(call_binary add_int64 #0 #1)])
            [(call_binary lt #3 (4321 Int32))])
        [(call_binary gt #3 (1234 Int32))])
     [3])
----
error: Object spec [Ident { sym: filter, span: bytes(13661..13667) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: filter, span: bytes(13677..13683) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(13697..13700) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(13702..13705) }, Ident { sym: x, span: bytes(13706..13707) }], span: bytes(13701..13708) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13711..13722) }, Ident { sym: add_int64, span: bytes(13723..13732) }, Punct { char: '#', spacing: Alone, span: bytes(13733..13734) }, Literal { lit: 0, span: bytes(13734..13735) }, Punct { char: '#', spacing: Alone, span: bytes(13736..13737) }, Literal { lit: 1, span: bytes(13737..13738) }], span: bytes(13710..13739) }], span: bytes(13709..13740) }], span: bytes(13696..13741) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13756..13767) }, Ident { sym: lt, span: bytes(13768..13770) }, Punct { char: '#', spacing: Alone, span: bytes(13771..13772) }, Literal { lit: 3, span: bytes(13772..13773) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 4321, span: bytes(13775..13779) }, Ident { sym: Int32, span: bytes(13780..13785) }], span: bytes(13774..13786) }], span: bytes(13755..13787) }], span: bytes(13754..13788) }], span: bytes(13676..13789) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13800..13811) }, Ident { sym: gt, span: bytes(13812..13814) }, Punct { char: '#', spacing: Alone, span: bytes(13815..13816) }, Literal { lit: 3, span: bytes(13816..13817) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1234, span: bytes(13819..13823) }, Ident { sym: Int32, span: bytes(13824..13829) }], span: bytes(13818..13830) }], span: bytes(13799..13831) }], span: bytes(13798..13832) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# multiple pushdown filters without a map. filters should be fused and re-sorted least to greatest
build apply=CanonicalizeMfp
(project
    (filter
        (filter
            (get x)
            [(call_binary lt #0 (1234 Int32))])
        [(call_binary gt #1 (4321 Int32))])
    [0 1])
----
error: Object spec [Ident { sym: filter, span: bytes(13859..13865) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: filter, span: bytes(13875..13881) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(13895..13898) }, Ident { sym: x, span: bytes(13899..13900) }], span: bytes(13894..13901) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13916..13927) }, Ident { sym: lt, span: bytes(13928..13930) }, Punct { char: '#', spacing: Alone, span: bytes(13931..13932) }, Literal { lit: 0, span: bytes(13932..13933) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1234, span: bytes(13935..13939) }, Ident { sym: Int32, span: bytes(13940..13945) }], span: bytes(13934..13946) }], span: bytes(13915..13947) }], span: bytes(13914..13948) }], span: bytes(13874..13949) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(13960..13971) }, Ident { sym: gt, span: bytes(13972..13974) }, Punct { char: '#', spacing: Alone, span: bytes(13975..13976) }, Literal { lit: 1, span: bytes(13976..13977) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 4321, span: bytes(13979..13983) }, Ident { sym: Int32, span: bytes(13984..13989) }], span: bytes(13978..13990) }], span: bytes(13959..13991) }], span: bytes(13958..13992) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# multiple retained filters with a map. canonicalized filters should be re-sorted least to greatest
build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_variadic hmac_string [#0 #1 #2]) (call_variadic hmac_string [#0 #1])])
        [(call_unary is_null #4) (call_unary is_null #3)])
     [0 3 4])
----
error: Object spec [Ident { sym: filter, span: bytes(14020..14026) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(14036..14039) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14041..14044) }, Ident { sym: x, span: bytes(14045..14046) }], span: bytes(14040..14047) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(14050..14063) }, Ident { sym: hmac_string, span: bytes(14064..14075) }, Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(14077..14078) }, Literal { lit: 0, span: bytes(14078..14079) }, Punct { char: '#', spacing: Alone, span: bytes(14080..14081) }, Literal { lit: 1, span: bytes(14081..14082) }, Punct { char: '#', spacing: Alone, span: bytes(14083..14084) }, Literal { lit: 2, span: bytes(14084..14085) }], span: bytes(14076..14086) }], span: bytes(14049..14087) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(14089..14102) }, Ident { sym: hmac_string, span: bytes(14103..14114) }, Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(14116..14117) }, Literal { lit: 0, span: bytes(14117..14118) }, Punct { char: '#', spacing: Alone, span: bytes(14119..14120) }, Literal { lit: 1, span: bytes(14120..14121) }], span: bytes(14115..14122) }], span: bytes(14088..14123) }], span: bytes(14048..14124) }], span: bytes(14035..14125) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(14136..14146) }, Ident { sym: is_null, span: bytes(14147..14154) }, Punct { char: '#', spacing: Alone, span: bytes(14155..14156) }, Literal { lit: 4, span: bytes(14156..14157) }], span: bytes(14135..14158) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(14160..14170) }, Ident { sym: is_null, span: bytes(14171..14178) }, Punct { char: '#', spacing: Alone, span: bytes(14179..14180) }, Literal { lit: 3, span: bytes(14180..14181) }], span: bytes(14159..14182) }], span: bytes(14134..14183) }] (type Vec<usize>) has unsupported delimiter Parenthesis

build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_variadic hmac_string [#0 #1 #2])])
        [
            (call_binary lt #0 1234)
            (call_unary is_null #3)
        ])
     [0 3])
----
error: Object spec [Ident { sym: filter, span: bytes(14214..14220) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(14230..14233) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14235..14238) }, Ident { sym: x, span: bytes(14239..14240) }], span: bytes(14234..14241) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(14244..14257) }, Ident { sym: hmac_string, span: bytes(14258..14269) }, Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(14271..14272) }, Literal { lit: 0, span: bytes(14272..14273) }, Punct { char: '#', spacing: Alone, span: bytes(14274..14275) }, Literal { lit: 1, span: bytes(14275..14276) }, Punct { char: '#', spacing: Alone, span: bytes(14277..14278) }, Literal { lit: 2, span: bytes(14278..14279) }], span: bytes(14270..14280) }], span: bytes(14243..14281) }], span: bytes(14242..14282) }], span: bytes(14229..14283) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14307..14318) }, Ident { sym: lt, span: bytes(14319..14321) }, Punct { char: '#', spacing: Alone, span: bytes(14322..14323) }, Literal { lit: 0, span: bytes(14323..14324) }, Literal { lit: 1234, span: bytes(14325..14329) }], span: bytes(14306..14330) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(14344..14354) }, Ident { sym: is_null, span: bytes(14355..14362) }, Punct { char: '#', spacing: Alone, span: bytes(14363..14364) }, Literal { lit: 3, span: bytes(14364..14365) }], span: bytes(14343..14366) }], span: bytes(14292..14376) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# regression test for #10000.
# Even though there is no map in the test, the duplicated predicates cause the creation
# of a map via memoizing common subexpressions that then gets optimized away.
build apply=CanonicalizeMfp
(project
    (filter
        (project
            (join
                [(get t1) (get t2)]
                [[#0 #2]])
            [0])
        [
            (call_unary not (call_unary is_null #0))
            (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
            (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
        ])
    [0])
----
error: Object spec [Ident { sym: filter, span: bytes(14405..14411) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: project, span: bytes(14421..14428) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: join, span: bytes(14442..14446) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14465..14468) }, Ident { sym: t1, span: bytes(14469..14471) }], span: bytes(14464..14472) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14474..14477) }, Ident { sym: t2, span: bytes(14478..14480) }], span: bytes(14473..14481) }], span: bytes(14463..14482) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(14501..14502) }, Literal { lit: 0, span: bytes(14502..14503) }, Punct { char: '#', spacing: Alone, span: bytes(14504..14505) }, Literal { lit: 2, span: bytes(14505..14506) }], span: bytes(14500..14507) }], span: bytes(14499..14508) }], span: bytes(14441..14509) }, Group { delimiter: Bracket, stream: TokenStream [Literal { lit: 0, span: bytes(14523..14524) }], span: bytes(14522..14525) }], span: bytes(14420..14526) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(14550..14560) }, Ident { sym: not, span: bytes(14561..14564) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(14566..14576) }, Ident { sym: is_null, span: bytes(14577..14584) }, Punct { char: '#', spacing: Alone, span: bytes(14585..14586) }, Literal { lit: 0, span: bytes(14586..14587) }], span: bytes(14565..14588) }], span: bytes(14549..14589) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(14603..14616) }, Ident { sym: or, span: bytes(14617..14619) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14622..14633) }, Ident { sym: eq, span: bytes(14634..14636) }, Punct { char: '#', spacing: Alone, span: bytes(14637..14638) }, Literal { lit: 0, span: bytes(14638..14639) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(14641..14642) }, Ident { sym: Int32, span: bytes(14643..14648) }], span: bytes(14640..14649) }], span: bytes(14621..14650) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14652..14663) }, Ident { sym: eq, span: bytes(14664..14666) }, Punct { char: '#', spacing: Alone, span: bytes(14667..14668) }, Literal { lit: 0, span: bytes(14668..14669) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(14671..14675) }, Ident { sym: Int32, span: bytes(14676..14681) }], span: bytes(14670..14682) }], span: bytes(14651..14683) }], span: bytes(14620..14684) }], span: bytes(14602..14685) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(14699..14712) }, Ident { sym: or, span: bytes(14713..14715) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14718..14729) }, Ident { sym: eq, span: bytes(14730..14732) }, Punct { char: '#', spacing: Alone, span: bytes(14733..14734) }, Literal { lit: 0, span: bytes(14734..14735) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(14737..14738) }, Ident { sym: Int32, span: bytes(14739..14744) }], span: bytes(14736..14745) }], span: bytes(14717..14746) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14748..14759) }, Ident { sym: eq, span: bytes(14760..14762) }, Punct { char: '#', spacing: Alone, span: bytes(14763..14764) }, Literal { lit: 0, span: bytes(14764..14765) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(14767..14771) }, Ident { sym: Int32, span: bytes(14772..14777) }], span: bytes(14766..14778) }], span: bytes(14747..14779) }], span: bytes(14716..14780) }], span: bytes(14698..14781) }], span: bytes(14535..14791) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# same test as above, but with predicates that are equivalent only after considering the innermost map-project
build apply=CanonicalizeMfp
(project
    (filter
        (map
            (project
                (join
                    [(get t1) (get t2)]
                    [[#0 #2]])
                [0 1 1])
            [(call_binary add_int64 #0 #2)])
        [
            (call_unary not (call_unary is_null #0))
            (call_variadic or [
                (call_binary eq (call_binary add_int64 #0 #2) (5 Int32))
                (call_binary eq (call_binary add_int64 #0 #1) (9 Int32))])
            (call_variadic or [
                (call_binary eq #3 (5 Int32))
                (call_binary eq #3 (9 Int32))])
        ])
    [0])
----
error: Object spec [Ident { sym: filter, span: bytes(14817..14823) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(14833..14836) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: project, span: bytes(14850..14857) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: join, span: bytes(14875..14879) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14902..14905) }, Ident { sym: t1, span: bytes(14906..14908) }], span: bytes(14901..14909) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(14911..14914) }, Ident { sym: t2, span: bytes(14915..14917) }], span: bytes(14910..14918) }], span: bytes(14900..14919) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(14942..14943) }, Literal { lit: 0, span: bytes(14943..14944) }, Punct { char: '#', spacing: Alone, span: bytes(14945..14946) }, Literal { lit: 2, span: bytes(14946..14947) }], span: bytes(14941..14948) }], span: bytes(14940..14949) }], span: bytes(14874..14950) }, Group { delimiter: Bracket, stream: TokenStream [Literal { lit: 0, span: bytes(14968..14969) }, Literal { lit: 1, span: bytes(14970..14971) }, Literal { lit: 1, span: bytes(14972..14973) }], span: bytes(14967..14974) }], span: bytes(14849..14975) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(14990..15001) }, Ident { sym: add_int64, span: bytes(15002..15011) }, Punct { char: '#', spacing: Alone, span: bytes(15012..15013) }, Literal { lit: 0, span: bytes(15013..15014) }, Punct { char: '#', spacing: Alone, span: bytes(15015..15016) }, Literal { lit: 2, span: bytes(15016..15017) }], span: bytes(14989..15018) }], span: bytes(14988..15019) }], span: bytes(14832..15020) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(15044..15054) }, Ident { sym: not, span: bytes(15055..15058) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(15060..15070) }, Ident { sym: is_null, span: bytes(15071..15078) }, Punct { char: '#', spacing: Alone, span: bytes(15079..15080) }, Literal { lit: 0, span: bytes(15080..15081) }], span: bytes(15059..15082) }], span: bytes(15043..15083) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(15097..15110) }, Ident { sym: or, span: bytes(15111..15113) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15133..15144) }, Ident { sym: eq, span: bytes(15145..15147) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15149..15160) }, Ident { sym: add_int64, span: bytes(15161..15170) }, Punct { char: '#', spacing: Alone, span: bytes(15171..15172) }, Literal { lit: 0, span: bytes(15172..15173) }, Punct { char: '#', spacing: Alone, span: bytes(15174..15175) }, Literal { lit: 2, span: bytes(15175..15176) }], span: bytes(15148..15177) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(15179..15180) }, Ident { sym: Int32, span: bytes(15181..15186) }], span: bytes(15178..15187) }], span: bytes(15132..15188) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15206..15217) }, Ident { sym: eq, span: bytes(15218..15220) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15222..15233) }, Ident { sym: add_int64, span: bytes(15234..15243) }, Punct { char: '#', spacing: Alone, span: bytes(15244..15245) }, Literal { lit: 0, span: bytes(15245..15246) }, Punct { char: '#', spacing: Alone, span: bytes(15247..15248) }, Literal { lit: 1, span: bytes(15248..15249) }], span: bytes(15221..15250) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 9, span: bytes(15252..15253) }, Ident { sym: Int32, span: bytes(15254..15259) }], span: bytes(15251..15260) }], span: bytes(15205..15261) }], span: bytes(15114..15262) }], span: bytes(15096..15263) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(15277..15290) }, Ident { sym: or, span: bytes(15291..15293) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15313..15324) }, Ident { sym: eq, span: bytes(15325..15327) }, Punct { char: '#', spacing: Alone, span: bytes(15328..15329) }, Literal { lit: 3, span: bytes(15329..15330) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(15332..15333) }, Ident { sym: Int32, span: bytes(15334..15339) }], span: bytes(15331..15340) }], span: bytes(15312..15341) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15359..15370) }, Ident { sym: eq, span: bytes(15371..15373) }, Punct { char: '#', spacing: Alone, span: bytes(15374..15375) }, Literal { lit: 3, span: bytes(15375..15376) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 9, span: bytes(15378..15379) }, Ident { sym: Int32, span: bytes(15380..15385) }], span: bytes(15377..15386) }], span: bytes(15358..15387) }], span: bytes(15294..15388) }], span: bytes(15276..15389) }], span: bytes(15029..15399) }] (type Vec<usize>) has unsupported delimiter Parenthesis

# consecutive levels of map-filter-project. outermost mfp is the same as the #10000 regression test.
build apply=CanonicalizeMfp
(project
    (filter
        (project
            (join
                [
                    (project
                        (filter
                            (map
                                (get t1)
                                [(call_binary add_int64 #0 #1)])
                            [(call_binary gt #2 1234)])
                        [2])
                    (map (get t2) [(call_binary mul_int64 #0 #1)])
                ]
                [[#0 #2]])
            [0 1 2 3])
        [
            (call_unary not (call_unary is_null #0))
            (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
            (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
        ])
    [0 3])
----
error: Object spec [Ident { sym: filter, span: bytes(15425..15431) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: project, span: bytes(15441..15448) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: join, span: bytes(15462..15466) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: project, span: bytes(15506..15513) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: filter, span: bytes(15539..15545) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(15575..15578) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(15612..15615) }, Ident { sym: t1, span: bytes(15616..15618) }], span: bytes(15611..15619) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15654..15665) }, Ident { sym: add_int64, span: bytes(15666..15675) }, Punct { char: '#', spacing: Alone, span: bytes(15676..15677) }, Literal { lit: 0, span: bytes(15677..15678) }, Punct { char: '#', spacing: Alone, span: bytes(15679..15680) }, Literal { lit: 1, span: bytes(15680..15681) }], span: bytes(15653..15682) }], span: bytes(15652..15683) }], span: bytes(15574..15684) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15715..15726) }, Ident { sym: gt, span: bytes(15727..15729) }, Punct { char: '#', spacing: Alone, span: bytes(15730..15731) }, Literal { lit: 2, span: bytes(15731..15732) }, Literal { lit: 1234, span: bytes(15733..15737) }], span: bytes(15714..15738) }], span: bytes(15713..15739) }], span: bytes(15538..15740) }, Group { delimiter: Bracket, stream: TokenStream [Literal { lit: 2, span: bytes(15766..15767) }], span: bytes(15765..15768) }], span: bytes(15505..15769) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: map, span: bytes(15791..15794) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(15796..15799) }, Ident { sym: t2, span: bytes(15800..15802) }], span: bytes(15795..15803) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(15806..15817) }, Ident { sym: mul_int64, span: bytes(15818..15827) }, Punct { char: '#', spacing: Alone, span: bytes(15828..15829) }, Literal { lit: 0, span: bytes(15829..15830) }, Punct { char: '#', spacing: Alone, span: bytes(15831..15832) }, Literal { lit: 1, span: bytes(15832..15833) }], span: bytes(15805..15834) }], span: bytes(15804..15835) }], span: bytes(15790..15836) }], span: bytes(15483..15854) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(15873..15874) }, Literal { lit: 0, span: bytes(15874..15875) }, Punct { char: '#', spacing: Alone, span: bytes(15876..15877) }, Literal { lit: 2, span: bytes(15877..15878) }], span: bytes(15872..15879) }], span: bytes(15871..15880) }], span: bytes(15461..15881) }, Group { delimiter: Bracket, stream: TokenStream [Literal { lit: 0, span: bytes(15895..15896) }, Literal { lit: 1, span: bytes(15897..15898) }, Literal { lit: 2, span: bytes(15899..15900) }, Literal { lit: 3, span: bytes(15901..15902) }], span: bytes(15894..15903) }], span: bytes(15440..15904) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(15928..15938) }, Ident { sym: not, span: bytes(15939..15942) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(15944..15954) }, Ident { sym: is_null, span: bytes(15955..15962) }, Punct { char: '#', spacing: Alone, span: bytes(15963..15964) }, Literal { lit: 0, span: bytes(15964..15965) }], span: bytes(15943..15966) }], span: bytes(15927..15967) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(15981..15994) }, Ident { sym: or, span: bytes(15995..15997) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16000..16011) }, Ident { sym: eq, span: bytes(16012..16014) }, Punct { char: '#', spacing: Alone, span: bytes(16015..16016) }, Literal { lit: 0, span: bytes(16016..16017) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(16019..16020) }, Ident { sym: Int32, span: bytes(16021..16026) }], span: bytes(16018..16027) }], span: bytes(15999..16028) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16030..16041) }, Ident { sym: eq, span: bytes(16042..16044) }, Punct { char: '#', spacing: Alone, span: bytes(16045..16046) }, Literal { lit: 0, span: bytes(16046..16047) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(16049..16053) }, Ident { sym: Int32, span: bytes(16054..16059) }], span: bytes(16048..16060) }], span: bytes(16029..16061) }], span: bytes(15998..16062) }], span: bytes(15980..16063) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(16077..16090) }, Ident { sym: or, span: bytes(16091..16093) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16096..16107) }, Ident { sym: eq, span: bytes(16108..16110) }, Punct { char: '#', spacing: Alone, span: bytes(16111..16112) }, Literal { lit: 0, span: bytes(16112..16113) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(16115..16116) }, Ident { sym: Int32, span: bytes(16117..16122) }], span: bytes(16114..16123) }], span: bytes(16095..16124) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16126..16137) }, Ident { sym: eq, span: bytes(16138..16140) }, Punct { char: '#', spacing: Alone, span: bytes(16141..16142) }, Literal { lit: 0, span: bytes(16142..16143) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(16145..16149) }, Ident { sym: Int32, span: bytes(16150..16155) }], span: bytes(16144..16156) }], span: bytes(16125..16157) }], span: bytes(16094..16158) }], span: bytes(16076..16159) }], span: bytes(15913..16169) }] (type Vec<usize>) has unsupported delimiter Parenthesis

build apply=CanonicalizeMfp
(project
    (map
        (filter
            (project
                (join
                    [(get t1) (get t2)]
                    [[#0 #2]])
                [0 2])
            [
                (call_unary not (call_unary is_null #0))
                (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
                (call_variadic or [(call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32))])
            ])
        [(call_binary add_int64 #0 #1)])
    [2])
----
error: Object spec [Ident { sym: map, span: bytes(16197..16200) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: filter, span: bytes(16210..16216) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: project, span: bytes(16230..16237) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: join, span: bytes(16255..16259) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(16282..16285) }, Ident { sym: t1, span: bytes(16286..16288) }], span: bytes(16281..16289) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(16291..16294) }, Ident { sym: t2, span: bytes(16295..16297) }], span: bytes(16290..16298) }], span: bytes(16280..16299) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(16322..16323) }, Literal { lit: 0, span: bytes(16323..16324) }, Punct { char: '#', spacing: Alone, span: bytes(16325..16326) }, Literal { lit: 2, span: bytes(16326..16327) }], span: bytes(16321..16328) }], span: bytes(16320..16329) }], span: bytes(16254..16330) }, Group { delimiter: Bracket, stream: TokenStream [Literal { lit: 0, span: bytes(16348..16349) }, Literal { lit: 2, span: bytes(16350..16351) }], span: bytes(16347..16352) }], span: bytes(16229..16353) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(16385..16395) }, Ident { sym: not, span: bytes(16396..16399) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_unary, span: bytes(16401..16411) }, Ident { sym: is_null, span: bytes(16412..16419) }, Punct { char: '#', spacing: Alone, span: bytes(16420..16421) }, Literal { lit: 0, span: bytes(16421..16422) }], span: bytes(16400..16423) }], span: bytes(16384..16424) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(16442..16455) }, Ident { sym: or, span: bytes(16456..16458) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16461..16472) }, Ident { sym: eq, span: bytes(16473..16475) }, Punct { char: '#', spacing: Alone, span: bytes(16476..16477) }, Literal { lit: 0, span: bytes(16477..16478) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(16480..16481) }, Ident { sym: Int32, span: bytes(16482..16487) }], span: bytes(16479..16488) }], span: bytes(16460..16489) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16491..16502) }, Ident { sym: eq, span: bytes(16503..16505) }, Punct { char: '#', spacing: Alone, span: bytes(16506..16507) }, Literal { lit: 0, span: bytes(16507..16508) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(16510..16514) }, Ident { sym: Int32, span: bytes(16515..16520) }], span: bytes(16509..16521) }], span: bytes(16490..16522) }], span: bytes(16459..16523) }], span: bytes(16441..16524) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_variadic, span: bytes(16542..16555) }, Ident { sym: or, span: bytes(16556..16558) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16561..16572) }, Ident { sym: eq, span: bytes(16573..16575) }, Punct { char: '#', spacing: Alone, span: bytes(16576..16577) }, Literal { lit: 0, span: bytes(16577..16578) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 5, span: bytes(16580..16581) }, Ident { sym: Int32, span: bytes(16582..16587) }], span: bytes(16579..16588) }], span: bytes(16560..16589) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16591..16602) }, Ident { sym: eq, span: bytes(16603..16605) }, Punct { char: '#', spacing: Alone, span: bytes(16606..16607) }, Literal { lit: 0, span: bytes(16607..16608) }, Group { delimiter: Parenthesis, stream: TokenStream [Literal { lit: 1337, span: bytes(16610..16614) }, Ident { sym: Int32, span: bytes(16615..16620) }], span: bytes(16609..16621) }], span: bytes(16590..16622) }], span: bytes(16559..16623) }], span: bytes(16541..16624) }], span: bytes(16366..16638) }], span: bytes(16209..16639) }, Group { delimiter: Bracket, stream: TokenStream [Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: call_binary, span: bytes(16650..16661) }, Ident { sym: add_int64, span: bytes(16662..16671) }, Punct { char: '#', spacing: Alone, span: bytes(16672..16673) }, Literal { lit: 0, span: bytes(16673..16674) }, Punct { char: '#', spacing: Alone, span: bytes(16675..16676) }, Literal { lit: 1, span: bytes(16676..16677) }], span: bytes(16649..16678) }], span: bytes(16648..16679) }] (type Vec<usize>) has unsupported delimiter Parenthesis
