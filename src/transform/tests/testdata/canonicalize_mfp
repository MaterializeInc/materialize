# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64 int64])
----
ok

cat
(defsource t1 ([(Int32 true) (Int32 true)] []))
(defsource t2 ([(Int32 true) (Int32 true)] []))
----
ok

# regression test for #8235
build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_binary add_int64 #1 #2)])
        [(call_binary add_int64 null #3)])
     [#1])
----
%0 =
| Get x (u0)
| Filter false
| Project (#1)

# pushdown filters with a map. filters should be fused and re-sorted with the expression inlined
build apply=CanonicalizeMfp
(project
    (filter
        (filter
            (map (get x) [(call_binary add_int64 #0 #1)])
            [(call_binary lt #3 (4321 Int32))])
        [(call_binary gt #3 (1234 Int32))])
     [3])
----
%0 =
| Get x (u0)
| Map (#0 + #1)
| Filter (#3 < 4321), (#3 > 1234)
| Project (#3)

# multiple pushdown filters without a map. filters should be fused and re-sorted least to greatest
build apply=CanonicalizeMfp
(project
    (filter
        (filter
            (get x)
            [(call_binary lt #0 (1234 Int32))])
        [(call_binary gt #1 (4321 Int32))])
    [0 1])
----
%0 =
| Get x (u0)
| Filter (#0 < 1234), (#1 > 4321)
| Project (#0, #1)

# multiple retained filters with a map. canonicalized filters should be re-sorted least to greatest
build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_variadic hmac_string [#0 #1 #2]) (call_variadic hmac_string [#0 #1])])
        [(call_unary is_null #4) (call_unary is_null #3)])
     [0 3 4])
----
%0 =
| Get x (u0)
| Map hmac(#0, #1, #2), hmac(#0, #1)
| Filter (#3) IS NULL, (#4) IS NULL
| Project (#0, #3, #4)

build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_variadic hmac_string [#0 #1 #2])])
        [
            (call_binary lt #0 1234)
            (call_unary is_null #3)
        ])
     [0 3])
----
%0 =
| Get x (u0)
| Map hmac(#0, #1, #2)
| Filter (#3) IS NULL, (#0 < 1234)
| Project (#0, #3)

# regression test for #10000.
# Even though there is no map in the test, the duplicated predicates cause the creation
# of a map via memoizing common subexpressions that then gets optimized away.
build apply=CanonicalizeMfp
(project
    (filter
        (project
            (join
                [(get t1) (get t2)]
                [[#0 #2]])
            [0])
        [
            (call_unary not (call_unary is_null #0))
            (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
            (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
        ])
    [0])
----
----
%0 =
| Get t1 (u1)

%1 =
| Get t2 (u2)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Filter (#0) IS NOT NULL, ((#0 = 5) || (#0 = 1337))
| Project (#0)
----
----

# same test as above, but with predicates that are equivalent only after considering the innermost map-project
build apply=CanonicalizeMfp
(project
    (filter
        (map
            (project
                (join
                    [(get t1) (get t2)]
                    [[#0 #2]])
                [0 1 1])
            [(call_binary add_int64 #0 #2)])
        [
            (call_unary not (call_unary is_null #0))
            (call_binary or
                (call_binary eq (call_binary add_int64 #0 #2) (5 Int32))
                (call_binary eq (call_binary add_int64 #0 #1) (9 Int32)))
            (call_binary or
                (call_binary eq #3 (5 Int32))
                (call_binary eq #3 (9 Int32)))
        ])
    [0])
----
----
%0 =
| Get t1 (u1)

%1 =
| Get t2 (u2)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Map (#0 + #1)
| Filter (#0) IS NOT NULL, ((#4 = 5) || (#4 = 9))
| Project (#0)
----
----

# consecutive levels of map-filter-project. outermost mfp is the same as the #10000 regression test.
build apply=CanonicalizeMfp
(project
    (filter
        (project
            (join
                [
                    (project
                        (filter
                            (map
                                (get t1)
                                [(call_binary add_int64 #0 #1)])
                            [(call_binary gt #2 1234)])
                        [2])
                    (map (get t2) [(call_binary mul_int64 #0 #1)])
                ]
                [[#0 #2]])
            [0 1 2 3])
        [
            (call_unary not (call_unary is_null #0))
            (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
            (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
        ])
    [0 3])
----
----
%0 =
| Get t1 (u1)
| Map (#0 + #1)
| Filter (#2 > 1234)
| Project (#2)

%1 =
| Get t2 (u2)
| Map (#0 * #1)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Filter (#0) IS NOT NULL, ((#0 = 5) || (#0 = 1337))
| Project (#0, #3)
----
----

build apply=CanonicalizeMfp
(project
    (map
        (filter
            (project
                (join
                    [(get t1) (get t2)]
                    [[#0 #2]])
                [0 2])
            [
                (call_unary not (call_unary is_null #0))
                (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
                (call_binary or (call_binary eq #0 (5 Int32)) (call_binary eq #0 (1337 Int32)))
            ])
        [(call_binary add_int64 #0 #1)])
    [2])
----
----
%0 =
| Get t1 (u1)

%1 =
| Get t2 (u2)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Map (#0 + #2)
| Filter (#0) IS NOT NULL, ((#0 = 5) || (#0 = 1337))
| Project (#4)
----
----
