# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64 int64])
----
ok

# regression test for #8235
build apply=CanonicalizeMfp
(project
    (filter
        (map (get x) [(call_binary add_int64 #1 #2)])
        [(call_binary add_int64 null #3)])
     [#1])
----
%0 =
| Get x (u0)
| Filter false
| Project (#1)

# This requires three rounds of MFP optimization:
# 1) inline #5 into #6. Resolve #6 as #4.
# 2) inline #3 into #4. inline #4 into #6. Resolve #6 as #2.
# 3) remove the map entirely.
build apply=CanonicalizeMfp
(project
    (map
        (get x)
        [
            (call_variadic (record_create ["a" "b" "c"]) [#0 #1 #2])
            (call_unary (record_get 1) #3)
            (call_variadic (record_create ["a" "b"]) [#4 #3])
            (call_unary (record_get 0) #5)
        ]
    )
    [#6]
)
----
%0 =
| Get x (u0)
| Project (#1)

# Similar to the previous test, but with filters.
build apply=CanonicalizeMfp
(project
    (filter
        (map
            (get x)
            [
                (call_variadic (record_create ["a" "b" "c"]) [#0 #1 #2])
                (call_unary (record_get 1) #3)
                (call_variadic (record_create ["a" "b"]) [#2 #4])
                (call_binary add_int64 (call_unary (record_get 0) #5) #4)
            ]
        )
        [
            (call_binary eq #4 3)
            (call_binary eq #6 4)
        ]
    )
    []
)
----
%0 =
| Get x (u0)
| Filter (#1 = 3), (4 = (#2 + #1))
| Project ()
