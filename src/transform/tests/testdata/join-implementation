# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int32 int64 int32])
----
ok

opt
(join [(get x) (get x)] [[#0 #3]])
----
Return
  Project (#0..=#2, #0, #4, #5)
    Join on=(#0 = #3) type=differential
      implementation
        %0:l0[#0]KA » %1:l0[#0]KA
      Get l0
      Get l0
With
  cte l0 =
    ArrangeBy keys=[[#0]]
      Get x

# tests single-input predicates properly get pushed out of join equivalences
# using different combinations of literals and non-literals with different multiplicities

opt
(join [(get x)] [[#0 #1 #2]])
----
Project (#0..=#2)
  Filter ((#0 = #1) OR (#3 AND #4)) AND ((#0 = #2) OR (#3 AND #5)) AND ((#1 = #2) OR (#4 AND #5))
    Map ((#0) IS NULL, (#1) IS NULL, (#2) IS NULL)
      Get x

opt
(join [(get x)] [[#0 #2 #1 #2]])
----
Project (#0..=#2)
  Filter ((#0 = #1) OR (#3 AND #4)) AND ((#0 = #2) OR (#3 AND #5)) AND ((#1 = #2) OR (#4 AND #5))
    Map ((#0) IS NULL, (#1) IS NULL, (#2) IS NULL)
      Get x

opt
(join [(get x)] [[#0 #1 5]])
----
Filter (#0 = 5) AND (#1 = 5)
  Get x

opt
(join [(get x)] [[5 #0 #1]])
----
Filter (#0 = 5) AND (#1 = 5)
  Get x

opt
(join [(get x) (get x)] [[5 #0 5 #3]])
----
Return
  CrossJoin type=differential
    implementation
      %0:l0[×]Aef » %1:l0[×]Aef
    Get l0
    Get l0
With
  cte l0 =
    ArrangeBy keys=[[]]
      Filter (#0 = 5)
        Get x

opt
(join [(get x) (get x)] [[5 9 #0 #3]])
----
Constant <empty>

# test that JoinImplementation properly lifts MapFilterProjects
# The choice of MFP in the test is arbitrary; to ensure that MFP lifting is
# being correctly tested, make sure that:
# * the optimized result has at least one Map, one Filter, and one Project
#   after the join.
# * the project reorders columns in some way.
# * the filter has at least one predicate that refers to a mapped column.

opt
(join
    [
        (project (filter (map (reduce (get x) [#0] [(sum_int32 #1)]) [(call_unary
    neg_int32 #1)]) [(call_binary lt #1 #2)])[#2 #1 #0])
        (get x)
    ]
    [[#2 #3]]
)
----
Project (#5, #1, #0, #0, #3, #4)
  Filter (#1 < #5)
    Map (-(#1))
      Join on=(#0 = #2) type=differential
        implementation
          %0[#0]UKAf » %1:x[#0]KAf
        ArrangeBy keys=[[#0]]
          Reduce group_by=[#0] aggregates=[sum(#1)]
            Project (#0, #1)
              Get x
        ArrangeBy keys=[[#0]]
          Get x

## MFPs don't get lifted if join is not using a pre-existing arrangement on that input.

opt
(join
    [
        (project (filter (map (get x) [(call_unary neg_int32 #1)]) [(call_binary
        lt #1 #0)])[#1 #3 #0])
        (reduce (get x) [#0] [(sum_int32 #1)])]
    [[#1 #3]]
)
----
Project (#1, #2, #0, #2, #4)
  Join on=(#2 = #3) type=differential
    implementation
      %1[#0]UKA » %0:x[#2]KAf
    ArrangeBy keys=[[#2]]
      Project (#0, #1, #3)
        Filter (#1 < #0)
          Map (-(#1))
            Get x
    ArrangeBy keys=[[#0]]
      Reduce group_by=[#0] aggregates=[sum(#1)]
        Project (#0, #1)
          Get x

## join equivalence references column created by map being lifted.

opt
(join
    [
        (project (filter (map (reduce (get x) [#0] [(sum_int32 #1)]) [(call_unary
    neg_int32 #1)]) [(call_binary lt #1 #2)])[#1 #2 #0])
        (get x)
        (reduce (get x) [#1] [(max_int32 #2)])
    ]
    [[#2 #3] [#1 #6]]
)
----
Project (#1, #2, #0, #0, #4, #5, #2, #7)
  Join on=(#0 = #3 AND #2 = #6) type=differential
    implementation
      %2[#0]UKA » %0[#2]KAf » %1:x[#0]KAf
    ArrangeBy keys=[[#2]]
      Filter (#1 < #2)
        Map (-(#1))
          Reduce group_by=[#0] aggregates=[sum(#1)]
            Project (#0, #1)
              Get x
    ArrangeBy keys=[[#0]]
      Get x
    ArrangeBy keys=[[#0]]
      Reduce group_by=[#0] aggregates=[max(#1)]
        Project (#1, #2)
          Get x
