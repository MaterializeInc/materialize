# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Test that the test runner can properly construct sources with keys
# and report on key information in plans

cat
(defsource x ([int32 int64 int32] [[0] [1]]))
----
ok

build format=types
(map (get x) [4145])
----
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Map 4145
| | types = (Int32?, Int64?, Int32?, Int64)
| | keys = ((#0), (#1))

# Run tests where a transform occuring depends on the input keys.

## Joins of the same input to itself on the key of the input can be converted
## into a project

opt format=types
(join [(get x) (get x)] [[#0 #3]])
----
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Project (#0..#2, #0..#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

steps format=types
(join [(get x) (get x)] [[#0 #3] [#2 #5]])
----
----
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%1 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%2 =
| Join %0 %1 (= #0 #3) (= #2 #5)
| | implementation = Unimplemented
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

====
No change: TopKElision, NonNullRequirements
====
Applied Fixpoint { transforms: [FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }:
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Project (#0..#2, #0..#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

====
No change: Fixpoint { transforms: [PredicatePushdown, NonNullable, ColumnKnowledge, Demand, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }, Fixpoint { transforms: [ReductionPushdown, ReduceElision, LiteralLifting, RelationCSE, InlineLet { inline_mfp: false }, UpdateLet, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }, ProjectionPushdown, UpdateLet, Map, Fixpoint { transforms: [Join, RedundantJoin, Project, Union, UnionBranchCancellation, RelationCSE, InlineLet { inline_mfp: true }], limit: 100 }, Fixpoint { transforms: [JoinImplementation, ColumnKnowledge, FoldConstants { limit: Some(10000) }, Demand, LiteralLifting], limit: 100 }, ReductionPushdown, CanonicalizeMfp
====
Applied RelationCSE:
%0 = Let l0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%1 = Let l1 =
| Get %0 (l0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Project (#0..#2, #0..#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%2 =
| Get %1 (l1)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

====
Applied InlineLet { inline_mfp: false }:
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Project (#0..#2, #0..#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

====
No change: UpdateLet, FoldConstants { limit: Some(10000) }
====
Final:
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| Project (#0..#2, #0..#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

====
----
----

opt format=types
(join [(get x) (get x)] [[#2 #5]])
----
----
%0 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))
| ArrangeBy (#2)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%1 =
| Get x (u0)
| | types = (Int32?, Int64?, Int32?)
| | keys = ((#0), (#1))

%2 =
| Join %0 %1 (= #2 #5)
| | implementation = Differential %1 %0.(#2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ()
| Project (#0..#4, #2)
| | types = (Int32?, Int64?, Int32?, Int32?, Int64?, Int32?)
| | keys = ()
----
----
