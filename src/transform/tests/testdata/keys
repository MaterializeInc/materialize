# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Test that the test runner can properly construct sources with keys
# and report on key information in plans

cat
(defsource x ([int64 int64 int64] [[0] [1]]))
----
ok

build format=types
(map (get x) [4145])
----
Map (4145) // { types: "(Int64?, Int64?, Int64?, Int64)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }

# Run tests where a transform occuring depends on the input keys.

## Joins of the same input to itself on the key of the input can be converted
## into a project

opt format=types
(join [(get x) (get x)] [[#0 #3]])
----
Project (#0..=#2, #0..=#2) // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }

steps format=types
(join [(get x) (get x)] [[#0 #3] [#2 #5]])
----
----
Join on=(#0 = #3 AND #2 = #5) // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }

====
No change: Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: false, strict_join_equivalences: true, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fixpoint { name: "normalize", transforms: [NormalizeLets { inline_mfp: false }, NormalizeOps], limit: 100 }, NonNullRequirements { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }
====
Applied Fixpoint { name: "fixpoint", transforms: [FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegateFusion, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }:
Project (#0..=#2, #0..=#2) // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }

====
No change: ThresholdElision, Fixpoint { name: "fixpoint", transforms: [PredicatePushdown { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, NonNullable, ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegateFusion, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }, Fixpoint { name: "fixpoint", transforms: [SemijoinIdempotence, ReductionPushdown, ReduceElision, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, RelationCSE { anf: ANF, normalize_lets: NormalizeLets { inline_mfp: false } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegateFusion, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }, Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: true, strict_join_equivalences: true, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, ProjectionPushdown, NormalizeLets { inline_mfp: false }, Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: true, strict_join_equivalences: true, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, Fixpoint { name: "fixpoint", transforms: [CanonicalizeMfp, ThresholdElision, Join, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, UnionNegateFusion, UnionBranchCancellation, RelationCSE { anf: ANF, normalize_lets: NormalizeLets { inline_mfp: true } }, FoldConstants { limit: Some(10000) }], limit: 100 }, Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: true, strict_join_equivalences: true, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: true, strict_join_equivalences: true, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fixpoint { name: "fixpoint", transforms: [ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }], limit: 100 }, LiteralConstraints, Fixpoint { name: "fix_joins", transforms: [JoinImplementation { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }], limit: 100 }, CanonicalizeMfp, RelationCSE { anf: ANF, normalize_lets: NormalizeLets { inline_mfp: false } }, FoldConstants { limit: Some(10000) }, ThresholdElision, Typecheck { ctx: RefCell { value: {} }, disallow_new_globals: true, strict_join_equivalences: false, recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }
====
Final:
Project (#0..=#2, #0..=#2) // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "([0], [1])" }
  Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }

====
----
----

opt format=types
(join [(get x) (get x)] [[#2 #5]])
----
Return // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "()" }
  Project (#0..=#4, #2) // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "()" }
    Join on=(#2 = #5) type=differential // { types: "(Int64?, Int64?, Int64?, Int64?, Int64?, Int64?)", keys: "()" }
      implementation
        %0:l0[#2]K Â» %1:l0[#2]K
      Get l0 // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }
      Get l0 // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }
With
  cte l0 =
    ArrangeBy keys=[[#2]] // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }
      Get x // { types: "(Int64?, Int64?, Int64?)", keys: "([0], [1])" }
