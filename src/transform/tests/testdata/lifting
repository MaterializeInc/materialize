# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int32 int64])
----
ok

cat
(defsource y [int64 int64])
----
ok

# Discard literals that are not projected.
build apply=LiteralLifting
(project
  (map (get x) [1 2 3 4])
  [#5 #3])
----
%0 =
| Get x (u0)
| Map 2, 4
| Project (#3, #2)

build
(project
  (map (get x) [1 2 3])
  [#3 #3])
----
%0 =
| Get x (u0)
| Map 1, 2, 3
| Project (#3, #3)

build apply=LiteralLifting
(project
  (map (get x) [1 2 3])
  [#3 #3])
----
%0 =
| Get x (u0)
| Map 2
| Project (#2, #2)

build apply=LiteralLifting
(project
  (map (get x) [1 2 3])
  [#3 #4 #3])
----
%0 =
| Get x (u0)
| Map 2, 3
| Project (#2, #3, #2)

# Merge nested Map operators within a Project
build apply=LiteralLifting
(project
  (map (map (get x) [1]) [2])
  [#2 #3])
----
%0 =
| Get x (u0)
| Map 1, 2
| Project (#2, #3)

# Map: Permute columns to put literals at the end
build apply=LiteralLifting
(project
  (map (map (get x) [1 #0 2]) [3 #2 4])
  [#3 #6])
----
%0 =
| Get x (u0)
| Map #0, 1
| Project (#0, #1, #3, #2)
| Map #2, 2, 3
| Project (#0..=#3, #5, #6, #4)
| Project (#3, #6)


build apply=(LiteralLifting,ProjectionLifting,LiteralLifting)
(project
  (map (map (get x) [1 #0 2]) [3 #2 4])
  [#3 #6])
----
%0 =
| Get x (u0)
| Map #0, 1, 1
| Project (#0..=#2, #4, #3)
| Project (#2, #4)

opt
(project
  (map (map (get x) [1 #0 2]) [3 #2 4])
  [#3 #6])
----
%0 =
| Get x (u0)
| Map 1
| Project (#0, #2)

# Extract common values in all rows in Constant operator
build
(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
----
%0 =
| Constant (1, 2, 3) (1, 4, 3)

build apply=LiteralLifting
(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
----
%0 =
| Constant (2) (4)
| Map 1
| Project (#1, #0)
| Map 3

build apply=LiteralLifting
(union
  [(constant [[1 2 3] [2 4 3]] [int64 int64 int64])
   (constant [[3 2 3] [4 4 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (1, 2) (2, 4)

%1 =
| Constant (3, 2) (4, 4)

%2 =
| Union %0 %1
| Map 3
----
----

build apply=LiteralLifting
(union
  [(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
   (constant [[1 2 3] [1 4 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (2) (4)
| Map 1
| Project (#1, #0)

%1 =
| Constant (2) (4)
| Map 1
| Project (#1, #0)

%2 =
| Union %0 %1
| Map 3
----
----

build apply=(LiteralLifting,ProjectionLifting,LiteralLifting)
(union
  [(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
   (constant [[1 2 3] [1 4 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (2) (4)

%1 =
| Constant (2) (4)

%2 =
| Union %0 %1
| Map 1, 3
| Project (#1, #0, #2)
----
----

build apply=LiteralLifting
(union
  [(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
   (constant [[2 2 3] [2 4 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (2) (4)
| Map 1
| Project (#1, #0)

%1 =
| Constant (2) (4)
| Map 2
| Project (#1, #0)

%2 =
| Union %0 %1
| Map 3
----
----

build apply=(LiteralLifting,ProjectionLifting,LiteralLifting)
(union
  [(constant [[1 2 3] [1 4 3]] [int64 int64 int64])
   (constant [[2 2 3] [2 4 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (2) (4)
| Map 1

%1 =
| Constant (2) (4)
| Map 2

%2 =
| Union %0 %1
| Map 3
| Project (#1, #0, #2)
----
----

build apply=(LiteralLifting)
(union
  [(constant [[1 2 3] [2 2 3]] [int64 int64 int64])
   (constant [[4 3 3] [4 5 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (1) (2)
| Map 2

%1 =
| Constant (3) (5)
| Map 4
| Project (#1, #0)

%2 =
| Union %0 %1
| Map 3
----
----

build apply=(LiteralLifting,ProjectionLifting,LiteralLifting)
(union
  [(constant [[1 2 3] [2 2 3]] [int64 int64 int64])
   (constant [[4 3 3] [4 5 3]] [int64 int64 int64])])
----
----
%0 =
| Constant (1) (2)
| Map 2

%1 =
| Constant (3) (5)
| Map 4
| Project (#1, #0)

%2 =
| Union %0 %1
| Map 3
----
----

# Union: literals in the suffix in all branches are lifted...
build apply=LiteralLifting
(union
  [(project
     (map (get x) [2 1])
     [#0 #3 #2])
   (project
     (map (get x) [1 2])
     [#0 #2 #3])])
----
----
%0 =
| Get x (u0)
| Map 2, 1
| Project (#0, #3, #2)

%1 =
| Get x (u0)
| Map 1, 2
| Project (#0, #2, #3)

%2 =
| Union %0 %1
----
----

# .. but other common literals are not lifted by LiteralLifting...
build apply=LiteralLifting
(union
  [(project
     (map (get x) [1])
     [#2 #0])
   (project
     (map (get x) [1])
     [#2 #0])])
----
----
%0 =
| Get x (u0)
| Map 1
| Project (#2, #0)

%1 =
| Get x (u0)
| Map 1
| Project (#2, #0)

%2 =
| Union %0 %1
----
----

# ... however, they eventually get lifted as a result of the following transformations
build apply=(ProjectionLifting,LiteralLifting)
(union
  [(project
     (map (get x) [1])
     [#2 #0])
   (project
     (map (get x) [1])
     [#2 #0])])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Union %0 %1
| Map 1
| Project (#2, #0)
----
----

opt
(union
  [(project
     (map (get y) [1])
     [#2 #0])
   (project
     (map (get y) [1])
     [#2 #1])])
----
----
%0 = Let l0 =
| Get y (u1)
| Map 1

%1 =
| Get %0 (l0)
| Project (#2, #0)

%2 =
| Get %0 (l0)
| Project (#2, #1)

%3 =
| Union %1 %2
----
----

build format=types apply=LiteralLifting
(constant [[1 2 3] [1 4 3]] ([int64 int64 int64] [[1 2]]))
----
%0 =
| Constant (2) (4)
| | types = (Int64?)
| | keys = ((#0))
| Map 1
| | types = (Int64?, Int64)
| | keys = ((#0))
| Project (#1, #0)
| | types = (Int64, Int64?)
| | keys = ((#1))
| Map 3
| | types = (Int64, Int64?, Int64)
| | keys = ((#1))
