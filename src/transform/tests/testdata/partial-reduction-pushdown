# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Tests for partial reduction pushdown to constant inputs.
#
# TODO: Implement support for partial reduction pushdown.
# The general idea was discussed in
# https://github.com/MaterializeInc/materialize/issues/10119, but we
# decided that we need to spend more time on formalizing the proposed
# approach, to ensure it is actually correct. Until we have done so,
# the tests here only exercise the non-partial reduction pushdown
# optimization and are mostly equivalent to the tests in
# `reduction-pushdown`.

cat
(defsource w [int16 int32])
(defsource x [int32 string])
(defsource y ([int16 string] [[1]]))
(defsource z [int16 string])
----
ok

# Distinct Pushdown tests

build apply=ReductionPushdown
(reduce (join [(get x) (constant [] [int32 string])] [[#1 #3]]) [#1] [])
----
Project (#0)
  Join on=(#0 = #1)
    Distinct group_by=[#1]
      Get x
    Distinct group_by=[#1]
      Constant <empty>

## distinct(<multiple columns from same input>)

build apply=ReductionPushdown
(reduce (join [(constant [] [int32 string]) (get y)] [[#1 #3]]) [#0 #1] [])
----
Project (#0, #1)
  Join on=(#1 = #2)
    Distinct group_by=[#0, #1]
      Constant <empty>
    Distinct group_by=[#1]
      Get y

## distinct(<multiple columns from differing inputs>)

build apply=ReductionPushdown
(reduce (join [(get x) (constant [] [int32 string])] [[#1 #3]]) [#0 #1 #2] [])
----
Project (#0, #1, #3)
  Join on=(#1 = #2)
    Distinct group_by=[#0, #1]
      Get x
    Distinct group_by=[#1, #0]
      Constant <empty>

## Negative test: Perform a full reduction pushdown
## if all inputs are constant

build apply=ReductionPushdown
(reduce
    (join [(constant [] [int32 string]) (constant [] [int32 string])] [[#1 #3]])
    [#1]
    [])
----
Project (#0)
  Join on=(#0 = #1)
    Distinct group_by=[#1]
      Constant <empty>
    Distinct group_by=[#1]
      Constant <empty>

## Expressions in join equivalence classes

build apply=ReductionPushdown
(reduce
    (join [(constant [] [int32 string]) (get y)] [[(call_variadic substr [#1 5]) #3]])
    [#3]
    [])
----
Project (#1)
  Join on=(#0 = #1)
    Distinct group_by=[substr(#1, 5)]
      Constant <empty>
    Distinct group_by=[#1]
      Get y

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string])]
        [[(call_variadic substr [#1 5]) #3]])
    [(call_variadic substr [#1 5])]
    [])
----
Project (#0)
  Join on=(#0 = #1)
    Distinct group_by=[substr(#1, 5)]
      Get x
    Distinct group_by=[#1]
      Constant <empty>

### Negative test: Do not do reduction pushdown
### if there are multi-component expressions in the join equivalence

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string])]
        [[(call_variadic substr [#1 5]) (call_binary text_concat #1 #3)]])
    [(call_variadic substr [#1 5])]
    [])
----
Distinct group_by=[substr(#1, 5)]
  Join on=(substr(#1, 5) = (#1 || #3))
    Get x
    Constant <empty>

build apply=ReductionPushdown
(reduce
    (join [(constant [] [int32 string]) (get y)]
        [[(call_variadic substr [#1 5]) #3]
         [(call_binary text_concat #1 #3) "hello"]])
    [(call_variadic substr [#1 5])]
    [])
----
Distinct group_by=[substr(#1, 5)]
  Join on=(substr(#1, 5) = #3 AND (#1 || #3) = "hello")
    Constant <empty>
    Get y

### Negative test: multi-input expression in group by key

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string])]
        [[(call_binary text_concat #1 #3) "hello"]])
    [(call_binary text_concat #1 #3)]
    [])
----
Distinct group_by=[(#1 || #3)]
  Join on=((#1 || #3) = "hello")
    Get x
    Constant <empty>

## Distinct pushdown across more than two inputs
## Make sure no cross joins happen.

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y) (constant [] [int32 string] y)] [[#1 #3 #5]])
    [#1]
    [])
----
Project (#0)
  Join on=(eq(#0, #1, #2))
    Distinct group_by=[#1]
      Get x
    Distinct group_by=[#1]
      Get y
    Distinct group_by=[#1]
      Constant <empty>

build apply=ReductionPushdown
(reduce
    (join
        [(get x) (constant [] [int32 string]) (constant [] [string int32])]
        [[#1 #3] [#2 #4]])
    [#1 #5]
    [])
----
Project (#0, #2)
  Join on=(#0 = #1)
    Distinct group_by=[#1]
      Get x
    Distinct group_by=[#1, #3]
      Join on=(#0 = #2)
        Constant <empty>
        Constant <empty>

### Negative test: Perform a full pushdown
### if each sub-join is non-constant

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string]) (get z)] [[#0 #2] [#1 #5]])
    [#3 #5]
    [])
----
Project (#0, #2)
  Join on=(#1 = #2)
    Distinct group_by=[#3, #1]
      Join on=(#0 = #2)
        Get x
        Constant <empty>
    Distinct group_by=[#1]
      Get z

## Cross join tests

build apply=ReductionPushdown
(reduce (join [(constant [] [int32 string]) (get y) (get z)] [[#3 #5]]) [#5] [])
----
Project (#1)
  Join on=(#0 = #1)
    Distinct
      Constant <empty>
    Distinct group_by=[#1]
      Get y
    Distinct group_by=[#1]
      Get z

build apply=ReductionPushdown
(reduce (join [(constant [] [int32 string]) (get y) (get z)] [[#3 #5]]) [#0] [])
----
Project (#0)
  CrossJoin
    Distinct group_by=[#0]
      Constant <empty>
    Distinct
      Join on=(#1 = #3)
        Get y
        Get z

# Pushdown agg(distinct <single-input-expression>)

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string])] [[#1 #3]])
    [#1]
    [(sum_int32 #0 true)])
----
Project (#0, #1)
  Join on=(#0 = #2)
    Reduce group_by=[#1] aggregates=[sum(distinct #0)]
      Get x
    Distinct group_by=[#1]
      Constant <empty>

build apply=ReductionPushdown
(reduce
    (join [(get x) (constant [] [int32 string]) (get z)] [[#1 #3]])
    [#3]
    [(sum_int16 #2 true)])
----
Project (#1, #2)
  Join on=(#0 = #1)
    Distinct group_by=[#1]
      Get x
    Reduce group_by=[#1] aggregates=[sum(distinct #0)]
      Constant <empty>
    Distinct
      Get z

build apply=ReductionPushdown
(reduce
    (join
        [(constant [] [int32 string]) (constant [] [int32 string]) (get z)]
        [[#1 #3 #5]])
    [#3]
    [(sum_int32 (call_unary neg_int32 #0) true) (sum_int16 #2 true)])
----
Project (#2, #1, #3)
  Join on=(eq(#0, #2, #4))
    Reduce group_by=[#1] aggregates=[sum(distinct -(#0))]
      Constant <empty>
    Reduce group_by=[#1] aggregates=[sum(distinct #0)]
      Constant <empty>
    Distinct group_by=[#1]
      Get z

# Pushdown agg(distinct <single-component multi-input expression>)

build apply=ReductionPushdown
(reduce
    (join
        [(constant [] [int32 string])
         (constant [] [int32 string])
         (constant [] [int32 string])
         (get w)]
        [[#1 #3 #5] [#4 #6]])
    [#6]
    [(sum_int32 (call_binary add_int32 #0 (call_unary cast_int16_to_int32 #2)) true)
     (sum_int16 (call_binary mul_int16 #2 #4) true)])
----
Project (#3, #1, #2)
  Join on=(#0 = #3)
    Reduce group_by=[#4] aggregates=[sum(distinct (#0 + smallint_to_integer(#2))), sum(distinct (#2 * #4))]
      Join on=(eq(#1, #3, #5))
        Constant <empty>
        Constant <empty>
        Constant <empty>
    Distinct group_by=[#0]
      Get w
