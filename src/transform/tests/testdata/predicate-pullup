# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64])
----
ok

# Let/Get
build apply=PredicatePullup
(let x
  (filter
    (constant
      [[1 2 3]
       [4 5 6]]
      [int64 int64 int64])
    [#0])
   (get x))
----
----
%0 = Let l0 =
| Constant (1, 2, 3) (4, 5, 6)

%1 =
| Get %0 (l0)
| Filter #0
----
----

# Filter

build apply=PredicatePullup
(filter
  (filter
    (get x)
    [(call_binary eq #0 #1)])
  [(call_binary eq #0 1)])
----
%0 =
| Get x (u0)
| Filter (#0 = #1), (#0 = 1)

# Map

build apply=PredicatePullup
(map
  (filter
    (get x)
    [(call_binary eq #0 #1)])
  [3])
----
%0 =
| Get x (u0)
| Map 3
| Filter (#0 = #1)

# TODO map with literal error

# Project

build apply=PredicatePullup
(project
  (filter
    (get x)
    [(call_binary eq #0 #1) (call_binary not_eq #1 10) (call_binary not_eq #0 10)])
  [1])
----
%0 =
| Get x (u0)
| Filter (#0 = #1), (#0 != 10)
| Project (#1)
| Filter (#0 != 10)

# Reduce

build apply=PredicatePullup
(reduce
  (filter
    (get x)
    [(call_binary eq #0 #1) (call_binary not_eq #1 10) (call_binary not_eq #0 20)])
  [#1]
  [])
----
%0 =
| Get x (u0)
| Filter (#0 = #1), (#0 != 20)
| Distinct group=(#1)
| Filter (#0 != 10)

# Join

build apply=PredicatePullup
(join
  [(filter
    (get x)
    [(call_binary eq #0 #1)])
   (get x)]
  [[#0 #3]])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 #3)
| | implementation = Unimplemented
| Filter (#0 = #1)
----
----

build apply=PredicatePullup
(join
  [(filter
    (get x)
    [(call_binary eq #0 #1)])
  (filter
    (get x)
    [(call_binary not_eq #0 #1)])]
  [[#0 #3]])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 #3)
| | implementation = Unimplemented
| Filter (#0 = #1), (#2 != #3)
----
----

# Union
build apply=PredicatePullup
(union
  [(filter
    (get x)
    [(call_binary eq #0 #1)])
  (filter
    (get x)
    [(call_binary not_eq #0 #1)])])
----
----
%0 =
| Get x (u0)
| Filter (#0 = #1)

%1 =
| Get x (u0)
| Filter (#0 != #1)

%2 =
| Union %0 %1
----
----

build apply=PredicatePullup
(union
  [(filter
    (get x)
    [(call_binary eq #0 #1)])
  (filter
    (get x)
    [(call_binary eq #0 #1)])])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Union %0 %1
| Filter (#0 = #1)
----
----

build apply=PredicatePullup
(union
  [(filter
    (get x)
    [(call_binary eq #0 #1) (call_binary eq #1 10)])
  (filter
    (get x)
    [(call_binary eq #0 #1) (call_binary eq #1 20)])])
----
----
%0 =
| Get x (u0)
| Filter (#1 = 10)

%1 =
| Get x (u0)
| Filter (#1 = 20)

%2 =
| Union %0 %1
| Filter (#0 = #1)
----
----

build apply=PredicatePullup
(union
  [(filter
    (get x)
    [(call_binary eq #0 #1) (call_binary eq #1 10)])
    (get x)])
----
----
%0 =
| Get x (u0)
| Filter (#0 = #1), (#1 = 10)

%1 =
| Get x (u0)

%2 =
| Union %0 %1
----
----

# Negate

build apply=PredicatePullup
(union
  [(filter
    (get x)
    [(call_binary eq #0 #1)])
   (negate
     (filter
       (get x)
       [(call_binary eq #0 #1)]))])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)
| Negate

%2 =
| Union %0 %1
| Filter (#0 = #1)
----
----

# FlatMap

# TODO update this test once #7617 is fixed
build apply=PredicatePullup
(flat_map (filter (get x) [(call_binary eq #0 #1)]) generate_series_int32 [0 200])
----
%0 =
| Get x (u0)
| Filter (#0 = #1)
| FlatMap generate_series(0, 200)

build apply=(PredicatePullup,PredicatePushdown)
(flat_map (filter (get x) [(call_binary eq #0 #1)]) generate_series_int32 [0 200])
----
%0 =
| Get x (u0)
| Filter (#0 = #1)
| FlatMap generate_series(0, 200)

# PredicatePullup + RedundantJoin

cat
(defsource y ([int64 int64] [[0]]))
----
ok

build apply=RedundantJoin
(join
  [(filter
    (get y)
    [(call_binary eq #1 1)])
   (filter
    (get y)
    [(call_binary eq #1 1)])]
  [[#0 #2]])
----
----
%0 =
| Get y (u1)
| Filter (#1 = 1)

%1 =
| Get y (u1)
| Filter (#1 = 1)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
----
----

build apply=(PredicatePullup,RedundantJoin)
(join
  [(filter
    (get y)
    [(call_binary eq #1 1)])
   (filter
    (get y)
    [(call_binary eq #1 1)])]
  [[#0 #2]])
----
----
%0 =
| Get y (u1)

%1 =
| Join %0
| | implementation = Unimplemented
| Project (#0, #1, #0, #1)
| Filter (#1 = 1), (#3 = 1)
----
----

build apply=(PredicatePullup,RedundantJoin,JoinFusion)
(join
  [(filter
    (get y)
    [(call_binary eq #1 1)])
   (filter
    (get y)
    [(call_binary eq #1 1)])]
  [[#0 #2]])
----
%0 =
| Get y (u1)
| Project (#0, #1, #0, #1)
| Filter (#1 = 1), (#3 = 1)
