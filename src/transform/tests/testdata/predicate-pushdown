# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64])
----
ok

# check that equivalences involving runtime constants can be pushed down

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 (call_unmaterializable mz_logical_timestamp)]])
----
----
%0 =
| Get x (u0)
| Filter (#1 = mz_logical_timestamp())

%1 =
| Get x (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
----
----

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 #3 (call_unmaterializable mz_logical_timestamp)]])
----
----
%0 =
| Get x (u0)
| Filter (#1 = mz_logical_timestamp())

%1 =
| Get x (u0)
| Filter (#1 = mz_logical_timestamp())

%2 =
| Join %0 %1
| | implementation = Unimplemented
----
----

# Join equivalence with several runtime constants

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 1 (call_unmaterializable mz_logical_timestamp)]])
----
----
%0 =
| Get x (u0)
| Filter (#1 = 1), (#1 = mz_logical_timestamp())

%1 =
| Get x (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
----
----

# Check that equality filters with runtime constants don't get stuck in the join

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary eq #1 (call_unmaterializable mz_logical_timestamp))])
----
----
%0 =
| Get x (u0)
| Filter (#1 = mz_logical_timestamp()), !(isnull(#1))

%1 =
| Get x (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
----
----

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary eq (call_unmaterializable mz_logical_timestamp) #1)])
----
----
%0 =
| Get x (u0)
| Filter (#1 = mz_logical_timestamp()), !(isnull(#1))

%1 =
| Get x (u0)

%2 =
| Join %0 %1
| | implementation = Unimplemented
----
----

# extract_equal_or_both_null

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary or
     (call_binary and (call_unary is_null #0) (call_unary is_null #2))
     (call_binary eq #0 (call_binary add_int_64 #2 1))
    )])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 (#2 + 1))
| | implementation = Unimplemented
----
----

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary or
     (call_binary and (call_unary is_null #0) (call_unary is_null (call_binary add_int_64 #2 1)))
     (call_binary eq #0 (call_binary add_int_64 #2 1))
    )])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 (#2 + 1))
| | implementation = Unimplemented
----
----

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary or
     (call_binary and (call_unary is_null #0) (call_binary and (call_unary is_null #2) (call_unary is_null #0)))
     (call_binary eq #0 #2)
    )])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
----
----

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary or
     (call_binary and (call_unary is_null #0) (call_binary and (call_unary is_null #2) (call_unary is_null #0)))
     (call_binary eq #0 (call_binary add_int_64 #2 1))
    )])
----
----
%0 =
| Get x (u0)

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 (#2 + 1))
| | implementation = Unimplemented
----
----

# Push down filter predicates through FlatMap operators

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary eq #0 #1)]
)
----
%0 =
| Get x (u0)
| Filter (#0 = #1)
| FlatMap generate_series(#0)

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary eq #0 #2)]
)
----
%0 =
| Get x (u0)
| FlatMap generate_series(#0)
| Filter (#0 = #2)

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary gt #0 #1) (call_binary lt #1 #2)]
)
----
%0 =
| Get x (u0)
| Filter (#0 > #1)
| FlatMap generate_series(#0)
| Filter (#1 < #2)
