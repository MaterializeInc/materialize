# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64])
----
ok

# check that equivalences involving runtime constants can be pushed down

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 (call_unmaterializable mz_now)]])
----
CrossJoin
  Filter (#1 = mz_now())
    Get x
  Get x

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 #3 (call_unmaterializable mz_now)]])
----
CrossJoin
  Filter (#1 = mz_now())
    Get x
  Filter (#1 = mz_now())
    Get x

# Join equivalence with several runtime constants

build apply=PredicatePushdown
(join
  [(get x)
   (get x)]
  [[#1 1 (call_unmaterializable mz_now)]])
----
CrossJoin
  Filter (#1 = 1) AND (#1 = mz_now())
    Get x
  Get x

# Check that equality filters with runtime constants don't get stuck in the join

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary eq #1 (call_unmaterializable mz_now))])
----
CrossJoin
  Filter (#1) IS NOT NULL AND (#1 = mz_now())
    Get x
  Get x

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_binary eq (call_unmaterializable mz_now) #1)])
----
CrossJoin
  Filter (#1) IS NOT NULL AND (#1 = mz_now())
    Get x
  Get x

# extract_equal_or_both_null

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_variadic or [
     (call_variadic and [(call_unary is_null #0) (call_unary is_null #2)])
     (call_binary eq #0 (call_binary add_int_64 #2 1))]
    )])
----
Join on=(#0 = (#2 + 1))
  Get x
  Get x

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_variadic or [
     (call_binary eq #0 (call_binary add_int_64 #2 1))
     (call_variadic and [(call_unary is_null #0) (call_unary is_null (call_binary add_int_64 #2 1))])]
    )])
----
Join on=(#0 = (#2 + 1))
  Get x
  Get x

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_variadic or [
     (call_variadic and [(call_unary is_null #0) (call_variadic and [(call_unary is_null #2) (call_unary is_null #0)])])
     (call_binary eq #0 #2)]
    )])
----
Join on=(#0 = #2)
  Get x
  Get x

build apply=PredicatePushdown
(filter
  (join
    [(get x)
     (get x)]
    [])
  [(call_variadic or [
     (call_variadic and [(call_unary is_null #0) (call_variadic and [(call_unary is_null #2) (call_unary is_null #0)])])
     (call_binary eq #0 (call_binary add_int_64 #2 1))]
    )])
----
Join on=(#0 = (#2 + 1))
  Get x
  Get x

# Push down filter predicates through FlatMap operators

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary eq #0 #1)]
)
----
FlatMap generate_series(#0)
  Filter (#0 = #1)
    Get x

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary eq #0 #2)]
)
----
Filter (#0 = #2)
  FlatMap generate_series(#0)
    Get x

build apply=PredicatePushdown
(filter
  (flat_map
    (get x)
    generate_series_int32
    [#0]
  )
  [(call_binary gt #0 #1) (call_binary lt #1 #2)]
)
----
Filter (#1 < #2)
  FlatMap generate_series(#0)
    Filter (#0 > #1)
      Get x

build apply=PredicatePushdown
(filter
  (threshold
    (union [
      (get x)
      (negate
        (filter (get x) [(call_binary lt #0 (7 Int64))]))]))
  [(call_binary gt #0 #1)]
)
----
Threshold
  Union
    Filter (#0 > #1)
      Get x
    Negate
      Filter (#0 < 7) AND (#0 > #1)
        Get x

build apply=PredicatePushdown
(filter
  (reduce
    (constant [[0 1][0 2]] [int32 int32])
    [#0] [(count true false)])
  [(call_binary gt #0 5)]
)
----
Reduce group_by=[#0] aggregates=[count(*)]
  Filter (#0 > 5)
    Constant
      - (0, 1)
      - (0, 2)

build apply=PredicatePushdown
(filter
  (top_k
    (constant [["a" 1]["b" 2]] [string int32])
    [#1] [(#1 true)] 1 0)
  [(call_binary gt #1 5)]
)
----
TopK group_by=[#1] order_by=[#1 desc nulls_first] limit=1 monotonic=false
  Filter (#1 > 5)
    Constant
      - ("a", 1)
      - ("b", 2)
