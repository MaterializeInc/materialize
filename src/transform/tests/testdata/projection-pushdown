# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

build apply=ProjectionPushdown
(project (constant [[1 3 4] [2 5 6]] [int32 int32 int32]) [2 1 0])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#2, #1, #0)

# Project around a project

build apply=ProjectionPushdown
(project
    (project
        (map (constant [[1 3 4] [2 5 6]] [int32 int32 int32]) [7])
        [0 2 1])
    [2 1 1 0])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Map
| Project (#0, #2, #1)
| Project (#2, #1, #1, #0)

# Project around a filter

build apply=ProjectionPushdown
(project
    (filter
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary eq #0 #2)]
    )
    [2 2]
)
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#0, #2)
| Filter (#0 = #1)
| Project (#1)
| Project (#0, #0)

build apply=ProjectionPushdown
(project
    (filter
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_unary is_null #2)]
    )
    [#1]
)
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#1, #2)
| Filter isnull(#1)
| Project (#0)

# Project around a map
build apply=ProjectionPushdown
(project
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #0) 7])
    [3])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#0, #1)
| Map (#1 + #0)
| Project (#2)

# Project around a column where a scalar refers to another fellow member of `scalars`
build apply=ProjectionPushdown
(project
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #0) 7 (call_binary add_int32 #4 7)])
    [3 5 5 5 3])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#0, #1)
| Map (#1 + #0), 7, (#3 + 7)
| Project (#2, #4)
| Project (#0, #1, #1, #1, #0)

# Projection pushdown causes elimination of unnecessary map scalars

build apply=ProjectionPushdown
(project
    (filter
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #2) 7])
        [(call_binary gte #2 #1)])
    [3])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#1, #2)
| Map (#0 + #1)
| Filter (#1 >= #0)
| Project (#2)

build apply=ProjectionPushdown
(project
    (map
        (reduce
            (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
            [#0]
            [(sum_int32 #1)])
        ["dummy"])
    [#2 #1 #0])
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Project (#0, #1)
| Reduce group=(#0)
| | agg sum(#1)
| Map "dummy"
| Project (#2, #1, #0)

cat
(defsource x [int32 int32 int32])
(defsource y [int32 int32 int32])
----
ok

# Project around a join

build apply=ProjectionPushdown
(project
    (join
        [(filter
            (map
                (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
                [(call_binary add_int32 #1 #2) 7])
            [(call_binary gte #2 #1)])
        (get x)]
        [[#0 #5]])
    [3])
----
----
%0 =
| Constant (1, 3, 4) (2, 5, 6)
| Map (#1 + #2)
| Filter (#2 >= #1)
| Project (#0, #3)

%1 =
| Get x (u0)
| Project (#0)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Project (#1)
----
----

# Query not using the columns newly created by FlatMap

build apply=ProjectionPushdown
(project (flat_map (get x) generate_series_int32 [#0 #2 1]) [#1])
----
%0 =
| Get x (u0)
| FlatMap generate_series(#0, #2, 1)
| Project (#1)

#Query using the columns newly created by FlatMap

build apply=ProjectionPushdown
(project (flat_map (get x) generate_series_int32 [#0 #2 1]) [#3])
----
%0 =
| Get x (u0)
| Project (#0, #2)
| FlatMap generate_series(#0, #1, 1)
| Project (#2)

# Project around a union

build apply=ProjectionPushdown
(project (union [(get x) (get y)]) [#1 #0])
----
----
%0 =
| Get x (u0)
| Project (#1, #0)

%1 =
| Get y (u1)
| Project (#1, #0)

%2 =
| Union %0 %1
----
----

build apply=ProjectionPushdown
(project (union [(get x) (get y)]) [#1 #1])
----
----
%0 =
| Get x (u0)
| Project (#1)

%1 =
| Get y (u1)
| Project (#1)

%2 =
| Union %0 %1
| Project (#0, #0)
----
----

# Project around a negate

build apply=ProjectionPushdown
(project
    (union [
        (get x)
        (negate (filter (get x) [(call_binary eq #1 1)]))
    ])
    [#0 #2]
)
----
----
%0 =
| Get x (u0)
| Project (#0, #2)

%1 =
| Get x (u0)
| Filter (#1 = 1)
| Project (#0, #2)
| Negate

%2 =
| Union %0 %1
----
----

# Project around a DeclareKeys

build apply=ProjectionPushdown
(project (declare_keys (get x) [[#0] [#1]]) [#1])
----
%0 =
| Get x (u0)
| Project (#1)
| Declare primary keys (1)

build apply=ProjectionPushdown
(project (declare_keys (get x) [[#0]]) [#1])
----
%0 =
| Get x (u0)
| Project (#1)

# Project around an ArrangeBy

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#2])
----
%0 =
| Get x (u0)
| ArrangeBy (#0) (#1)
| Project (#2)

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#1])
----
%0 =
| Get x (u0)
| ArrangeBy (#0) (#1)
| Project (#1)

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#1 #0])
----
%0 =
| Get x (u0)
| ArrangeBy (#0) (#1)
| Project (#1, #0)

# Project around a Reduce

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [(call_binary add_int32 #0 #2)]
        [(sum_int32 #1)]
        )
    [])
----
%0 =
| Get x (u0)
| Project (#0, #2)
| Distinct group=((#0 + #1))
| Project ()

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [#0]
        [(sum_int32 (call_binary mul_int32 #0 #2))]
        )
    [#1])
----
%0 =
| Get x (u0)
| Project (#0, #2)
| Reduce group=(#0)
| | agg sum((#0 * #1))
| Project (#1)

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [#0]
        [(sum_int32 (call_binary mul_int32 #0 #2))]
        )
    [#1 #0])
----
%0 =
| Get x (u0)
| Project (#0, #2)
| Reduce group=(#0)
| | agg sum((#0 * #1))
| Project (#1, #0)

# Project around a TopK

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        [#0]
        [#1 #2]
        )
    [#2 #2 #2])
----
%0 =
| Get x (u0)
| TopK group=(#0) order=(#1 asc, #2 asc) offset=0
| Project (#2)
| Project (#0, #0, #0)

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        []
        [#1]
        )
    [#2 #2])
----
%0 =
| Get x (u0)
| Project (#1, #2)
| TopK group=() order=(#0 asc) offset=0
| Project (#1)
| Project (#0, #0)

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        [#2]
        [#1]
        )
    [#2 #1])
----
%0 =
| Get x (u0)
| Project (#2, #1)
| TopK group=(#0) order=(#1 asc) offset=0

# Project in a Let

build apply=ProjectionPushdown
(let z
    (join [(get x) (get y)] [[#0 #3]])
    (project
        (join
            [(get z) (get z)]
            [[#0 #8]]
        )
        [#5]
    )
)
----
----
%0 =
| Get x (u0)
| Project (#0, #2)

%1 =
| Get y (u1)
| Project (#0, #2)

%2 = Let l0 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)

%3 =
| Get %2 (l0)
| Project (#0, #2)

%4 =
| Get %2 (l0)
| Project (#1)

%5 =
| Join %3 %4 (= #0 #2)
| | implementation = Unimplemented
| Project (#1)
----
----

build apply=ProjectionPushdown
(let z
    (join [(get x) (get y)] [[#0 #3]])
    (project
        (join
            [(get z) (get z)]
            [[#0 #8]]
        )
        [#2]
    )
)
----
----
%0 =
| Get x (u0)
| Project (#0, #2)

%1 =
| Get y (u1)
| Project (#0)

%2 = Let l0 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1)

%3 =
| Get %2 (l0)
| Project (#1)

%4 =
| Join %2 %3 (= #0 #2)
| | implementation = Unimplemented
| Project (#1)
----
----

build apply=ProjectionPushdown
(let z
    (map (get x) [(1 int32)])
    (union
        [
            (project (join [(get z) (get y)] [[#0 #4]]) [#0 #4 #5 #6])
            (project (get z) [#0 #1 #0 #3])
        ]
    )
)
----
----
%0 = Let l0 =
| Get x (u0)
| Project (#0, #1)
| Map 1

%1 =
| Get %0 (l0)
| Project (#0)

%2 =
| Get y (u1)

%3 =
| Join %1 %2 (= #0 #1)
| | implementation = Unimplemented

%4 =
| Get %0 (l0)
| Project (#0, #1, #0, #2)

%5 =
| Union %3 %4
----
----
