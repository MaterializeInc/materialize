# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

build apply=ProjectionPushdown
(project (constant [[1 3 4] [2 5 6]] [int32 int32 int32]) [2 1 0])
----
Project (#2, #1, #0)
  Constant
    - (1, 3, 4)
    - (2, 5, 6)

# Project around a project

build apply=ProjectionPushdown
(project
    (project
        (map (constant [[1 3 4] [2 5 6]] [int32 int32 int32]) [7])
        [0 2 1])
    [2 1 1 0])
----
Project (#2, #1, #1, #0)
  Project (#0, #2, #1)
    Map ()
      Constant
        - (1, 3, 4)
        - (2, 5, 6)

# Project around a filter

build apply=ProjectionPushdown
(project
    (filter
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary eq #0 #2)]
    )
    [2 2]
)
----
Project (#0, #0)
  Project (#1)
    Filter (#0 = #1)
      Project (#0, #2)
        Constant
          - (1, 3, 4)
          - (2, 5, 6)

build apply=ProjectionPushdown
(project
    (filter
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_unary is_null #2)]
    )
    [#1]
)
----
Project (#0)
  Filter (#1) IS NULL
    Project (#1, #2)
      Constant
        - (1, 3, 4)
        - (2, 5, 6)

# Project around a map
build apply=ProjectionPushdown
(project
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #0) 7])
    [3])
----
Project (#2)
  Map ((#1 + #0))
    Project (#0, #1)
      Constant
        - (1, 3, 4)
        - (2, 5, 6)

# Project around a column where a scalar refers to another fellow member of `scalars`
build apply=ProjectionPushdown
(project
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #0) 7 (call_binary add_int32 #4 7)])
    [3 5 5 5 3])
----
Project (#0, #1, #1, #1, #0)
  Project (#2, #4)
    Map ((#1 + #0), 7, (#3 + 7))
      Project (#0, #1)
        Constant
          - (1, 3, 4)
          - (2, 5, 6)

# Projection pushdown causes elimination of unnecessary map scalars

build apply=ProjectionPushdown
(project
    (filter
    (map
        (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
        [(call_binary add_int32 #1 #2) 7])
        [(call_binary gte #2 #1)])
    [3])
----
Project (#2)
  Filter (#1 >= #0)
    Map ((#0 + #1))
      Project (#1, #2)
        Constant
          - (1, 3, 4)
          - (2, 5, 6)

build apply=ProjectionPushdown
(project
    (map
        (reduce
            (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
            [#0]
            [(sum_int32 #1)])
        ["dummy"])
    [#2 #1 #0])
----
Project (#2, #1, #0)
  Map ("dummy")
    Reduce group_by=[#0] aggregates=[sum(#1)]
      Project (#0, #1)
        Constant
          - (1, 3, 4)
          - (2, 5, 6)

cat
(defsource x [int32 int32 int32])
(defsource y [int32 int32 int32])
----
ok

# Project around a join

build apply=ProjectionPushdown
(project
    (join
        [(filter
            (map
                (constant [[1 3 4] [2 5 6]] [int32 int32 int32])
                [(call_binary add_int32 #1 #2) 7])
            [(call_binary gte #2 #1)])
        (get x)]
        [[#0 #5]])
    [3])
----
Project (#1)
  Join on=(#0 = #2)
    Project (#0, #3)
      Filter (#2 >= #1)
        Map ((#1 + #2))
          Constant
            - (1, 3, 4)
            - (2, 5, 6)
    Project (#0)
      Get x

# Query not using the columns newly created by FlatMap

build apply=ProjectionPushdown
(project (flat_map (get x) generate_series_int32 [#0 #2 1]) [#1])
----
Project (#1)
  FlatMap generate_series(#0, #2, 1)
    Get x

#Query using the columns newly created by FlatMap

build apply=ProjectionPushdown
(project (flat_map (get x) generate_series_int32 [#0 #2 1]) [#3])
----
Project (#2)
  FlatMap generate_series(#0, #1, 1)
    Project (#0, #2)
      Get x

# Project around a union

build apply=ProjectionPushdown
(project (union [(get x) (get y)]) [#1 #0])
----
Union
  Project (#1, #0)
    Get x
  Project (#1, #0)
    Get y

build apply=ProjectionPushdown
(project (union [(get x) (get y)]) [#1 #1])
----
Project (#0, #0)
  Union
    Project (#1)
      Get x
    Project (#1)
      Get y

# Project around a negate

build apply=ProjectionPushdown
(project
    (union [
        (get x)
        (negate (filter (get x) [(call_binary eq #1 1)]))
    ])
    [#0 #2]
)
----
Union
  Project (#0, #2)
    Get x
  Negate
    Project (#0, #2)
      Filter (#1 = 1)
        Get x

# Project around an ArrangeBy

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#2])
----
Project (#2)
  ArrangeBy keys=[[#0], [#1]]
    Get x

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#1])
----
Project (#1)
  ArrangeBy keys=[[#0], [#1]]
    Get x

build apply=ProjectionPushdown
(project (arrange_by (get x) [[#0] [#1]]) [#1 #0])
----
Project (#1, #0)
  ArrangeBy keys=[[#0], [#1]]
    Get x

# Project around a Reduce

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [(call_binary add_int32 #0 #2)]
        [(sum_int32 #1)]
        )
    [])
----
Project ()
  Distinct group_by=[(#0 + #1)]
    Project (#0, #2)
      Get x

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [#0]
        [(sum_int32 (call_binary mul_int32 #0 #2))]
        )
    [#1])
----
Project (#1)
  Reduce group_by=[#0] aggregates=[sum((#0 * #1))]
    Project (#0, #2)
      Get x

build apply=ProjectionPushdown
(project
    (reduce
        (get x)
        [#0]
        [(sum_int32 (call_binary mul_int32 #0 #2))]
        )
    [#1 #0])
----
Project (#1, #0)
  Reduce group_by=[#0] aggregates=[sum((#0 * #1))]
    Project (#0, #2)
      Get x

# Project around a TopK

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        [#0]
        [#1 #2]
        )
    [#2 #2 #2])
----
Project (#0, #0, #0)
  Project (#2)
    TopK group_by=[#0] order_by=[#1 asc nulls_first, #2 asc nulls_first] monotonic=false
      Get x

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        []
        [#1]
        )
    [#2 #2])
----
Project (#0, #0)
  Project (#1)
    TopK order_by=[#0 asc nulls_first] monotonic=false
      Project (#1, #2)
        Get x

build apply=ProjectionPushdown
(project
    (top_k
        (get x)
        [#2]
        [#1]
        )
    [#2 #1])
----
TopK group_by=[#0] order_by=[#1 asc nulls_first] monotonic=false
  Project (#2, #1)
    Get x

# Project in a Let

build apply=ProjectionPushdown
(let z
    (join [(get x) (get y)] [[#0 #3]])
    (project
        (join
            [(get z) (get z)]
            [[#0 #8]]
        )
        [#5]
    )
)
----
Return
  Project (#1)
    Join on=(#0 = #2)
      Project (#0, #2)
        Get l0
      Project (#1)
        Get l0
With
  cte l0 =
    Project (#0, #1, #3)
      Join on=(#0 = #2)
        Project (#0, #2)
          Get x
        Project (#0, #2)
          Get y

build apply=ProjectionPushdown
(let z
    (join [(get x) (get y)] [[#0 #3]])
    (project
        (join
            [(get z) (get z)]
            [[#0 #8]]
        )
        [#2]
    )
)
----
Return
  Project (#1)
    Join on=(#0 = #2)
      Get l0
      Project (#1)
        Get l0
With
  cte l0 =
    Project (#0, #1)
      Join on=(#0 = #2)
        Project (#0, #2)
          Get x
        Project (#0)
          Get y

build apply=ProjectionPushdown
(let z
    (map (get x) [(1 int32)])
    (union
        [
            (project (join [(get z) (get y)] [[#0 #4]]) [#0 #4 #5 #6])
            (project (get z) [#0 #1 #0 #3])
        ]
    )
)
----
Return
  Union
    Join on=(#0 = #1)
      Project (#0)
        Get l0
      Get y
    Project (#0, #1, #0, #2)
      Get l0
With
  cte l0 =
    Map (1)
      Project (#0, #1)
        Get x
