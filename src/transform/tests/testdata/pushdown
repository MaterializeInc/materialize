# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [bool bool])
----
ok

# It should consolidate MFPs above an operator.

build apply=MFPPushdown
(project
  (project
    (get x)
    [#0])
  [#0])
----
%0 =
| Get x (u0)
| Project (#0)

# Union

build apply=MFPPushdown
(project
  (union
    [(get x)
     (get x)])
  [#0])
----
----
%0 =
| Get x (u0)
| Project (#0)

%1 =
| Get x (u0)
| Project (#0)

%2 =
| Union %0 %1
----
----

# FlatMap

build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [true false #0 #1 #2]))
----
%0 =
| Get x (u0)
| Map true, false, #0, #1
| FlatMap generate_series(#0, #1)
| Map #6
| Project (#0, #1, #6, #2..#5, #7)

build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#1 (+ #3 #0)]))
----
%0 =
| Get x (u0)
| Map #1, (#2 + #0)
| FlatMap generate_series(#0, #1)
| Project (#0, #1, #4, #2, #3)

build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#1 (+ #3 #2)]))
----
%0 =
| Get x (u0)
| Map #1
| FlatMap generate_series(#0, #1)
| Map (#2 + #3)
| Project (#0, #1, #3, #2, #4)

build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#1 (+ #3 #2) #1 #5]))
----
%0 =
| Get x (u0)
| Map #1, #1, #3
| FlatMap generate_series(#0, #1)
| Map (#2 + #5)
| Project (#0, #1, #5, #2, #6, #3, #4)

build apply=MFPPushdown
(filter
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [true false #0 #1 #2]))
----
%0 =
| Get x (u0)
| Filter true, false, #0, #1
| FlatMap generate_series(#0, #1)
| Filter #2

build apply=MFPPushdown
(project
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#1 #0]))
----
%0 =
| Get x (u0)
| FlatMap generate_series(#0, #1)
| Project (#1, #0)

build apply=MFPPushdown
(project
  (flat-map
    (get x)
    generate_series_int32
    [#1 #1])
  [#1 #1]))
----
%0 =
| Get x (u0)
| Project (#1)
| FlatMap generate_series(#0, #0)
| Project (#0, #0)

build apply=MFPPushdown
(map
  (filter
    (flat-map
      (get x)
      generate_series_int32
      [#0 #1])
    [#1 #1 #0 #2])
  [true false #1 #0])
----
%0 =
| Get x (u0)
| Map true, false, #1, #0
| Filter #0, #1, #1
| FlatMap generate_series(#0, #1)
| Filter #6
| Project (#0, #1, #6, #2..#5)

build apply=MFPPushdown
(filter
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#0 #1 #2])
----
%0 =
| Get x (u0)
| Filter #0, #1
| FlatMap generate_series(#0, #1)
| Filter #2

build apply=MFPPushdown
(project
  (filter
    (flat-map
      (get x)
      generate_series_int32
      [#0 #0])
    [#0 #1 #2])
  [#0])
----
%0 =
| Get x (u0)
| Filter #0, #1
| Project (#0)
| FlatMap generate_series(#0, #0)
| Filter #1
| Project (#0)

build apply=MFPPushdown
(map
  (project
    (flat-map
      (get x)
      generate_series_int32
      [#0 #0])
    [#2 #0 #1])
  [#0 #1 #2])
----
%0 =
| Get x (u0)
| Map #0, #1
| FlatMap generate_series(#0, #0)
| Map #4
| Project (#4, #0, #1, #5, #2, #3)

# Map where we can only push down one thing.

build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#0 #1 #2 #5])
----
%0 =
| Get x (u0)
| Map #0, #1
| FlatMap generate_series(#0, #1)
| Map #4, #5
| Project (#0, #1, #4, #2, #3, #5, #6)

# Map where we push down one thing but not a thing that references it.
build apply=MFPPushdown
(map
  (flat-map
    (get x)
    generate_series_int32
    [#0 #1])
  [#0 #0 (+ #2 #3)])
----
%0 =
| Get x (u0)
| Map #0, #0
| FlatMap generate_series(#0, #1)
| Map (#4 + #2)
| Project (#0, #1, #4, #2, #3, #5)

build apply=MFPPushdown
(project
  (flat-map
    (get x)
    generate_series_int32
    [#0 #0])
  [#2 #1 #0]))
----
%0 =
| Get x (u0)
| FlatMap generate_series(#0, #0)
| Project (#2, #1, #0)

# Constant

# build apply=MFPPushdown
# (project
#   (constant
#     [[1 2 3]
#      [4 5 6]]
#     [int64 int64 int64])
#   [#0])
# ----
# %0 =
# | Constant (1, 2, 3) (4, 5, 6)
