# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Reduction pushdown tests

cat
(defsource w [int16 int32])
(defsource x [int32 string])
(defsource y ([int16 string] [[1]]))
(defsource z [int16 string])
----
ok

# Distinct Pushdown tests

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[#1 #3]]) [#1] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#1)

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Join %0 %1 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)
----
----

## distinct(<multiple columns from same input>)

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[#1 #3]]) [#0 #1] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#0, #1)

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Join %0 %1 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1)
----
----

## distinct(<multiple columns from differing inputs>)

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[#1 #3]]) [#0 #1 #2] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#0, #1)

%1 =
| Get y (u2)
| Distinct group=(#1, #0)

%2 =
| Join %0 %1 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #1, #3)
----
----

## Expressions in join equivalence classes

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[(call_variadic substr [#1 5]) #3]]) [#3] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(substr(#1, 5))

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Join %0 %1 (= #0 #1)
| | implementation = Unimplemented
| Project (#1)
----
----

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y)]
        [[(call_variadic substr [#1 5]) #3]])
    [(call_variadic substr [#1 5])]
    [])
----
----
%0 =
| Get x (u1)
| Distinct group=(substr(#1, 5))

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Join %0 %1 (= #0 #1)
| | implementation = Unimplemented
| Project (#0)
----
----

### Negative test: Do not do reduction pushdown
### if there are multi-component expressions in the join equivalence

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y)]
        [[(call_variadic substr [#1 5]) (call_binary text_concat #1 #3)]])
    [(call_variadic substr [#1 5])]
    [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= substr(#1, 5) (#1 || #3))
| | implementation = Unimplemented
| Distinct group=(substr(#1, 5))
----
----

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y)]
        [[(call_variadic substr [#1 5]) #3]
         [(call_binary text_concat #1 #3) "hello"]])
    [(call_variadic substr [#1 5])]
    [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= substr(#1, 5) #3) (= (#1 || #3) "hello")
| | implementation = Unimplemented
| Distinct group=(substr(#1, 5))
----
----

### Negative test: multi-input expression in group by key

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y)]
        [[(call_binary text_concat #1 #3) "hello"]])
    [(call_binary text_concat #1 #3)]
    [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= (#1 || #3) "hello")
| | implementation = Unimplemented
| Distinct group=((#1 || #3))
----
----

## Distinct pushdown across more than two inputs
## Make sure no cross joins happen.

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get y)] [[#1 #3 #5]]) [#1] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#1)

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Get y (u2)
| Distinct group=(#1)

%3 =
| Join %0 %1 %2 (= #0 #1 #2)
| | implementation = Unimplemented
| Project (#0)
----
----

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z)] [[#1 #3] [#2 #4]]) [#1 #5] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#1)

%1 =
| Get y (u2)

%2 =
| Get z (u3)

%3 =
| Join %1 %2 (= #0 #2)
| | implementation = Unimplemented
| Distinct group=(#1, #3)

%4 =
| Join %0 %3 (= #0 #1)
| | implementation = Unimplemented
| Project (#0, #2)
----
----

### Similar to the above, but the join graph is now y-x-z instead of x-y-z

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z)] [[#0 #2] [#1 #5]]) [#3 #5] [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Distinct group=(#3, #1)

%3 =
| Get z (u3)
| Distinct group=(#1)

%4 =
| Join %2 %3 (= #1 #2)
| | implementation = Unimplemented
| Project (#0, #2)
----
----

### Push down reductions on join(x, y) and join(z, w)

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z) (get w)] [[#0 #2] [#3 #5] [#4 #6]]) [#3 #5] [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Distinct group=(#3, #3)

%3 =
| Get z (u3)

%4 =
| Get w (u0)

%5 =
| Join %3 %4 (= #0 #2)
| | implementation = Unimplemented
| Distinct group=(#1, #1)

%6 =
| Join %2 %5 (= #0 #2) (= #1 #3)
| | implementation = Unimplemented
| Project (#0, #3)
----
----

opt
(reduce (join [(get x) (get y) (get z) (get w)] [[#0 #2] [#3 #5] [#4 #6]]) [#3 #5] [])
----
----
%0 =
| Get x (u1)
| Project (#0)
| ArrangeBy (#0)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= #0 #1)
| | implementation = Differential %1 %0.(#0)
| Project (#2)
| Distinct group=(#0)
| ArrangeBy (#0)

%3 =
| Get z (u3)
| ArrangeBy (#0)

%4 =
| Get w (u0)
| Project (#0)

%5 =
| Join %3 %4 (= #0 #2)
| | implementation = Differential %4 %3.(#0)
| Project (#1)
| Distinct group=(#0)
| ArrangeBy (#0)

%6 =
| Join %2 %5 (= #0 #1)
| | implementation = DeltaQuery
| |   delta %2 %5.(#0)
| |   delta %5 %2.(#0)
| Project (#0, #0)
----
----

### TODO: support this case where a reduction pushdown can happen by breaking
### it into components x-y and z.

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y) (get z)]
        [[(call_binary text_concat #1 #3) "hello"] [#1 #5]])
    [(call_binary text_concat #1 #3)]
    [])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Get z (u3)

%3 =
| Join %0 %1 %2 (= (#1 || #3) "hello") (= #1 #5)
| | implementation = Unimplemented
| Distinct group=((#1 || #3))
----
----

## Cross join tests

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z)] [[#3 #5]]) [#5] [])
----
----
%0 =
| Get x (u1)
| Distinct group=()

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Get z (u3)
| Distinct group=(#1)

%3 =
| Join %0 %1 %2 (= #0 #1)
| | implementation = Unimplemented
| Project (#1)
----
----

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z)] [[#3 #5]]) [#0] [])
----
----
%0 =
| Get x (u1)
| Distinct group=(#0)

%1 =
| Get y (u2)

%2 =
| Get z (u3)

%3 =
| Join %1 %2 (= #1 #3)
| | implementation = Unimplemented
| Distinct group=()

%4 =
| Join %0 %3
| | implementation = Unimplemented
| Project (#0)
----
----

# Pushdown agg(distinct <single-input-expression>)

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[#1 #3]]) [#1] [(sum_int32 #0 true)])
----
----
%0 =
| Get x (u1)
| Reduce group=(#1)
| | agg sum(distinct #0)

%1 =
| Get y (u2)
| Distinct group=(#1)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1)
----
----

build apply=ReductionPushdown
(reduce (join [(get x) (get y) (get z)] [[#1 #3]]) [#3] [(sum_int16 #2 true)])
----
----
%0 =
| Get x (u1)
| Distinct group=(#1)

%1 =
| Get y (u2)
| Reduce group=(#1)
| | agg sum(distinct #0)

%2 =
| Get z (u3)
| Distinct group=()

%3 =
| Join %0 %1 %2 (= #0 #1)
| | implementation = Unimplemented
| Project (#1, #2)
----
----

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y) (get z)] [[#1 #3 #5]])
    [#3]
    [(sum_int32 (call_unary neg_int32 #0) true) (sum_int16 #2 true)])
----
----
%0 =
| Get x (u1)
| Reduce group=(#1)
| | agg sum(distinct -(#0))

%1 =
| Get y (u2)
| Reduce group=(#1)
| | agg sum(distinct #0)

%2 =
| Get z (u3)
| Distinct group=(#1)

%3 =
| Join %0 %1 %2 (= #0 #2 #4)
| | implementation = Unimplemented
| Project (#2, #1, #3)
----
----

# Pushdown agg(distinct <single-component multi-input expression>)

build apply=ReductionPushdown
(reduce
    (join [(get x) (get y) (get z) (get w)] [[#1 #3 #5] [#4 #6]])
    [#6]
    [(sum_int32 (call_binary add_int32 #0 (call_unary cast_int16_to_int32 #2)) true)
     (sum_int16 (call_binary mul_int16 #2 #4) true)])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Get z (u3)

%3 =
| Join %0 %1 %2 (= #1 #3 #5)
| | implementation = Unimplemented
| Reduce group=(#4)
| | agg sum(distinct (#0 + i16toi32(#2)))
| | agg sum(distinct (#2 * #4))

%4 =
| Get w (u0)
| Distinct group=(#0)

%5 =
| Join %3 %4 (= #0 #3)
| | implementation = Unimplemented
| Project (#3, #1, #2)
----
----

# Empty group by key tests

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] []) [] [(sum_int32 #0 true)])
----
----
%0 =
| Get x (u1)
| Reduce group=()
| | agg sum(distinct #0)

%1 =
| Get y (u2)
| Distinct group=()

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0)
----
----

build apply=ReductionPushdown
(reduce (join [(get x) (get y)] [[#1 #3]]) [] [(sum_int32 #0 true)])
----
----
%0 =
| Get x (u1)

%1 =
| Get y (u2)

%2 =
| Join %0 %1 (= #1 #3)
| | implementation = Unimplemented
| Reduce group=()
| | agg sum(distinct #0)
----
----
