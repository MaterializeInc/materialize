# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64])
(defsource y ([int64 int64] [[0]]))
----
ok

build apply=RedundantJoin
(join
  [(reduce (get x) [#0] [])
   (get x)]
  [[#0 #1]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0
| Project (#2, #0, #1)
----
----

build apply=RedundantJoin
(join
  [(get x)
   (reduce (get x) [#0] [])]
  [[#0 #2]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0
| Project (#0..=#2)
----
----

# self-join on primary key

build apply=RedundantJoin
(join
  [(get y)
   (get y)]
  [[#0 #2]])
----
----
%0 =
| Get y (u1)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0, #1
| Project (#0..=#3)
----
----

# Expressions that can be built from the other projection.

build apply=RedundantJoin
(join
  [(map (reduce (get x) [#0] []) [#0 (call_binary add_int64 #0 1) (call_unary is_null #0) (call_variadic (record_create ["f1"]) [#0]) (if (call_binary eq #0 0) 1 2)])
   (get x)]
  [[#0 #6]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0, #0, (#0 + 1), (#0) IS NULL, record_create(#0), if (#0 = 0) then {1} else {2}
| Project (#2..=#7, #0, #1)
----
----

build apply=RedundantJoin
(join
  [(map
     (map
       (map (reduce (get x) [#0] []) [#0])
       [(call_binary add_int64 #0 1)])
       [(call_unary is_null #0)])
   (get x)]
  [[#0 #4]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0, #0, (#0 + 1), (#0) IS NULL
| Project (#2..=#5, #0, #1)
----
----

build apply=RedundantJoin
(join
  [(project
    (map
       (map
         (map (reduce (get x) [#0] []) [#0])
         [(call_binary add_int64 #0 1)])
         [(call_unary is_null #0)])
     [#3 #2 #1 #0])
   (get x)]
  [[#3 #4]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map (#0) IS NULL, (#0 + 1), #0, #0
| Project (#2..=#5, #0, #1)
----
----

build apply=RedundantJoin
(join
  [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
----
%0 =
| Get x (u0)
| Map (#0 + 1)
| Project (#2)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0
| Project (#0, #1)
----
----

build apply=RedundantJoin
(join
  [(union
    [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
     (project (map (get x) [(call_binary add_int64 #0 1)]) [#2])])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
----
%0 =
| Get x (u0)
| Map (#0 + 1)
| Project (#2)

%1 =
| Get x (u0)
| Map (#0 + 1)
| Project (#2)

%2 =
| Union %0 %1

%3 =
| Join %2
| | implementation = Unimplemented
| Map #0
| Project (#0, #1)
----
----

# different dereferenced projection in union branches

build apply=RedundantJoin
(join
  [(union
    [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
     (project (map (get x) [(call_binary add_int64 #0 2)]) [#2])])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
----
%0 =
| Get x (u0)
| Map (#0 + 1)
| Project (#2)

%1 =
| Get x (u0)
| Map (#0 + 2)
| Project (#2)

%2 =
| Union %0 %1

%3 =
| Get x (u0)
| Distinct group=((#0 + 1))

%4 =
| Join %2 %3 (= #0 #1)
| | implementation = Unimplemented
----
----

# We can't remove the join unless the literal is lifted

build apply=RedundantJoin
(join
  [(map (reduce (get x) [#0] []) [1])
   (get x)]
  [[#0 #2]])
----
----
%0 =
| Get x (u0)
| Distinct group=(#0)
| Map 1

%1 =
| Get x (u0)

%2 =
| Join %0 %1 (= #0 #2)
| | implementation = Unimplemented
----
----

build apply=(LiteralLifting,RedundantJoin)
(join
  [(map (reduce (get x) [#0] []) [1])
   (get x)]
  [[#0 #2]])
----
----
%0 =
| Get x (u0)

%1 =
| Join %0
| | implementation = Unimplemented
| Map #0
| Project (#2, #0, #1)
| Map 1
| Project (#0, #3, #1, #2)
----
----
