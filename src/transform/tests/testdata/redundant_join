# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [int64 int64])
(defsource y ([int64 int64] [[0]]))
----
ok

build apply=RedundantJoin
(join
  [(reduce (get x) [#0] [])
   (get x)]
  [[#0 #1]])
----
Project (#2, #0, #1)
  Map (#0)
    CrossJoin
      Get x

build apply=RedundantJoin
(join
  [(get x)
   (reduce (get x) [#0] [])]
  [[#0 #2]])
----
Project (#0..=#2)
  Map (#0)
    CrossJoin
      Get x

# self-join on primary key

build apply=RedundantJoin
(join
  [(get y)
   (get y)]
  [[#0 #2]])
----
Project (#0..=#3)
  Map (#0, #1)
    CrossJoin
      Get y

# Expressions that can be built from the other projection.

build apply=RedundantJoin
(join
  [(map (reduce (get x) [#0] []) [#0 (call_binary add_int64 #0 1) (call_unary is_null #0) (call_variadic (record_create ["f1"]) [#0]) (if (call_binary eq #0 0) 1 2)])
   (get x)]
  [[#0 #6]])
----
Project (#2..=#7, #0, #1)
  Map (#0, #0, (#0 + 1), (#0) IS NULL, row(#0), case when (#0 = 0) then 1 else 2 end)
    CrossJoin
      Get x

build apply=RedundantJoin
(join
  [(map
     (map
       (map (reduce (get x) [#0] []) [#0])
       [(call_binary add_int64 #0 1)])
       [(call_unary is_null #0)])
   (get x)]
  [[#0 #4]])
----
Project (#2..=#5, #0, #1)
  Map (#0, #0, (#0 + 1), (#0) IS NULL)
    CrossJoin
      Get x

build apply=RedundantJoin
(join
  [(project
    (map
       (map
         (map (reduce (get x) [#0] []) [#0])
         [(call_binary add_int64 #0 1)])
         [(call_unary is_null #0)])
     [#3 #2 #1 #0])
   (get x)]
  [[#3 #4]])
----
Project (#2..=#5, #0, #1)
  Map ((#0) IS NULL, (#0 + 1), #0, #0)
    CrossJoin
      Get x

build apply=RedundantJoin
(join
  [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
Project (#0, #1)
  Map (#0)
    CrossJoin
      Project (#2)
        Map ((#0 + 1))
          Get x

build apply=RedundantJoin
(join
  [(union
    [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
     (project (map (get x) [(call_binary add_int64 #0 1)]) [#2])])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
Project (#0, #1)
  Map (#0)
    CrossJoin
      Union
        Project (#2)
          Map ((#0 + 1))
            Get x
        Project (#2)
          Map ((#0 + 1))
            Get x

# different dereferenced projection in union branches

build apply=RedundantJoin
(join
  [(union
    [(project (map (get x) [(call_binary add_int64 #0 1)]) [#2])
     (project (map (get x) [(call_binary add_int64 #0 2)]) [#2])])
   (reduce (get x) [(call_binary add_int64 #0 1)] [])]
  [[#0 #1]])
----
Join on=(#0 = #1)
  Union
    Project (#2)
      Map ((#0 + 1))
        Get x
    Project (#2)
      Map ((#0 + 2))
        Get x
  Distinct group_by=[(#0 + 1)]
    Get x

# We can't remove the join unless the literal is lifted

build apply=RedundantJoin
(join
  [(map (reduce (get x) [#0] []) [1])
   (get x)]
  [[#0 #2]])
----
Join on=(#0 = #2)
  Map (1)
    Distinct group_by=[#0]
      Get x
  Get x

build apply=(LiteralLifting,RedundantJoin)
(join
  [(map (reduce (get x) [#0] []) [1])
   (get x)]
  [[#0 #2]])
----
Project (#0, #3, #1, #2)
  Map (1)
    Project (#2, #0, #1)
      Map (#0)
        CrossJoin
          Get x
