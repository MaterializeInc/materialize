# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Demonstrates how the "steps" command works.

# Results will need to be rewritten if any transforms get renamed or if the
# sequence of transforms changes.

cat
(defsource x [bool bool])
----
ok

# Test #1: steps with all default arguments.

steps
(union
  [(filter (get x) [#0])
   (filter (get x) [#0])])
----
----
Union
  Filter #0
    Get x
  Filter #0
    Get x

====
No change: Normalize { normalize_lets: NormalizeLets { inline_mfp: false } }, TopKElision, NonNullRequirements { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fixpoint { transforms: [FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }, ThresholdElision, Fixpoint { transforms: [PredicatePushdown { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, NonNullable, ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }
====
Applied Fixpoint { transforms: [SemijoinIdempotence, ReductionPushdown, ReduceElision, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, RelationCSE { normalize_lets: NormalizeLets { inline_mfp: false } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }:
Return
  Union
    Get l0
    Get l0
With
  cte l0 =
    Filter #0
      Get x

====
No change: ProjectionPushdown, NormalizeLets { inline_mfp: false }, Fusion
====
Applied Fixpoint { transforms: [CanonicalizeMfp, ThresholdElision, Join, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, UnionNegate, UnionBranchCancellation, RelationCSE { normalize_lets: NormalizeLets { inline_mfp: true } }, FoldConstants { limit: Some(10000) }], limit: 100 }:
Union
  Filter #0
    Get x
  Filter #0
    Get x

====
No change: LiteralConstraints, Fixpoint { transforms: [JoinImplementation { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }], limit: 100 }, CanonicalizeMfp
====
Applied RelationCSE { normalize_lets: NormalizeLets { inline_mfp: false } }:
Return
  Union
    Get l0
    Get l0
With
  cte l0 =
    Filter #0
      Get x

====
No change: FoldConstants { limit: Some(10000) }, ThresholdElision
====
Final:
Return
  Union
    Get l0
    Get l0
With
  cte l0 =
    Filter #0
      Get x

====
----
----

# Test #2: steps with non-default input and output format.
# If MirRelationExpr or any enum or struct it depends on changes, then this
# test needs to be rewritten.

steps in=json format=test
{"Filter":{"input":{"Join":{"inputs":[{"Get":{"id":{"Global":{"User":1}},"typ":{"column_types":[{"scalar_type":"Int64","nullable":true},{"scalar_type":"Int64","nullable":true}],"keys":[]}}},{"Get":{"id":{"Global":{"User":0}},"typ":{"column_types":[{"scalar_type":"Bool","nullable":true},{"scalar_type":"Bool","nullable":true}],"keys":[]}}}],"equivalences":[],"implementation":"Unimplemented"}},"predicates":[{"CallVariadic":{"func":"Or","exprs":[{"CallVariadic":{"func":"And","exprs":[{"CallUnary":{"func":{"IsNull":null},"expr":{"Column":0}}},{"CallUnary":{"func":{"IsNull":null},"expr":{"Column":2}}}]}},{"CallBinary":{"func":"Eq","expr1":{"Column":0},"expr2":{"CallBinary":{"func":"AddInt64","expr1":{"Column":2},"expr2":{"Literal":[{"Ok":{"data":[5,1,0,0,0,0,0,0,0]}},{"scalar_type":"Int64","nullable":false}]}}}}}]}}]}}
----
----
(Filter (Join [(get u1) (get x)] [] Unimplemented) [(CallVariadic Or [(CallVariadic And [(CallUnary (IsNull ) #0) (CallUnary (IsNull ) #2)]) (CallBinary Eq #0 (CallBinary AddInt64 #2 (1 Int64)))])])

====
Applied Normalize { normalize_lets: NormalizeLets { inline_mfp: false } }:
(Filter (Join [(get u1) (get x)] [] Unimplemented) [(CallVariadic Or [(CallBinary Eq #0 (CallBinary AddInt64 #2 (1 Int64))) (CallVariadic And [(CallUnary (IsNull ) #0) (CallUnary (IsNull ) #2)])])])

====
No change: TopKElision, NonNullRequirements { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fixpoint { transforms: [FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }, ThresholdElision
====
Applied Fixpoint { transforms: [PredicatePushdown { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, NonNullable, ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }:
(Join [(get u1) (get x)] [[#0 (CallBinary AddInt64 #2 (1 Int64))]] Unimplemented)

====
No change: Fixpoint { transforms: [SemijoinIdempotence, ReductionPushdown, ReduceElision, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, RelationCSE { normalize_lets: NormalizeLets { inline_mfp: false } }, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, FlatMapToMap, Join, NormalizeLets { inline_mfp: false }, Reduce, UnionNegate, UnionBranchCancellation, NormalizeLets { inline_mfp: false }, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }] }], limit: 100 }, ProjectionPushdown, NormalizeLets { inline_mfp: false }, Fusion, Fixpoint { transforms: [CanonicalizeMfp, ThresholdElision, Join, RedundantJoin { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, Fusion, UnionNegate, UnionBranchCancellation, RelationCSE { normalize_lets: NormalizeLets { inline_mfp: true } }, FoldConstants { limit: Some(10000) }], limit: 100 }, LiteralConstraints
====
Applied Fixpoint { transforms: [JoinImplementation { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, ColumnKnowledge { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, FoldConstants { limit: Some(10000) }, Demand { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }, LiteralLifting { recursion_guard: RecursionGuard { depth: RefCell { value: 0 }, limit: 2048 } }], limit: 100 }:
(Join [(ArrangeBy (get u1) [[#0]]) (ArrangeBy (get x) [[(CallBinary AddInt64 #0 (1 Int64))]])] [[#0 (CallBinary AddInt64 #2 (1 Int64))]] (Differential [0 [#0] (false 1 false (false false false 0 false) 0)] [[1 [(CallBinary AddInt64 #0 (1 Int64))] (false 1 false (false false false 0 false) 1)]]))

====
No change: CanonicalizeMfp, RelationCSE { normalize_lets: NormalizeLets { inline_mfp: false } }, FoldConstants { limit: Some(10000) }, ThresholdElision
====
Final:
(Join [(ArrangeBy (get u1) [[#0]]) (ArrangeBy (get x) [[(CallBinary AddInt64 #0 (1 Int64))]])] [[#0 (CallBinary AddInt64 #2 (1 Int64))]] (Differential [0 [#0] (false 1 false (false false false 0 false) 0)] [[1 [(CallBinary AddInt64 #0 (1 Int64))] (false 1 false (false false false 0 false) 1)]]))

====
====
Catalog defs:
(defsource u1 ([(Int64 true) (Int64 true)] []))
----
----

## #region Code to generate the rewritten version for Test #2

cat
(defsource u1 ([(Int64 true) (Int64 true)] []))
----
ok

# Run `REWRITE=1 cargo test` from this directory, then copy the result of the
# test below as the rewritten version of Test #2. If the result ends up being an error,
# fix the syntax of the test below, then try again.

build format=json
(Filter
    (Join [(get u1) (get x)] [])
    [
        (CallVariadic Or [
            (CallVariadic And [(CallUnary IsNull #0) (CallUnary IsNull #2)])
            (CallBinary Eq #0 (CallBinary AddInt64 #2 (1 Int64)))])
    ]
)
----
{"Filter":{"input":{"Join":{"inputs":[{"Get":{"id":{"Global":{"User":1}},"typ":{"column_types":[{"scalar_type":"Int64","nullable":true},{"scalar_type":"Int64","nullable":true}],"keys":[]}}},{"Get":{"id":{"Global":{"User":0}},"typ":{"column_types":[{"scalar_type":"Bool","nullable":true},{"scalar_type":"Bool","nullable":true}],"keys":[]}}}],"equivalences":[],"implementation":"Unimplemented"}},"predicates":[{"CallVariadic":{"func":"Or","exprs":[{"CallVariadic":{"func":"And","exprs":[{"CallUnary":{"func":{"IsNull":null},"expr":{"Column":0}}},{"CallUnary":{"func":{"IsNull":null},"expr":{"Column":2}}}]}},{"CallBinary":{"func":"Eq","expr1":{"Column":0},"expr2":{"CallBinary":{"func":"AddInt64","expr1":{"Column":2},"expr2":{"Literal":[{"Ok":{"data":[5,1,0,0,0,0,0,0,0]}},{"scalar_type":"Int64","nullable":false}]}}}}}]}}]}}

## #endregion
