# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

cat
(defsource x [bool bool])
----
ok

steps
(union
  [(filter (get x) [#0])
   (filter (get x) [#0])])
----
----
%0 =
| Get x (u0)
| Filter #0

%1 =
| Get x (u0)
| Filter #0

%2 =
| Union %0 %1

====
No change: TopKElision, NonNullRequirements, Fixpoint { transforms: [FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, TopK, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }, Fixpoint { transforms: [PredicatePushdown, PredicateKnowledge, ReductionPushdown, RedundantJoin, Demand, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, TopK, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }
====
Applied Fixpoint { transforms: [ReductionPushdown, ReduceElision, LiteralLifting, RelationCSE, InlineLet { inline_mfp: false }, UpdateLet, FuseAndCollapse { transforms: [ProjectionExtraction, ProjectionLifting, Map, Negate, Filter, Project, Join, TopK, InlineLet { inline_mfp: false }, Reduce, Union, UnionBranchCancellation, UpdateLet, RedundantJoin, FoldConstants { limit: Some(10000) }] }], limit: 100 }:
%0 = Let l0 =
| Get x (u0)
| Filter #0

%1 =
| Union %0 %0

====
No change: ProjectionPushdown, UpdateLet, Map
====
Applied Fixpoint { transforms: [Join, RedundantJoin, Project, Union, UnionBranchCancellation, RelationCSE, InlineLet { inline_mfp: true }], limit: 100 }:
%0 =
| Get x (u0)
| Filter #0

%1 =
| Get x (u0)
| Filter #0

%2 =
| Union %0 %1

====
No change: Fixpoint { transforms: [JoinImplementation, PredicateKnowledge, FoldConstants { limit: Some(10000) }, Demand, LiteralLifting], limit: 100 }, ReductionPushdown, CanonicalizeMfp
====
Applied RelationCSE:
%0 = Let l0 =
| Get x (u0)

%1 = Let l1 =
| Get %0 (l0)
| Filter #0

%2 = Let l2 =
| Union %1 %1

%3 =
| Get %2 (l2)

====
Applied InlineLet { inline_mfp: false }:
%0 = Let l1 =
| Get x (u0)
| Filter #0

%1 =
| Union %0 %0

====
Applied UpdateLet:
%0 = Let l0 =
| Get x (u0)
| Filter #0

%1 =
| Union %0 %0

====
No change: FoldConstants { limit: Some(10000) }
====
Final:
%0 = Let l0 =
| Get x (u0)
| Filter #0

%1 =
| Union %0 %0

====
----
----

steps in=json format=test
{"Filter":{"input":{"Join":{"inputs":[{"Get":{"id":{"Global":{"User":210}},"typ":{"column_types":[{"scalar_type":"Int64","nullable":true},{"scalar_type":"Int64","nullable":true}],"keys":[]}}},{"Get":{"id":{"Global":{"User":0}},"typ":{"column_types":[{"scalar_type":"Int64","nullable":true},{"scalar_type":"Int64","nullable":true}],"keys":[]}}}],"equivalences":[],"demand":null,"implementation":"Unimplemented"}},"predicates":[{"CallBinary":{"func":"Or","expr1":{"CallBinary":{"func":"And","expr1":{"CallUnary":{"func":"IsNull","expr":{"Column":0}}},"expr2":{"CallUnary":{"func":"IsNull","expr":{"Column":2}}}}},"expr2":{"CallBinary":{"func":"Eq","expr1":{"Column":0},"expr2":{"CallBinary":{"func":"AddInt64","expr1":{"Column":2},"expr2":{"Literal":[{"Ok":{"data":[5,1,0,0,0,0,0,0,0]}},{"scalar_type":"Int64","nullable":false}]}}}}}}}]}}
----
error: invalid type: unit variant, expected newtype variant at line 1 column 526
