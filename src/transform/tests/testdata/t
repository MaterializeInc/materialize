# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Define a source with a set of columns.
cat
(defsource x [int32 int64])
----
ok

# Build builds the IR exactly as written, and performs no optimizations on it.
build
(get x)
----
%0 =
| Get x (u0)

# Can build nested expressions.
build
(filter (get x) [#0])
----
error: Object spec [Ident { sym: get, span: bytes(2588..2591) }, Ident { sym: x, span: bytes(2592..2593) }] (type Vec<MirScalarExpr>) has unsupported delimiter Parenthesis

build
(filter
  (map (get x) [true])
  [#0 #1])
----
error: Object spec [Ident { sym: map, span: bytes(2613..2616) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(2618..2621) }, Ident { sym: x, span: bytes(2622..2623) }], span: bytes(2617..2624) }, Group { delimiter: Bracket, stream: TokenStream [Ident { sym: true, span: bytes(2626..2630) }], span: bytes(2625..2631) }] (type Vec<MirScalarExpr>) has unsupported delimiter Parenthesis

# If the `apply` flag is passed to build with the name of a transform, that
# transform will be applied (once).
build apply=PredicatePushdown
(filter
  (map (get x) [true])
  [#0 #1])
----
error: Object spec [Ident { sym: map, span: bytes(2656..2659) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(2661..2664) }, Ident { sym: x, span: bytes(2665..2666) }], span: bytes(2660..2667) }, Group { delimiter: Bracket, stream: TokenStream [Ident { sym: true, span: bytes(2669..2673) }], span: bytes(2668..2674) }] (type Vec<MirScalarExpr>) has unsupported delimiter Parenthesis

# If `opt` is used instead of `build`, the full optimizer is run on the IR.
opt
(project
  (map (get x) [#0 #1])
  [#3])
----
error: Object spec [Ident { sym: map, span: bytes(2700..2703) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { sym: get, span: bytes(2705..2708) }, Ident { sym: x, span: bytes(2709..2710) }], span: bytes(2704..2711) }, Group { delimiter: Bracket, stream: TokenStream [Punct { char: '#', spacing: Alone, span: bytes(2713..2714) }, Literal { lit: 0, span: bytes(2714..2715) }, Punct { char: '#', spacing: Alone, span: bytes(2716..2717) }, Literal { lit: 1, span: bytes(2717..2718) }], span: bytes(2712..2719) }] (type Vec<usize>) has unsupported delimiter Parenthesis

build
(join
  [(get x) (get x)]
  [[#0 #2] [#1 #3]])
----
error: Object spec [Ident { sym: get, span: bytes(2740..2743) }, Ident { sym: x, span: bytes(2744..2745) }] (type Vec<MirScalarExpr>) has unsupported delimiter Parenthesis

build
(negate (constant [[1]] [int64]))
----
%0 =
| Constant (1)
| Negate
