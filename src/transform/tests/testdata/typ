# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Test that the test runner can properly construct sources with keys
# and report on key information in plans

cat
(defsource x ([int32 int64 int32]))
(defsource y ([int64 int32 int32]))
----
ok

build format=types
(union [(get x) (get x) (get x)])
----
Union // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }

build format=types
(union [(get x) (project (get y) [#1 #0 #2])])
----
Union // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Project (#1, #0, #2) // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
    Get y // { types: "(Int64?, Int32?, Int32?)", keys: "()" }

build format=types
(union [(project (get y) [#1 #0 #2]) (get x)])
----
Union // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Project (#1, #0, #2) // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
    Get y // { types: "(Int64?, Int32?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }

build format=types
(let z (project (get y) [#1 #0 #2])
    (union [(get x) (get z)]))
----
Union // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Project (#1, #0, #2) // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
    Get y // { types: "(Int64?, Int32?, Int32?)", keys: "()" }

build format=types
(let z (project (get y) [#1 #0 #2])
    (union [(get z) (get z)]))
----
Return // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Union // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
    Get l0 // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
    Get l0 // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
With
  cte l0 =
    Project (#1, #0, #2) // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
      Get y // { types: "(Int64?, Int32?, Int32?)", keys: "()" }

build format=types
(join [(get x) (get y)] [])
----
CrossJoin // { types: "(Int32?, Int64?, Int32?, Int64?, Int32?, Int32?)", keys: "()" }
  Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
  Get y // { types: "(Int64?, Int32?, Int32?)", keys: "()" }

# Key information propagation through Filters

build format=types
(filter (reduce (get x) [#0 #2] []) [(call_binary eq #0 #1)])
----
Filter (#0 = #1) // { types: "(Int32, Int32)", keys: "([0], [1])" }
  Distinct group_by=[#0, #2] // { types: "(Int32?, Int32?)", keys: "([0, 1])" }
    Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }

cat
(defsource with_keys ([int32 int32 int32] [[0 1] [1 2]]))
----
ok

build format=types
(filter (get with_keys) [(call_binary eq #0 #2)])
----
Filter (#0 = #2) // { types: "(Int32, Int32?, Int32)", keys: "([0, 1], [1, 2])" }
  Get with_keys // { types: "(Int32?, Int32?, Int32?)", keys: "([0, 1], [1, 2])" }

cat
(defsource with_keys2 ([int32 int32 int32 int32] [[0 1] [2 3]]))
----
ok

build format=types
(filter (get with_keys2) [(call_binary eq #0 #2)])
----
Filter (#0 = #2) // { types: "(Int32, Int32?, Int32, Int32?)", keys: "([0, 1], [0, 3], [1, 2], [2, 3])" }
  Get with_keys2 // { types: "(Int32?, Int32?, Int32?, Int32?)", keys: "([0, 1], [2, 3])" }

# Regression test for #14146. The keys at the end should be [#0]

build format=types
(filter (reduce (get x) [#0] [(count true false)])[(call_binary eq #0 #0)])
----
Filter (#0 = #0) // { types: "(Int32, Int64)", keys: "([0])" }
  Reduce group_by=[#0] aggregates=[count(*)] // { types: "(Int32?, Int64)", keys: "([0])" }
    Get x // { types: "(Int32?, Int64?, Int32?)", keys: "()" }
