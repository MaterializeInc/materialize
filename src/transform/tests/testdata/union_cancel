# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Test that the test runner can properly construct sources with keys
# and report on key information in plans

cat
(defsource x [int64 int64])
----
ok

# equivalent branches can't be canceled

build apply=UnionBranchCancellation
(union [(negate (get x)) (negate (get x))])
----
Union
  Negate
    Get x
  Negate
    Get x

build apply=UnionBranchCancellation
(union [(get x) (get x)])
----
Union
  Get x
  Get x

build apply=UnionBranchCancellation
(union [(project (get x) [0]) (project (get x) [0])])
----
Union
  Project (#0)
    Get x
  Project (#0)
    Get x

build apply=UnionBranchCancellation
(union [(map (get x) [#0]) (project (get x) [#0])])
----
Union
  Map (#0)
    Get x
  Project (#0)
    Get x

build apply=UnionBranchCancellation
(union [(filter (get x) [#0]) (project (get x) [#0])])
----
Union
  Filter #0
    Get x
  Project (#0)
    Get x

build apply=UnionBranchCancellation
(union [(negate (filter (get x) [#0])) (project (negate (get x)) [#0])])
----
Union
  Negate
    Filter #0
      Get x
  Project (#0)
    Negate
      Get x

# negated branches

build apply=UnionBranchCancellation
(union [(get x) (negate (get x))])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(project (get x) [0]) (project (negate (get x)) [0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(project (negate (get x)) [0]) (project (get x) [0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(map (get x) [#0]) (map (negate (get x)) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(map (negate (get x)) [#0]) (map (get x) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(filter (get x) [#0]) (filter (negate (get x)) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(filter (negate (get x)) [#0]) (filter (get x) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(map (get x) [#0]) (map (negate (get x)) [#1])])
----
Union
  Map (#0)
    Get x
  Map (#1)
    Negate
      Get x

build apply=UnionBranchCancellation
(union [(map (filter (get x) [#0]) [#0]) (map (filter (negate (get x)) [#0]) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(map (filter (negate (get x)) [#0]) [#0]) (map (filter (get x) [#0]) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

# map -> filter in the same order, but with a Negate in between
build apply=UnionBranchCancellation
(union [(map (filter (get x) [#0]) [#0]) (map (negate (filter (get x) [#0])) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

build apply=UnionBranchCancellation
(union [(map (negate (filter (get x) [#0])) [#0]) (map (filter (get x) [#0]) [#0])])
----
Union
  Constant <empty>
  Constant <empty>

# map -> filter in different order, branches can't be canceled
build apply=UnionBranchCancellation
(union [(filter (map (get x) [#0]) [#0]) (map (filter (negate (get x)) [#0]) [#0])])
----
Union
  Filter #0
    Map (#0)
      Get x
  Map (#0)
    Filter #0
      Negate
        Get x

# first two branches cancel each other, but not the third one
build apply=UnionBranchCancellation
(union [(map (negate (get x)) [#0]) (map (get x) [#0]) (map (negate (get x)) [#0])])
----
Union
  Constant <empty>
  Constant <empty>
  Map (#0)
    Negate
      Get x

build apply=UnionBranchCancellation
(union [(map (negate (get x)) [#0]) (map (get x) [#0]) (map (get x) [#0])])
----
Union
  Constant <empty>
  Constant <empty>
  Map (#0)
    Get x

# first and third cancel each other
build apply=UnionBranchCancellation
(union [(map (negate (get x)) [#0]) (map (negate (get x)) [#0]) (map (get x) [#0])])
----
Union
  Constant <empty>
  Map (#0)
    Negate
      Get x
  Constant <empty>
