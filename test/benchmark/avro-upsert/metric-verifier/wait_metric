#!/usr/bin/env python3

# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

import argparse
import dateparser
import datetime
import sys
import time
import urllib

import prometheus_api_client
import prometheus_api_client.utils

def run(args: argparse.Namespace) -> int:
    """Wait for the query to settle or timeout and then dump ingest metrics."""

    try:
        start = dateparser.parse('30 seconds ago')
        return wait_metric(args)
    finally:
        print_dashboard_url(args, start)


def print_dashboard_url(args: argparse.Namespace, start: datetime.datetime):
    """Print the URL to see the metrics for this test"""

    # Create parameters to see a dashboard with the metrics from this benchmark run
    # Add padding to make the charts nicer to read
    # Grafana expects timestamps with milliseconds
    path = '/d/materialize-overview/materialize-overview'
    query = urllib.parse.urlencode( {
              "from": round(start.timestamp()) * 1000,
                "to": round(dateparser.parse('in 30 seconds').timestamp()) * 1000,
                "tz": "UTC"
             })
    dashboard_url = urllib.parse.urlunparse(('http', args.grafana_location, path, '', query, ''))
    print(f'View performance metrics here: {dashboard_url}')


def wait_metric(args: argparse.Namespace) -> int:
    """Wait for the given metric, returning desired exit code (0 is success)."""
    prom = prometheus_api_client.PrometheusConnect(f'http://{args.host}:{args.port}')
    time_so_far = 0
    start = int(time.monotonic())
    while time_so_far < args.timeout_seconds:
        current_values = prom.custom_query(args.prom_query)
        if args.verbose:
            print(current_values)

        if len(current_values) > 1:
            print('ERROR: Prometheus query must only return a zero or one results!')
            prometheus_api_client.utils.pretty_print_metric(current_values)
            return 1

        # We aren't running query_range, so there should only be a single timestamp and point in the reponse
        if current_values:
            (ts, point) = [float(i) for i in current_values[0]['value']]
            if point == args.expected_value:
                rate = round(point / max(time_so_far, 1))
                print(f"SUCCESS! Benchmark took {time_so_far}s, {rate} rows/sec")
                return 0

        time.sleep(1)
        time_so_far = int(time.monotonic()) - start

    # Check this last because it's okay to have a 1-2 second grace period and we want the
    # ability to print the most recent result
    print(f"FAILED! Query response is '{point}' after {time_so_far} seconds")
    return 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Enable verbose logging to print the results of each prometheus query",
    )

    parser.add_argument(
        "--grafana-location",
        type=str,
        default='localhost:3000',
        help="Default URL net location (host and port) for Grafana",
    )

    parser.add_argument(
        "--host",
        type=str,
        default='dashboard',
        help="Hostname of the prometheus instance to query",
    )

    parser.add_argument(
        "-p",
        "--port",
        type=int,
        default=9090,
        help="Port on which the prometheus instance is running",
    )

    parser.add_argument(
        "-t",
        "--timeout-seconds",
        type=int,
        default=900,
        help="Length of time to wait until the metric reaches the specified value",
    )

    parser.add_argument(
        "prom_query",
        type=str,
        help="Prometheus query to run",
    )

    parser.add_argument(
        "expected_value",
        type=float,
        help="Expected value of the metric queried",
    )

    args = parser.parse_args()
    sys.exit(run(args))
