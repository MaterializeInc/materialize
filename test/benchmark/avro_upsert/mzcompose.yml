# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


# Map from host-port:internal port
#
# This mostly just shows all the ports that are available to the host system, if you want
# to change these you must restart the docker-compose cluster.
x-port-mappings:
  - &kafka-internal ${KAFKA_PORT:-9092}
  - &kafka-external 9093
  - &schema-registry ${SR_PORT:-8081}
  - &materialized ${MZ_PORT:-6875}
  - &grafana 3000:3000
  - &prometheus 9090

version: '3.7'
services:
  create-views:
    mzbuild: avro-upsert-create-views
  materialized:
    mzbuild: materialized
    ports:
     - *materialized
    init: true
    command:
      - --workers=${MZ_WORKERS:-16}
      - --logical-compaction-window=1ms
      # We want this to eventually count up to the size of the largest batch in
      # an arrangement. This number represents a tradeoff between proactive
      # merging (which takes time) and low latency.
      #
      # 1000 was chosen by fair dice roll.
      - --differential-idle-merge-effort=1000
      - --timely-progress-mode=${MZ_TIMELY_PROGRESS_MODE:-demand}
      - --disable-telemetry
    environment:
      # You can, for example, add `pgwire=trace` or change `info` to `debug` to
      # get more verbose logs.
      - MZ_LOG=pgwire=debug,info
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    ports:
      - *kafka-internal
      - *kafka-external
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://${KAFKA_HOST:-kafka}:9093
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_NUM_PARTITIONS: 30
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #KAFKA_LOG_CLEANUP_POLICY: "compact"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # To avoid race condition with control-center
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      KAFKA_JMX_PORT: 9991
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    ports:
      - *schema-registry
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]
  producer:
    mzbuild: avro-upsert-producer
    volumes:
      - ./data:/data
  # All monitoring
  dashboard:
    mzbuild: dashboard
    propagate-uid-gid: true
    environment:
      - 'MATERIALIZED_URL=materialized:6875'
    ports:
      - *grafana
      - *prometheus
    volumes:
      # ensure that data doesn't get lost across restarts
      # data will be lost if you remove docker volumes (using nuke, for example)
      - prometheus:/prometheus
      - grafana:/var/lib/grafana
      # specialized configurations
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./grafana/conf/load-test.json:/etc/grafana/provisioning/dashboards/chbench-load-test.json

volumes:
  grafana:
  prometheus:

mzworkflows:
  test-upsert-performance:
    env:
      MZ_PORT: 6875
      KAFKA_PORT: 9092
    steps:
    - step: start-services
      services: [dashboard]
    - step: start-services
      services: [kafka, schema-registry, materialized]
    - step: wait-for-tcp
      host: kafka
      port: 9092
    - step: wait-for-tcp
      host: schema-registry
      port: 8081
    - step: run
      service: producer
    - step: run
      service: create-views
