# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


# Map from host-port:internal port
#
# This mostly just shows all the ports that are available to the host system, if you want
# to change these you must restart the docker-compose cluster.
x-port-mappings:
  - &materialized 6875:6875
  - &schema-registry 8081:8081
  - &kafka 9092:9092
  - &connect 8083:8083
  - &mysql 3306:3306
  - &control-center ${CC_PORT:-9021:9021}

version: '3.7'
services:
  chaos:
    init: true
    mzbuild: chaos
    environment:
      - RUST_LOG=chaos=debug,info
    depends_on: [materialized]

  materialized:
    mzbuild: materialized
    ports:
      - *materialized
    command: -w4 --disable-telemetry
    environment:
      - MZ_DEV=1

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    cap_add:
      - NET_ADMIN

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    ports:
      - *kafka
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    cap_add:
      - NET_ADMIN

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    ports:
      - *schema-registry
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]
    cap_add:
      - NET_ADMIN

  connect:
    build: connect
    ports:
      - *connect
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka, schema-registry]
    cap_add:
      - NET_ADMIN

  connector:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    volumes:
      - ./connector/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    entrypoint:
      - docker-entrypoint.sh
    cap_add:
      - NET_ADMIN

  mysql:
    image: debezium/example-mysql:1.4
    ports:
      - *mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpw
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - type: volume
        source: chbench-gen
        target: /var/lib/mysql-files
        read_only: true
    cap_add:
      - NET_ADMIN

  connector-mysql:
    build: connector-mysql
    depends_on: [schema-registry, control-center]
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.3
    depends_on: [zookeeper, kafka, connect]
    ports:
      - *control-center

  chbench:
    init: true
    mzbuild: chbenchmark
    # NOTE: we really don't want to add a depends_on, because that causes docker-compose
    # to _restart_ the items that this is depending on, which may blow away all the old
    # state.
    volumes:
      - chbench-gen:/gen

volumes:
  chbench-gen:

mzworkflows:
  # Test workflows
  test-bytes-to-kafka:
    steps:
      - step: workflow
        workflow: start-everything
      - step: workflow
        workflow: chaos-bytes-to-kafka
      - step: random-chaos
        other_service: chaos_run
      - step: workflow
        workflow: confirm-test

  test-mysql-debezium-kafka:
    steps:
      - step: workflow
        workflow: chbench-load-test
      - step: workflow
        workflow: chaos-mysql-debezium-kafka
      - step: random-chaos
        other_service: chaos_run
      - step: workflow
        workflow: confirm-test

  # Helper workflows
  start-everything:
    steps:
      - step: start-services
        services: [materialized, kafka, schema-registry]
      - step: wait-for-tcp
        host: kafka
        port: 9092
      - step: wait-for-tcp
        host: schema-registry
        port: 8081
      - step: wait-for-tcp
        host: materialized
        port: 6875

  chaos-bytes-to-kafka:
    steps:
      - step: run
        service: chaos
        daemon: true
        command: >-
          --test bytes-to-kafka
          --materialized-host materialized
          --materialized-port 6875
          --kafka-url kafka:9092
          --kafka-partitions 100
          --message-count 1000000

  chaos-mysql-debezium-kafka:
    steps:
      - step: run
        service: chaos
        daemon: true
        command: >-
          --test mysql-debezium-kafka
          --materialized-host materialized
          --materialized-port 6875
          --kafka-url kafka:9092
          --run-seconds=864000

  confirm-test:
    steps:
      - step: chaos-confirm
        service: chaos_run
        wait: true
        exit_code: 0
      - step: chaos-confirm
        service: materialized
        running: true

  # chbench helper workflows
  chbench-load-test:
    steps:
      - step: workflow
        workflow: bring-up-source-data-mysql
      - step: workflow
        workflow: heavy-load

  bring-up-source-data-mysql:
    steps:
      - step: start-services
        services: [materialized, mysql]
      - step: wait-for-tcp
        host: materialized
        port: 6875
      - step: wait-for-mysql
        user: root
        timeout_secs: 30
      - step: drop-kafka-topics
        kafka-container: chbench_kafka_1
        topic_pattern: debezium.tpcch.*
      - step: start-services
        services: [connector-mysql]
      - step: wait-for-tcp
        host: connect
        port: 8083
        timeout_secs: 120
      - step: wait-for-tcp
        host: schema-registry
        port: 8081
      - step: run
        service: chbench
        command: >-
          gen
          --warehouses=1
          --config-file-path=/etc/chbenchmark/mz-default-mysql.cfg

  heavy-load:
    steps:
      - step: run
        service: chbench
        daemon: true
        command: >-
          run
          --dsn=mysql --gen-dir=/var/lib/mysql-files
          --analytic-threads=0
          --transactional-threads=1
          --run-seconds=864000
          -l /dev/stdout
          --config-file-path=/etc/chbenchmark/mz-default-mysql.cfg
          --mz-url=postgresql://materialize@materialized:6875/materialize?sslmode=disable
