# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.


# Map from host-port:internal port
#
# This mostly just shows all the ports that are available to the host system, if you want
# to change these you must restart the docker-compose cluster.
x-port-mappings:
  - &materialized 6875:6875
  - &schema-registry 8081:8081
  - &kafka 9092:9092
  - &connect 8083:8083
  - &mysql 3306:3306

version: '3.7'
services:
  # Core test services.
  chaos:
    init: true
    mzbuild: chaos
    environment:
      - RUST_LOG=chaos=debug,info
    depends_on: [materialized]

  materialized:
    mzbuild: materialized
    ports:
      - *materialized
    init: true
    command: -w 4

  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    ports:
      - *kafka
    depends_on: [zookeeper]
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9991
    cap_add:
      - NET_ADMIN
  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    ports:
      - *schema-registry
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]

  # mysql -> debezium -> kafka test services.
  connect:
    build: connect
    ports:
      - *connect
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on: [kafka, schema-registry]
    cap_add:
      - NET_ADMIN
  connector:
    image: confluentinc/cp-enterprise-kafka:5.3.0
    volumes:
      - ./connector/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh
    entrypoint:
      - docker-entrypoint.sh
  mysql:
    image: debezium/example-mysql:1.1
    ports:
      - *mysql
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - type: volume
        source: chbench-gen
        target: /var/lib/mysql-files
        read_only: true
  chbench:
    init: true
    mzbuild: chbenchmark
    # NOTE: we really don't want to add a depends_on, because that causes docker-compose
    # to _restart_ the items that this is depending on, which may blow away all the old
    # state.
    volumes:
      - chbench-gen:/gen

volumes:
  chbench-gen:

mzconduct:
  workflows:
    # This test is designed to delay egress network traffic of the Kafka broker.
    delay-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: chaos-delay-docker
          container: chaos_kafka_1
        - step: workflow
          workflow: run-netem-and-confirm

    delay-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: chaos-delay-docker
          container: chaos_connect_1
        - step: run
          service: chaos
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # This test is designed to rate limit egress network traffic of the Kafka broker.
    rate-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: chaos-rate-docker
          container: chaos_kafka_1
        - step: workflow
          workflow: run-netem-and-confirm

    rate-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: chaos-rate-docker
          container: chaos_connect_1
        - step: run
          service: chaos
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # This test is designed to test packet loss from the Kafka broker.
    loss-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: chaos-loss-docker
          container: chaos_kafka_1
          percent: 10
        - step: workflow
          workflow: run-netem-and-confirm

    loss-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: chaos-loss-docker
          container: chaos_connect_1
          percent: 10
        - step: run
          service: chaos
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # This test is designed to test packet loss from the Kafka broker.
    duplicate-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: chaos-duplicate-docker
          container: chaos_kafka_1
          percent: 10
        - step: workflow
          workflow: run-netem-and-confirm

    duplicate-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: chaos-duplicate-docker
          container: chaos_connect_1
          percent: 10
        - step: run
          service: chaos
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # This test is designed to test packet corruption from the Kafka broker.
    corrupt-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: chaos-corrupt-docker
          container: chaos_kafka_1
          percent: 10
        - step: workflow
          workflow: run-netem-and-confirm

    corrupt-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: chaos-corrupt-docker
          container: chaos_connect_1
          percent: 10
        - step: run
          service: chaos
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # These tests are designed to start and stop the specified Docker container.
    pause-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --kafka-partitions 5
            --message-count 1000000
        - step: chaos-pause-docker
          service: kafka
          other_service: chaos_run

    pause-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-pause-docker
          service: chaos_connect_1
          other_service: chbench

    # These tests are designed to start and stop the specified Docker container.
    stop-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --kafka-partitions 5
            --message-count 1000000
        - step: chaos-stop-docker
          service: kafka
          other_service: chaos_run

    stop-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-stop-docker
          service: chaos_connect_1
          other_service: chbench

    # These tests are designed to kill the specified Docker container.
    kill-kafka:
      steps:
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --kafka-partitions 5
            --message-count 1000000
        - step: chaos-kill-docker
          service: kafka
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          exit_code: 137 #SIGKILL

    kill-debezium-chbench:
      steps:
        - step: workflow
          workflow: chbench-chaos-test
        - step: workflow
          workflow: start-everything
        - step: run
          service: chaos
          daemon: true
          command: >-
            --test mysql-debezium-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --run-seconds=864000
        - step: chaos-kill-docker
          service: chaos_connect_1
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: chaos_connect_1
          exit_code: 137 #SIGKILL

    # Helper workflows
    start-everything:
      steps:
        - step: start-services
          services: [materialized, kafka, schema-registry]
        - step: wait-for-tcp
          host: kafka
          port: 9092
        - step: wait-for-tcp
          host: schema-registry
          port: 8081
        - step: wait-for-tcp
          host: materialized
          port: 6875

    # To verify a netem chaos test, we run the chaos container to completion
    # and check the following conditions:
    #
    # - the materialized container did not crash
    # - the kafka container did not crash
    # - the chaos container completed successfully
    run-netem-and-confirm:
      steps:
        - step: run
          service: chaos
          command: >-
            --test bytes-to-kafka
            --materialized-host materialized
            --materialized-port 6875
            --kafka-url kafka:9092
            --kafka-partitions 100
            --message-count 100000000
        - step: chaos-confirm
          service: materialized
          running: true
        - step: chaos-confirm
          service: kafka
          running: true
        - step: chaos-confirm
          service: chaos_run
          exit_code: 0

    # chbench helper workflows
    chbench-chaos-test:
      steps:
        - step: workflow
          workflow: chbench-bring-up-source-data
        - step: workflow
          workflow: chbench-heavy-load

    chbench-bring-up-source-data:
      steps:
        - step: start-services
          services: [materialized, mysql, zookeeper, kafka, schema-registry, connect]
        - step: wait-for-tcp
          host: materialized
          port: 6875
        - step: wait-for-mysql
          user: root
          password: debezium
          timeout_secs: 30
        - step: wait-for-tcp
          host: connect
          port: 8083
          timeout_secs: 120
        - step: wait-for-tcp
          host: schema-registry
          port: 8081
        - step: wait-for-tcp
          host: kafka
          port: 9092
        - step: start-services
          services: [connector]
        - step: drop-kafka-topics
          kafka-container: chaos_kafka_1
          topic_pattern: mysql.tpcch.*
        - step: run
          service: chbench
          command: >-
            gen
            --warehouses=1
            --config-file-path=/etc/chbenchmark/mz-default.cfg

    chbench-heavy-load:
      steps:
        - step: run
          service: chbench
          daemon: true
          command: >-
            run
            --dsn=mysql --gen-dir=/var/lib/mysql-files
            --analytic-threads=0
            --transactional-threads=1
            --run-seconds=864000
            -l /dev/stdout
            --config-file-path=/etc/chbenchmark/mz-default.cfg
            --mz-url=postgresql://materialized:6875/materialize?sslmode=disable
