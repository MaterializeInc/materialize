# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# These just test that statement
# logging is set up in CI. The values
# in prod won't necessarily be the same.

> SHOW statement_logging_max_sample_rate
statement_logging_max_sample_rate
----
1.0

> SHOW statement_logging_sample_rate
statement_logging_sample_rate
----
1.0

$ postgres-execute connection=postgres://mz_system:materialize@${testdrive.materialize-internal-sql-addr}
ALTER SYSTEM SET enable_statement_lifecycle_logging = true

# Verify that we can get application names
# that are set after session initialization
> SET application_name TO my_app

# Later, we need to ignore everything
# that happened before the real test started. Sleep here,
# so we can be sure that their `began_at` is different.
> SELECT mz_unsafe.mz_sleep(1)
<null>

# Make it so we can query the tables later
$ postgres-execute connection=postgres://mz_system:materialize@${testdrive.materialize-internal-sql-addr}
ALTER SYSTEM SET enable_rbac_checks = false

# Now the real test begins

# This will be executed on `mz_introspection`, due to auto-routing of "simple" queries.
> SELECT 'beginning real test!'
"beginning real test!"

> PREPARE p AS values ($1)

> EXECUTE p('hello world')
"hello world"

> CREATE TABLE t(f int)

> INSERT INTO t VALUES (1)

! SELECT f/0 FROM t
contains: division by zero

> CREATE DEFAULT INDEX i ON t

> SELECT * FROM t
1

> SELECT count(*) FROM t
1

# This one does not show up in the results. See
# point "(2)" in the comment below.
! SELECT f_nonexistent FROM t
contains: column "f_nonexistent" does not exist

> BEGIN

> DECLARE c CURSOR FOR VALUES (1), (2)

> FETCH c
1

> FETCH c
2

> FETCH c

> COMMIT

# Create a cluster, run a query on it, and drop it to ensure that we retain the cluster name
> CREATE CLUSTER c REPLICAS (r1 (size '1'))

> SET cluster TO c

> SELECT count(*) FROM t
1

> DROP CLUSTER c

# This will be executed on mz_introspection, due to auto-routing of introspection queries.
> SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics
true

# Test that we're correctly recording transaction isolation
> SET transaction_isolation TO serializable

> SELECT 'serializable'
serializable

# Assumptions encoded here:
# (1) "Inner" statement executions are not logged. For example,
#     if SQL-level `PREPARE` and `EXECUTE` are used, those statements will
#     be logged, but not the statements they reference.
# (2) We don't have a way to log errors that happen during statement preparation,
#     but only during statement execution.
# (3) SQL-level statements always use a prepared statement with a useless name beginning with 's'
# (4) `FETCH` has the somewhat confusing behavior of reporting the `rows_returned`
#     of the *total* result set in the first `FETCH`, and null thereafter.
#
# All of these (except (3), which is just how the postgres library TD uses works) are working as designed.
# However, we recognize that they are confusing, so we will work on making them
# less confusing as follow-ups.
#
# When we do so, we will need to change this test to encode the improved behavior.

> WITH all_stmts AS (SELECT mseh.*, mpsh.*, mst.sql, mst.redacted_sql FROM mz_internal.mz_statement_execution_history mseh RIGHT JOIN mz_internal.mz_prepared_statement_history mpsh ON mseh.prepared_statement_id = mpsh.id RIGHT JOIN (SELECT DISTINCT sql_hash, sql, redacted_sql FROM mz_internal.mz_sql_text) mst ON mpsh.sql_hash = mst.sql_hash),
       test_begin AS (SELECT began_at FROM all_stmts WHERE sql = 'SELECT ''beginning real test!''' ORDER BY began_at DESC LIMIT 1)
  SELECT c.name, all_stmts.cluster_name, all_stmts.application_name, all_stmts.sample_rate, all_stmts.params, all_stmts.finished_status, all_stmts.error_message, all_stmts.rows_returned, all_stmts.execution_strategy, all_stmts.name LIKE 's%', all_stmts.sql, all_stmts.transaction_isolation, all_stmts.transient_index_id ~ '^t[0-9]+$'
  FROM all_stmts, test_begin LEFT JOIN mz_clusters c ON c.id = all_stmts.cluster_id WHERE all_stmts.began_at >= test_begin.began_at AND all_stmts.sql NOT LIKE '%sduiahsdfuoiahsdf%'
<null> <null> my_app 1 {} success <null> <null> <null> true "SET transaction_isolation TO serializable" "strict serializable" <null>
<null> c my_app 1 {} success <null> 1 standard true "SELECT count(*) FROM t" "strict serializable" true
<null> c my_app 1 {} success <null> <null> <null> true "DROP CLUSTER c" "strict serializable" <null>
quickstart quickstart my_app 1 {} error "Evaluation error: division by zero" <null> <null> true "SELECT f/0 FROM t" "strict serializable" true
quickstart quickstart my_app 1 {} success <null> 1 constant true "EXECUTE p('hello world')" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> 1 fast-path true "SELECT * FROM t" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> 1 standard true "SELECT count(*) FROM t" "strict serializable" true
quickstart quickstart my_app 1 {} success <null> 2 constant true "FETCH c" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true BEGIN "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true COMMIT "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "CREATE CLUSTER c REPLICAS (r1 (size '1'))" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "CREATE DEFAULT INDEX i ON t" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "CREATE TABLE t(f int)" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "DECLARE c CURSOR FOR VALUES (1), (2)" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "FETCH c" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "FETCH c" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "INSERT INTO t VALUES (1)" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "PREPARE p AS values ($1)" "strict serializable" <null>
quickstart quickstart my_app 1 {} success <null> <null> <null> true "SET cluster TO c" "strict serializable" <null>
mz_introspection mz_introspection my_app 1 {} success <null> 1 constant true "SELECT 'beginning real test!'" "strict serializable" <null>
mz_introspection mz_introspection my_app 1 {} success <null> 1 constant true "SELECT 'serializable'" serializable <null>
mz_introspection mz_introspection my_app 1 {} success <null> 1 standard true "SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics" "strict serializable" true

> WITH all_stmts AS (SELECT mseh.id, mseh.began_at, mst.sql FROM mz_internal.mz_statement_execution_history mseh JOIN mz_internal.mz_prepared_statement_history mpsh ON mseh.prepared_statement_id = mpsh.id JOIN (SELECT DISTINCT sql, sql_hash, redacted_sql FROM mz_internal.mz_sql_text) mst ON mpsh.sql_hash = mst.sql_hash),
       test_begin AS (SELECT began_at FROM all_stmts WHERE sql = 'SELECT ''beginning real test!''' ORDER BY began_at DESC LIMIT 1)
  SELECT sql, event_type FROM test_begin, mz_internal.mz_statement_lifecycle_history mslh
  JOIN all_stmts ON mslh.statement_id = all_stmts.id
  WHERE all_stmts.began_at >= test_begin.began_at AND all_stmts.sql NOT LIKE '%sduiahsdfuoiahsdf%'
BEGIN execution-began
BEGIN execution-finished
COMMIT execution-began
COMMIT execution-finished
"CREATE CLUSTER c REPLICAS (r1 (size '1'))" execution-began
"CREATE CLUSTER c REPLICAS (r1 (size '1'))" execution-finished
"CREATE DEFAULT INDEX i ON t" execution-began
"CREATE DEFAULT INDEX i ON t" execution-finished
"CREATE TABLE t(f int)" execution-began
"CREATE TABLE t(f int)" execution-finished
"DECLARE c CURSOR FOR VALUES (1), (2)" execution-began
"DECLARE c CURSOR FOR VALUES (1), (2)" execution-finished
"DROP CLUSTER c" execution-began
"DROP CLUSTER c" execution-finished
"EXECUTE p('hello world')" compute-dependencies-finished
"EXECUTE p('hello world')" execution-began
"EXECUTE p('hello world')" execution-finished
"EXECUTE p('hello world')" storage-dependencies-finished
"FETCH c" compute-dependencies-finished
"FETCH c" execution-began
"FETCH c" execution-began
"FETCH c" execution-began
"FETCH c" execution-finished
"FETCH c" execution-finished
"FETCH c" execution-finished
"FETCH c" storage-dependencies-finished
"INSERT INTO t VALUES (1)" execution-began
"INSERT INTO t VALUES (1)" execution-finished
"PREPARE p AS values ($1)" execution-began
"PREPARE p AS values ($1)" execution-finished
"SELECT 'beginning real test!'" compute-dependencies-finished
"SELECT 'beginning real test!'" execution-began
"SELECT 'beginning real test!'" execution-finished
"SELECT 'beginning real test!'" storage-dependencies-finished
"SELECT 'serializable'" compute-dependencies-finished
"SELECT 'serializable'" execution-began
"SELECT 'serializable'" execution-finished
"SELECT 'serializable'" storage-dependencies-finished
"SELECT * FROM t" compute-dependencies-finished
"SELECT * FROM t" execution-began
"SELECT * FROM t" execution-finished
"SELECT * FROM t" storage-dependencies-finished
"SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics" compute-dependencies-finished
"SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics" execution-began
"SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics" execution-finished
"SELECT count(*) > 0 FROM mz_internal.mz_cluster_replica_metrics" storage-dependencies-finished
"SELECT count(*) FROM t" compute-dependencies-finished
"SELECT count(*) FROM t" compute-dependencies-finished
"SELECT count(*) FROM t" execution-began
"SELECT count(*) FROM t" execution-began
"SELECT count(*) FROM t" execution-finished
"SELECT count(*) FROM t" execution-finished
"SELECT count(*) FROM t" storage-dependencies-finished
"SELECT count(*) FROM t" storage-dependencies-finished
"SELECT f/0 FROM t" compute-dependencies-finished
"SELECT f/0 FROM t" execution-began
"SELECT f/0 FROM t" execution-finished
"SELECT f/0 FROM t" storage-dependencies-finished
"SET cluster TO c" execution-began
"SET cluster TO c" execution-finished
"SET transaction_isolation TO serializable" execution-began
"SET transaction_isolation TO serializable" execution-finished

# Test that everything in a transaction has the same transaction ID

> BEGIN --hello

> SELECT 'transaction statement 1'
"transaction statement 1"

> SELECT 'transaction statement 2'
"transaction statement 2"

> ROLLBACK

> WITH begin_tid AS
  (SELECT transaction_id FROM mz_internal.mz_statement_execution_history mseh, mz_internal.mz_prepared_statement_history mpsh, mz_internal.mz_sql_text mst
   WHERE mseh.prepared_statement_id = mpsh.id
   AND mpsh.sql_hash = mst.sql_hash
   AND mst.sql = 'BEGIN --hello')
  SELECT sql FROM mz_internal.mz_statement_execution_history mseh, mz_internal.mz_prepared_statement_history mpsh, begin_tid, mz_internal.mz_sql_text mst
  WHERE mseh.prepared_statement_id = mpsh.id
  AND mseh.transaction_id = begin_tid.transaction_id
  AND mpsh.sql_hash = mst.sql_hash
  AND mseh.application_name = 'my_app'
"BEGIN --hello"
"SELECT 'transaction statement 1'"
"SELECT 'transaction statement 2'"
ROLLBACK
