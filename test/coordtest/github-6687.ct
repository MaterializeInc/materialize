# Regression for https://github.com/MaterializeInc/materialize/issues/6687

# This tests that if a sink is created immediately after an index
# (and before update-upper of that index), that the as of time
# for the sink is correct. To see this crash, comment out the
# `candidate.advance_by(since.borrow());` line in `determine_frontier`,
# which causes:
#
# Dataflow materialize.public.s requested as_of (Antichain { elements: [0] }) not >= since (Antichain { elements: [1] })

sql
CREATE TABLE t (i INT);
----
CreatedTable {
    existed: false,
}

sql
CREATE DEFAULT INDEX t_primary_idx ON t
----
CreatedIndex {
    existed: false,
}

sql
ALTER INDEX t_primary_idx SET (logical_compaction_window = '1ms')
----
AlteredObject(
    Index,
)

update-upper
materialize.public.t_primary_idx 2
----

sql
CREATE MATERIALIZED VIEW v AS SELECT * FROM t;
----
CreatedView {
    existed: false,
}

sql
CREATE SINK s FROM v INTO AVRO OCF '<TEMP>/sink';
----
CreatedSink {
    existed: false,
}
