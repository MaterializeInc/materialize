inc-timestamp
1
----

create-file name=s1
1
----

create-file name=s2
2
----

sql
CREATE MATERIALIZED SOURCE s1 (a)
FROM FILE '<TEMP>/s1'
WITH (tail = true)
FORMAT TEXT;
----
CreatedSource {
    existed: false,
}

sql
CREATE MATERIALIZED SOURCE s2 (a)
FROM FILE '<TEMP>/s2'
WITH (tail = true)
FORMAT TEXT;
----
CreatedSource {
    existed: false,
}

sql
CREATE MATERIALIZED VIEW v1 AS SELECT count(*) AS c FROM s1;
----
CreatedView {
    existed: false,
}

sql
CREATE MATERIALIZED VIEW v2 AS SELECT count(*) AS c FROM s2;
----
CreatedView {
    existed: false,
}

wait-sql
SELECT
	(SELECT c = 1 FROM v1),
	(SELECT c = 1 FROM v2);
----

append-file name=s1
3
----

# Wait for the append to s1, but prevent increasing the since and upper
# of v2 so its timestamp is < v1's.
wait-sql exclude-uppers=materialize.public.v2_primary_idx
SELECT c = 2 FROM v1;
----

# We observe the expected count for v1;
sql
SELECT * FROM v1;
----
Rows(
    [
        Row{[
            Int64(
                2,
            ),
        ]},
    ],
)

# We observe the expected count for v2;
sql
SELECT * FROM v2;
----
Rows(
    [
        Row{[
            Int64(
                1,
            ),
        ]},
    ],
)

# But when combined, the count for v1 is 1, which means we have chosen
# an older timestamp and thus are not linearizable.
sql
SELECT * FROM v1, v2;
----
Rows(
    [
        Row{[
            Int64(
                1,
            ),
            Int64(
                1,
            ),
        ]},
    ],
)
