#!/usr/bin/env bash

# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Test that a catalog created by materialized v0.1.0 is compatible with the
# version of materialized under test.

set -euo pipefail

say() {
    echo "### $* ###"
}

run_sql() {
    psql -U materialize -h localhost -p 6875 materialize -c "\pset footer off" -c "$1"
}

launch_materialized() {
    name=$1
    shift
    "materialized-$name" -w1 "$@" &
    materialized_pid=$?
    wait-for-it --timeout=30 -q localhost:6875
    run_sql "SELECT 1" > /dev/null
}

kill_materialized() {
  kill "$materialized_pid"
  wait 2> /dev/null
}

wait-for-it --timeout=30 kafka:9092
wait-for-it --timeout=30 schema-registry:8081

say "launching materialized-edge"
launch_materialized edge --log-file=stderr

say "initially populating topics"
testdrive --kafka-addr kafka:9092 --schema-registry-url=http://schema-registry:8081 <<'EOF'
$ set consistency={
     "name": "materialize.byo.consistency",
     "type": "record",
     "fields": [
         {
           "name": "source",
           "type": "string"
         },
         {
           "name": "partition_count",
           "type": "int"
         },
         {
           "name": "partition_id",
           "type": ["int","string"]
         },
         {
            "name": "timestamp",
            "type": "long"
         },
         {
           "name": "offset",
           "type": "long"
         }
     ]
  }

$ set schema={
    "type": "record",
    "name": "envelope",
    "fields": [
      {"name": "a", "type": "long"},
      {"name": "b", "type": "long"}
    ]
  }

$ kafka-create-topic topic=input-consistency

$ kafka-ingest format=avro topic=input-consistency schema=${consistency}
{"source": "testdrive-input-${testdrive.seed}", "partition_count": 1, "partition_id": {"int": 0}, "timestamp": 1, "offset": 4}

$ kafka-create-topic topic=input

$ kafka-ingest format=avro topic=input schema=${schema} timestamp=1
{"a": 1, "b": 1}
{"a": 2, "b": 1}
{"a": 3, "b": 1}
{"a": 1, "b": 2}

> CREATE MATERIALIZED SOURCE input_byo
  FROM KAFKA BROKER '${testdrive.kafka-addr}' TOPIC 'testdrive-input-${testdrive.seed}'
    WITH (consistency = 'testdrive-input-consistency-${testdrive.seed}')
  FORMAT AVRO USING SCHEMA '${schema}'

> SELECT * FROM input_byo
a  b
------
1  1
2  1
3  1
1  2

> CREATE SINK output FROM input_byo
  INTO KAFKA BROKER '${testdrive.kafka-addr}' TOPIC 'output-sink'
  WITH (exactly_once=true, consistency=true)
  FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY '${testdrive.schema-registry-url}'

$ kafka-verify format=avro sink=materialize.public.output
{"before": null, "after": {"row": {"a": 1, "b": 1}}}
{"before": null, "after": {"row": {"a": 1, "b": 2}}}
{"before": null, "after": {"row": {"a": 2, "b": 1}}}
{"before": null, "after": {"row": {"a": 3, "b": 1}}}
EOF

say "killing materialized"
kill_materialized

say "launching materialized-edge"
launch_materialized edge --log-file=stderr

say "validating edge state"
testdrive --no-reset --kafka-addr kafka:9092 --schema-registry-url=http://schema-registry:8081 <<'EOF'
$ set consistency={
     "name": "materialize.byo.consistency",
     "type": "record",
     "fields": [
         {
           "name": "source",
           "type": "string"
         },
         {
           "name": "partition_count",
           "type": "int"
         },
         {
           "name": "partition_id",
           "type": ["int","string"]
         },
         {
            "name": "timestamp",
            "type": "long"
         },
         {
           "name": "offset",
           "type": "long"
         }
     ]
  }

$ set schema={
    "type": "record",
    "name": "envelope",
    "fields": [
      {"name": "a", "type": "long"},
      {"name": "b", "type": "long"}
    ]
  }

$ kafka-ingest format=avro topic=input-consistency schema=${consistency} timestamp=2
{"source": "testdrive-input-${testdrive.seed}", "partition_count": 1, "partition_id": {"int": 0}, "timestamp": 2, "offset": 6}

$ kafka-ingest format=avro topic=input schema=${schema} timestamp=2
{"a": 4, "b": 1}
{"a": 5, "b": 2}

> SELECT * FROM input_byo
a  b
------
1  1
2  1
3  1
1  2
4  1
5  2

$ kafka-verify format=avro sink=materialize.public.output
{"before": null, "after": {"row": {"a": 1, "b": 1}}}
{"before": null, "after": {"row": {"a": 1, "b": 2}}}
{"before": null, "after": {"row": {"a": 2, "b": 1}}}
{"before": null, "after": {"row": {"a": 3, "b": 1}}}
{"before": null, "after": {"row": {"a": 4, "b": 1}}}
{"before": null, "after": {"row": {"a": 5, "b": 2}}}
EOF
