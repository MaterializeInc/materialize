# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

#
# Insert 100K values prior to restart and then test that we never observe a partial
# view of those values post-restart
#

$ set keyschema={
    "type": "record",
    "name": "Key",
    "fields": [
        {"name": "f1", "type": "string"}
    ]
  }

$ set schema={
        "type" : "record",
        "name" : "test",
        "fields" : [
            {"name":"f2", "type":"string"}
        ]
    }

# We use partitions=3 here in order to introduce some concurrency during ingestion
$ kafka-create-topic topic=linearizability partitions=3

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "a${kafka-ingest.iteration}"} {"f2": "a${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "b${kafka-ingest.iteration}"} {"f2": "b${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "c${kafka-ingest.iteration}"} {"f2": "c${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "d${kafka-ingest.iteration}"} {"f2": "d${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "e${kafka-ingest.iteration}"} {"f2": "e${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "f${kafka-ingest.iteration}"} {"f2": "f${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "g${kafka-ingest.iteration}"} {"f2": "g${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "h${kafka-ingest.iteration}"} {"f2": "h${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "i${kafka-ingest.iteration}"} {"f2": "i${kafka-ingest.iteration}"}

$ kafka-ingest format=avro topic=linearizability key-format=avro key-schema=${keyschema} schema=${schema} publish=true repeat=100000
{"f1": "j${kafka-ingest.iteration}"} {"f2": "j${kafka-ingest.iteration}"}

> CREATE SOURCE linearizability
  FROM KAFKA BROKER '${testdrive.kafka-addr}' TOPIC 'testdrive-linearizability-${testdrive.seed}'
  FORMAT AVRO USING CONFLUENT SCHEMA REGISTRY '${testdrive.schema-registry-url}'
  ENVELOPE UPSERT

> CREATE MATERIALIZED VIEW linearizability_count AS SELECT COUNT(*) FROM linearizability;

> SELECT * FROM linearizability_count;
1000000
