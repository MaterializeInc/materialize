# test that our range types' binary functions have the same implementation/results as PG

send
Parse {"query": "CREATE TABLE int4range_values (a int4range)"}
Bind
Execute
Parse {"query": "INSERT INTO int4range_values VALUES ('[,1)'), ('[,1]'), ('[,)'), ('[,]'), ('(,1)'), ('(,1]'), ('(,)'), ('(,]'), ('[-1,1)'), ('[-1,1]'), ('(-1,1)'), ('(-1,1]'), ('[0,0)'), ('[0,0]'), ('(0,0)'), ('(0,0]'), ('[1,)'), ('[1,]'), ('(1,)'), ('(1,]')"}
Bind
Execute
Parse {"query": "CREATE TABLE int4range_test_values (v int4range)"}
Bind
Execute
Parse {"query": "INSERT INTO int4range_test_values VALUES ('empty'), ('(,)'), ('(,1)'), ('(-1,)'), ('[-1,1)'), ('[-99,-50)'), ('[50,99)')"}
Bind
Execute
Parse {"query": "CREATE TABLE numrange_values (a numrange)"}
Bind
Execute
Parse {"query": "INSERT INTO numrange_values VALUES ('[,1)'), ('[,1]'), ('[,)'), ('[,]'), ('(,1)'), ('(,1]'), ('(,)'), ('(,]'), ('[-1,1)'), ('[-1,1]'), ('(-1,1)'), ('(-1,1]'), ('[0,0)'), ('[0,0]'), ('(0,0)'), ('(0,0]'), ('[1,)'), ('[1,]'), ('(1,)'), ('(1,]')"}
Bind
Execute
Parse {"query": "CREATE TABLE numrange_test_values (v numrange)"}
Bind
Execute
Parse {"query": "INSERT INTO numrange_test_values VALUES ('empty'), ('(,)'), ('(,1)'), ('(-1,)'), ('[-1,1)'), ('[-99,-50)'), ('[50,99)')"}
Bind
Execute
Sync
----

until
ReadyForQuery
----
ParseComplete
BindComplete
CommandComplete {"tag":"CREATE TABLE"}
ParseComplete
BindComplete
CommandComplete {"tag":"INSERT 0 20"}
ParseComplete
BindComplete
CommandComplete {"tag":"CREATE TABLE"}
ParseComplete
BindComplete
CommandComplete {"tag":"INSERT 0 7"}
ParseComplete
BindComplete
CommandComplete {"tag":"CREATE TABLE"}
ParseComplete
BindComplete
CommandComplete {"tag":"INSERT 0 20"}
ParseComplete
BindComplete
CommandComplete {"tag":"CREATE TABLE"}
ParseComplete
BindComplete
CommandComplete {"tag":"INSERT 0 7"}
ReadyForQuery {"status":"I"}

send
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL) int4range_values(a), int4range_test_values WHERE a @> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a <@ v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a && v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a << v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a >> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a &< v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a &> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM int4range_values WHERE a IS NOT NULL ) int4range_values(a), int4range_test_values WHERE a -|- v GROUP BY a ORDER BY a;"}
Bind
Execute
Sync
----

until
ReadyForQuery
----
ParseComplete
BindComplete
DataRow {"fields":["empty","{empty}"]}
DataRow {"fields":["(,1)","{empty,\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(,2)","{empty,\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(,)","{empty,\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{empty,\"[-1,1)\"}"]}
DataRow {"fields":["[-1,2)","{empty,\"[-1,1)\"}"]}
DataRow {"fields":["[0,1)","{empty}"]}
DataRow {"fields":["[0,2)","{empty}"]}
DataRow {"fields":["[1,)","{empty,\"[50,99)\"}"]}
DataRow {"fields":["[2,)","{empty,\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 10"}
ParseComplete
BindComplete
DataRow {"fields":["empty","{empty,\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,2)","{\"(,)\"}"]}
DataRow {"fields":["(,)","{\"(,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\"}"]}
DataRow {"fields":["[-1,2)","{\"(,)\"}"]}
DataRow {"fields":["[0,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[0,2)","{\"(,)\",\"[0,)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"[0,)\"}"]}
DataRow {"fields":["[2,)","{\"(,)\",\"[0,)\"}"]}
CommandComplete {"tag":"SELECT 10"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["(,2)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["(,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[-1,2)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[0,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[0,2)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[2,)","{\"(,)\",\"[0,)\",\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 9"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"[50,99)\"}"]}
DataRow {"fields":["(,2)","{\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{\"[50,99)\"}"]}
DataRow {"fields":["[-1,2)","{\"[50,99)\"}"]}
DataRow {"fields":["[0,1)","{\"[50,99)\"}"]}
DataRow {"fields":["[0,2)","{\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 6"}
ParseComplete
BindComplete
DataRow {"fields":["[-1,1)","{\"[-99,-50)\"}"]}
DataRow {"fields":["[-1,2)","{\"[-99,-50)\"}"]}
DataRow {"fields":["[0,1)","{\"[-99,-50)\"}"]}
DataRow {"fields":["[0,2)","{\"[-99,-50)\"}"]}
DataRow {"fields":["[1,)","{\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["[2,)","{\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
CommandComplete {"tag":"SELECT 6"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,2)","{\"(,)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,)","{\"(,)\",\"[0,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,2)","{\"(,)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[0,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[0,2)","{\"(,)\",\"[0,)\",\"[50,99)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"[0,)\"}"]}
DataRow {"fields":["[2,)","{\"(,)\",\"[0,)\"}"]}
CommandComplete {"tag":"SELECT 9"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,2)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["[-1,2)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["[0,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[0,2)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[1,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
DataRow {"fields":["[2,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"[0,)\"}"]}
CommandComplete {"tag":"SELECT 9"}
ParseComplete
BindComplete
DataRow {"fields":["[1,)","{\"(,1)\",\"[-1,1)\"}"]}
CommandComplete {"tag":"SELECT 1"}
ReadyForQuery {"status":"I"}

send
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a @> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a <@ v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a && v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a << v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a >> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a &< v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a &> v GROUP BY a ORDER BY a;"}
Bind
Execute
Parse {"query": "SELECT a::text t, array_agg(v::text ORDER BY v) FROM ( SELECT DISTINCT a FROM numrange_values WHERE a IS NOT NULL ) numrange_values(a), numrange_test_values WHERE a -|- v GROUP BY a ORDER BY a;"}
Bind
Execute
Sync
----

until
ReadyForQuery
----
ParseComplete
BindComplete
DataRow {"fields":["empty","{empty}"]}
DataRow {"fields":["(,1)","{empty,\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(,1]","{empty,\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(,)","{empty,\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{empty,\"[-1,1)\"}"]}
DataRow {"fields":["[-1,1]","{empty,\"[-1,1)\"}"]}
DataRow {"fields":["(-1,1)","{empty}"]}
DataRow {"fields":["(-1,1]","{empty}"]}
DataRow {"fields":["[0,0]","{empty}"]}
DataRow {"fields":["[1,)","{empty,\"[50,99)\"}"]}
DataRow {"fields":["(1,)","{empty,\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 11"}
ParseComplete
BindComplete
DataRow {"fields":["empty","{empty,\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,1]","{\"(,)\"}"]}
DataRow {"fields":["(,)","{\"(,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\"}"]}
DataRow {"fields":["[-1,1]","{\"(,)\"}"]}
DataRow {"fields":["(-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(-1,1]","{\"(,)\",\"(-1,)\"}"]}
DataRow {"fields":["[0,0]","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"(-1,)\"}"]}
DataRow {"fields":["(1,)","{\"(,)\",\"(-1,)\"}"]}
CommandComplete {"tag":"SELECT 11"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(,1]","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[-1,1]","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(-1,1]","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[0,0]","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(1,)","{\"(,)\",\"(-1,)\",\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 10"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"[50,99)\"}"]}
DataRow {"fields":["(,1]","{\"[50,99)\"}"]}
DataRow {"fields":["[-1,1)","{\"[50,99)\"}"]}
DataRow {"fields":["[-1,1]","{\"[50,99)\"}"]}
DataRow {"fields":["(-1,1)","{\"[50,99)\"}"]}
DataRow {"fields":["(-1,1]","{\"[50,99)\"}"]}
DataRow {"fields":["[0,0]","{\"[50,99)\"}"]}
CommandComplete {"tag":"SELECT 7"}
ParseComplete
BindComplete
DataRow {"fields":["[-1,1)","{\"[-99,-50)\"}"]}
DataRow {"fields":["[-1,1]","{\"[-99,-50)\"}"]}
DataRow {"fields":["(-1,1)","{\"[-99,-50)\"}"]}
DataRow {"fields":["(-1,1]","{\"[-99,-50)\"}"]}
DataRow {"fields":["[0,0]","{\"[-99,-50)\"}"]}
DataRow {"fields":["[1,)","{\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(1,)","{\"(,1)\",\"[-99,-50)\",\"[-1,1)\"}"]}
CommandComplete {"tag":"SELECT 7"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,1]","{\"(,)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(,)","{\"(,)\",\"(-1,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["[-1,1]","{\"(,)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(-1,1)","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["(-1,1]","{\"(,)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["[0,0]","{\"(,1)\",\"(,)\",\"[-1,1)\",\"(-1,)\",\"[50,99)\"}"]}
DataRow {"fields":["[1,)","{\"(,)\",\"(-1,)\"}"]}
DataRow {"fields":["(1,)","{\"(,)\",\"(-1,)\"}"]}
CommandComplete {"tag":"SELECT 10"}
ParseComplete
BindComplete
DataRow {"fields":["(,1)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,1]","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["(,)","{\"(,1)\",\"(,)\"}"]}
DataRow {"fields":["[-1,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["[-1,1]","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\"}"]}
DataRow {"fields":["(-1,1)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(-1,1]","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[0,0]","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["[1,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
DataRow {"fields":["(1,)","{\"(,1)\",\"(,)\",\"[-99,-50)\",\"[-1,1)\",\"(-1,)\"}"]}
CommandComplete {"tag":"SELECT 10"}
ParseComplete
BindComplete
DataRow {"fields":["[1,)","{\"(,1)\",\"[-1,1)\"}"]}
CommandComplete {"tag":"SELECT 1"}
ReadyForQuery {"status":"I"}
