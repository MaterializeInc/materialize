# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1209.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

# no data

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 30)

    lines (line TEXT, line_no INT) AS (
        SELECT regexp_split_to_array(input, '\n')[i], i
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) i
    ),

    numbers(value INT, line_no INT, col_no INT) AS (
        SELECT regexp_split_to_array(line, ' ')[j]::INT, line_no, j
        FROM lines, generate_series(1, array_length(regexp_split_to_array(line, ' '), 1)) j
    ),

    -- Contains non-zero values of differences after each round.
    derivatives(value INT, line_no INT, col_no INT, round INT) AS (
        SELECT numbers.*, 1
        FROM numbers
        UNION
        SELECT
            COALESCE(i2.value, 0) - COALESCE(i1.value, 0),
            COALESCE(i1.line_no, i2.line_no),
            COALESCE(i1.col_no + 1, i2.col_no),
            COALESCE(i1.round, i2.round) + 1
        FROM derivatives i1 FULL OUTER JOIN derivatives i2 ON (i1.line_no = i2.line_no AND i1.round = i2.round AND i1.col_no + 1 = i2.col_no)
        WHERE COALESCE(i2.value, 0) - COALESCE(i1.value, 0) != 0
          AND COALESCE(i1.col_no + 1, i2.col_no) > COALESCE(i1.round, i2.round)
          AND COALESCE(i1.col_no + 1, i2.col_no) <= 21
    ),

    -- Accumulate the derivatives at the leading edge
    part1(part1 BIGINT) AS (
        SELECT SUM(value)
        FROM derivatives
        WHERE col_no = 21
    ),

    -- Accumulate the derivatives at the preceding edge
    part2(part2 BIGINT) AS (
        SELECT SUM(pow(-1, round + 1) * value)
        FROM derivatives
        WHERE col_no = round
    )

-- SELECT * FROM derivatives WHERE line_no = 1 ORDER BY round, col_no;
SELECT * FROM part1, part2;
----
Explained Query:
  With Mutually Recursive
    cte l0 =
      Map ((#2 + 1))
        Get l3
    cte l1 =
      Project (#0..=#4, #6)
        Join on=(#1 = #5 AND #3 = #7 AND #6 = (#2 + 1)) type=differential
          ArrangeBy keys=[[#1, (#2 + 1), #3]]
            Project (#0..=#3)
              Filter (#4 <= 21) AND (#1) IS NOT NULL AND (#4 > #3)
                Get l0
          ArrangeBy keys=[[#1..=#3]]
            Filter (#2 <= 21) AND (#1) IS NOT NULL AND (#2 > #3)
              Get l3
    cte l2 =
      Distinct project=[#0..=#2]
        Project (#1, #3, #5)
          Get l1
    cte [recursion_limit=30, return_at_limit] l3 =
      Distinct project=[#0..=#3]
        Union
          Project (#3, #0, #2, #4)
            Map (text_to_integer(array_index(regexp_split_to_array[" ", case_insensitive=false](#1), integer_to_bigint(#2))), 1)
              FlatMap generate_series(1, (regexp_split_to_array[" ", case_insensitive=false](#1) array_length 1), 1)
                Project (#1, #2)
                  Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
                    FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
                      ReadStorage materialize.public.input
          Project (#8..=#11)
            Map ((coalesce(#4, 0) - coalesce(#0, 0)), coalesce(#1, #5), coalesce((#2 + 1), #6), (coalesce(#3, #7) + 1))
              Union
                Project (#4..=#7, #0..=#3)
                  Map (null, null, null, null)
                    Union
                      Negate
                        Project (#0..=#3)
                          Join on=(#1 = #4 AND #2 = #6 AND #3 = #5) type=differential
                            ArrangeBy keys=[[#1..=#3]]
                              Filter (#2 <= 21) AND (#1) IS NOT NULL AND (#2 > #3) AND (0 != (coalesce(#0, 0) - 0))
                                Get l3
                            ArrangeBy keys=[[#0, #2, #1]]
                              Get l2
                      Filter (#2 <= 21) AND (#2 > #3) AND (0 != (coalesce(#0, 0) - 0))
                        Get l3
                Map (null, null, null, null)
                  Union
                    Negate
                      Project (#0..=#3)
                        Join on=(#1 = #4 AND #3 = #5 AND #6 = (#2 + 1)) type=differential
                          ArrangeBy keys=[[#1, #3, (#2 + 1)]]
                            Project (#0..=#3)
                              Filter (#4 <= 21) AND (#1) IS NOT NULL AND (#4 > #3) AND (0 != (0 - coalesce(#0, 0)))
                                Get l0
                          ArrangeBy keys=[[#0..=#2]]
                            Get l2
                    Project (#0..=#3)
                      Filter (#4 <= 21) AND (#4 > #3) AND (0 != (0 - coalesce(#0, 0)))
                        Get l0
                Project (#0..=#4, #1, #5, #3)
                  Filter (0 != (coalesce(#4, 0) - coalesce(#0, 0)))
                    Get l1
  Return
    With
      cte l4 =
        Reduce aggregates=[sum(#0)]
          Project (#0)
            Filter (#2 = 21)
              Get l3
      cte l5 =
        Reduce aggregates=[sum((power(-1, integer_to_double((#1 + 1))) * integer_to_double(#0)))]
          Project (#0, #2)
            Filter (#2 = #3)
              Get l3
    Return
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Union
            Get l4
            Map (null)
              Union
                Negate
                  Project ()
                    Get l4
                Constant
                  - ()
        ArrangeBy keys=[[]]
          Project (#1)
            Map (f64toi64(#0))
              Union
                Get l5
                Map (null)
                  Union
                    Negate
                      Project ()
                        Get l5
                    Constant
                      - ()

Source materialize.public.input

Target cluster: quickstart

EOF
