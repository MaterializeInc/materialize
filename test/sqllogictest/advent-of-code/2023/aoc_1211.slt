# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1211.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input VALUES (
'#?##..#?.???..##??...??....#....?....#?...#.?..?.#...#....?#..#..##...???.##?...?#####.....##..?.??.?........?.#..#?##..#.###??......??.?#..
.#...#.#?.#...?.#??..##.?##?.#......##.?...?...??#.?.?..?.###??.#.......#...?#.##.##.?#.#?..##?#.###.?..#.#?........?.??##..#?....##...?..??
?.#..###????#.?.#....?#.?.?.?.#.?..?.#.#.#.?.#.??..?.??#????.?.#.#.?...#.#..?#?#?.#...?..#.#...?.?#?.?...#?..?.?.?##.??.?.#......#.??....##.
..#.....?.??..#?...?##?....#??.###??.#.#.#..?.#?..?##..?.?##..##.##?.#?..??#?..#.?.#....#??.?.?.?.??#?#.#...?.#?.??.#??.?.?#.#...?...??#..?#
#.??..#?.?....#.?.?.##.#...???...??.#.#..?..##...?.??.###.???#..#??....?.??.?#?#?...#??....?#.?#?...?..#..#.?..?.?..#.#.#.#...#.??..#.#.?#..
..##....?....#.??..?.#..?#.?#?..?#?..?....#..??....##?#..##?.#.?.?..??.#......#...#.?.#.#..?...............###?.##.?##..#???##??.?.?###...?.
#.#..#####??#??##.###...#.#.#.#.####..?#.?.##...#.##..#.#..#.?.#.#?.#.#...?....??#.#..?#.##..##?......#?.#.#..?.......#?.?.....#..?.#.#??##.
.##.?.##..?#.##..?#.#....#...##.?.#?#...##??.#?##.?..?#...???.#..?.#?......?.#?#..##???.#...##.#..#?..?.#...?.?..##..?.??##?..?#??..#..?#.??
#.#.#........?.???..#.###?##.?....?###...#?##?..##..#?.?...#...#??.??.?##...?...????....?.?..#...#...#...#.?.#.....??..???..?#??..?#.#.?.#.?
?.?...#..?.#.#..?..###?.#?#?.##.??...??#...#?#.???.?#?#.#.#?...#....#.?.##...#?##..#..?#.#...??#.#.?..?#.#?#.....#?.......??#.###...#?#.....
..#?...#.#?.#.??..?.?..#.#...?#..#.#......?..#??#...?..#.#...#?..#?.#.#.?.###..????#?..?.??.#..?#?..#........#....?###...#?..#.?#.#?.#??....
.##..#?##..#?...#?.#.?.....#..?..?#.??..#..#.?...?.##.?.#..###.#?.?#.....##?.??#..?..#..??##?..#?#...##.#.?.?#.?..#...##..??.???..??..#.#...
?.#..#.#?....?.?.?.#.?.#.#?#.#......?.#?....#.#.#.?#.##....?....#....#.#?..#.#.?#...?.?..?..###?.?.?.###..#..??#????#.....#...##.?#..#???.#.
?#..?..?#.#.?.?...??.#.......#?#.?..#..?.#.??.#?.#.#?...##..?..?#??.#???......?.?.....#.?#.#?#??.?.##..??.??.#??##?.#....?#.#.#??.?.?.?.?#.?
....#.#.??.??.?..###?#.?..##.???.?.#?#....##?...##..#.#?#.##?.#......#.?#.?.#..??#.#..#?#..?.........##.#.??.??#.##.##?.?#??..#.?#.##.?.?.?#
..??.###....?#?.???..#.....??.??#...##.?..#...##..#.#..?#.....#.???.....#.#??...#......?.?.#.#??##?.#.??#..#...????.#..#.?#..##?..?.?.?..#..
#?.....#.???#..##.#?.?#.?....?#??...?.....##...#.#.#.##?..?..#.#....??.?#?.?#..#?....#.?#???.#?#..?.#.?#.???..?.?..?.#.?#?..###??.?##..#.###
????#.##....?.#.??.?....#?..?#...#..#???....#.##..???.#..##?.#.....#.??.#.....??..?....#....???##??....#....?#.?#...?..?..??....?..#.##.????
..?#?#??..##??#.....?.?#...??.?#...?#####?.?#.?#?##.#.?#?#??.??..?.?...#.??..#...#.#..##?.#..##?#.?.#??#?.#?.??#...#??.#.?#..??.###.?.#..?.?
..?#??.#?.#.?...##.#..#?.??#?..#...?##.#?.#?...##.#..###....?..#.....#?##.??#.##???.?.###...##.???....?.??.?#?.#?.#?.?#.??..###.?.#.?.....##
#..#.....#.#.???.#..??......?.?...?#?.#?.#??.#?#?##..?..??##.#..?..##.#.....##?.??.#..#?.??##?#??.??#??#.#?....?#?....??#..?.??..?#?..##?##.
..?..#??.?.?..?.??....#..#?.???..???.......#?#.?..?....##...#...#..?..?#...?..??.....#.#??#?.###..#?.#.#?.......??..#..?.??..#...##?..#.?..#
?.?....??.#.???.##?.#.?.?.??#.?.###.......?..#...??.#...#.#.?#.?..?...???.##..?.?..####?#....?.#..?...###?...??........#???##..##..??#.#.??.
?#.#?#...?.?....?....?...?.##.....##.##?.....?#####?..#?#.??#??.??#.....?..##..#?.#.#.#?#..#??......#.#?.###.#?#?.?.#.....#...?.#..#?....??.
#?...??...?..?#?#......?.....#.????#?.#?##???.#.?..##.#.##.....?..?.##.##.......?.##?......?#.#?.#.##...?..?#??..#..#..#.#?..?#...??#.?#.?.#
#..?....?#?#......#...#.........??#............#.?..?#.#....#.?#..#.....#??...#.?.?#??..?..??.#.?.#.....#?....?##.#?##..#?#...?#.??.?.??..?.
..###?...???.?#.##???#?.#?.?.?#.#.#.##.?#.####.#?.???.....##.?...#.##..?....#?.?#.?...#.##.?..#..??#..?#..#?#...?..?..??.....?...?.?...?.#?#
#??#.?##.#.?..##?..#.#??#????.?#.?....?...#....??...##?.#.?#?.?.##.#???.?#.?#?..?#.#.#?###?.....##..?..?.#?..?.?.#.#..?.?..?#.?##..#.#..?.#?
.?.#.....##..#?#.??...?...?....????.#?##?....#.#.#.?.#??...?.?.##.#.##.?...##.#???#.?.?......???.?.?..?..??..#.?##..###?.##.##?##.?.###??..?
??.#..###..??#.#.#.#.??.....?#??...?...?#.?...?#.#..#?#..?..#?.#.?#..?.#?.#.?#..#?..##.......??.?##?#??#??....#.......#.#...?#.?.?....?#..#.
?.?#..##?..?....??.#..#....#?....?..?..#.#.#.#?...#....##.??#.##.?.???#.#...?.....?.#...?#..?...??..#.#.?..?........###.#..##.?..#.#..??....
.....?.??#.?..#?#.#?.??........#????.......###.......?#??.##..#?####...?#.?.?.##??#?...?#.#...?...?...##..???.#.#.??????....#..#.?.?.##.?..?
??.?.#?..#.??.#.#.#.??.#.#??#.#...?...##......?...?...##..?.#?.?#...?..#....##.#?.#..?.....?...#?.?#.?#...?#??#?...??......?#?.??#.#??...?.?
#?.###..#.....#?....#.##...#.##.....#.#.#.#..##.....?..#.....?##...#?.??.......#??##?..###??....?.#?......#.??..#??.#?.#.#.###??.#?..?#?#..#
?.?....?.#??.#....?#?#?.?#.?.....#??#.??.?#?#.#......?.#?...?#..#.....??#.?....??.##...?..#?.#??.#.?.??....#?.?.#...##.?#...##....#.#??..?#.
?#?.?....?.##...??...#?##.#.????##.#..?..?..#..##.??#?.?.??#...?.?...#..?..#..??.?.?#.#.#??..?.#......#...#?.?...?#?.......#.???.#?.##..#?#.
..??.#..??#####.#?.........#.#.?####...?#.?.#??.#??#..?##?#.??#....?.??...?..?..??.#...?..????..#..##?###...#.??.?##..#.#..?.#..##?#.??.?#.?
?.##.?.#.##?.?...#...#?##.#.?.#..?#.?.??##?#??.?.?.#.???...??#.##..?#.??#.??....?..#?..##?#?##???.#..#??.?#???...#?##..#.#..#......??#..###.
###...#...??.#.?..#?..?...#.#?.?.?.?#....#.?#.#..####.?..??##?....?#.?.....#...?#??....??....#.????.?...#.??.#..#..??.?..##..#.?..?..##.#?..
#....#.?.##.?.......#...##?..#...#.?##..###?..#...?....?#????###.?.....?##.##?.#?.###?.#???#..#....?...#?.....#...?..#.?.#???#.?#.??.?#.#.??
#...#??......?..#.......??.?..#....#.?#.#?..#.##..??##..#?#.#?...#...?....?.?.?...#??#?#..####...#..?.#?#..#..#.?.####..#?#.##?#.?#?#.....?.
...#?...#...?#?.##.??..#..#?.?.....#.#?#...#.......#..#....?.??...#???.?...?.#??##.?##?##.#??.#?..##??...#..?.....#?#..##??..###...??.??#?#.
.........?.#.?.#?...?..?.??#?#.?.#??......#..#.#.?#?.#??#...#?#?.#?.#..?#...?...##?#.##..?.##......??.?##.?###?.#?##..#.?#?...#..##....?##?#
#??#.##.##..#..#???.?.?#.#...##?##?#.#??.?.#.#??.#.#.#.....?#???#??#..?.#.?..??..?.?....?#.....#.?#.??.?.????#..?.#.??###.??#?..#?..??##..?#
#.#??..#.?....###.....?#.....##?.#?.?.#.??##...?#?#.?...#..?#.?...?#..?#?#.##.?....##....#..#.##?.??..?.?.?#.?###.?.##?...#...??....#.#..#?.
?..?..?.?.????#???.??.#.???.??..##..#..??##?.#?..?#??##...?????.#?..#...#..?#...?..?#..#.#....?....#.#..?..?#??#??##....#?..?.???...#.#.#.?#
..##?#.#....??...........?.##.....?#?..#..?..#?.?.?...#?#.?###...#.#.?#?..?.#.??#?##...?..?........?.#.....##..?#..?..#.??.?...?.?###.#?#...
..?...#.#?#..#?..#..#..#...#..?.....#.#...#..#?.?.....?..??...#.?.?......?.#?##..?#..#.?..#..?#??...#.#.....?#...?.#...#.#..#.#?.#?.?##?#?##
#?.#...##.?.#.####.??.#?.?#?.#...#.?#.??#??.##.#.#..#...#.?.#.#.#.###....?.??.?......?....#????..#.......#..#.###.#.?....?#...#..?.#...#.#..
#...??...??..?.#?...##.?..?#.??.?.#.#..?..###?.????#....#..?.?#.#.#####?##...#.?...??.??...#.#?#.#?..?#..?#??.##.?.?..#....?.#..##.?..?...#.
?..#?##???..?.##??.?....##.??..?.#?....?..?..?....??#.#.??.?...?#?....#.?.#?????#.?#..#?..##...?????##.....#.#.####.?#.?...#?..?.??##?..#.??
?....?.#.#?..?.?...#..#.#?.#..#...?.#.?#.?.#.##??..#..#?#?#.#??..#.??.?...?.?..?##?...?.?..##.?..?.???...?#.##?#..??..#?#...?..?....#..#.##?
#?#.?#......?.#??##...?#.#.##.?...?...?...?#..#?###.##?##..?.#?#.?#..#...#....#?#.#??...?#.#?..#?##?..??..?..#?....?#.#?..#.#.##.?#.?.#..##?
.#.....##.##?.?...??..##...#?.#...#...#.??.?...#..?.?.#.##?.?#.#?..#???#?#?#.##..#.#.?...........#.?#..##...##??##..?.?###??#.#........#.?.#
?..#...#.##..?#.?.##..?..?.#....??#...#?..#.#.?.??.?..?#.#.#..??##?.##..?##?#..#?..??#.#.?.?#.?....#.##?#..#....?..##.??###?#...?..#.##.?#?#
.??......?..??##?..??...?...?##?.?###?..##?..#?..???#.##.##.?..#..???..???...??#..?##...##.?..?.??#..#####?.#.#..?......##.?.##.#.?#??#..#..
.#?..#.?.#...?.???.?..#...?...?.#....?..#........#.??..?...#.#?..?#....#...#.#...?.?.##???..???..#..??.?..#..#.##?..?#.#..##.??##...?#.....?');

query II
WITH MUTUALLY RECURSIVE

    lines(line TEXT, r INT) AS (
        SELECT regexp_split_to_array(input, '\n')[i], i
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) i
    ),

    symbols(symb TEXT, r INT, c INT) as (
        SELECT substring(line, j, 1), r, j
        FROM lines, generate_series(1, length(line)) j
    ),

    row_gaps(r INT) AS (
        SELECT r
        FROM symbols
        GROUP BY r
        HAVING COUNT(*) FILTER (WHERE symb = '#') = 0
    ),

    col_gaps(c INT) AS (
        SELECT c
        FROM symbols
        GROUP BY c
        HAVING COUNT(*) FILTER (WHERE symb = '#') = 0
    ),

    -- Part1: Expand space and restrict to galaxies
    galaxies(r INT, c INT) AS (
        SELECT
            r + (SELECT COUNT(*) FROM row_gaps WHERE row_gaps.r < symbols.r),
            c + (SELECT COUNT(*) FROM col_gaps WHERE col_gaps.c < symbols.c)
        FROM symbols
        WHERE symb = '#'
    ),
    -- Sum of L1 distance between distinct galaxies
    part1(part1 BIGINT) AS (
        SELECT SUM(ABS(g1.r - g2.r) + ABS(g1.c - g2.c))
        FROM galaxies g1, galaxies g2
        WHERE g1.r < g2.r
           OR (g1.r = g2.r AND g1.c < g2.c)
    ),

    -- Part2: Expand space MORE and restrict to galaxies
    galaxies2(r INT, c INT) AS (
        SELECT
            r + 999999 * (SELECT COUNT(*) FROM row_gaps WHERE row_gaps.r < symbols.r),
            c + 999999 * (SELECT COUNT(*) FROM col_gaps WHERE col_gaps.c < symbols.c)
        FROM symbols
        WHERE symb = '#'
    ),
    -- Sum of L1 distance between distinct galaxies
    part2(part2 BIGINT) AS (
        SELECT SUM(ABS(g1.r - g2.r) + ABS(g1.c - g2.c))
        FROM galaxies2 g1, galaxies2 g2
        WHERE g1.r < g2.r
           OR (g1.r = g2.r AND g1.c < g2.c)
    )

SELECT * FROM part1, part2;
----
129655908  129655908

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE

    lines(line TEXT, r INT) AS (
        SELECT regexp_split_to_array(input, '\n')[i], i
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) i
    ),

    symbols(symb TEXT, r INT, c INT) as (
        SELECT substring(line, j, 1), r, j
        FROM lines, generate_series(1, length(line)) j
    ),

    row_gaps(r INT) AS (
        SELECT r
        FROM symbols
        GROUP BY r
        HAVING COUNT(*) FILTER (WHERE symb = '#') = 0
    ),

    col_gaps(c INT) AS (
        SELECT c
        FROM symbols
        GROUP BY c
        HAVING COUNT(*) FILTER (WHERE symb = '#') = 0
    ),

    -- Part1: Expand space and restrict to galaxies
    galaxies(r INT, c INT) AS (
        SELECT
            r + (SELECT COUNT(*) FROM row_gaps WHERE row_gaps.r < symbols.r),
            c + (SELECT COUNT(*) FROM col_gaps WHERE col_gaps.c < symbols.c)
        FROM symbols
        WHERE symb = '#'
    ),
    -- Sum of L1 distance between distinct galaxies
    part1(part1 BIGINT) AS (
        SELECT SUM(ABS(g1.r - g2.r) + ABS(g1.c - g2.c))
        FROM galaxies g1, galaxies g2
        WHERE g1.r < g2.r
           OR (g1.r = g2.r AND g1.c < g2.c)
    ),

    -- Part2: Expand space MORE and restrict to galaxies
    galaxies2(r INT, c INT) AS (
        SELECT
            r + 999999 * (SELECT COUNT(*) FROM row_gaps WHERE row_gaps.r < symbols.r),
            c + 999999 * (SELECT COUNT(*) FROM col_gaps WHERE col_gaps.c < symbols.c)
        FROM symbols
        WHERE symb = '#'
    ),
    -- Sum of L1 distance between distinct galaxies
    part2(part2 BIGINT) AS (
        SELECT SUM(ABS(g1.r - g2.r) + ABS(g1.c - g2.c))
        FROM galaxies2 g1, galaxies2 g2
        WHERE g1.r < g2.r
           OR (g1.r = g2.r AND g1.c < g2.c)
    )

SELECT * FROM part1, part2;
----
Explained Query:
  With
    cte l0 =
      Project (#0, #2, #3)
        Map (substr(#1, #2, 1))
          FlatMap generate_series(1, char_length(#1), 1)
            Project (#1, #2)
              Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
                FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
                  ReadStorage materialize.public.input
    cte l1 =
      Project (#0, #1)
        Filter (#2 = "#")
          Get l0
    cte l2 =
      Distinct project=[#0, #1]
        Get l1
    cte l3 =
      Distinct project=[#0]
        Project (#0)
          Get l2
    cte l4 =
      Reduce group_by=[#0] aggregates=[count(*)]
        Project (#0)
          Filter (#1 < #0)
            CrossJoin type=differential
              ArrangeBy keys=[[]]
                Get l3
              ArrangeBy keys=[[]]
                Project (#0)
                  Filter (#1 = 0)
                    Reduce group_by=[#0] aggregates=[count((null OR ((#1) IS NOT NULL AND (#1 = "#"))))]
                      Project (#0, #2)
                        Get l0
    cte l5 =
      Union
        Get l4
        Map (0)
          Union
            Negate
              Project (#0)
                Get l4
            Get l3
    cte l6 =
      Distinct project=[#0]
        Project (#1)
          Get l2
    cte l7 =
      Reduce group_by=[#0] aggregates=[count(*)]
        Project (#0)
          Filter (#1 < #0)
            CrossJoin type=differential
              ArrangeBy keys=[[]]
                Get l6
              ArrangeBy keys=[[]]
                Project (#0)
                  Filter (#1 = 0)
                    Reduce group_by=[#0] aggregates=[count((null OR ((#1) IS NOT NULL AND (#1 = "#"))))]
                      Project (#1, #2)
                        Get l0
    cte l8 =
      Union
        Get l7
        Map (0)
          Union
            Negate
              Project (#0)
                Get l7
            Get l6
    cte l9 =
      Project (#0, #1, #3, #5)
        Join on=(#0 = #2 AND #1 = #4) type=delta
          ArrangeBy keys=[[#0], [#1]]
            Get l1
          ArrangeBy keys=[[#0]]
            Union
              Get l5
              Map (null)
                Union
                  Negate
                    Project (#0)
                      Get l5
                  Get l3
          ArrangeBy keys=[[#0]]
            Union
              Get l8
              Map (null)
                Union
                  Negate
                    Project (#0)
                      Get l8
                  Get l6
    cte l10 =
      ArrangeBy keys=[[]]
        Project (#4, #5)
          Map (bigint_to_integer((integer_to_bigint(#0) + #2)), bigint_to_integer((integer_to_bigint(#1) + #3)))
            Get l9
    cte l11 =
      Reduce aggregates=[sum((abs((#0 - #2)) + abs((#1 - #3))))]
        Filter ((#0 < #2) OR ((#0 = #2) AND (#1 < #3)))
          CrossJoin type=differential
            Get l10
            Get l10
    cte l12 =
      ArrangeBy keys=[[]]
        Project (#4, #5)
          Map (bigint_to_integer((integer_to_bigint(#0) + (999999 * #2))), bigint_to_integer((integer_to_bigint(#1) + (999999 * #3))))
            Get l9
    cte l13 =
      Reduce aggregates=[sum((abs((#0 - #2)) + abs((#1 - #3))))]
        Filter ((#0 < #2) OR ((#0 = #2) AND (#1 < #3)))
          CrossJoin type=differential
            Get l12
            Get l12
  Return
    CrossJoin type=differential
      ArrangeBy keys=[[]]
        Union
          Get l11
          Map (null)
            Union
              Negate
                Project ()
                  Get l11
              Constant
                - ()
      ArrangeBy keys=[[]]
        Union
          Get l13
          Map (null)
            Union
              Negate
                Project ()
                  Get l13
              Constant
                - ()

Source materialize.public.input

Target cluster: quickstart

EOF
