# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1212.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

# no input data

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE

    lines(r INT, characters TEXT, springs TEXT) AS (
        SELECT
            row_id,
            regexp_split_to_array(regexp_split_to_array(input, '\n')[row_id], ' ')[1] || '.',
            regexp_split_to_array(regexp_split_to_array(input, '\n')[row_id], ' ')[2]
        FROM
            input,
            generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) row_id
    ),
    characters(r INT, pos INT, symb TEXT) AS (
        SELECT
            r,
            pos,
            substring(characters, pos, 1)
        FROM
            lines,
            generate_series(1, length(characters)) pos
    ),
    springs(r INT, pos INT, len INT) AS (
        SELECT
            r,
            pos,
            regexp_split_to_array(springs, ',')[pos]::INT
        FROM
            lines,
            generate_series(1, array_length(regexp_split_to_array(springs, ','), 1)) pos
    ),

    -- How many ways can we pack row `r`'s first `spring` springs (plus a space) into the first `chars` characters?
    -- Importantly, the "plus a space" applies to the last spring also! Each of these should admit the immediate appending of a new spring.
    fits(r INT, chars INT, spring INT) AS (
        -- We can pack no springs into no characters.
        SELECT r, 0, 0
        FROM lines
        -- We can extend any fits with a blank, as long as there are no '#' observations.
        UNION ALL
        SELECT fits.r, fits.chars + 1, fits.spring
        FROM fits, characters
        WHERE fits.r = characters.r
          AND fits.chars + 1 = characters.pos
          AND characters.symb != '#'
        -- We can extend any fits with the next spring and a blank, as long as no '.' in the spring and no '#' in the blank.
        UNION ALL
        SELECT fits.r, fits.chars + springs.len + 1, fits.spring + 1
        FROM
            fits,
            springs,
            characters
        WHERE fits.r = springs.r
          AND fits.spring + 1 = springs.pos
          AND fits.r = characters.r
          AND fits.chars + springs.len + 1 = characters.pos
          AND characters.symb != '#'
          AND NOT EXISTS (SELECT FROM characters c WHERE c.r = fits.r AND c.symb = '.' AND c.pos BETWEEN fits.chars + 1 AND fits.chars + springs.len)
    ),

    fit_counts(r INT, chars INT, spring INT, count BIGINT) AS (
        SELECT r, chars, spring, COUNT(*) AS count
        FROM fits
        GROUP BY r, chars, spring
    ),
    counts(r INT, chars INT, spring INT, count BIGINT) AS (
        SELECT DISTINCT ON (r) r, chars, spring, count
        FROM fit_counts
        ORDER BY r, chars DESC, spring DESC
    ),

    potato (x INT) AS ( SELECT 1 )

SELECT SUM(count) FROM counts;
----
Explained Query:
  With Mutually Recursive
    cte l0 =
      Project (#1, #3, #4)
        Map (regexp_split_to_array[" ", case_insensitive=false](array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1))), (array_index(#2, 1) || "."), array_index(#2, 2))
          FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
            ReadStorage materialize.public.input
    cte l1 =
      Project (#0, #2, #3)
        Map (substr(#1, #2, 1))
          FlatMap generate_series(1, char_length(#1), 1)
            Project (#0, #1)
              Get l0
    cte l2 =
      ArrangeBy keys=[[#0, #1]]
        Project (#0, #1)
          Filter (#2 != "#")
            Get l1
    cte l3 =
      Project (#0..=#2, #5)
        Join on=(#0 = #3 = #6 AND #4 = (#2 + 1) AND #7 = ((#1 + #5) + 1)) type=delta
          ArrangeBy keys=[[#0], [#0, (#2 + 1)]]
            Get l5
          ArrangeBy keys=[[#0, #1]]
            Project (#0, #2, #3)
              Map (text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](#1), integer_to_bigint(#2))))
                FlatMap generate_series(1, (regexp_split_to_array[",", case_insensitive=false](#1) array_length 1), 1)
                  Project (#0, #2)
                    Get l0
          Get l2
    cte l4 =
      Distinct project=[#0..=#2]
        Project (#0, #1, #3)
          Get l3
    cte l5 =
      Union
        Project (#0, #3, #4)
          Map (0, 0)
            Get l0
        Project (#0, #5, #2)
          Map ((#1 + 1))
            Join on=(#0 = #3 AND #4 = (#1 + 1)) type=differential
              ArrangeBy keys=[[#0, (#1 + 1)]]
                Get l5
              Get l2
        Project (#0, #7, #8)
          Map (((#1 + #3) + 1), (#2 + 1))
            Join on=(#0 = #4 AND #1 = #5 AND #3 = #6) type=differential
              ArrangeBy keys=[[#0, #1, #3]]
                Get l3
              ArrangeBy keys=[[#0..=#2]]
                Union
                  Negate
                    Distinct project=[#0..=#2]
                      Project (#0..=#2)
                        Filter (#4 >= (#1 + 1)) AND (#4 <= (#1 + #2))
                          Join on=(#0 = #3) type=differential
                            ArrangeBy keys=[[#0]]
                              Get l4
                            ArrangeBy keys=[[#0]]
                              Project (#0, #1)
                                Filter (#2 = ".")
                                  Get l1
                  Get l4
  Return
    With
      cte l6 =
        Reduce aggregates=[sum(#0)]
          Project (#3)
            TopK group_by=[#0] order_by=[#1 desc nulls_first, #2 desc nulls_first] limit=1
              Reduce group_by=[#0..=#2] aggregates=[count(*)]
                Get l5
    Return
      Union
        Get l6
        Map (null)
          Union
            Negate
              Project ()
                Get l6
            Constant
              - ()

Source materialize.public.input

Target cluster: quickstart

EOF
