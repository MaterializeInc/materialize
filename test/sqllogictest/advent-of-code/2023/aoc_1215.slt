# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1215.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input
VALUES ('rn=1,xw-,nn=8,zg=2,lw=4,oo=2,tt-,wv=9,hy=7,rs=8,sm=4,lf-,td=9,zz=1,ca=2,nd-');

query II
WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 10)

    strings(r INT, string TEXT) AS (
        SELECT r, regexp_split_to_array(input, ',')[r]
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, ','), 1)) r
    ),

    -- Advance the hash by one character, until all strings are empty.
    hashes(string TEXT, hash BIGINT) AS (
        SELECT string, 0 as hash
        FROM strings
        UNION ALL
        SELECT substring(string, 2), ((hash + ascii(substring(string, 1, 1))) * 17) % 256
        FROM hashes
        WHERE length(string) > 0
    ),

    part1(part1 BIGINT) AS (
        SELECT SUM(hash)
        FROM hashes
        WHERE string = ''
    ),

    -- Parse strings as symbol plus commands; either `-` or `=X`.
    commands(r INT, symb TEXT, op INT) AS (
        SELECT
            r,
            CASE WHEN substring(string, length(string)) = '-'
                 THEN substring(string, 1, length(string)-1)
                 ELSE substring(string, 1, length(string)-2)
            END,
            CASE WHEN substring(string, length(string)) = '-'
                 THEN 0
                 ELSE substring(string, length(string))::INT
            END
        FROM strings
    ),
    -- Operations that happen after a symbol's last delete operation.
    -- All other operations do not matter, and do not affect the state.
    final_ops(r INT, symb TEXT, op INT) AS (
        SELECT *
        FROM commands
        WHERE r > COALESCE(
            (SELECT MAX(r)
            FROM commands c2
            WHERE commands.symb = c2.symb
              AND c2.op = 0), 0)
    ),
    -- Each symbol is summarized by their first final insert time, and the last final operation
    final_state(r INT, symb TEXT, op INT) AS (
        SELECT DISTINCT ON(symb)
            (SELECT MIN(r) FROM final_ops fo2 WHERE fo2.symb = final_ops.symb),
            symb,
            op
        FROM final_ops
        ORDER BY symb, r DESC, op
    ),
    -- Redo the hash computation on symbols rather than commands.
    hashes2(start TEXT, string TEXT, hash BIGINT) AS (
        SELECT symb as start, symb as string, 0 as hash
        FROM final_state
        UNION ALL
        SELECT start, substring(string, 2), ((hash + ascii(substring(string, 1, 1))) * 17) % 256
        FROM hashes2
        WHERE length(string) > 0
    ),
    -- Bin up the state, so's we can tabulate it
    binned(hash BIGINT, r INT, symb TEXT, op INT) AS (
        SELECT hash, final_state.*
        FROM hashes2, final_state
        WHERE hashes2.start = symb
          AND hashes2.string = ''
    ),
    -- Sum the product of 1 + hash, the position in bin by r, and the op.
    part2(part2 BIGINT) AS (
        SELECT SUM(
            (1 + hash) *
            (SELECT COUNT(*) FROM binned b2 WHERE binned.hash = b2.hash AND binned.r >= b2.r) *
            op
        )
        FROM binned
    ),

    potato(x int) as (select 1)

SELECT * FROM part1, part2;
----
2021  6155

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 10)

    strings(r INT, string TEXT) AS (
        SELECT r, regexp_split_to_array(input, ',')[r]
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, ','), 1)) r
    ),

    -- Advance the hash by one character, until all strings are empty.
    hashes(string TEXT, hash BIGINT) AS (
        SELECT string, 0 as hash
        FROM strings
        UNION ALL
        SELECT substring(string, 2), ((hash + ascii(substring(string, 1, 1))) * 17) % 256
        FROM hashes
        WHERE length(string) > 0
    ),

    part1(part1 BIGINT) AS (
        SELECT SUM(hash)
        FROM hashes
        WHERE string = ''
    ),

    -- Parse strings as symbol plus commands; either `-` or `=X`.
    commands(r INT, symb TEXT, op INT) AS (
        SELECT
            r,
            CASE WHEN substring(string, length(string)) = '-'
                 THEN substring(string, 1, length(string)-1)
                 ELSE substring(string, 1, length(string)-2)
            END,
            CASE WHEN substring(string, length(string)) = '-'
                 THEN 0
                 ELSE substring(string, length(string))::INT
            END
        FROM strings
    ),
    -- Operations that happen after a symbol's last delete operation.
    -- All other operations do not matter, and do not affect the state.
    final_ops(r INT, symb TEXT, op INT) AS (
        SELECT *
        FROM commands
        WHERE r > COALESCE(
            (SELECT MAX(r)
            FROM commands c2
            WHERE commands.symb = c2.symb
              AND c2.op = 0), 0)
    ),
    -- Each symbol is summarized by their first final insert time, and the last final operation
    final_state(r INT, symb TEXT, op INT) AS (
        SELECT DISTINCT ON(symb)
            (SELECT MIN(r) FROM final_ops fo2 WHERE fo2.symb = final_ops.symb),
            symb,
            op
        FROM final_ops
        ORDER BY symb, r DESC, op
    ),
    -- Redo the hash computation on symbols rather than commands.
    hashes2(start TEXT, string TEXT, hash BIGINT) AS (
        SELECT symb as start, symb as string, 0 as hash
        FROM final_state
        UNION ALL
        SELECT start, substring(string, 2), ((hash + ascii(substring(string, 1, 1))) * 17) % 256
        FROM hashes2
        WHERE length(string) > 0
    ),
    -- Bin up the state, so's we can tabulate it
    binned(hash BIGINT, r INT, symb TEXT, op INT) AS (
        SELECT hash, final_state.*
        FROM hashes2, final_state
        WHERE hashes2.start = symb
          AND hashes2.string = ''
    ),
    -- Sum the product of 1 + hash, the position in bin by r, and the op.
    part2(part2 BIGINT) AS (
        SELECT SUM(
            (1 + hash) *
            (SELECT COUNT(*) FROM binned b2 WHERE binned.hash = b2.hash AND binned.r >= b2.r) *
            op
        )
        FROM binned
    ),

    potato(x int) as (select 1)

SELECT * FROM part1, part2;
----
Explained Query:
  With Mutually Recursive
    cte l0 =
      Project (#1, #2)
        Map (array_index(regexp_split_to_array[",", case_insensitive=false](#0), integer_to_bigint(#1)))
          FlatMap generate_series(1, (regexp_split_to_array[",", case_insensitive=false](#0) array_length 1), 1)
            ReadStorage materialize.public.input
    cte [recursion_limit=10, return_at_limit] l1 =
      Union
        Project (#1, #2)
          Map (0)
            Get l0
        Project (#2, #3)
          Filter (char_length(#0) > 0)
            Map (substr(#0, 2), (((#1 + integer_to_bigint(ascii(substr(#0, 1, 1)))) * 17) % 256))
              Get l1
    cte l2 =
      Reduce aggregates=[sum(#0)]
        Project (#1)
          Filter (#0 = "")
            Get l1
    cte l3 =
      Distinct project=[#0]
        Project (#2)
          Map (case when ("-" = substr(#1, char_length(#1))) then substr(#1, 1, (char_length(#1) - 1)) else substr(#1, 1, (char_length(#1) - 2)) end)
            Get l0
    cte l4 =
      Reduce group_by=[#0] aggregates=[max(#1)]
        Project (#0, #1)
          Join on=(#0 = #2) type=differential
            ArrangeBy keys=[[#0]]
              Filter (#0) IS NOT NULL
                Get l3
            ArrangeBy keys=[[#1]]
              Project (#0, #3)
                Filter (#3) IS NOT NULL AND (0 = case when #2 then 0 else text_to_integer(substr(#1, char_length(#1))) end)
                  Map (("-" = substr(#1, char_length(#1))), case when #2 then substr(#1, 1, (char_length(#1) - 1)) else substr(#1, 1, (char_length(#1) - 2)) end)
                    Get l0
    cte l5 =
      ArrangeBy keys=[[#0]]
        Get l3
    cte l6 =
      Union
        Get l4
        Project (#0, #2)
          Map (null)
            Join on=(#0 = #1) type=differential
              ArrangeBy keys=[[#0]]
                Union
                  Negate
                    Project (#0)
                      Get l4
                  Get l3
              Get l5
    cte l7 =
      Union
        Get l6
        Map (error("more than one record produced in subquery"))
          Project (#0)
            Filter (#1 > 1)
              Reduce group_by=[#0] aggregates=[count(*)]
                Project (#0)
                  Get l6
    cte l8 =
      Project (#0..=#2)
        Filter (#0 > coalesce(#4, 0))
          Join on=(#1 = #3) type=differential
            ArrangeBy keys=[[#1]]
              Project (#0, #3, #4)
                Map (("-" = substr(#1, char_length(#1))), case when #2 then substr(#1, 1, (char_length(#1) - 1)) else substr(#1, 1, (char_length(#1) - 2)) end, case when #2 then 0 else text_to_integer(substr(#1, char_length(#1))) end)
                  Get l0
            ArrangeBy keys=[[#0]]
              Union
                Get l7
                Project (#0, #2)
                  Map (null)
                    Join on=(#0 = #1) type=differential
                      ArrangeBy keys=[[#0]]
                        Union
                          Negate
                            Distinct project=[#0]
                              Project (#0)
                                Get l7
                          Get l3
                      Get l5
    cte l9 =
      Distinct project=[#0..=#2]
        Get l8
    cte l10 =
      Distinct project=[#0]
        Project (#1)
          Get l9
    cte l11 =
      Reduce group_by=[#0] aggregates=[min(#1)]
        Project (#0, #1)
          Join on=(#0 = #2) type=differential
            ArrangeBy keys=[[#0]]
              Filter (#0) IS NOT NULL
                Get l10
            ArrangeBy keys=[[#1]]
              Project (#0, #1)
                Filter (#1) IS NOT NULL
                  Get l8
    cte l12 =
      ArrangeBy keys=[[#0]]
        Get l10
    cte l13 =
      Union
        Get l11
        Project (#0, #2)
          Map (null)
            Join on=(#0 = #1) type=differential
              ArrangeBy keys=[[#0]]
                Union
                  Negate
                    Project (#0)
                      Get l11
                  Get l10
              Get l12
    cte l14 =
      Union
        Get l13
        Map (error("more than one record produced in subquery"))
          Project (#0)
            Filter (#1 > 1)
              Reduce group_by=[#0] aggregates=[count(*)]
                Project (#0)
                  Get l13
    cte l15 =
      Project (#1..=#4)
        TopK group_by=[#1] order_by=[#0 desc nulls_first, #2 asc nulls_last] limit=1
          Project (#0..=#2, #7, #8)
            Map ((#1) IS NULL)
              Join on=(#0 = #3 AND #1 = #4 = #6 AND #2 = #5) type=delta
                ArrangeBy keys=[[#0..=#2], [#1]]
                  Get l8
                ArrangeBy keys=[[#0..=#2]]
                  Get l9
                ArrangeBy keys=[[#0]]
                  Union
                    Get l14
                    Project (#0, #2)
                      Map (null)
                        Join on=(#0 = #1) type=differential
                          ArrangeBy keys=[[#0]]
                            Union
                              Negate
                                Distinct project=[#0]
                                  Project (#0)
                                    Get l14
                              Get l10
                          Get l12
    cte [recursion_limit=10, return_at_limit] l16 =
      Union
        Project (#0, #0, #4)
          Map (0)
            Get l15
        Project (#0, #3, #4)
          Filter (char_length(#1) > 0)
            Map (substr(#1, 2), (((#2 + integer_to_bigint(ascii(substr(#1, 1, 1)))) * 17) % 256))
              Get l16
  Return
    With
      cte l17 =
        Project (#1, #3, #4)
          Join on=(#0 = #2) type=differential
            ArrangeBy keys=[[#0]]
              Project (#0, #2)
                Filter (#1 = "") AND (#0) IS NOT NULL
                  Get l16
            ArrangeBy keys=[[#0]]
              Project (#0..=#2)
                Filter NOT(#3)
                  Get l15
      cte l18 =
        Project (#0, #2)
          Get l17
      cte l19 =
        Distinct project=[#0, #1]
          Get l18
      cte l20 =
        Reduce group_by=[#0, #1] aggregates=[count(*)]
          Project (#0, #1)
            Filter (#1 >= #3)
              Join on=(#0 = #2) type=differential
                ArrangeBy keys=[[#0]]
                  Get l19
                ArrangeBy keys=[[#0]]
                  Get l18
      cte l21 =
        Union
          Get l20
          Map (0)
            Union
              Negate
                Project (#0, #1)
                  Get l20
              Get l19
      cte l22 =
        Reduce aggregates=[sum((((1 + #0) * #2) * integer_to_bigint(#1)))]
          Project (#0, #1, #5)
            Join on=(#0 = #3 AND #2 = #4) type=differential
              ArrangeBy keys=[[#0, #2]]
                Get l17
              ArrangeBy keys=[[#0, #1]]
                Union
                  Get l21
                  Map (null)
                    Union
                      Negate
                        Project (#0, #1)
                          Get l21
                      Get l19
    Return
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Project (#1)
            Map (numeric_to_bigint(#0))
              Union
                Get l2
                Map (null)
                  Union
                    Negate
                      Project ()
                        Get l2
                    Constant
                      - ()
        ArrangeBy keys=[[]]
          Project (#1)
            Map (numeric_to_bigint(#0))
              Union
                Get l22
                Map (null)
                  Union
                    Negate
                      Project ()
                        Get l22
                    Constant
                      - ()

Source materialize.public.input

Target cluster: quickstart

EOF
