# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1217.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input VALUES (
'-............./...\................\......-.......\....|...--....................\.............\...\.-........
/\...............\.........|....|..../...-....\...\../...........\..\..................................|......
.\..........\..../....../............-.-.........|........../.............|.............-......./..........\..
.\.......\..........\.......\.\........................\.....|...\.../........|..............\\...........|..-
.\...........\.....\../...-\..|....-.................-.|.....|/\...\................././.........\.\.../......
./....\...\..............|...\.......\...-.....|..|...../...../..-.....................\.......\...../...|..|.
...........|.-.........|.....-.../......\./.........\\....\...\..|./...-.............\........................
-.......................\.............\........\.\...........-....................../...........\....|.-......
-............\..........-./.....\\......\.......|.....-..................-.-\\.....|............-....\........
..............-....|..................-......|....-.../....................-....\...........\.................
................\.......\../.............../......|.....\............-.....\...\....................|..-.../.-
|\.............-......./...........-........../......\-.........-.....................................|\......
.....\.....||.........-............../............|....-...........\.\.....................................|\.
......................./...\......\......./|...\..........|...\.../...........\....\./..-..........\..........
.....\................\.\..............\./.\..-......|........../.....\..\.........|....\....\.....\..........
...\...\...\.......|.....\\.\..\........\.-.....\.|..................................|......-.................
\|...../............................|.../.\......\......-.............|....|...|...-.......|.....\............
.\/..........-..........|........./...................\.........../\.......-.............../............./\.-.
.......\.......\...\............\.-.../.......\....................|.../..............\./.........-......\.-..
../...\...-...|.|../......\......\...\...-................................\.........-........-............./..
...\.../..|........\...|...../../...|............-..........|/...............|..........\|................./..
......\/.\......|..................-...\.......\..|........./.-......-...........-...\......|..........-|/-...
.\.........-........./........................|...........\/....\-......\...\../\.............................
|.....\.\.....|-.............|.......|...........\..|\..........\..|........................|....-.......\//..
..........-.............\.........|......\.......\.../..../.\.-..........\....../........................\....');

query II
WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as block
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),
    cells(r INT, c INT, symbol TEXT) AS (
        SELECT r, c, substring(line, c, 1)
        FROM lines, generate_series(1, length(line)) c
    ),

    shift(dir TEXT, symbol TEXT, dr INT, dc INT, new_dir TEXT) AS (
        VALUES
            ('r', '.',  0,  1, 'r'),
            ('r', '-',  0,  1, 'r'),
            ('r', '|',  1,  0, 'd'),
            ('r', '|', -1,  0, 'u'),
            ('r', '/', -1,  0, 'u'),
            ('r', '\',  1,  0, 'd'),
            ('l', '.',  0, -1, 'l'),
            ('l', '-',  0, -1, 'l'),
            ('l', '|',  1,  0, 'd'),
            ('l', '|', -1,  0, 'u'),
            ('l', '/',  1,  0, 'd'),
            ('l', '\', -1,  0, 'u'),
            ('u', '.', -1,  0, 'u'),
            ('u', '-',  0,  1, 'r'),
            ('u', '-',  0, -1, 'l'),
            ('u', '|', -1,  0, 'u'),
            ('u', '/',  0,  1, 'r'),
            ('u', '\',  0, -1, 'l'),
            ('d', '.',  1,  0, 'd'),
            ('d', '-',  0,  1, 'r'),
            ('d', '-',  0, -1, 'l'),
            ('d', '|',  1,  0, 'd'),
            ('d', '/',  0, -1, 'l'),
            ('d', '\',  0,  1, 'r')
    ),

    -- Light is in a location, and has a direction.
    light(r INT, c INT, dir TEXT) AS (
        SELECT 1, 1, 'r'
        UNION
        SELECT light.r + dr, light.c + dc, new_dir
        FROM light, cells, shift
        WHERE light.r = cells.r
            AND light.c = cells.c
            AND light.dir = shift.dir
            AND cells.symbol = shift.symbol
    ),

    part1(part1 BIGINT) AS (
        SELECT COUNT(*) FROM (
            SELECT DISTINCT light.r, light.c
            FROM light, cells
            WHERE light.r = cells.r
                AND light.c = cells.c
        )
    ),

    -- Light is in a location, a direction, and an origin.
    light2(r INT, c INT, dir TEXT, source TEXT) AS (
        SELECT DISTINCT * FROM (SELECT r, (SELECT MIN(c) FROM cells), 'r', 'r' || r FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT r, (SELECT MAX(c) FROM cells), 'l', 'l' || r FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT (SELECT MIN(r) FROM cells), c, 'd', 'd' || c FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT (SELECT MAX(c) FROM cells), c, 'u', 'u' || c FROM cells) UNION
        SELECT light2.r + dr, light2.c + dc, new_dir, source
        FROM light2, cells, shift
        WHERE light2.r = cells.r
            AND light2.c = cells.c
            AND light2.dir = shift.dir
            AND cells.symbol = shift.symbol
    ),

    part2(part2 BIGINT) AS (
        SELECT MAX(count) FROM (
            SELECT source, COUNT(*) FROM (
                SELECT DISTINCT light2.r, light2.c, source
                FROM light2, cells
                WHERE light2.r = cells.r
                    AND light2.c = cells.c
            )
            GROUP BY source
        )
    )

SELECT * FROM part1, part2;
----
15  613

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as block
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),
    cells(r INT, c INT, symbol TEXT) AS (
        SELECT r, c, substring(line, c, 1)
        FROM lines, generate_series(1, length(line)) c
    ),

    shift(dir TEXT, symbol TEXT, dr INT, dc INT, new_dir TEXT) AS (
        VALUES
            ('r', '.',  0,  1, 'r'),
            ('r', '-',  0,  1, 'r'),
            ('r', '|',  1,  0, 'd'),
            ('r', '|', -1,  0, 'u'),
            ('r', '/', -1,  0, 'u'),
            ('r', '\',  1,  0, 'd'),
            ('l', '.',  0, -1, 'l'),
            ('l', '-',  0, -1, 'l'),
            ('l', '|',  1,  0, 'd'),
            ('l', '|', -1,  0, 'u'),
            ('l', '/',  1,  0, 'd'),
            ('l', '\', -1,  0, 'u'),
            ('u', '.', -1,  0, 'u'),
            ('u', '-',  0,  1, 'r'),
            ('u', '-',  0, -1, 'l'),
            ('u', '|', -1,  0, 'u'),
            ('u', '/',  0,  1, 'r'),
            ('u', '\',  0, -1, 'l'),
            ('d', '.',  1,  0, 'd'),
            ('d', '-',  0,  1, 'r'),
            ('d', '-',  0, -1, 'l'),
            ('d', '|',  1,  0, 'd'),
            ('d', '/',  0, -1, 'l'),
            ('d', '\',  0,  1, 'r')
    ),

    -- Light is in a location, and has a direction.
    light(r INT, c INT, dir TEXT) AS (
        SELECT 1, 1, 'r'
        UNION
        SELECT light.r + dr, light.c + dc, new_dir
        FROM light, cells, shift
        WHERE light.r = cells.r
            AND light.c = cells.c
            AND light.dir = shift.dir
            AND cells.symbol = shift.symbol
    ),

    part1(part1 BIGINT) AS (
        SELECT COUNT(*) FROM (
            SELECT DISTINCT light.r, light.c
            FROM light, cells
            WHERE light.r = cells.r
                AND light.c = cells.c
        )
    ),

    -- Light is in a location, a direction, and an origin.
    light2(r INT, c INT, dir TEXT, source TEXT) AS (
        SELECT DISTINCT * FROM (SELECT r, (SELECT MIN(c) FROM cells), 'r', 'r' || r FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT r, (SELECT MAX(c) FROM cells), 'l', 'l' || r FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT (SELECT MIN(r) FROM cells), c, 'd', 'd' || c FROM cells) UNION
        SELECT DISTINCT * FROM (SELECT (SELECT MAX(c) FROM cells), c, 'u', 'u' || c FROM cells) UNION
        SELECT light2.r + dr, light2.c + dc, new_dir, source
        FROM light2, cells, shift
        WHERE light2.r = cells.r
            AND light2.c = cells.c
            AND light2.dir = shift.dir
            AND cells.symbol = shift.symbol
    ),

    part2(part2 BIGINT) AS (
        SELECT MAX(count) FROM (
            SELECT source, COUNT(*) FROM (
                SELECT DISTINCT light2.r, light2.c, source
                FROM light2, cells
                WHERE light2.r = cells.r
                    AND light2.c = cells.c
            )
            GROUP BY source
        )
    )

SELECT * FROM part1, part2;
----
Explained Query:
  With Mutually Recursive
    cte l0 =
      Project (#0, #2, #3)
        Map (substr(#1, #2, 1))
          FlatMap generate_series(1, char_length(#1), 1)
            Project (#1, #2)
              Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
                FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
                  ReadStorage materialize.public.input
    cte l1 =
      ArrangeBy keys=[[#0, #1]]
        Filter (#2) IS NOT NULL
          Get l0
    cte l2 =
      ArrangeBy keys=[[#0, #1]]
        Constant
          total_rows (diffs absed): 24
          first_rows:
            - ("d", "-", 0, -1, "l")
            - ("d", "/", 0, -1, "l")
            - ("l", "-", 0, -1, "l")
            - ("l", ".", 0, -1, "l")
            - ("l", "\", -1, 0, "u")
            - ("l", "|", -1, 0, "u")
            - ("r", "/", -1, 0, "u")
            - ("r", "|", -1, 0, "u")
            - ("u", "-", 0, -1, "l")
            - ("u", ".", -1, 0, "u")
            - ("u", "\", 0, -1, "l")
            - ("u", "|", -1, 0, "u")
            - ("d", "-", 0, 1, "r")
            - ("d", ".", 1, 0, "d")
            - ("d", "\", 0, 1, "r")
            - ("d", "|", 1, 0, "d")
            - ("l", "/", 1, 0, "d")
            - ("l", "|", 1, 0, "d")
            - ("r", "-", 0, 1, "r")
            - ("r", ".", 0, 1, "r")
    cte l3 =
      Distinct project=[#0..=#2]
        Union
          Project (#11, #12, #10)
            Map ((#0 + #8), (#1 + #9))
              Join on=(#0 = #3 AND #1 = #4 AND #2 = #6 AND #5 = #7) type=differential
                ArrangeBy keys=[[#0, #1]]
                  Get l3
                Get l1
                Get l2
          Constant
            - (1, 1, "r")
    cte l4 =
      Project (#0, #1)
        Get l0
    cte l5 =
      Reduce aggregates=[count(*)]
        Project ()
          Join on=(#0 = #2 AND #1 = #3) type=differential
            ArrangeBy keys=[[#0, #1]]
              Distinct project=[#0, #1]
                Project (#0, #1)
                  Get l3
            ArrangeBy keys=[[#0, #1]]
              Distinct project=[#0, #1]
                Get l4
    cte l6 =
      Project (#1)
        Get l0
    cte l7 =
      Reduce aggregates=[min(#0)]
        Get l6
    cte l8 =
      Union
        Get l7
        Map (null)
          Union
            Negate
              Project ()
                Get l7
            Constant
              - ()
    cte l9 =
      Reduce aggregates=[max(#0)]
        Get l6
    cte l10 =
      Union
        Get l9
        Map (null)
          Union
            Negate
              Project ()
                Get l9
            Constant
              - ()
    cte l11 =
      Project (#0)
        Get l0
    cte l12 =
      Reduce aggregates=[min(#0)]
        Get l11
    cte l13 =
      Union
        Get l12
        Map (null)
          Union
            Negate
              Project ()
                Get l12
            Constant
              - ()
    cte l14 =
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Get l4
        ArrangeBy keys=[[]]
          Union
            Get l10
            Map (null)
              Union
                Negate
                  Project ()
                    Get l10
                Constant
                  - ()
    cte l15 =
      Distinct project=[#0..=#3]
        Union
          Project (#0, #1, #3, #2)
            Map (("r" || integer_to_text(#0)), "r")
              CrossJoin type=differential
                ArrangeBy keys=[[]]
                  Get l11
                ArrangeBy keys=[[]]
                  Union
                    Get l8
                    Map (null)
                      Union
                        Negate
                          Project ()
                            Get l8
                        Constant
                          - ()
          Project (#0, #2, #4, #3)
            Map (("l" || integer_to_text(#0)), "l")
              Get l14
          Project (#1, #0, #3, #2)
            Map (("d" || integer_to_text(#0)), "d")
              CrossJoin type=differential
                ArrangeBy keys=[[]]
                  Get l6
                ArrangeBy keys=[[]]
                  Union
                    Get l13
                    Map (null)
                      Union
                        Negate
                          Project ()
                            Get l13
                        Constant
                          - ()
          Project (#2, #1, #4, #3)
            Map (("u" || integer_to_text(#1)), "u")
              Get l14
          Project (#12, #13, #11, #3)
            Map ((#0 + #9), (#1 + #10))
              Join on=(#0 = #4 AND #1 = #5 AND #2 = #7 AND #6 = #8) type=differential
                ArrangeBy keys=[[#0, #1]]
                  Filter (#0) IS NOT NULL AND (#1) IS NOT NULL
                    Get l15
                Get l1
                Get l2
  Return
    With
      cte l16 =
        Reduce aggregates=[max(#0)]
          Project (#1)
            Reduce group_by=[#0] aggregates=[count(*)]
              Project (#2)
                Join on=(#0 = #3 AND #1 = #4) type=differential
                  ArrangeBy keys=[[#0, #1]]
                    Distinct project=[#0..=#2]
                      Project (#0, #1, #3)
                        Filter (#0) IS NOT NULL AND (#1) IS NOT NULL
                          Get l15
                  ArrangeBy keys=[[#0, #1]]
                    Distinct project=[#0, #1]
                      Project (#0, #1)
                        Get l0
    Return
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Union
            Get l5
            Map (0)
              Union
                Negate
                  Project ()
                    Get l5
                Constant
                  - ()
        ArrangeBy keys=[[]]
          Union
            Get l16
            Map (null)
              Union
                Negate
                  Project ()
                    Get l16
                Constant
                  - ()

Source materialize.public.input

Target cluster: quickstart

EOF
