# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1222.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input VALUES (
'3,5,62~3,9,62
5,5,623~5,1,623
8,3,176~8,2,176
7,6,17~7,8,17
9,3,821~9,3,163
2,9,71~2,6,71
3,3,514~3,3,390
7,4,494~7,9,494
5,9,842~5,9,840
9,1,41~9,1,296
5,4,276~5,4,94
3,3,838~3,6,838
9,8,425~6,8,425
1,2,55~1,8,55
1,4,249~3,4,249
8,8,541~5,8,541
5,4,634~5,4,365
4,9,745~4,9,293
3,6,621~3,6,287
4,9,645~4,9,389
7,1,712~0,1,712
8,2,69~7,2,69
2,3,374~8,3,374
7,9,495~0,9,495
4,9,200~8,9,200');

query II
WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    cells(r INT, x INT, y INT, z INT) AS (
        SELECT xs.r, x, y, z
        FROM (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[1]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[1]::INT) x FROM lines) xs,
             (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[2]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[2]::INT) y FROM lines) ys,
             (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[3]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[3]::INT) z FROM lines) zs
        WHERE xs.r = ys.r
          AND xs.r = zs.r
    ),

    -- Part one: let the pieces fall, with a minimum z value of one.
    parts(r INT, x INT, y INT, z INT) AS (
        SELECT * FROM cells
        EXCEPT ALL SELECT * FROM cells_delayed
        UNION ALL
        SELECT r, x, y, CASE WHEN r IN (SELECT * FROM supported) THEN z ELSE z - 1 END
        FROM parts
    ),
    -- One piece supports a *different* piece if it is directly below a piece of the other.
    supports(r1 INT, r2 INT) AS (
        SELECT DISTINCT p1.r, p2.r
        FROM parts p1, parts p2
        WHERE p1.x = p2.x
          AND p1.y = p2.y
          AND p1.z + 1 = p2.z
          AND p1.r != p2.r
    ),
    supported(r INT) AS (
        SELECT r FROM parts WHERE z = 1
        UNION
        SELECT r2 FROM supports
    ),
    -- A piece is safe to remove if it is does not uniquely support any other piece.
    part1(part1 BIGINT) AS (
        SELECT COUNT(DISTINCT r)
        FROM lines
        WHERE r NOT IN (
            SELECT r1
            FROM supports
            WHERE r2 IN (
                SELECT r2
                FROM supports
                GROUP BY r2
                HAVING COUNT(*) = 1
            )
        )
    ),

    cells_delayed(r INT, x INT, y INT, z INT) AS ( SELECT * FROM cells ),

    -- Part two: for each piece, how many pieces would fall if you removed it?
    -- Extend `supports` to transitive support: if r1 vanished would r2 fall?
    supports_trans(r1 INT, r2 INT) AS (
        -- Uniquely supported pieces would certainly fall.
        SELECT *
        FROM supports
        WHERE r2 IN (SELECT r2 FROM supports GROUP BY r2 HAVING COUNT(*) = 1)
        -- Any piece all of whose supports would fall without 'a' also falls without it.
        UNION
        SELECT st.r1, s1.r2
        FROM supports_trans st, supports s1
        WHERE st.r2 = s1.r1
        GROUP BY st.r1, s1.r2
        HAVING COUNT(*) = (SELECT COUNT(*) FROM supports WHERE supports.r2 = s1.r2)
    ),

    part2(part2 BIGINT) AS (SELECT COUNT(*) FROM supports_trans)

SELECT * FROM part1, part2;
----
23  3

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    cells(r INT, x INT, y INT, z INT) AS (
        SELECT xs.r, x, y, z
        FROM (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[1]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[1]::INT) x FROM lines) xs,
             (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[2]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[2]::INT) y FROM lines) ys,
             (SELECT r, generate_series(regexp_split_to_array(regexp_split_to_array(line, '~')[1], ',')[3]::INT,
                                        regexp_split_to_array(regexp_split_to_array(line, '~')[2], ',')[3]::INT) z FROM lines) zs
        WHERE xs.r = ys.r
          AND xs.r = zs.r
    ),

    -- Part one: let the pieces fall, with a minimum z value of one.
    parts(r INT, x INT, y INT, z INT) AS (
        SELECT * FROM cells
        EXCEPT ALL SELECT * FROM cells_delayed
        UNION ALL
        SELECT r, x, y, CASE WHEN r IN (SELECT * FROM supported) THEN z ELSE z - 1 END
        FROM parts
    ),
    -- One piece supports a *different* piece if it is directly below a piece of the other.
    supports(r1 INT, r2 INT) AS (
        SELECT DISTINCT p1.r, p2.r
        FROM parts p1, parts p2
        WHERE p1.x = p2.x
          AND p1.y = p2.y
          AND p1.z + 1 = p2.z
          AND p1.r != p2.r
    ),
    supported(r INT) AS (
        SELECT r FROM parts WHERE z = 1
        UNION
        SELECT r2 FROM supports
    ),
    -- A piece is safe to remove if it is does not uniquely support any other piece.
    part1(part1 BIGINT) AS (
        SELECT COUNT(DISTINCT r)
        FROM lines
        WHERE r NOT IN (
            SELECT r1
            FROM supports
            WHERE r2 IN (
                SELECT r2
                FROM supports
                GROUP BY r2
                HAVING COUNT(*) = 1
            )
        )
    ),

    cells_delayed(r INT, x INT, y INT, z INT) AS ( SELECT * FROM cells ),

    -- Part two: for each piece, how many pieces would fall if you removed it?
    -- Extend `supports` to transitive support: if r1 vanished would r2 fall?
    supports_trans(r1 INT, r2 INT) AS (
        -- Uniquely supported pieces would certainly fall.
        SELECT *
        FROM supports
        WHERE r2 IN (SELECT r2 FROM supports GROUP BY r2 HAVING COUNT(*) = 1)
        -- Any piece all of whose supports would fall without 'a' also falls without it.
        UNION
        SELECT st.r1, s1.r2
        FROM supports_trans st, supports s1
        WHERE st.r2 = s1.r1
        GROUP BY st.r1, s1.r2
        HAVING COUNT(*) = (SELECT COUNT(*) FROM supports WHERE supports.r2 = s1.r2)
    ),

    part2(part2 BIGINT) AS (SELECT COUNT(*) FROM supports_trans)

SELECT * FROM part1, part2;
----
Explained Query:
  With Mutually Recursive
    cte l0 =
      Project (#1, #2)
        Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
          FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
            ReadStorage materialize.public.input
    cte l1 =
      Distinct project=[#0]
        Project (#0)
          Get l7
    cte l2 =
      Reduce group_by=[#0] aggregates=[any((#0 = #1))]
        CrossJoin type=differential
          ArrangeBy keys=[[]]
            Get l1
          ArrangeBy keys=[[]]
            Get l10
    cte l3 =
      ArrangeBy keys=[[#0]]
        Get l1
    cte l4 =
      Union
        Get l2
        Project (#0, #2)
          Map (false)
            Join on=(#0 = #1) type=differential
              ArrangeBy keys=[[#0]]
                Union
                  Negate
                    Project (#0)
                      Get l2
                  Get l1
              Get l3
    cte l5 =
      Union
        Get l4
        Map (error("more than one record produced in subquery"))
          Project (#0)
            Filter (#1 > 1)
              Reduce group_by=[#0] aggregates=[count(*)]
                Project (#0)
                  Get l4
    cte l6 =
      Project (#0, #1, #3, #5)
        Join on=(#0 = #2 = #4) type=delta
          ArrangeBy keys=[[#0]]
            Project (#0, #2)
              FlatMap generate_series(text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 1)), 1)), text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 2)), 1)), 1)
                Get l0
          ArrangeBy keys=[[#0]]
            Project (#0, #2)
              FlatMap generate_series(text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 1)), 2)), text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 2)), 2)), 1)
                Get l0
          ArrangeBy keys=[[#0]]
            Project (#0, #2)
              FlatMap generate_series(text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 1)), 3)), text_to_integer(array_index(regexp_split_to_array[",", case_insensitive=false](array_index(regexp_split_to_array["~", case_insensitive=false](#1), 2)), 3)), 1)
                Get l0
    cte l7 =
      Union
        Threshold
          Union
            Get l6
            Negate
              Get l16
        Project (#0..=#2, #6)
          Map (case when #5 then #3 else (#3 - 1) end)
            Join on=(#0 = #4) type=differential
              ArrangeBy keys=[[#0]]
                Get l7
              ArrangeBy keys=[[#0]]
                Union
                  Get l5
                  Project (#0, #2)
                    Map (null)
                      Join on=(#0 = #1) type=differential
                        ArrangeBy keys=[[#0]]
                          Union
                            Negate
                              Distinct project=[#0]
                                Project (#0)
                                  Get l5
                            Get l1
                        Get l3
    cte l8 =
      Distinct project=[#0, #1]
        Project (#0, #4)
          Filter (#0 != #4)
            Join on=(#1 = #5 AND #2 = #6 AND #7 = (#3 + 1)) type=differential
              ArrangeBy keys=[[#1, #2, (#3 + 1)]]
                Get l7
              ArrangeBy keys=[[#1..=#3]]
                Get l7
    cte l9 =
      Project (#1)
        Get l8
    cte l10 =
      Distinct project=[#0]
        Union
          Project (#0)
            Filter (#3 = 1)
              Get l7
          Get l9
    cte l11 =
      Project (#0)
        Get l0
    cte l12 =
      Distinct project=[#0]
        Get l11
    cte l13 =
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Get l12
        ArrangeBy keys=[[]]
          Get l8
    cte l14 =
      ArrangeBy keys=[[#0]]
        Get l9
    cte l15 =
      Reduce aggregates=[count(distinct #0)]
        Project (#0)
          Join on=(#0 = #1 = #2) type=delta
            ArrangeBy keys=[[#0]]
              Get l11
            ArrangeBy keys=[[#0]]
              Union
                Negate
                  Distinct project=[#0]
                    Project (#0)
                      Filter (#3 = 1)
                        Join on=(#1 = #2) type=differential
                          ArrangeBy keys=[[#1]]
                            Project (#0, #2)
                              Filter (#0 = #1)
                                Get l13
                          ArrangeBy keys=[[#0]]
                            Reduce group_by=[#0] aggregates=[count(*)]
                              Project (#0)
                                Join on=(#0 = #1) type=differential
                                  ArrangeBy keys=[[#0]]
                                    Distinct project=[#0]
                                      Project (#2)
                                        Get l13
                                  Get l14
                Get l12
            ArrangeBy keys=[[#0]]
              Get l12
    cte l16 =
      Get l6
    cte l17 =
      Reduce group_by=[#0, #1] aggregates=[count(*)]
        Project (#0, #3)
          Join on=(#1 = #2) type=differential
            ArrangeBy keys=[[#1]]
              Get l22
            ArrangeBy keys=[[#0]]
              Get l8
    cte l18 =
      Distinct project=[#0]
        Project (#1)
          Get l17
    cte l19 =
      ArrangeBy keys=[[#0]]
        Get l18
    cte l20 =
      Reduce group_by=[#0] aggregates=[count(*)]
        Project (#0)
          Join on=(#0 = #1) type=differential
            Get l19
            Get l14
    cte l21 =
      Union
        Get l20
        Project (#0, #2)
          Map (0)
            Join on=(#0 = #1) type=differential
              ArrangeBy keys=[[#0]]
                Union
                  Negate
                    Project (#0)
                      Get l20
                  Get l18
              Get l19
    cte l22 =
      Distinct project=[#0, #1]
        Union
          Project (#0, #1)
            Filter (#3 = 1)
              Join on=(#1 = #2) type=differential
                ArrangeBy keys=[[#1]]
                  Get l8
                ArrangeBy keys=[[#0]]
                  Reduce group_by=[#0] aggregates=[count(*)]
                    Get l9
          Project (#0, #1)
            Join on=(#1 = #3 AND #2 = #4) type=differential
              ArrangeBy keys=[[#1, #2]]
                Get l17
              ArrangeBy keys=[[#0, #1]]
                Union
                  Get l21
                  Map (error("more than one record produced in subquery"))
                    Project (#0)
                      Filter (#1 > 1)
                        Reduce group_by=[#0] aggregates=[count(*)]
                          Project (#0)
                            Get l21
  Return
    With
      cte l23 =
        Reduce aggregates=[count(*)]
          Project ()
            Get l22
    Return
      CrossJoin type=differential
        ArrangeBy keys=[[]]
          Union
            Get l15
            Map (0)
              Union
                Negate
                  Project ()
                    Get l15
                Constant
                  - ()
        ArrangeBy keys=[[]]
          Union
            Get l23
            Map (0)
              Union
                Negate
                  Project ()
                    Get l23
                Constant
                  - ()

Source materialize.public.input

Target cluster: quickstart

EOF
