# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1223.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input VALUES (
'##############.###################################################################
#....#.#...#....>..#...######..#.#..#.#.#.#..#..#...#.#...###..##.###...##........
#####..#.v##....v...#....#.#....#.###......<..#...#....#>..#.........#.##...#.....
.##..#.##...#..........#...#...#..#.#..^#..#...#.#..#.#.##<.#.<.##.#..#.#......###
..#.##.#.##..v..................#...#.##.#.##.>#.#........#....##.....#..#...#....
#..<#.##..............#..#.......^##.#.#.......v....##...###.#.##.<..#....#.......
.#....#.#^..#.......####.#^........>........##.........###..#.#.#...#...#...##....
##......#.#......#..#.#.##^..#....^...###.#..#.#.<.........<...##..#.#....<.#.##.#
#.#.#...................>....#..##....#....##......#...^....#.#....#.#..v.##.#..##
###.#...#..##.#.#.......#....v#.###.............#...##.###......#.#.#.#.....#..#^.
##.#..........#.#.#.#...#....#......#.....#.#....##...##.....^.###.#.......###.<..
...........#..#...#^.#..........#..##..##..#....###...>#.<#..>.##..#......##.#....
.>..##.#.....#.....####..#.#.#............##><.....#...###..#.....###.##.........#
...#.....>....#.v>^#...##......#..###..#...##...^###.#........#..#...#.#..#.....#>
^..^...........#.#.#.#.##.##.....#.....#.##....#.##............#.##...#..#......^.
.#........#.<#.....v.......#...#v......#.#........#...#..#.#...#>.###....#v....##.
.##.....#v....#^#v#.#.........#^#......<...#..##...#.#.v.###....##..#...#.#......#
.#..#.##..#.##..#>..#.......<......##..#.##..###.##...#...#.#...#.#....#..##..#..#
.v.#.#....>..............#.####.#...>......v#.####..#......v....##^.##.#...#...^##
##############.###################################################################');

query IIII
WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    cells(r INT, c INT, symbol TEXT) AS (
        SELECT r, c, substring(line, c, 1)
        FROM lines, generate_series(1, length(line)) c
    ),

    -- Part one: longest path (on probably a DAG)
    paths(r INT, c INT) AS (
        SELECT r, c FROM cells WHERE symbol = '.'
    ),

    steps(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r, c, r + 1, c FROM paths WHERE (r + 1, c) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r - 1, c FROM paths WHERE (r - 1, c) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r, c + 1 FROM paths WHERE (r, c + 1) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r, c - 1 FROM paths WHERE (r, c - 1) IN (SELECT * FROM PATHS)
    ),

    -- A directional trip, forced by a slope and the no-revisting rule.
    force(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r-1, c, r+1, c FROM cells WHERE symbol = 'v' UNION ALL
        SELECT r+1, c, r-1, c FROM cells WHERE symbol = '^' UNION ALL
        SELECT r, c-1, r, c+1 FROM cells WHERE symbol = '>' UNION ALL
        SELECT r, c+1, r, c-1 FROM cells WHERE symbol = '<'
    ),

    dists(r INT, c INT, d INT) AS (
        SELECT 1, 2, 0
        UNION
        SELECT steps.r2, steps.c2, 1 + MIN(d)
        FROM dists, steps
        WHERE dists.r = steps.r1
          AND dists.c = steps.c1
        GROUP BY steps.r2, steps.c2
        UNION
        SELECT force.r2, force.c2, 2 + MAX(d)
        FROM dists, force
        WHERE dists.r = force.r1
          AND dists.c = force.c1
        GROUP BY force.r2, force.c2
    ),

    -- Part two: longest path on definitely not a DAG.
    -- There are 32 optional nodes (not including first and last nodes)
    -- Clearly meant to pack in to an int and avoid duplication.
    paths2(r INT, c INT) AS (
        SELECT r, c FROM cells WHERE symbol != '#'
    ),

    steps2(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r, c, r + 1, c FROM paths2 WHERE (r + 1, c) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r - 1, c FROM paths2 WHERE (r - 1, c) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r, c + 1 FROM paths2 WHERE (r, c + 1) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r, c - 1 FROM paths2 WHERE (r, c - 1) IN (SELECT * FROM paths2)
    ),
    -- Locations where a choice exists (or start/end).
    nodes(r INT, c INT) AS (
        SELECT r1, c1 FROM steps2 GROUP BY r1, c1 HAVING COUNT(*) != 2
    ),
    -- Determine node-to-node path lengths. Do not cross nodes.
    trail(r1 INT, c1 INT, d INT, r2 INT, c2 INT) AS (
        SELECT r1, c1, MIN(d), r2, c2
        FROM (
            SELECT r1, c1, 1 d, r2, c2 FROM steps2 WHERE (r1, c1) IN (SELECT * FROM nodes)
            UNION ALL
            SELECT trail.r1, trail.c1, d + 1, steps2.r2, steps2.c2
            FROM trail, steps2
            WHERE trail.r2 = steps2.r1
            AND trail.c2 = steps2.c1
            AND (trail.r1 != steps2.r2 OR trail.c1 != steps2.c2)
            AND (steps2.r1, steps2.c1) NOT IN (SELECT * FROM nodes)
        )
        GROUP BY r1, c1, r2, c2
    ),

    links(r1 INT, c1 INT, d INT, r2 INT, c2 INT) AS (
        SELECT * FROM trail WHERE (r2, c2) IN (SELECT * FROM nodes)
    ),

    -- These rows in links show that (12, 20) and (130, 126) are mandatory,
    -- and are the first moments we have a choice. The remaining 32 nodes
    -- can each get a number, and be used in a bit pattern somewhere.
    --
    --          1 |   2 | 105 |  12 |  20
    --        141 | 140 | 121 | 130 | 126

    -- Re-key nodes to dense integers.
    internal(r INT, c INT, id INT) AS (
        SELECT r, c, (
            SELECT COUNT(*)
            FROM nodes n1
            WHERE (n1.r < n2.r OR (n1.r = n2.r AND n1.c < n2.c))
              AND (n1.r, n1.c) NOT IN (VALUES (1,2), (12,20), (130,126), (141,140))
        )
        FROM nodes n2
        WHERE (r, c) NOT IN (VALUES (1,2), (12,20), (130,126), (141,140))
    ),

    longest(r INT, c INT, d INT, v BIGINT) AS (
        SELECT r, c, MAX(d), v
        FROM (
            SELECT 12 r, 20 c, 0 d, 0 v
            UNION ALL
            SELECT r2, c2, longest.d + links.d, v + (1::BIGINT << internal.id)
            FROM longest, links, internal
            WHERE longest.r = links.r1
              AND longest.c = links.c1
              AND links.r2 = internal.r
              AND links.c2 = internal.c
              AND ((v >> internal.id) % 2) != 1
        )
        GROUP BY r, c, v
    ),

    potato(x INT) AS ( SELECT 1 )

SELECT * FROM longest ORDER BY d DESC;
----
12  20  0  0

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    cells(r INT, c INT, symbol TEXT) AS (
        SELECT r, c, substring(line, c, 1)
        FROM lines, generate_series(1, length(line)) c
    ),

    -- Part one: longest path (on probably a DAG)
    paths(r INT, c INT) AS (
        SELECT r, c FROM cells WHERE symbol = '.'
    ),

    steps(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r, c, r + 1, c FROM paths WHERE (r + 1, c) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r - 1, c FROM paths WHERE (r - 1, c) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r, c + 1 FROM paths WHERE (r, c + 1) IN (SELECT * FROM PATHS) UNION
        SELECT r, c, r, c - 1 FROM paths WHERE (r, c - 1) IN (SELECT * FROM PATHS)
    ),

    -- A directional trip, forced by a slope and the no-revisting rule.
    force(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r-1, c, r+1, c FROM cells WHERE symbol = 'v' UNION ALL
        SELECT r+1, c, r-1, c FROM cells WHERE symbol = '^' UNION ALL
        SELECT r, c-1, r, c+1 FROM cells WHERE symbol = '>' UNION ALL
        SELECT r, c+1, r, c-1 FROM cells WHERE symbol = '<'
    ),

    dists(r INT, c INT, d INT) AS (
        SELECT 1, 2, 0
        UNION
        SELECT steps.r2, steps.c2, 1 + MIN(d)
        FROM dists, steps
        WHERE dists.r = steps.r1
          AND dists.c = steps.c1
        GROUP BY steps.r2, steps.c2
        UNION
        SELECT force.r2, force.c2, 2 + MAX(d)
        FROM dists, force
        WHERE dists.r = force.r1
          AND dists.c = force.c1
        GROUP BY force.r2, force.c2
    ),

    -- Part two: longest path on definitely not a DAG.
    -- There are 32 optional nodes (not including first and last nodes)
    -- Clearly meant to pack in to an int and avoid duplication.
    paths2(r INT, c INT) AS (
        SELECT r, c FROM cells WHERE symbol != '#'
    ),

    steps2(r1 INT, c1 INT, r2 INT, c2 INT) AS (
        SELECT r, c, r + 1, c FROM paths2 WHERE (r + 1, c) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r - 1, c FROM paths2 WHERE (r - 1, c) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r, c + 1 FROM paths2 WHERE (r, c + 1) IN (SELECT * FROM paths2) UNION
        SELECT r, c, r, c - 1 FROM paths2 WHERE (r, c - 1) IN (SELECT * FROM paths2)
    ),
    -- Locations where a choice exists (or start/end).
    nodes(r INT, c INT) AS (
        SELECT r1, c1 FROM steps2 GROUP BY r1, c1 HAVING COUNT(*) != 2
    ),
    -- Determine node-to-node path lengths. Do not cross nodes.
    trail(r1 INT, c1 INT, d INT, r2 INT, c2 INT) AS (
        SELECT r1, c1, MIN(d), r2, c2
        FROM (
            SELECT r1, c1, 1 d, r2, c2 FROM steps2 WHERE (r1, c1) IN (SELECT * FROM nodes)
            UNION ALL
            SELECT trail.r1, trail.c1, d + 1, steps2.r2, steps2.c2
            FROM trail, steps2
            WHERE trail.r2 = steps2.r1
            AND trail.c2 = steps2.c1
            AND (trail.r1 != steps2.r2 OR trail.c1 != steps2.c2)
            AND (steps2.r1, steps2.c1) NOT IN (SELECT * FROM nodes)
        )
        GROUP BY r1, c1, r2, c2
    ),

    links(r1 INT, c1 INT, d INT, r2 INT, c2 INT) AS (
        SELECT * FROM trail WHERE (r2, c2) IN (SELECT * FROM nodes)
    ),

    -- These rows in links show that (12, 20) and (130, 126) are mandatory,
    -- and are the first moments we have a choice. The remainaing 32 nodes
    -- can each get a number, and be used in a bit pattern somewhere.
    --
    --          1 |   2 | 105 |  12 |  20
    --        141 | 140 | 121 | 130 | 126

    -- Re-key nodes to dense integers.
    internal(r INT, c INT, id INT) AS (
        SELECT r, c, (
            SELECT COUNT(*)
            FROM nodes n1
            WHERE (n1.r < n2.r OR (n1.r = n2.r AND n1.c < n2.c))
              AND (n1.r, n1.c) NOT IN (VALUES (1,2), (12,20), (130,126), (141,140))
        )
        FROM nodes n2
        WHERE (r, c) NOT IN (VALUES (1,2), (12,20), (130,126), (141,140))
    ),

    longest(r INT, c INT, d INT, v BIGINT) AS (
        SELECT r, c, MAX(d), v
        FROM (
            SELECT 12 r, 20 c, 0 d, 0 v
            UNION ALL
            SELECT r2, c2, longest.d + links.d, v + (1::BIGINT << internal.id)
            FROM longest, links, internal
            WHERE longest.r = links.r1
              AND longest.c = links.c1
              AND links.r2 = internal.r
              AND links.c2 = internal.c
              AND ((v >> internal.id) % 2) != 1
        )
        GROUP BY r, c, v
    ),

    potato(x INT) AS ( SELECT 1 )

SELECT * FROM longest ORDER BY d DESC;
----
Explained Query:
  Finish order_by=[#2 desc nulls_first] output=[#0..=#3]
    With Mutually Recursive
      cte l0 =
        Project (#0, #2)
          Filter ("#" != substr(#1, #2, 1))
            FlatMap generate_series(1, char_length(#1), 1)
              Project (#1, #2)
                Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
                  FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
                    ReadStorage materialize.public.input
      cte l1 =
        Distinct project=[#0, #1]
          Get l0
      cte l2 =
        ArrangeBy keys=[[#0, #1]]
          Get l0
      cte l3 =
        Distinct project=[#0..=#3]
          Union
            Project (#0..=#2, #1)
              Distinct project=[#0..=#2]
                Union
                  Project (#0, #1, #4)
                    Map ((#0 + 1))
                      Join on=(#0 = #2 AND #1 = #3) type=differential
                        Get l2
                        ArrangeBy keys=[[#0, #1]]
                          Distinct project=[#0, #1]
                            Project (#0, #1)
                              Join on=(#1 = #3 AND #2 = (#0 + 1)) type=differential
                                ArrangeBy keys=[[(#0 + 1), #1]]
                                  Get l1
                                Get l2
                  Project (#0, #1, #4)
                    Map ((#0 - 1))
                      Join on=(#0 = #2 AND #1 = #3) type=differential
                        Get l2
                        ArrangeBy keys=[[#0, #1]]
                          Distinct project=[#0, #1]
                            Project (#0, #1)
                              Join on=(#1 = #3 AND #2 = (#0 - 1)) type=differential
                                ArrangeBy keys=[[(#0 - 1), #1]]
                                  Get l1
                                Get l2
            Project (#0, #1, #0, #4)
              Map ((#1 + 1))
                Join on=(#0 = #2 AND #1 = #3) type=differential
                  Get l2
                  ArrangeBy keys=[[#0, #1]]
                    Distinct project=[#0, #1]
                      Project (#0, #1)
                        Join on=(#0 = #2 AND #3 = (#1 + 1)) type=differential
                          ArrangeBy keys=[[#0, (#1 + 1)]]
                            Get l1
                          Get l2
            Project (#0, #1, #0, #4)
              Map ((#1 - 1))
                Join on=(#0 = #2 AND #1 = #3) type=differential
                  Get l2
                  ArrangeBy keys=[[#0, #1]]
                    Distinct project=[#0, #1]
                      Project (#0, #1)
                        Join on=(#0 = #2 AND #3 = (#1 - 1)) type=differential
                          ArrangeBy keys=[[#0, (#1 - 1)]]
                            Get l1
                          Get l2
      cte l4 =
        Project (#0, #1)
          Filter (#2 != 2)
            Reduce group_by=[#0, #1] aggregates=[count(*)]
              Project (#0, #1)
                Get l3
      cte l5 =
        ArrangeBy keys=[[#0, #1]]
          Get l3
      cte l6 =
        Project (#0..=#4, #7, #8)
          Filter ((#0 != #7) OR (#1 != #8))
            Join on=(#3 = #5 AND #4 = #6) type=differential
              ArrangeBy keys=[[#3, #4]]
                Get l9
              Get l5
      cte l7 =
        Distinct project=[#0, #1]
          Project (#3, #4)
            Get l6
      cte l8 =
        ArrangeBy keys=[[#0, #1]]
          Get l4
      cte l9 =
        Project (#0, #1, #4, #2, #3)
          Reduce group_by=[#0, #1, #3, #4] aggregates=[min(#2)]
            Union
              Project (#0, #1, #6, #2, #3)
                Map (1)
                  Join on=(#0 = #4 AND #1 = #5) type=differential
                    Get l5
                    Get l8
              Project (#0, #1, #9, #5, #6)
                Map ((#2 + 1))
                  Join on=(#3 = #7 AND #4 = #8) type=differential
                    ArrangeBy keys=[[#3, #4]]
                      Get l6
                    ArrangeBy keys=[[#0, #1]]
                      Union
                        Negate
                          Project (#0, #1)
                            Join on=(#0 = #2 AND #1 = #3) type=differential
                              ArrangeBy keys=[[#0, #1]]
                                Get l7
                              Get l8
                        Get l7
      cte l10 =
        Union
          Negate
            Distinct project=[#0, #1]
              Project (#0, #1)
                Filter (#0 = #2) AND (#1 = #3)
                  FlatMap wrap2(1, 2, 12, 20, 130, 126, 141, 140)
                    Get l4
          Get l4
      cte l11 =
        Distinct project=[#0, #1]
          Get l10
      cte l12 =
        Filter ((#2 < #0) OR ((#0 = #2) AND (#3 < #1)))
          CrossJoin type=differential
            ArrangeBy keys=[[]]
              Get l11
            ArrangeBy keys=[[]]
              Get l4
      cte l13 =
        Distinct project=[#0, #1]
          Project (#2, #3)
            Get l12
      cte l14 =
        Reduce group_by=[#0, #1] aggregates=[count(*)]
          Project (#0, #1)
            Join on=(#2 = #4 AND #3 = #5) type=differential
              ArrangeBy keys=[[#2, #3]]
                Get l12
              ArrangeBy keys=[[#0, #1]]
                Union
                  Negate
                    Distinct project=[#0, #1]
                      Project (#0, #1)
                        Filter (#0 = #2) AND (#1 = #3)
                          FlatMap wrap2(1, 2, 12, 20, 130, 126, 141, 140)
                            Get l13
                  Get l13
      cte l15 =
        ArrangeBy keys=[[#0, #1]]
          Get l11
      cte l16 =
        Union
          Get l14
          Project (#0, #1, #4)
            Map (0)
              Join on=(#0 = #2 AND #1 = #3) type=differential
                ArrangeBy keys=[[#0, #1]]
                  Union
                    Negate
                      Project (#0, #1)
                        Get l14
                    Get l11
                Get l15
      cte l17 =
        Project (#0, #1, #3, #2)
          Reduce group_by=[#0, #1, #3] aggregates=[max(#2)]
            Union
              Project (#7, #8, #19, #20)
                Filter (1 != ((#3 >> #18) % 2))
                  Map (bigint_to_integer(#17), (#2 + #6), (#3 + (1 << #18)))
                    Join on=(#0 = #4 AND #1 = #5 AND #7 = #9 = #11 = #13 = #15 AND #8 = #10 = #12 = #14 = #16) type=delta
                      ArrangeBy keys=[[#0, #1]]
                        Get l17
                      ArrangeBy keys=[[#0, #1], [#3, #4]]
                        Get l9
                      Get l8
                      ArrangeBy keys=[[#0, #1]]
                        Get l10
                      Get l15
                      ArrangeBy keys=[[#0, #1]]
                        Union
                          Get l16
                          Map (error("more than one record produced in subquery"))
                            Project (#0, #1)
                              Filter (#2 > 1)
                                Reduce group_by=[#0, #1] aggregates=[count(*)]
                                  Project (#0, #1)
                                    Get l16
              Constant
                - (12, 20, 0, 0)
    Return
      Get l17

Source materialize.public.input

Target cluster: quickstart

EOF
