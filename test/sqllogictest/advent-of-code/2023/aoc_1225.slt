# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# https://github.com/MaterializeInc/advent-of-code-2023/blob/main/week1/aoc_1225.md

mode cockroach

statement ok
CREATE TABLE input (input TEXT);

statement ok
INSERT INTO input VALUES (
'tls: ssh
ssh: ftp ssr sso
ftp: rgb mkd sso
ssr: dos htd
sso: lll pxp
rgb: zbz vmz htd
htd: jln
mkd: mmx');

query I
WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 50)

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    edges(src TEXT, dst TEXT) AS (
        SELECT
            trim(':' FROM regexp_split_to_array(line, ' ')[1]),
            trim(',' FROM regexp_split_to_array(line, ' ')[x])
        FROM
            lines, generate_series(2, array_length(regexp_split_to_array(line, ' '), 1)) x
    ),

    symm(src TEXT, dst TEXT) AS (
        SELECT src, dst FROM edges
        UNION ALL
        SELECT dst, src FROM edges
    ),

    init(src TEXT, val NUMERIC) AS (
        SELECT src, CASE WHEN src < 'n' THEN 1.0 ELSE -1.0 END
        FROM (SELECT src FROM edges UNION ALL SELECT dst FROM edges)
    ),
    -- determine the second eigenvector of the adjacency matrix
    weight(src TEXT, val NUMERIC) AS (
        SELECT * FROM init
        EXCEPT ALL
        SELECT * FROM init_delayed
        UNION ALL
        SELECT symm.src, SUM((val - (SELECT AVG(val) FROM weight))/(SELECT STDDEV(val) FROM weight))
        FROM symm, weight
        WHERE symm.dst = weight.src
        GROUP BY symm.src
    ),

    init_delayed(src TEXT, val NUMERIC) AS ( SELECT * FROM init ),

    part1(part1 BIGINT) AS (
        SELECT
            (SELECT COUNT(*) FROM weight WHERE val < 0.0) *
            (SELECT COUNT(*) FROM weight WHERE val > 0.0)
    ),

    potato(x INT) AS ( SELECT 1 )

SELECT * FROM part1;
----
54

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 50)

    lines(r INT, line TEXT) AS (
        SELECT r, regexp_split_to_array(input, '\n')[r] as line
        FROM input, generate_series(1, array_length(regexp_split_to_array(input, '\n'), 1)) r
    ),

    edges(src TEXT, dst TEXT) AS (
        SELECT
            trim(':' FROM regexp_split_to_array(line, ' ')[1]),
            trim(',' FROM regexp_split_to_array(line, ' ')[x])
        FROM
            lines, generate_series(2, array_length(regexp_split_to_array(line, ' '), 1)) x
    ),

    symm(src TEXT, dst TEXT) AS (
        SELECT src, dst FROM edges
        UNION ALL
        SELECT dst, src FROM edges
    ),

    init(src TEXT, val NUMERIC) AS (
        SELECT src, CASE WHEN src < 'n' THEN 1.0 ELSE -1.0 END
        FROM (SELECT src FROM edges UNION ALL SELECT dst FROM edges)
    ),
    -- determine the second eigenvector of the adjacency matrix
    weight(src TEXT, val NUMERIC) AS (
        SELECT * FROM init
        EXCEPT ALL
        SELECT * FROM init_delayed
        UNION ALL
        SELECT symm.src, SUM((val - (SELECT AVG(val) FROM weight))/(SELECT STDDEV(val) FROM weight))
        FROM symm, weight
        WHERE symm.dst = weight.src
        GROUP BY symm.src
    ),

    init_delayed(src TEXT, val NUMERIC) AS ( SELECT * FROM init ),

    part1(part1 BIGINT) AS (
        SELECT
            (SELECT COUNT(*) FROM weight WHERE val < 0.0) *
            (SELECT COUNT(*) FROM weight WHERE val > 0.0)
    ),

    potato(x INT) AS ( SELECT 1 )

SELECT * FROM part1;
----
Explained Query:
  Return
    Return
      Project (#2)
        Map ((#0 * #1))
          CrossJoin type=differential
            ArrangeBy keys=[[]]
              Union
                Get l9
                Map (null)
                  Union
                    Negate
                      Project ()
                        Get l9
                    Constant
                      - ()
            ArrangeBy keys=[[]]
              Union
                Get l11
                Map (null)
                  Union
                    Negate
                      Project ()
                        Get l11
                    Constant
                      - ()
    With
      cte l11 =
        Union
          Get l10
          Map (0)
            Union
              Negate
                Project ()
                  Get l10
              Constant
                - ()
      cte l10 =
        Reduce aggregates=[count(*)]
          Project ()
            Filter (#1 > 0)
              Get l6
      cte l9 =
        Union
          Get l8
          Map (0)
            Union
              Negate
                Project ()
                  Get l8
              Constant
                - ()
      cte l8 =
        Reduce aggregates=[count(*)]
          Project ()
            Filter (#1 < 0)
              Get l6
  With Mutually Recursive
    cte [recursion_limit=50, return_at_limit] l7 =
      Get l1
    cte [recursion_limit=50, return_at_limit] l6 =
      Union
        Threshold
          Union
            Get l1
            Negate
              Get l7
        Reduce group_by=[#0] aggregates=[sum(((#1 - #2) / #3))]
          Project (#0, #3..=#5)
            Join on=(#1 = #2) type=delta
              ArrangeBy keys=[[], [#1]]
                Union
                  Filter (#1) IS NOT NULL
                    Get l0
                  Project (#1, #0)
                    Filter (#0) IS NOT NULL
                      Get l0
              ArrangeBy keys=[[#0]]
                Filter (#0) IS NOT NULL
                  Get l6
              ArrangeBy keys=[[]]
                Union
                  Get l3
                  Map (null)
                    Union
                      Negate
                        Project ()
                          Get l3
                      Constant
                        - ()
              ArrangeBy keys=[[]]
                Union
                  Get l5
                  Map (null)
                    Union
                      Negate
                        Project ()
                          Get l5
                      Constant
                        - ()
    cte l5 =
      Project (#3)
        Map (sqrtnumeric(case when ((#0) IS NULL OR (#1) IS NULL OR (case when (#2 = 0) then null else #2 end) IS NULL OR (case when (0 = (#2 - 1)) then null else (#2 - 1) end) IS NULL) then null else greatest(((#0 - ((#1 * #1) / bigint_to_numeric(case when (#2 = 0) then null else #2 end))) / bigint_to_numeric(case when (0 = (#2 - 1)) then null else (#2 - 1) end)), 0) end))
          Union
            Get l4
            Map (null, null, 0)
              Union
                Negate
                  Project ()
                    Get l4
                Constant
                  - ()
    cte l4 =
      Reduce aggregates=[sum((#0 * #0)), sum(#0), count(#0)]
        Project (#1)
          Get l6
    cte l3 =
      Project (#2)
        Map ((#0 / bigint_to_numeric(case when (#1 = 0) then null else #1 end)))
          Union
            Get l2
            Map (null, 0)
              Union
                Negate
                  Project ()
                    Get l2
                Constant
                  - ()
    cte l2 =
      Reduce aggregates=[sum(#0), count(#0)]
        Project (#1)
          Get l6
    cte l1 =
      Map (case when (#0 < "n") then 1 else -1 end)
        Union
          Project (#0)
            Get l0
          Project (#1)
            Get l0
    cte l0 =
      Project (#3, #4)
        Map (regexp_split_to_array[" ", case_insensitive=false](#0), btrim(array_index(#2, 1), ":"), btrim(array_index(#2, integer_to_bigint(#1)), ","))
          FlatMap generate_series(2, (regexp_split_to_array[" ", case_insensitive=false](#0) array_length 1), 1)
            Project (#2)
              Map (array_index(regexp_split_to_array["\n", case_insensitive=false](#0), integer_to_bigint(#1)))
                FlatMap generate_series(1, (regexp_split_to_array["\n", case_insensitive=false](#0) array_length 1), 1)
                  ReadStorage materialize.public.input

Source materialize.public.input

Target cluster: quickstart

EOF
