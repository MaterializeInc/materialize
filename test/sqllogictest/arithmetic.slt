# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

# TODO: The types supported by mod are SMALLINT, BIGINT, INTEGER, DECIMAL, and NUMERIC.
# Tests all types?

### mod ###

# positive dividend and divisor

query I
SELECT mod(34, 7)
----
6

query I
SELECT mod(35, 7)
----
0

query I
SELECT mod(4, 4)
----
0

query I
SELECT mod(7, 11)
----
7

query R
SELECT mod(4.3, 2.1)
----
0.1

query R
SELECT mod(4, 2.1)
----
1.9

query R
SELECT mod(0.34, 1.1)
----
0.34

query R
SELECT mod(4.2, 2.1)
----
0

# negative dividend
query I
SELECT mod(-3234, 73)
----
-22

query I
SELECT mod(-100, 10)
----
0

query I
SELECT mod(-5, 5)
----
0

query I
SELECT mod(-237, 1100)
----
-237

query R
SELECT mod(-2.254, 2.2)
----
-0.054

query R
SELECT mod(-4, 1.75)
----
-0.5

query R
SELECT mod(-0.3234, 200)
----
-0.3234

query R
SELECT mod(-7.5, 1.5)
----
0

# negative divisor

query I
SELECT mod(23, -5)
----
3

query I
SELECT mod(20, -2)
----
0

query I
SELECT mod(29, -29)
----
0

query I
SELECT mod(7, -11)
----
7

query R
SELECT mod(8.5, -4.6)
----
3.9

query R
SELECT mod(30, -11.9)
----
6.2

query R
SELECT mod(0.0019, -0.013)
----
0.0019

query R
SELECT mod(14.4, -0.002)
----
0

# negative dividend and negative divisor

query I
SELECT mod(-121, -17)
----
-2

query I
SELECT mod(-64, -8)
----
0

query I
SELECT mod(-344, -344)
----
0

query I
SELECT mod(-13, -123)
----
-13

query R
SELECT mod(-5.6, -2.3)
----
-1

query R
SELECT mod(-10.4, -2)
----
-0.4

query R
SELECT mod(-2.45, -45.6)
----
-2.45

query R
SELECT mod(-12.15, -4.05)
----
0

# special values: 0/NULL dividend and/or divisor

query I
SELECT mod(0, 4)
----
0

query R
SELECT mod(0.000, 2)
----
0

query R
SELECT mod(0, 1.23)
----
0

query error division by zero
SELECT mod(4, 0.0)

query error division by zero
SELECT mod(0, 0)

query I
SELECT mod(0, NULL)
----
NULL

query I
SELECT mod(NULL, 0)
----
NULL

query I
SELECT mod(-5, NULL)
----
NULL

query I
SELECT mod(NULL, 0.45)
----
NULL

query error division by zero
SELECT 1 % 0

query error division by zero
SELECT 1 % 0.0

query error division by zero
SELECT 1.0 % 0

query error division by zero
SELECT 1.0 % 0.0

query error division by zero
SELECT 1 % CAST (0.0 AS float)

query error division by zero
SELECT 1 / 0

query error division by zero
SELECT 1 / 0.0

query error division by zero
SELECT 1.0 / 0

query error division by zero
SELECT 1.0 / 0.0

query error division by zero
SELECT 1 / CAST (0.0 AS float)

query I
SELECT 1 + CAST ('5' AS double precision)
----
6

query TT
SELECT CAST ('+Inf' AS double precision), CAST ('inf' AS double precision)
----
inf inf

query T
SELECT CAST (CAST (1.1 AS double precision) AS text)
----
1.1

query T
SELECT CAST (CAST (1 as int) AS text)
----
1

query TT
SELECT FALSE::text, TRUE::text
----
false  true

query TTTTT
SELECT 1::smallint::text, 1::bigint::text, 1.0::text, 1.0::float::text, 1.0::double::text
----
1  1  1  1  1

query TTTTT
SELECT (-1)::smallint::text, (-1)::bigint::text, (-1.0)::text, (-1.0)::float::text, (-1.0)::double::text
----
-1  -1  -1  -1  -1

query TTT
SELECT 1.1::text, 1.1::float::text, 1.1::double::text
----
1.1  1.1  1.1

query R
SELECT round(CAST (1.5678 AS float))
----
2

query R
SELECT round(CAST (-1.4678 AS float))
----
-1

query R
SELECT round(CAST (1.5678 AS double precision))
----
2

query R
SELECT round(CAST (-1.4678 AS double precision))
----
-1

statement ok
CREATE TABLE nums (
  n integer
)

statement ok
INSERT INTO nums VALUES (4)

query R
SELECT round(1.5678, CAST ((SELECT n FROM nums) AS integer))
----
1.5678

statement ok
DELETE FROM nums

query R
SELECT floor(1.5678)
----
1

query R
SELECT round(1.5678, 3)
----
1.568

query R
SELECT round(1.5678, 2)
----
1.57

query R
SELECT round(1.5678, 1)
----
1.6

query R
SELECT round(1.5678, 0)
----
2

query R
SELECT round(1.5678, 7)
----
1.5678

query R
SELECT round(515, 0)
----
515

query R
SELECT round(515, 1)
----
515

query R
SELECT round(515, -1)
----
520

query R
SELECT round(515, -2)
----
500

query RRR
SELECT round(CAST (515 AS decimal), -3), round(515, -3), round(CAST (515 AS decimal(4, 0)), -3)
----
1000  1000  1000

query R
SELECT round(748.58, -4)
----
0

query RR
SELECT round(123.9994, 3), round(123.9995, 3)
----
123.999  124

query RR
SELECT round(123.4545, 2), round(123.45, -2)
----
123.45  100

query R
SELECT round(150.75, 0)
----
151

query R
SELECT round(NULL)
----
NULL

# This needs an explicit cast while we develop the new decimal type in parallel.
query R
SELECT round(NULL::decimal, 2)
----
NULL

query R
SELECT round(1.567, NULL)
----
NULL

# This needs an explicit cast while we develop the new decimal type in parallel.
query R
SELECT round(NULL::decimal, NULL)
----
NULL

statement ok
INSERT INTO nums VALUES (NULL)

query R
SELECT round((SELECT * FROM nums))
----
NULL

query R
SELECT round((SELECT * FROM nums), 2)
----
NULL

query R
SELECT round(2, (SELECT * FROM nums))
----
NULL

query R
SELECT round((SELECT * FROM nums), (SELECT * FROM nums))
----
NULL

statement ok
DROP TABLE nums

statement ok
CREATE TABLE nums (
  n float
)

statement ok
INSERT INTO nums VALUES (NULL)

query R
SELECT round((SELECT * FROM nums));
----
NULL

query error Cannot call function round\(double precision, integer\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round((SELECT * FROM nums), 2)

query error Cannot call function round\(double precision, double precision\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round((SELECT * FROM nums), (SELECT * FROM nums))

query error Cannot call function round\(numeric, double precision\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(5.0, (SELECT * FROM nums))

query R
SELECT round(5.0, CAST ((SELECT * FROM nums) AS integer))
----
NULL

query error Cannot call function round\(double precision, integer\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(CAST (5.0 AS double precision), 3)

query error Cannot call function round\(double precision, integer\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(CAST (5.0 AS float), 3)

query error Cannot call function round\(boolean, integer\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(true, 3)

query error
SELECT round(true)

query error Cannot call function round\(double precision, numeric\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(CAST (5.0 AS float), 3.0)

query error Cannot call function round\(double precision, double precision\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT round(CAST (5.0 AS float), CAST (3.0 AS float))

query I
SELECT 2147483646+1
----
2147483647

query error numeric field overflow
SELECT 2147483647+1

statement error numeric field overflow
SELECT 1073741824*2

query I
SELECT 9223372036854775806::bigint+1::bigint
----
9223372036854775807

query error numeric field overflow
SELECT 9223372036854775807::bigint+1::bigint

query error numeric field overflow
SELECT 9223372036854775807::bigint-(-1)::bigint
