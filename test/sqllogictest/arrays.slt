# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

# Test parsing arrays from strings.

query T
SELECT '{o, oOOo, "oOOo", "}"}'::text[]
----
{o,oOOo,oOOo,"}"}

query T
SELECT '{1, 2, 3, null, NULL, nULL}'::int[]
----
{1,2,3,NULL,NULL,NULL}

query T
SELECT '{  1,   2  , 3 }'::int[]
----
{1,2,3}

query error invalid input syntax for type array: malformed array literal: missing opening left brace
SELECT ''::int[]

query error invalid input syntax for type array: malformed array literal: junk after closing right brace
SELECT '{1, 2, 3} 4'::int[]

# This ought to be supported one day, but it is a lot of work.
query error parsing multi-dimensional arrays is not supported
SELECT '{{1}, {2}}'::int[]

# Test coercion behavior of multidimensional arrays.

query error ARRAY expression cannot be cast to uniform type: integer\[\] vs text\[\]
SELECT ARRAY[ARRAY[1, 2], ARRAY['3', '4']]

query T
SELECT ARRAY[ARRAY[1, 2], ARRAY['3', '4']]::int[]
----
{{1,2},{3,4}}

# Test array_to_string.

query TT
SELECT array_to_string(ARRAY['a', 'b,', NULL, 'c'], ','), array_to_string(ARRAY['a', 'b,', NULL, 'c'], ',', NULL)
----
a,b,,c  a,b,,c

query TT
SELECT array_to_string(ARRAY['a', 'b,', 'c'], NULL), array_to_string(ARRAY['a', 'b,', NULL, 'c'], 'foo', 'zerp')
----
NULL  afoob,foozerpfooc

query TT
SELECT array_to_string(NULL::text[], ','), array_to_string(NULL::text[], 'foo', 'zerp')
----
NULL  NULL

query error Cannot call function array_to_string\(unknown, unknown\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT array_to_string(NULL, ','), array_to_string(NULL, 'foo', 'zerp')

# Test ANY/SOME/ALL.

query B
SELECT 1 = ANY(ARRAY[1, 2])
----
true

query B
SELECT 1 = SOME(ARRAY[1, 2])
----
true

query B
SELECT 1 = ANY(ARRAY[2])
----
false

query error no overload for integer = text: arguments cannot be implicitly cast
SELECT 1 = ANY(ARRAY['1', '2'])

query B
SELECT 3 = ANY(ARRAY[ARRAY[1, 2], ARRAY[3,4]])
----
true

query error no overload for integer = text: arguments cannot be implicitly cast
SELECT 1 = ANY(ARRAY['hi'::text])

query error invalid input syntax for type integer: invalid digit found in string: "hi"
select 'hi' = any(array[1]);

query error cannot determine type of empty array
SELECT 'hi'::text = ANY(ARRAY[])

query B
SELECT 'hi'::text = ANY(ARRAY[]::text[])
----
false

query error ARRAY expression cannot be cast to uniform type: integer vs text
SELECT 123.4 = ANY(ARRAY[1, true, 'hi'::text])

query B
SELECT 1 != ANY(ARRAY[1])
----
false

query B
select 'hello'::text != ANY(ARRAY['there'::text])
----
true

query B
select 'hello'::text <= ANY(ARRAY['there'::text])
----
true

# Test ALL

query B
SELECT 1 = ALL(ARRAY[1, 2])
----
false

query B
SELECT 5 <> ALL(ARRAY[ARRAY[1, 2], ARRAY[3,4]])
----
true

# ðŸ”¬ðŸ”¬ unnest

query I rowsort
SELECT unnest FROM unnest(ARRAY[1,2,3])
----
1
2
3

query T rowsort
SELECT unnest::text FROM unnest(ARRAY[[1,2],[3,4]])
----
1
2
3
4

query T rowsort
SELECT unnest::text FROM unnest(ARRAY[NULL])
----
NULL

query I rowsort
SELECT unnest FROM unnest(ARRAY[NULL,1])
----
NULL
1

query T rowsort
SELECT unnest::text FROM unnest(NULL::int[])
----

query error Cannot call function unnest\(unknown\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT * FROM unnest(NULL)


# Duplicates of cockroach/array.slt. todo@jldlaughlin: Remove when we support that file.
# array subscript access

query T
SELECT ARRAY['a', 'b', 'c'][-1]
----
NULL

query T
SELECT ARRAY['a', 'b', 'c'][0]
----
NULL

query T
SELECT (ARRAY['a', 'b', 'c'])[2]
----
b

query T
SELECT ARRAY['a', 'b', 'c'][2]
----
b

query T
SELECT ARRAY['a', 'b', 'c'][4]
----
NULL

query T
SELECT ARRAY['a', 'b', 'c'][1.5 + 1.5]
----
c

query I
SELECT ARRAY[1, 2, 3][-1]
----
NULL

query I
SELECT ARRAY[1, 2, 3][0]
----
NULL

query I
SELECT ARRAY[1, 2, 3][2]
----
2

query I
SELECT ARRAY[1, 2, 3][4]
----
NULL

query I
SELECT ARRAY[1, 2, 3][1.5 + 1.5]
----
3

# Error different than Cockroach.
query error cannot subscript type text
SELECT ARRAY['a', 'b', 'c'][4][2]

# This differs from Cockroach, but matches Postgres.
query T
SELECT ARRAY['a', 'b', 'c'][3.5]
----
NULL

# Array equality

query B
SELECT ARRAY[1,2,3] = ARRAY[1,2,3]
----
true

query B
SELECT ARRAY[1,2,4] = ARRAY[1,2,3]
----
false

query B
SELECT ARRAY[1,2,3] != ARRAY[1,2,3]
----
false

query B
SELECT ARRAY[1,2,4] != ARRAY[1,2,3]
----
true

query B
SELECT ARRAY[1,2,4] = NULL
----
NULL

# This behavior is surprising (one might expect that the result would be
# NULL), but it's how Postgres behaves.
query B
SELECT ARRAY[1,2,NULL] = ARRAY[1,2,3]
----
false

query BB
SELECT ARRAY[1] < ARRAY[1], ARRAY[1] <= ARRAY[1]
----
false true

query BB
SELECT ARRAY[1] < ARRAY[2], ARRAY[1] <= ARRAY[2]
----
true true

query BB
SELECT ARRAY[1] < ARRAY[[1]], ARRAY[1] <= ARRAY[[1]]
----
true true

query BB
SELECT ARRAY[2] < ARRAY[1, 2], ARRAY[2] <= ARRAY[1, 2]
----
false false

query BB
SELECT ARRAY[1] < ARRAY[NULL]::int[], ARRAY[1] <= ARRAY[NULL]::int[]
----
true true

query BB
SELECT ARRAY[1] > ARRAY[1], ARRAY[1] >= ARRAY[1]
----
false true

query BB
SELECT ARRAY[1] > ARRAY[2], ARRAY[1] >= ARRAY[2]
----
false false

query BB
SELECT ARRAY[1] > ARRAY[[1]], ARRAY[1] >= ARRAY[[1]]
----
false false

query BB
SELECT ARRAY[2] > ARRAY[1, 2], ARRAY[2] >= ARRAY[1, 2]
----
true true

# todo(uce): uncomment after #5982
#query BB
#SELECT ARRAY[1] > ARRAY[NULL]::int[], ARRAY[1] >= ARRAY[NULL]::int[]
#----
#false false

query error no overload for integer\[\] = text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] = ARRAY['1','2','3']

query error no overload for integer\[\] <> text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] != ARRAY['1','2','3']

query error no overload for integer\[\] < text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] < ARRAY['1','2','3']

query error no overload for integer\[\] <= text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] <= ARRAY['1','2','3']

query error no overload for integer\[\] > text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] > ARRAY['1','2','3']

query error no overload for integer\[\] >= text\[\]: arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT ARRAY[1,2,3] >= ARRAY['1','2','3']
