# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b text,
  c date
)

statement ok
CREATE TABLE u (
  d int
)

statement ok
CREATE TABLE v (
  e double,
  f bool
)

#### NULL propagation ####

# Union that does not propagate a null
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types) AS TEXT FOR (SELECT * FROM v WHERE f) UNION ALL (SELECT * FROM v WHERE e IS NOT NULL)
----
Explained Query:
  Union // { types: "(double precision?, boolean?)" }
    Filter #1 // { types: "(double precision?, boolean)" }
      Get materialize.public.v // { types: "(double precision?, boolean?)" }
    Filter (#0) IS NOT NULL // { types: "(double precision, boolean?)" }
      Get materialize.public.v // { types: "(double precision?, boolean?)" }

EOF

# Union that does propagate a null
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types) AS TEXT FOR (SELECT * FROM v WHERE e = 1.25) UNION ALL (SELECT * FROM v WHERE e IS NOT NULL)
----
Explained Query:
  Union // { types: "(double precision, boolean?)" }
    Filter (#0 = 1.25) // { types: "(double precision, boolean?)" }
      Get materialize.public.v // { types: "(double precision?, boolean?)" }
    Filter (#0) IS NOT NULL // { types: "(double precision, boolean?)" }
      Get materialize.public.v // { types: "(double precision?, boolean?)" }

EOF

# Constant + reduce
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types) AS TEXT FOR
(SELECT 1 as a, 'hello' as b, null::date as c)
EXCEPT
(SELECT sum(a) as a, max(b) as b, c FROM t GROUP BY c)
----
Explained Query:
  Threshold // { types: "(bigint?, text?, date?)" }
    Union // { types: "(bigint?, text?, date?)" }
      Negate // { types: "(bigint?, text?, date?)" }
        Project (#1, #2, #0) // { types: "(bigint?, text?, date?)" }
          Reduce group_by=[#2] aggregates=[sum(#0), max(#1)] // { types: "(date?, bigint?, text?)" }
            Get materialize.public.t // { types: "(integer?, text?, date?)" }
      Constant // { types: "(bigint?, text?, date?)" }
        - (1, "hello", null)

EOF

#### Correct column scalar type ####

query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types) AS TEXT FOR
SELECT t.* FROM u LEFT OUTER JOIN t on t.a = u.d
----
Explained Query:
  Let // { types: "(integer?, text?, date?)" }
    Union // { types: "(integer?, text?, date?)" }
      Map (null, null, null) // { types: "(integer?, text?, date?)" }
        Union // { types: "()" }
          Negate // { types: "()" }
            Project () // { types: "()" }
              Join on=(#0 = #1) type=differential // { types: "(integer?, integer)" }
                Get materialize.public.u // { types: "(integer?)" }
                ArrangeBy keys=[[#0]] // { types: "(integer)" }
                  Distinct group_by=[#0] // { types: "(integer)" }
                    Project (#0) // { types: "(integer)" }
                      Get l0 // { types: "(integer, text?, date?)" }
          Project () // { types: "()" }
            Get materialize.public.u // { types: "(integer?)" }
      Get l0 // { types: "(integer, text?, date?)" }
    Where
      l0 =
        Project (#0, #2, #3) // { types: "(integer, text?, date?)" }
          Join on=(#0 = #1) type=differential // { types: "(integer, integer, text?, date?)" }
            ArrangeBy keys=[[#0]] // { types: "(integer)" }
              Filter (#0) IS NOT NULL // { types: "(integer)" }
                Get materialize.public.u // { types: "(integer?)" }
            Filter (#0) IS NOT NULL // { types: "(integer, text?, date?)" }
              Get materialize.public.t // { types: "(integer?, text?, date?)" }

Source materialize.public.t
  filter=((#0) IS NOT NULL)

EOF

query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types) AS TEXT FOR
(SELECT null::boolean as f1, 10 as f2) EXCEPT (SELECT min(f), count(*) FROM v WHERE (select d::double FROM u) = v.e GROUP BY e LIMIT 1)
----
Explained Query:
  Threshold // { types: "(boolean?, bigint)" }
    Union // { types: "(boolean?, bigint)" }
      Negate // { types: "(boolean?, bigint)" }
        TopK limit=1 monotonic=false // { types: "(boolean?, bigint)" }
          Project (#1, #2) // { types: "(boolean?, bigint)" }
            Reduce group_by=[#0] aggregates=[min(#1), count(true)] // { types: "(double precision, boolean?, bigint)" }
              Project (#0, #1) // { types: "(double precision, boolean?)" }
                Join on=(#0 = #2) type=differential // { types: "(double precision, boolean?, double precision)" }
                  ArrangeBy keys=[[#0]] // { types: "(double precision, boolean?)" }
                    Filter (#0) IS NOT NULL // { types: "(double precision, boolean?)" }
                      Get materialize.public.v // { types: "(double precision?, boolean?)" }
                  Union // { types: "(double precision)" }
                    Project (#1) // { types: "(double precision)" }
                      Filter (#1) IS NOT NULL // { types: "(integer?, double precision)" }
                        Map (integer_to_double(#0)) // { types: "(integer?, double precision?)" }
                          Get materialize.public.u // { types: "(integer?)" }
                    Map (error("more than one record produced in subquery")) // { types: "(double precision)" }
                      Project () // { types: "()" }
                        Filter error("more than one record produced in subquery") AND (#0 > 1) // { types: "(bigint)" }
                          Reduce aggregates=[count(true)] // { types: "(bigint)" }
                            Project () // { types: "()" }
                              Get materialize.public.u // { types: "(integer?)" }
      Constant // { types: "(boolean?, bigint)" }
        - (null, 10)

Source materialize.public.v
  filter=((#0) IS NOT NULL)

EOF
