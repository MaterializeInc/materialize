# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b text,
  c date
)

statement ok
CREATE TABLE u (
  d int
)

statement ok
CREATE TABLE v (
  e double,
  f bool
)

#### NULL propagation ####

# Union that does not propagate a null
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types, humanized expressions) AS VERBOSE TEXT FOR (SELECT * FROM v WHERE f) UNION ALL (SELECT * FROM v WHERE e IS NOT NULL)
----
Explained Query:
  Union // { types: "(double precision?, boolean?)" }
    Filter #1{f} // { types: "(double precision?, boolean)" }
      ReadStorage materialize.public.v // { types: "(double precision?, boolean?)" }
    Filter (#0{e}) IS NOT NULL // { types: "(double precision, boolean?)" }
      ReadStorage materialize.public.v // { types: "(double precision?, boolean?)" }

Source materialize.public.v

Target cluster: quickstart

EOF

# Union that does propagate a null
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types, humanized expressions) AS VERBOSE TEXT FOR (SELECT * FROM v WHERE e = 1.25) UNION ALL (SELECT * FROM v WHERE e IS NOT NULL)
----
Explained Query:
  Union // { types: "(double precision, boolean?)" }
    Filter (#0{e} = 1.25) // { types: "(double precision, boolean?)" }
      ReadStorage materialize.public.v // { types: "(double precision?, boolean?)" }
    Filter (#0{e}) IS NOT NULL // { types: "(double precision, boolean?)" }
      ReadStorage materialize.public.v // { types: "(double precision?, boolean?)" }

Source materialize.public.v

Target cluster: quickstart

EOF

# Constant + reduce
# Nullability should be correctly inferred on the Constant
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types, humanized expressions) AS VERBOSE TEXT FOR
(SELECT 1 as a, 'hello' as b, null::date as c)
EXCEPT
(SELECT sum(a) as a, max(b) as b, c FROM t GROUP BY c)
----
Explained Query:
  Threshold // { types: "(bigint?, text?, date?)" }
    Union // { types: "(bigint?, text?, date?)" }
      Negate // { types: "(bigint?, text?, date?)" }
        Project (#3{sum_a}, #1{max_b}, #0{c}) // { types: "(bigint?, text?, date?)" }
          Join on=(#0{c} = #2{c}) type=differential // { types: "(date?, text?, date?, bigint?)" }
            ArrangeBy keys=[[#0{c}]] // { types: "(date?, text?)" }
              Reduce group_by=[#1{c}] aggregates=[max(#0{b})] // { types: "(date?, text?)" }
                Project (#1{b}, #2{c}) // { types: "(text?, date?)" }
                  ReadStorage materialize.public.t // { types: "(integer?, text?, date?)" }
            ArrangeBy keys=[[#0{c}]] // { types: "(date?, bigint?)" }
              Reduce group_by=[#1{c}] aggregates=[sum(#0{a})] // { types: "(date?, bigint?)" }
                Project (#0{a}, #2{c}) // { types: "(integer?, date?)" }
                  ReadStorage materialize.public.t // { types: "(integer?, text?, date?)" }
      Constant // { types: "(bigint, text, date?)" }
        - (1, "hello", null)

Source materialize.public.t

Target cluster: quickstart

EOF

#### Correct column scalar type ####

query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types, humanized expressions) AS VERBOSE TEXT FOR
SELECT t.* FROM u LEFT OUTER JOIN t on t.a = u.d
----
Explained Query:
  With
    cte l0 =
      ArrangeBy keys=[[#0{d}]] // { types: "(integer)" }
        Filter (#0{d}) IS NOT NULL // { types: "(integer)" }
          ReadStorage materialize.public.u // { types: "(integer?)" }
    cte l1 =
      Project (#0{d}, #2{b}, #3{c}) // { types: "(integer, text?, date?)" }
        Join on=(#0{d} = #1{a}) type=differential // { types: "(integer, integer, text?, date?)" }
          Get l0 // { types: "(integer)" }
          ArrangeBy keys=[[#0{a}]] // { types: "(integer, text?, date?)" }
            Filter (#0{a}) IS NOT NULL // { types: "(integer, text?, date?)" }
              ReadStorage materialize.public.t // { types: "(integer?, text?, date?)" }
  Return // { types: "(integer?, text?, date?)" }
    Union // { types: "(integer?, text?, date?)" }
      Map (null, null, null) // { types: "(integer?, text?, date?)" }
        Union // { types: "()" }
          Negate // { types: "()" }
            Project () // { types: "()" }
              Join on=(#0{d} = #1{d}) type=differential // { types: "(integer, integer)" }
                Get l0 // { types: "(integer)" }
                ArrangeBy keys=[[#0{d}]] // { types: "(integer)" }
                  Distinct project=[#0{d}] // { types: "(integer)" }
                    Project (#0{d}) // { types: "(integer)" }
                      Get l1 // { types: "(integer, text?, date?)" }
          Project () // { types: "()" }
            ReadStorage materialize.public.u // { types: "(integer?)" }
      Get l1 // { types: "(integer, text?, date?)" }

Source materialize.public.t
  filter=((#0{a}) IS NOT NULL)
Source materialize.public.u

Target cluster: quickstart

EOF

query T multiline
EXPLAIN OPTIMIZED PLAN WITH(types, humanized expressions) AS VERBOSE TEXT FOR
(SELECT null::boolean as f1, 10 as f2) EXCEPT (SELECT min(f), count(*) FROM v WHERE (select d::double FROM u) = v.e GROUP BY e LIMIT 1)
----
Explained Query:
  With
    cte l0 =
      Project (#0{e}, #1{f}) // { types: "(double precision, boolean?)" }
        Join on=(#0{e} = #2) type=differential // { types: "(double precision, boolean?, double precision)" }
          ArrangeBy keys=[[#0{e}]] // { types: "(double precision, boolean?)" }
            Filter (#0{e}) IS NOT NULL // { types: "(double precision, boolean?)" }
              ReadStorage materialize.public.v // { types: "(double precision?, boolean?)" }
          ArrangeBy keys=[[#0]] // { types: "(double precision?)" }
            Union // { types: "(double precision?)" }
              Project (#1) // { types: "(double precision?)" }
                Filter (#0{d}) IS NOT NULL // { types: "(integer, double precision?)" }
                  Map (integer_to_double(#0{d})) // { types: "(integer?, double precision?)" }
                    ReadStorage materialize.public.u // { types: "(integer?)" }
              Map (error("more than one record produced in subquery")) // { types: "(double precision)" }
                Project () // { types: "()" }
                  Filter (#0{count} > 1) // { types: "(bigint)" }
                    Reduce aggregates=[count(*)] // { types: "(bigint)" }
                      Project () // { types: "()" }
                        ReadStorage materialize.public.u // { types: "(integer?)" }
  Return // { types: "(boolean?, bigint)" }
    Threshold // { types: "(boolean?, bigint)" }
      Union // { types: "(boolean?, bigint)" }
        Negate // { types: "(boolean?, bigint)" }
          TopK limit=1 // { types: "(boolean?, bigint)" }
            Project (#1{min_f}, #3{count}) // { types: "(boolean?, bigint)" }
              Join on=(#0{e} = #2{e}) type=differential // { types: "(double precision, boolean?, double precision, bigint)" }
                ArrangeBy keys=[[#0{e}]] // { types: "(double precision, boolean?)" }
                  Reduce group_by=[#0{e}] aggregates=[min(#1{f})] // { types: "(double precision, boolean?)" }
                    Get l0 // { types: "(double precision, boolean?)" }
                ArrangeBy keys=[[#0{e}]] // { types: "(double precision, bigint)" }
                  Reduce group_by=[#0{e}] aggregates=[count(*)] // { types: "(double precision, bigint)" }
                    Project (#0{e}) // { types: "(double precision)" }
                      Get l0 // { types: "(double precision, boolean?)" }
        Constant // { types: "(boolean?, bigint)" }
          - (null, 10)

Source materialize.public.u
Source materialize.public.v
  filter=((#0{e}) IS NOT NULL)

Target cluster: quickstart

EOF
