# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE warehouse (
    w_id integer,
    w_name char(10),
    w_street_1 char(20),
    w_street_2 char(20),
    w_city char(20),
    w_state char(2),
    w_zip char(9),
    w_tax decimal(4, 4),
    w_ytd decimal(12, 2),
    PRIMARY KEY (w_id)
)

statement ok
CREATE TABLE district (
    -- should be smallint, see #4171
    d_id integer,
    d_w_id integer,
    d_name char(10),
    d_street_1 char(20),
    d_street_2 char(20),
    d_city char(20),
    d_state char(2),
    d_zip char(9),
    d_tax decimal(4, 4),
    d_ytd decimal(12, 2),
    d_next_o_id integer,
    PRIMARY KEY (d_w_id, d_id)
)

statement ok
CREATE INDEX fk_district_warehouse ON district (d_w_id ASC)

statement ok
CREATE TABLE customer (
    -- should be smallint, see #4171
    c_id integer,
    -- should be smallint, see #4171
    c_d_id integer,
    c_w_id integer,
    c_first char(16),
    c_middle char(2),
    c_last char(16),
    c_street_1 char(20),
    c_street_2 char(20),
    c_city char(20),
    c_state char(2),
    c_zip char(9),
    c_phone char(16),
    c_since DATE,
    c_credit char(2),
    c_credit_lim decimal(12, 2),
    c_discount decimal(4, 4),
    c_balance decimal(12, 2),
    c_ytd_payment decimal(12, 2),
    -- should be smallint, see #4171
    c_payment_cnt integer,
    -- should be smallint, see #4171
    c_delivery_cnt integer,
    c_data text,
    c_n_nationkey integer,
    PRIMARY KEY(c_w_id, c_d_id, c_id)
)

statement ok
CREATE INDEX fk_customer_district ON customer(c_w_id ASC, c_d_id ASC)

statement ok
CREATE INDEX fk_customer_nation ON customer(c_n_nationkey ASC)

statement ok
CREATE TABLE history (
    -- should be smallint, see #4171
    h_c_id integer,
    -- should be smallint, see #4171
    h_c_d_id integer,
    h_c_w_id integer,
    -- should be smallint, see #4171
    h_d_id integer,
    h_w_id integer,
    h_date date,
    h_amount decimal(6, 2),
    h_data char(24)
)

statement ok
CREATE INDEX fk_history_customer ON history (h_c_w_id ASC, h_c_d_id ASC, h_c_id ASC)

statement ok
CREATE INDEX fk_history_district ON history (h_w_id ASC, h_d_id ASC)

statement ok
CREATE TABLE neworder (
    no_o_id integer,
    -- should be smallint, see #4171
    no_d_id integer,
    no_w_id integer,
    PRIMARY KEY (no_w_id, no_d_id, no_o_id)
)

statement ok
CREATE TABLE "order" (
    o_id integer,
    -- should be smallint, see #4171
    o_d_id integer,
    o_w_id integer,
    -- should be smallint, see #4171
    o_c_id integer,
    o_entry_d date,
    -- should be smallint, see #4171
    o_carrier_id integer,
    -- should be smallint, see #4171
    o_ol_cnt integer,
    -- should be smallint, see #4171
    o_all_local integer,
    PRIMARY KEY (o_w_id, o_d_id, o_id)
)

statement ok
CREATE INDEX fk_order_customer ON order (o_w_id ASC, o_d_id ASC, o_c_id ASC)

statement ok
CREATE TABLE orderline (
    ol_o_id integer,
    -- should be smallint, see #4171
    ol_d_id integer,
    ol_w_id integer,
    -- should be smallint, see #4171
    ol_number integer,
    ol_i_id integer,
    ol_supply_w_id integer,
    ol_delivery_d date,
    -- should be smallint, see #4171
    ol_quantity integer,
    ol_amount decimal(6, 2),
    ol_dist_info char(24),
    PRIMARY KEY (ol_w_id, ol_d_id, ol_o_id, ol_number)
)

statement ok
CREATE INDEX fk_orderline_order ON orderline (ol_w_id ASC, ol_d_id ASC, ol_o_id ASC)

statement ok
CREATE INDEX fk_orderline_stock ON orderline (ol_supply_w_id ASC, ol_i_id ASC)

statement ok
CREATE INDEX fk_orderline_item ON orderline (ol_i_id ASC)

statement ok
CREATE TABLE item (
    i_id integer,
    -- should be smallint, see #4171
    i_im_id integer,
    i_name char(24),
    i_price decimal(5, 2),
    i_data char(50),
    PRIMARY KEY (i_id)
)

statement ok
CREATE TABLE stock (
    s_i_id integer,
    s_w_id integer,
    -- smallint
    s_quantity integer,
    s_dist_01 char(24),
    s_dist_02 char(24),
    s_dist_03 char(24),
    s_dist_04 char(24),
    s_dist_05 char(24),
    s_dist_06 char(24),
    s_dist_07 char(24),
    s_dist_08 char(24),
    s_dist_09 char(24),
    s_dist_10 char(24),
    s_ytd integer,
    -- should be smallint, see #4171
    s_order_cnt integer,
    -- should be smallint, see #4171
    s_remote_cnt integer,
    s_data char(50),
    s_su_suppkey integer NOT NULL,
    PRIMARY KEY (s_w_id, s_i_id)
)

statement ok
CREATE INDEX fk_stock_warehouse ON stock (s_w_id ASC)

statement ok
CREATE INDEX fk_stock_item ON stock (s_i_id ASC)

statement ok
CREATE INDEX fk_stock_supplier ON stock (s_su_suppkey ASC)

statement ok
CREATE TABLE nation (
    -- should be smallint, see #4171
    n_nationkey integer NOT NULL,
    n_name char(25) NOT NULL,
    -- should be smallint, see #4171
    n_regionkey integer NOT NULL,
    n_comment char(152) NOT NULL,
    PRIMARY KEY (n_nationkey)
)

statement ok
CREATE INDEX fk_nation_regionkey ON nation (n_regionkey ASC)

statement ok
CREATE TABLE supplier (
    -- should be smallint, see #4171
    su_suppkey integer NOT NULL,
    su_name char(25) NOT NULL,
    su_address char(40) NOT NULL,
    -- should be smallint, see #4171
    su_nationkey integer NOT NULL,
    su_phone char(15) NOT NULL,
    su_acctbal decimal(12, 2) NOT NULL,
    su_comment char(101) NOT NULL,
    PRIMARY KEY (su_suppkey)
)

statement ok
CREATE INDEX fk_supplier_nationkey ON supplier (su_nationkey ASC)

statement ok
CREATE TABLE region (
    -- should be smallint, see #4171
    r_regionkey integer NOT NULL,
    r_name char(55) NOT NULL,
    r_comment char(152) NOT NULL,
    PRIMARY KEY (r_regionkey)
)

# Query 01
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    ol_number,
    sum(ol_quantity) AS sum_qty,
    sum(ol_amount) AS sum_amount,
    avg(ol_quantity) AS avg_qty,
    avg(ol_amount) AS avg_amount,
    count(*) AS count_order
FROM orderline
WHERE ol_delivery_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_number
ORDER BY ol_number
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#5]
    Project (#0..=#2, #6, #7, #5) // { arity: 6 }
      Map ((bigint_to_double(#1) / bigint_to_double(case when (#3 = 0) then null else #3 end)), (numeric_to_double(#2) / bigint_to_double(case when (#4 = 0) then null else #4 end))) // { arity: 8 }
        Reduce group_by=[#0] aggregates=[sum(#1), sum(#2), count(#1), count(#2), count(*)] // { arity: 6 }
          Project (#3, #7, #8) // { arity: 3 }
            Filter (date_to_timestamp(#6) > 2007-01-02 00:00:00) // { arity: 10 }
              Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_orderline_order

EOF

# Query 02
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT su_suppkey, su_name, n_name, i_id, i_name, su_address, su_phone, su_comment
FROM
    item, supplier, stock, nation, region,
    (
        SELECT
            s_i_id AS m_i_id,
            min(s_quantity) AS m_s_quantity
        FROM stock, supplier, nation, region
        WHERE s_su_suppkey = su_suppkey
        AND su_nationkey = n_nationkey
        AND n_regionkey = r_regionkey
        AND r_name like 'EUROP%'
        GROUP BY s_i_id
    ) m
WHERE i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND su_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND i_data like '%b'
AND r_name like 'EUROP%'
AND i_id = m_i_id
AND s_quantity = m_s_quantity
ORDER BY n_name, su_name, i_id
----
Explained Query:
  Finish order_by=[#2 asc nulls_last, #1 asc nulls_last, #3 asc nulls_last] output=[#0..=#7]
    Return // { arity: 8 }
      Project (#2, #3, #12, #0, #1, #4, #6, #7) // { arity: 8 }
        Join on=(eq(#0, #8, #15) AND #2 = #10 AND #5 = #11 AND #9 = #16 AND #13 = #14) type=differential // { arity: 17 }
          implementation
            %5[#0]UKA » %0:item[#0]UKlf » %2:stock[#0, #1]KKlf » %1:supplier[#0]UKlf » %3:nation[#0]UKlf » %4:l0[#0]UKlf
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Project (#0, #2) // { arity: 2 }
              Filter "%b" ~~(padchar(#4)) // { arity: 5 }
                Get materialize.public.item // { arity: 5 }
          ArrangeBy keys=[[#0]] // { arity: 6 }
            Project (#0..=#4, #6) // { arity: 6 }
              Get materialize.public.supplier // { arity: 7 }
          ArrangeBy keys=[[#0, #1]] // { arity: 3 }
            Project (#0, #2, #17) // { arity: 3 }
              Filter (#2) IS NOT NULL // { arity: 18 }
                Get materialize.public.stock // { arity: 18 }
          ArrangeBy keys=[[#0]] // { arity: 3 }
            Project (#0..=#2) // { arity: 3 }
              Get materialize.public.nation // { arity: 4 }
          Get l0 // { arity: 1 }
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Reduce group_by=[#0] aggregates=[min(#1)] // { arity: 2 }
              Project (#0, #2) // { arity: 2 }
                Join on=(#17 = #18 AND #21 = #25 AND #27 = #29) type=differential // { arity: 30 }
                  implementation
                    %3:l0[#0]UKlf » %2:nation[#2]KAlf » %1:supplier[#3]KAlf » %0:stock[#17]KAlf
                  ArrangeBy keys=[[#17]] // { arity: 18 }
                    Get materialize.public.stock // { arity: 18 }
                  ArrangeBy keys=[[#3]] // { arity: 7 }
                    Get materialize.public.supplier // { arity: 7 }
                  ArrangeBy keys=[[#2]] // { arity: 4 }
                    Get materialize.public.nation // { arity: 4 }
                  Get l0 // { arity: 1 }
    With
      cte l0 =
        ArrangeBy keys=[[#0]] // { arity: 1 }
          Project (#0) // { arity: 1 }
            Filter "EUROP%" ~~(padchar(#1)) // { arity: 3 }
              Get materialize.public.region // { arity: 3 }

Source materialize.public.item
  filter=("%b" ~~(padchar(#4)))
Source materialize.public.region
  filter=("EUROP%" ~~(padchar(#1)))

Used Indexes:
  - materialize.public.fk_stock_supplier
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 03
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT ol_o_id, ol_w_id, ol_d_id, sum(ol_amount) AS revenue, o_entry_d
FROM customer, neworder, "order", orderline
WHERE c_state LIKE 'A%'
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND no_w_id = o_w_id
AND no_d_id = o_d_id
AND no_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_o_id, ol_w_id, ol_d_id, o_entry_d
ORDER BY revenue DESC, o_entry_d
----
Explained Query:
  Finish order_by=[#3 desc nulls_first, #4 asc nulls_last] output=[#0..=#4]
    Project (#0..=#2, #4, #3) // { arity: 5 }
      Reduce group_by=[#2, #1, #0, #3] aggregates=[sum(#4)] // { arity: 5 }
        Project (#1..=#3, #10, #22) // { arity: 5 }
          Filter (date_to_timestamp(#10) > 2007-01-02 00:00:00) // { arity: 24 }
            Join on=(#0 = #9 AND eq(#1, #4, #7, #15) AND eq(#2, #5, #8, #16) AND eq(#3, #6, #14)) type=differential // { arity: 24 }
              implementation
                %0:customer[#2, #1, #0]UKKKlf » %2:order[#2, #1, #3]KKKAlif » %1:neworder[#0..=#2]UKKKlif » %3:orderline[#2, #1, #0]KKKAlif
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 3 }
                Project (#0..=#2) // { arity: 3 }
                  Filter "A%" ~~(padchar(#9)) // { arity: 22 }
                    Get materialize.public.customer // { arity: 22 }
              ArrangeBy keys=[[#0..=#2]] // { arity: 3 }
                Get materialize.public.neworder // { arity: 3 }
              ArrangeBy keys=[[#2, #1, #3]] // { arity: 8 }
                Get materialize.public.order // { arity: 8 }
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
                Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order

EOF

# Query 04
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT o_ol_cnt, count(*) AS order_count
FROM "order"
WHERE o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND o_entry_d < TIMESTAMP '2012-01-02 00:00:00.000000'
AND EXISTS (
    SELECT *
    FROM orderline
    WHERE o_id = ol_o_id
    AND o_w_id = ol_w_id
    AND o_d_id = ol_d_id
    AND ol_delivery_d >= o_entry_d
)
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0] aggregates=[count(*)] // { arity: 2 }
        Project (#4) // { arity: 1 }
          Join on=(#0 = #5 AND #1 = #6 AND #2 = #7 AND #3 = #8) type=differential // { arity: 9 }
            implementation
              %1[#0..=#3]UKKKKA » %0:l0[#0..=#3]UKKKKiif
            ArrangeBy keys=[[#0..=#3]] // { arity: 5 }
              Project (#0..=#2, #4, #6) // { arity: 5 }
                Get l0 // { arity: 9 }
            ArrangeBy keys=[[#0..=#3]] // { arity: 4 }
              Distinct group_by=[#0..=#3] // { arity: 4 }
                Project (#0..=#3) // { arity: 4 }
                  Filter (#10 >= #3) // { arity: 14 }
                    Join on=(#0 = #4 AND #1 = #5 AND #2 = #6) type=differential // { arity: 14 }
                      implementation
                        %0:l0[#2, #1, #0]UKKKiif » %1:orderline[#2, #1, #0]KKKAiif
                      ArrangeBy keys=[[#2, #1, #0]] // { arity: 4 }
                        Project (#0..=#2, #4) // { arity: 4 }
                          Get l0 // { arity: 9 }
                      ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
                        Get materialize.public.orderline // { arity: 10 }
    With
      cte l0 =
        Filter (#8 < 2012-01-02 00:00:00) AND (#8 >= 2007-01-02 00:00:00) // { arity: 9 }
          Map (date_to_timestamp(#4)) // { arity: 9 }
            Get materialize.public.order // { arity: 8 }

Used Indexes:
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order

EOF

# Query 05
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    n_name,
    sum(ol_amount) AS revenue
FROM customer, "order", orderline, stock, supplier, nation, region
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND c_n_nationkey = su_nationkey
AND su_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND r_name = 'EUROPE'
AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY n_name
ORDER BY revenue DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first] output=[#0, #1]
    Reduce group_by=[#1] aggregates=[sum(#0)] // { arity: 2 }
      Project (#16, #24) // { arity: 2 }
        Join on=(#0 = #7 AND eq(#1, #5, #9) AND eq(#2, #6, #10, #19) AND eq(#3, #22, #23) AND #4 = #8 AND #12 = #18 AND #20 = #21 AND #25 = #26) type=differential // { arity: 27 }
          implementation
            %1:order[#3, #1, #2]KKKif » %0:customer[#0..=#2]UKKKif » %5:nation[#0]UKif » %6:region[#0]UKeif » %2:orderline[#2, #1, #0]KKKAeif » %3:stock[#0, #1]UKKeif » %4:supplier[#0, #1]UKKeif
          ArrangeBy keys=[[#0..=#2]] // { arity: 4 }
            Project (#0..=#2, #21) // { arity: 4 }
              Filter (#21) IS NOT NULL // { arity: 22 }
                Get materialize.public.customer // { arity: 22 }
          ArrangeBy keys=[[#3, #1, #2]] // { arity: 4 }
            Project (#0..=#3) // { arity: 4 }
              Filter (#3) IS NOT NULL AND (date_to_timestamp(#4) >= 2007-01-02 00:00:00) // { arity: 8 }
                Get materialize.public.order // { arity: 8 }
          ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
            Get materialize.public.orderline // { arity: 10 }
          ArrangeBy keys=[[#0, #1]] // { arity: 3 }
            Project (#0, #1, #17) // { arity: 3 }
              Get materialize.public.stock // { arity: 18 }
          ArrangeBy keys=[[#0, #1]] // { arity: 2 }
            Project (#0, #3) // { arity: 2 }
              Get materialize.public.supplier // { arity: 7 }
          ArrangeBy keys=[[#0]] // { arity: 3 }
            Project (#0..=#2) // { arity: 3 }
              Get materialize.public.nation // { arity: 4 }
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Project (#0) // { arity: 1 }
              Filter (#1 = "EUROPE") // { arity: 3 }
                Get materialize.public.region // { arity: 3 }

Source materialize.public.region
  filter=((#1 = "EUROPE"))

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 06
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT sum(ol_amount) AS revenue
FROM orderline
WHERE ol_delivery_d >= TIMESTAMP '1999-01-01 00:00:00.000000'
AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
AND ol_quantity BETWEEN 1 AND 100000
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum(#0)] // { arity: 1 }
        Project (#8) // { arity: 1 }
          Filter (#10 < 2020-01-01 00:00:00) AND (#7 <= 100000) AND (#7 >= 1) AND (#10 >= 1999-01-01 00:00:00) // { arity: 11 }
            Map (date_to_timestamp(#6)) // { arity: 11 }
              Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_orderline_order

EOF

# Query 07
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    su_nationkey AS supp_nation,
    substr(c_state, 1, 1) AS cust_nation,
    EXTRACT(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS revenue
FROM supplier, stock, orderline, "order", customer, nation n1, nation n2
WHERE ol_supply_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND su_nationkey = n1.n_nationkey
AND c_n_nationkey = n2.n_nationkey
AND (
    (n1.n_name = 'GERMANY' AND n2.n_name = 'CAMBODIA')
    OR
    (n1.n_name = 'CAMBODIA' AND n2.n_name = 'GERMANY')
)
AND ol_delivery_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2012-01-02 00:00:00.000000'
GROUP BY su_nationkey, substr(c_state, 1, 1), EXTRACT(year FROM o_entry_d)
ORDER BY su_nationkey, cust_nation, l_year
----
Explained Query:
  Finish order_by=[#0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#0, substr(char_to_text(#3), 1, 1), extract_year_d(#2)] aggregates=[sum(#1)] // { arity: 4 }
        Project (#1, #10, #15, #19) // { arity: 4 }
          Filter (((#22 = "GERMANY") AND (#24 = "CAMBODIA")) OR ((#22 = "CAMBODIA") AND (#24 = "GERMANY"))) // { arity: 25 }
            Join on=(#0 = #4 AND #1 = #21 AND #2 = #8 AND #3 = #9 AND #5 = #11 AND eq(#6, #12, #17) AND eq(#7, #13, #18) AND #14 = #16 AND #20 = #23) type=differential // { arity: 25 }
              implementation
                %2:orderline[#0..=#2]KKKiif » %3:order[#0..=#2]UKKKiif » %4:customer[#0..=#2]UKKKiif » %1:stock[#0, #1]UKKiif » %6:l0[#0]UKeiif » %0:supplier[#0]UKeiif » %5:l0[#0]UKeiif
              ArrangeBy keys=[[#0]] // { arity: 2 }
                Project (#0, #3) // { arity: 2 }
                  Get materialize.public.supplier // { arity: 7 }
              ArrangeBy keys=[[#0, #1]] // { arity: 3 }
                Project (#0, #1, #17) // { arity: 3 }
                  Get materialize.public.stock // { arity: 18 }
              ArrangeBy keys=[[#0..=#2]] // { arity: 6 }
                Project (#0..=#2, #4, #5, #8) // { arity: 6 }
                  Filter (#10 <= 2012-01-02 00:00:00) AND (#10 >= 2007-01-02 00:00:00) AND (#4) IS NOT NULL AND (#5) IS NOT NULL // { arity: 11 }
                    Map (date_to_timestamp(#6)) // { arity: 11 }
                      Get materialize.public.orderline // { arity: 10 }
              ArrangeBy keys=[[#0..=#2]] // { arity: 5 }
                Project (#0..=#4) // { arity: 5 }
                  Filter (#3) IS NOT NULL // { arity: 8 }
                    Get materialize.public.order // { arity: 8 }
              ArrangeBy keys=[[#0..=#2]] // { arity: 5 }
                Project (#0..=#2, #9, #21) // { arity: 5 }
                  Filter (#21) IS NOT NULL // { arity: 22 }
                    Get materialize.public.customer // { arity: 22 }
              Get l0 // { arity: 2 }
              Get l0 // { arity: 2 }
    With
      cte l0 =
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Project (#0, #1) // { arity: 2 }
            Filter ((#1 = "GERMANY") OR (#1 = "CAMBODIA")) // { arity: 4 }
              Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 08
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    EXTRACT(year FROM o_entry_d) AS l_year,
    sum(CASE WHEN n2.n_name = 'GERMANY' THEN ol_amount ELSE 0 END) / CASE WHEN sum(ol_amount) = 0 THEN 1 ELSE sum(ol_amount) END AS mkt_share
FROM item, supplier, stock, orderline, "order", customer, nation n1, nation n2, region
WHERE i_id = s_i_id
AND ol_i_id = s_i_id
AND ol_supply_w_id = s_w_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND n1.n_nationkey = c_n_nationkey
AND n1.n_regionkey = r_regionkey
AND ol_i_id < 1000
AND r_name = 'EUROPE'
AND su_nationkey = n2.n_nationkey
AND o_entry_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2012-01-02 00:00:00.000000'
AND i_data like '%b'
AND i_id = ol_i_id
GROUP BY EXTRACT(year FROM o_entry_d)
ORDER BY l_year
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Project (#0, #3) // { arity: 2 }
      Map ((#1 / case when (#2 = 0) then 1 else #2 end)) // { arity: 4 }
        Reduce group_by=[extract_year_d(#1)] aggregates=[sum(case when (#2 = "GERMANY") then #0 else 0 end), sum(#0)] // { arity: 3 }
          Project (#14, #20, #28) // { arity: 3 }
            Filter (#0 < 1000) // { arity: 30 }
              Join on=(eq(#0, #3, #10) AND #1 = #5 AND #2 = #27 AND #4 = #11 AND #6 = #16 AND eq(#7, #17, #22) AND eq(#8, #18, #23) AND #19 = #21 AND #24 = #25 AND #26 = #29) type=differential // { arity: 30 }
                implementation
                  %4:order[#3, #1, #2]KKKiif » %5:customer[#0..=#2]UKKKiif » %6:nation[#0]UKiif » %8:region[#0]UKeiif » %3:orderline[#2, #1, #0]KKKAeiiif » %2:stock[#0, #1]UKKeiiiif » %0:item[#0]UKeliiiiif » %1:supplier[#0]UKeliiiiif » %7:nation[#0]UKeliiiiif
                ArrangeBy keys=[[#0]] // { arity: 1 }
                  Project (#0) // { arity: 1 }
                    Filter (#0 < 1000) AND "%b" ~~(padchar(#4)) // { arity: 5 }
                      Get materialize.public.item // { arity: 5 }
                ArrangeBy keys=[[#0]] // { arity: 2 }
                  Project (#0, #3) // { arity: 2 }
                    Get materialize.public.supplier // { arity: 7 }
                ArrangeBy keys=[[#0, #1]] // { arity: 3 }
                  Project (#0, #1, #17) // { arity: 3 }
                    Filter (#0 < 1000) // { arity: 18 }
                      Get materialize.public.stock // { arity: 18 }
                ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
                  Get materialize.public.orderline // { arity: 10 }
                ArrangeBy keys=[[#3, #1, #2]] // { arity: 5 }
                  Project (#0..=#4) // { arity: 5 }
                    Filter (#8 <= 2012-01-02 00:00:00) AND (#8 >= 2007-01-02 00:00:00) AND (#3) IS NOT NULL // { arity: 9 }
                      Map (date_to_timestamp(#4)) // { arity: 9 }
                        Get materialize.public.order // { arity: 8 }
                ArrangeBy keys=[[#0..=#2]] // { arity: 4 }
                  Project (#0..=#2, #21) // { arity: 4 }
                    Filter (#21) IS NOT NULL // { arity: 22 }
                      Get materialize.public.customer // { arity: 22 }
                ArrangeBy keys=[[#0]] // { arity: 2 }
                  Project (#0, #2) // { arity: 2 }
                    Get materialize.public.nation // { arity: 4 }
                ArrangeBy keys=[[#0]] // { arity: 2 }
                  Project (#0, #1) // { arity: 2 }
                    Get materialize.public.nation // { arity: 4 }
                ArrangeBy keys=[[#0]] // { arity: 1 }
                  Project (#0) // { arity: 1 }
                    Filter (#1 = "EUROPE") // { arity: 3 }
                      Get materialize.public.region // { arity: 3 }

Source materialize.public.item
  filter=((#0 < 1000) AND "%b" ~~(padchar(#4)))
Source materialize.public.region
  filter=((#1 = "EUROPE"))

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 09
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    n_name, EXTRACT(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS sum_profit
FROM item, stock, supplier, orderline, "order", nation
WHERE ol_i_id = s_i_id
AND ol_supply_w_id = s_w_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND ol_i_id = i_id
AND su_nationkey = n_nationkey
AND i_data like '%BB'
GROUP BY n_name, EXTRACT(year FROM o_entry_d)
ORDER BY n_name, l_year DESC
----
Explained Query:
  Finish order_by=[#0 asc nulls_last, #1 desc nulls_first] output=[#0..=#2]
    Reduce group_by=[#2, extract_year_d(#1)] aggregates=[sum(#0)] // { arity: 3 }
      Project (#14, #19, #21) // { arity: 3 }
        Join on=(eq(#0, #1, #10) AND #2 = #11 AND #3 = #4 AND #5 = #20 AND #6 = #16 AND #7 = #17 AND #8 = #18) type=differential // { arity: 22 }
          implementation
            %4:order[#2, #1, #0]UKKK » %3:orderline[#2, #1, #0]KKKA » %1:stock[#0, #1]UKK » %0:item[#0]UKlf » %2:supplier[#0]UKlf » %5:nation[#0]UKlf
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Project (#0) // { arity: 1 }
              Filter "%BB" ~~(padchar(#4)) // { arity: 5 }
                Get materialize.public.item // { arity: 5 }
          ArrangeBy keys=[[#0, #1]] // { arity: 3 }
            Project (#0, #1, #17) // { arity: 3 }
              Get materialize.public.stock // { arity: 18 }
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Project (#0, #3) // { arity: 2 }
              Get materialize.public.supplier // { arity: 7 }
          ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
            Get materialize.public.orderline // { arity: 10 }
          ArrangeBy keys=[[#2, #1, #0]] // { arity: 4 }
            Project (#0..=#2, #4) // { arity: 4 }
              Get materialize.public.order // { arity: 8 }
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Project (#0, #1) // { arity: 2 }
              Get materialize.public.nation // { arity: 4 }

Source materialize.public.item
  filter=("%BB" ~~(padchar(#4)))

Used Indexes:
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 10
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    c_id, c_last, sum(ol_amount) AS revenue, c_city, c_phone, n_name
FROM customer, "order", orderline, nation
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND o_entry_d <= ol_delivery_d
AND n_nationkey = c_n_nationkey
GROUP BY c_id, c_last, c_city, c_phone, n_name
ORDER BY revenue DESC
----
Explained Query:
  Finish order_by=[#2 desc nulls_first] output=[#0..=#5]
    Project (#0, #1, #5, #2..=#4) // { arity: 6 }
      Reduce group_by=[#0..=#3, #5] aggregates=[sum(#4)] // { arity: 6 }
        Project (#0, #3..=#5, #20, #23) // { arity: 6 }
          Filter (#11 <= #18) // { arity: 24 }
            Join on=(#0 = #10 AND eq(#1, #8, #13) AND eq(#2, #9, #14) AND #6 = #22 AND #7 = #12) type=differential // { arity: 24 }
              implementation
                %1:order[#3, #1, #2]KKKif » %0:customer[#0..=#2]UKKKif » %3:nation[#0]UKif » %2:orderline[#2, #1, #0]KKKAif
              ArrangeBy keys=[[#0..=#2]] // { arity: 7 }
                Project (#0..=#2, #5, #8, #11, #21) // { arity: 7 }
                  Filter (#21) IS NOT NULL // { arity: 22 }
                    Get materialize.public.customer // { arity: 22 }
              ArrangeBy keys=[[#3, #1, #2]] // { arity: 5 }
                Project (#0..=#4) // { arity: 5 }
                  Filter (#3) IS NOT NULL AND (date_to_timestamp(#4) >= 2007-01-02 00:00:00) // { arity: 8 }
                    Get materialize.public.order // { arity: 8 }
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
                Get materialize.public.orderline // { arity: 10 }
              ArrangeBy keys=[[#0]] // { arity: 2 }
                Project (#0, #1) // { arity: 2 }
                  Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_nation_regionkey

EOF

# Query 11
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT s_i_id, sum(s_order_cnt) AS ordercount
FROM stock, supplier, nation
WHERE s_su_suppkey = su_suppkey
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
GROUP BY s_i_id
HAVING sum(s_order_cnt) > (
    SELECT sum(s_order_cnt) * 0.005
    FROM stock, supplier, nation
    WHERE s_su_suppkey = su_suppkey
    AND su_nationkey = n_nationkey
    AND n_name = 'GERMANY'
)
ORDER BY ordercount DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Project (#0, #1) // { arity: 2 }
        Filter (bigint_to_numeric(#1) > (bigint_to_numeric(#2) * 0.005)) // { arity: 3 }
          CrossJoin type=differential // { arity: 3 }
            implementation
              %1[×]UA » %0[×]
            ArrangeBy keys=[[]] // { arity: 2 }
              Reduce group_by=[#0] aggregates=[sum(#1)] // { arity: 2 }
                Get l0 // { arity: 2 }
            ArrangeBy keys=[[]] // { arity: 1 }
              Reduce aggregates=[sum(#0)] // { arity: 1 }
                Project (#1) // { arity: 1 }
                  Get l0 // { arity: 2 }
    With
      cte l0 =
        Project (#0, #14) // { arity: 2 }
          Join on=(#17 = #18 AND #21 = #25) type=differential // { arity: 26 }
            implementation
              %2:nation[#0]UKef » %1:supplier[#3]KAef » %0:stock[#17]KAef
            ArrangeBy keys=[[#17]] // { arity: 18 }
              Get materialize.public.stock // { arity: 18 }
            ArrangeBy keys=[[#3]] // { arity: 7 }
              Get materialize.public.supplier // { arity: 7 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Project (#0) // { arity: 1 }
                Filter (#1 = "GERMANY") // { arity: 4 }
                  Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.fk_stock_supplier
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 12
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    o_ol_cnt,
    sum(CASE WHEN o_carrier_id = 1 OR o_carrier_id = 2 THEN 1 ELSE 0 END) AS high_line_count,
    sum(CASE WHEN o_carrier_id <> 1 AND o_carrier_id <> 2 THEN 1 ELSE 0 END) AS low_line_count
FROM
    "order", orderline
WHERE ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d <= ol_delivery_d
AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#2]
    Reduce group_by=[#1] aggregates=[sum(case when ((#0 = 1) OR (#0 = 2)) then 1 else 0 end), sum(case when ((#0 != 1) AND (#0 != 2)) then 1 else 0 end)] // { arity: 3 }
      Project (#4, #5) // { arity: 2 }
        Filter (date_to_timestamp(#12) < 2020-01-01 00:00:00) AND (#3 <= #12) // { arity: 16 }
          Join on=(#0 = #6 AND #1 = #7 AND #2 = #8) type=differential // { arity: 16 }
            implementation
              %0:order[#2, #1, #0]UKKK » %1:orderline[#2, #1, #0]KKKAif
            ArrangeBy keys=[[#2, #1, #0]] // { arity: 6 }
              Project (#0..=#2, #4..=#6) // { arity: 6 }
                Get materialize.public.order // { arity: 8 }
            ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
              Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order

EOF

# Query 13
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    c_count, count(*) AS custdist
FROM (
    SELECT c_id, count(o_id) as c_count
    FROM customer
    LEFT OUTER JOIN "order" ON (
        c_w_id = o_w_id AND c_d_id = o_d_id AND c_id = o_c_id AND o_carrier_id > 8
    )
    GROUP BY c_id
) AS c_orders
GROUP BY c_count
ORDER BY custdist DESC, c_count DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first, #0 desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0] aggregates=[count(*)] // { arity: 2 }
        Project (#1) // { arity: 1 }
          Reduce group_by=[#0] aggregates=[count(#1)] // { arity: 2 }
            Union // { arity: 2 }
              Project (#0, #22) // { arity: 2 }
                Get l0 // { arity: 23 }
              Map (null) // { arity: 2 }
                Union // { arity: 1 }
                  Negate // { arity: 1 }
                    Project (#0) // { arity: 1 }
                      Distinct group_by=[#0..=#21] // { arity: 22 }
                        Project (#0..=#21) // { arity: 22 }
                          Get l0 // { arity: 23 }
                  Project (#0) // { arity: 1 }
                    Get materialize.public.customer // { arity: 22 }
    With
      cte l0 =
        Project (#0..=#22) // { arity: 23 }
          Filter (#27 > 8) // { arity: 30 }
            Join on=(#0 = #25 AND #1 = #23 AND #2 = #24) type=differential // { arity: 30 }
              implementation
                %0:customer[#2, #1, #0]UKKK » %1:order[#2, #1, #3]KKKAif
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 22 }
                Get materialize.public.customer // { arity: 22 }
              ArrangeBy keys=[[#2, #1, #3]] // { arity: 8 }
                Get materialize.public.order // { arity: 8 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer

EOF

# Query 14
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    100.00 * sum(CASE WHEN i_data LIKE 'PR%' THEN ol_amount ELSE 0 END) / (1 + sum(ol_amount)) AS promo_revenue
FROM orderline, item
WHERE ol_i_id = i_id
AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND ol_delivery_d < TIMESTAMP '2020-01-02 00:00:00.000000'
----
Explained Query:
  Return // { arity: 1 }
    Project (#2) // { arity: 1 }
      Map (((100 * #0) / (1 + #1))) // { arity: 3 }
        Union // { arity: 2 }
          Get l0 // { arity: 2 }
          Map (null, null) // { arity: 2 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l0 // { arity: 2 }
              Constant // { arity: 0 }
                - ()
  With
    cte l0 =
      Reduce aggregates=[sum(case when "PR%" ~~(padchar(#1)) then #0 else 0 end), sum(#0)] // { arity: 2 }
        Project (#8, #11) // { arity: 2 }
          Filter (#12 < 2020-01-02 00:00:00) AND (#12 >= 2007-01-02 00:00:00) // { arity: 13 }
            Map (date_to_timestamp(#6)) // { arity: 13 }
              Join on=(#4 = #10) type=differential // { arity: 12 }
                implementation
                  %1:item[#0]UK » %0:orderline[#4]KAiif
                ArrangeBy keys=[[#4]] // { arity: 10 }
                  Get materialize.public.orderline // { arity: 10 }
                ArrangeBy keys=[[#0]] // { arity: 2 }
                  Project (#0, #4) // { arity: 2 }
                    Get materialize.public.item // { arity: 5 }

Used Indexes:
  - materialize.public.fk_orderline_item

EOF

# Query 15
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT su_suppkey, su_name, su_address, su_phone, total_revenue
FROM
    supplier,
    (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
        FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
WHERE su_suppkey = supplier_no
AND total_revenue = (
    SELECT max(total_revenue)
    FROM (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
            FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
)
ORDER BY su_suppkey
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#4]
    Return // { arity: 5 }
      Project (#0..=#3, #5) // { arity: 5 }
        Join on=(#0 = #4 AND #5 = #6) type=differential // { arity: 7 }
          implementation
            %1:l0[#0]UKA » %0:supplier[#0]UK » %2[#0]UK
          ArrangeBy keys=[[#0]] // { arity: 4 }
            Project (#0..=#2, #4) // { arity: 4 }
              Get materialize.public.supplier // { arity: 7 }
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Get l0 // { arity: 2 }
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Filter (#0) IS NOT NULL // { arity: 1 }
              Reduce aggregates=[max(#0)] // { arity: 1 }
                Project (#1) // { arity: 1 }
                  Get l0 // { arity: 2 }
    With
      cte l0 =
        Reduce group_by=[#1] aggregates=[sum(#0)] // { arity: 2 }
          Project (#8, #12) // { arity: 2 }
            Filter (date_to_timestamp(#6) >= 2007-01-02 00:00:00) // { arity: 13 }
              Join on=(#4 = #10 AND #5 = #11) type=differential // { arity: 13 }
                implementation
                  %1:stock[#1, #0]UKK » %0:orderline[#5, #4]KKAif
                ArrangeBy keys=[[#5, #4]] // { arity: 10 }
                  Get materialize.public.orderline // { arity: 10 }
                ArrangeBy keys=[[#1, #0]] // { arity: 3 }
                  Project (#0, #1, #17) // { arity: 3 }
                    Get materialize.public.stock // { arity: 18 }

Used Indexes:
  - materialize.public.fk_orderline_stock
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_supplier_nationkey

EOF

# Query 16
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    i_name,
    substr(i_data, 1, 3) AS brand,
    i_price,
    count(DISTINCT s_su_suppkey) AS supplier_cnt
FROM stock, item
WHERE i_id = s_i_id
AND i_data NOT LIKE 'zz%'
AND (
    s_su_suppkey NOT IN (SELECT su_suppkey FROM supplier WHERE su_comment like '%bad%')
)
GROUP BY i_name, substr(i_data, 1, 3), i_price
ORDER BY supplier_cnt DESC
----
Explained Query:
  Finish order_by=[#3 desc nulls_first] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#1, substr(char_to_text(#3), 1, 3), #2] aggregates=[count(distinct #0)] // { arity: 4 }
        Project (#0..=#3) // { arity: 4 }
          Join on=(#0 = #4) type=differential // { arity: 5 }
            implementation
              %0:l0[#0]K » %1[#0]K
            ArrangeBy keys=[[#0]] // { arity: 4 }
              Get l0 // { arity: 4 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Union // { arity: 1 }
                Negate // { arity: 1 }
                  Project (#0) // { arity: 1 }
                    Join on=(#0 = #1) type=differential // { arity: 2 }
                      implementation
                        %0:l1[#0]UKA » %1:supplier[#0]UKlf
                      ArrangeBy keys=[[#0]] // { arity: 1 }
                        Get l1 // { arity: 1 }
                      ArrangeBy keys=[[#0]] // { arity: 1 }
                        Project (#0) // { arity: 1 }
                          Filter "%bad%" ~~(padchar(#6)) // { arity: 7 }
                            Get materialize.public.supplier // { arity: 7 }
                Get l1 // { arity: 1 }
    With
      cte l1 =
        Distinct group_by=[#0] // { arity: 1 }
          Project (#0) // { arity: 1 }
            Get l0 // { arity: 4 }
      cte l0 =
        Project (#17, #19..=#21) // { arity: 4 }
          Join on=(#0 = #18) type=differential // { arity: 22 }
            implementation
              %1:item[#0]UKf » %0:stock[#0]KAf
            ArrangeBy keys=[[#0]] // { arity: 18 }
              Get materialize.public.stock // { arity: 18 }
            ArrangeBy keys=[[#0]] // { arity: 4 }
              Project (#0, #2..=#4) // { arity: 4 }
                Filter NOT("zz%" ~~(padchar(#4))) // { arity: 5 }
                  Get materialize.public.item // { arity: 5 }

Source materialize.public.item
  filter=(NOT("zz%" ~~(padchar(#4))))

Used Indexes:
  - materialize.public.fk_stock_item
  - materialize.public.fk_supplier_nationkey

EOF

# Query 17
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    sum(ol_amount) / 2.0 AS avg_yearly
FROM
    orderline,
    (
        SELECT i_id, avg(ol_quantity) AS a
        FROM item, orderline
        WHERE i_data LIKE '%b' AND ol_i_id = i_id
        GROUP BY i_id
    ) t
WHERE ol_i_id = t.i_id
AND ol_quantity < t.a
----
Explained Query:
  Return // { arity: 1 }
    Project (#1) // { arity: 1 }
      Map ((#0 / 2)) // { arity: 2 }
        Union // { arity: 1 }
          Get l1 // { arity: 1 }
          Map (null) // { arity: 1 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l1 // { arity: 1 }
              Constant // { arity: 0 }
                - ()
  With
    cte l1 =
      Reduce aggregates=[sum(#0)] // { arity: 1 }
        Project (#8) // { arity: 1 }
          Filter (integer_to_double(#7) < (bigint_to_double(#11) / bigint_to_double(case when (#12 = 0) then null else #12 end))) // { arity: 13 }
            Join on=(#4 = #10) type=differential // { arity: 13 }
              implementation
                %1[#0]UKA » %0:l0[#4]KA
              Get l0 // { arity: 10 }
              ArrangeBy keys=[[#0]] // { arity: 3 }
                Reduce group_by=[#0] aggregates=[sum(#1), count(#1)] // { arity: 3 }
                  Project (#0, #8) // { arity: 2 }
                    Join on=(#0 = #5) type=differential // { arity: 11 }
                      implementation
                        %0:item[#0]UKlf » %1:l0[#4]KAlf
                      ArrangeBy keys=[[#0]] // { arity: 1 }
                        Project (#0) // { arity: 1 }
                          Filter "%b" ~~(padchar(#4)) // { arity: 5 }
                            Get materialize.public.item // { arity: 5 }
                      Get l0 // { arity: 10 }
    cte l0 =
      ArrangeBy keys=[[#4]] // { arity: 10 }
        Get materialize.public.orderline // { arity: 10 }

Source materialize.public.item
  filter=("%b" ~~(padchar(#4)))

Used Indexes:
  - materialize.public.fk_orderline_item

EOF

# Query 18
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT c_last, c_id, o_id, o_entry_d, o_ol_cnt, sum(ol_amount)
FROM customer, "order", orderline
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
GROUP BY o_id, o_w_id, o_d_id, c_id, c_last, o_entry_d, o_ol_cnt
HAVING sum(ol_amount) > 200
ORDER BY sum(ol_amount) DESC, o_entry_d
----
Explained Query:
  Finish order_by=[#5 desc nulls_first, #3 asc nulls_last] output=[#0..=#5]
    Project (#4, #3, #0, #5..=#7) // { arity: 6 }
      Filter (#7 > 200) // { arity: 8 }
        Reduce group_by=[#4, #2, #1, #0, #3, #5, #6] aggregates=[sum(#7)] // { arity: 8 }
          Project (#0..=#4, #8, #10, #20) // { arity: 8 }
            Join on=(#0 = #7 AND eq(#1, #5, #13) AND eq(#2, #6, #14) AND #4 = #12) type=differential // { arity: 22 }
              implementation
                %0:customer[#2, #1, #0]UKKK » %1:order[#2, #1, #3]KKKA » %2:orderline[#2, #1, #0]KKKA
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 4 }
                Project (#0..=#2, #5) // { arity: 4 }
                  Get materialize.public.customer // { arity: 22 }
              ArrangeBy keys=[[#2, #1, #3]] // { arity: 8 }
                Get materialize.public.order // { arity: 8 }
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
                Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order

EOF

# Query 19
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT sum(ol_amount) AS revenue
FROM orderline, item
WHERE (
    ol_i_id = i_id
    AND i_data LIKE '%a'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 2, 3)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%b'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id IN (1, 2, 4)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%c'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 5, 3)
)
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum(#0)] // { arity: 1 }
        Project (#8) // { arity: 1 }
          Filter (#7 <= 10) AND (#7 >= 1) AND (#12 OR #13 OR #14 OR #15 OR #16) AND (("%a" ~~(#17) AND (#12 OR #13 OR #14)) OR ("%b" ~~(#17) AND (#12 OR #13 OR #15)) OR ("%c" ~~(#17) AND (#12 OR #14 OR #16))) // { arity: 18 }
            Map ((#2 = 1), (#2 = 2), (#2 = 3), (#2 = 4), (#2 = 5), padchar(#11)) // { arity: 18 }
              Join on=(#4 = #10) type=differential // { arity: 12 }
                implementation
                  %1:item[#0]UKliif » %0:orderline[#4]KAeliiiif
                ArrangeBy keys=[[#4]] // { arity: 10 }
                  Get materialize.public.orderline // { arity: 10 }
                ArrangeBy keys=[[#0]] // { arity: 2 }
                  Project (#0, #4) // { arity: 2 }
                    Filter (#3 <= 400000) AND (#3 >= 1) AND ("%a" ~~(#5) OR "%b" ~~(#5) OR "%c" ~~(#5)) // { arity: 6 }
                      Map (padchar(#4)) // { arity: 6 }
                        Get materialize.public.item // { arity: 5 }

Source materialize.public.item
  filter=((#3 <= 400000) AND (#3 >= 1) AND ("%a" ~~(#5) OR "%b" ~~(#5) OR "%c" ~~(#5)))
  map=(padchar(#4))

Used Indexes:
  - materialize.public.fk_orderline_item

EOF


# Query 20
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT su_name, su_address
FROM supplier, nation
WHERE su_suppkey IN (
    SELECT mod(s_i_id * s_w_id, 10000)
    FROM stock, orderline
    WHERE s_i_id IN (SELECT i_id FROM item WHERE i_data LIKE 'co%')
    AND ol_i_id = s_i_id
    AND ol_delivery_d > TIMESTAMP '2010-05-23 12:00:00'
    GROUP BY s_i_id, s_w_id, s_quantity
    HAVING 2 * s_quantity > sum(ol_quantity)
)
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
ORDER BY su_name
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Project (#1, #2) // { arity: 2 }
        Join on=(#0 = #3) type=differential // { arity: 4 }
          implementation
            %1[#0]UKA » %0:l0[#0]UK
          ArrangeBy keys=[[#0]] // { arity: 3 }
            Get l0 // { arity: 3 }
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Distinct group_by=[#0] // { arity: 1 }
              Project (#0) // { arity: 1 }
                Filter (integer_to_bigint((2 * #3)) > #4) AND (#0 = ((#1 * #2) % 10000)) // { arity: 5 }
                  Reduce group_by=[#0..=#3] aggregates=[sum(#4)] // { arity: 5 }
                    Project (#0..=#3, #26) // { arity: 5 }
                      Filter (date_to_timestamp(#25) > 2010-05-23 12:00:00) // { arity: 30 }
                        Join on=(eq(#1, #23, #29)) type=differential // { arity: 30 }
                          implementation
                            %3:item[#0]UKlf » %2:orderline[#4]KAlif » %1:stock[#0]KAlif » %0:l0[×]lif
                          ArrangeBy keys=[[]] // { arity: 1 }
                            Project (#0) // { arity: 1 }
                              Get l0 // { arity: 3 }
                          ArrangeBy keys=[[#0]] // { arity: 18 }
                            Get materialize.public.stock // { arity: 18 }
                          ArrangeBy keys=[[#4]] // { arity: 10 }
                            Get materialize.public.orderline // { arity: 10 }
                          ArrangeBy keys=[[#0]] // { arity: 1 }
                            Project (#0) // { arity: 1 }
                              Filter "co%" ~~(padchar(#4)) // { arity: 5 }
                                Get materialize.public.item // { arity: 5 }
    With
      cte l0 =
        Project (#0..=#2) // { arity: 3 }
          Join on=(#3 = #7) type=differential // { arity: 8 }
            implementation
              %1:nation[#0]UKef » %0:supplier[#3]KAef
            ArrangeBy keys=[[#3]] // { arity: 7 }
              Get materialize.public.supplier // { arity: 7 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Project (#0) // { arity: 1 }
                Filter (#1 = "GERMANY") // { arity: 4 }
                  Get materialize.public.nation // { arity: 4 }

Source materialize.public.item
  filter=("co%" ~~(padchar(#4)))

Used Indexes:
  - materialize.public.fk_orderline_item
  - materialize.public.fk_stock_item
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 21
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    su_name, count(*) as numwait
FROM
    supplier, orderline l1, "order", stock, nation
WHERE ol_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND l1.ol_delivery_d > o_entry_d
AND NOT EXISTS (
    SELECT *
    FROM orderline l2
    WHERE l2.ol_o_id = l1.ol_o_id
    AND l2.ol_w_id = l1.ol_w_id
    AND l2.ol_d_id = l1.ol_d_id
    AND l2.ol_delivery_d > l1.ol_delivery_d
)
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
GROUP BY su_name
ORDER BY numwait DESC, su_name
----
Explained Query:
  Finish order_by=[#1 desc nulls_first, #0 asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0] aggregates=[count(*)] // { arity: 2 }
        Project (#0) // { arity: 1 }
          Join on=(#1 = #5 AND #2 = #6 AND #3 = #7 AND #4 = #8) type=differential // { arity: 9 }
            implementation
              %0:l1[#1..=#4]KKKK » %1[#0..=#3]KKKK
            ArrangeBy keys=[[#1..=#4]] // { arity: 5 }
              Get l1 // { arity: 5 }
            ArrangeBy keys=[[#0..=#3]] // { arity: 4 }
              Union // { arity: 4 }
                Negate // { arity: 4 }
                  Distinct group_by=[#0..=#3] // { arity: 4 }
                    Project (#0..=#3) // { arity: 4 }
                      Filter (#10 > #3) // { arity: 14 }
                        Join on=(#0 = #4 AND #1 = #5 AND #2 = #6) type=differential // { arity: 14 }
                          implementation
                            %0:l2[#2, #1, #0]KKK » %1:l0[#2, #1, #0]KKKA
                          ArrangeBy keys=[[#2, #1, #0]] // { arity: 4 }
                            Get l2 // { arity: 4 }
                          Get l0 // { arity: 10 }
                Get l2 // { arity: 4 }
    With
      cte l2 =
        Distinct group_by=[#0..=#3] // { arity: 4 }
          Project (#1..=#4) // { arity: 4 }
            Get l1 // { arity: 5 }
      cte l1 =
        Project (#1, #3..=#5, #9) // { arity: 5 }
          Filter (#9 > #16) // { arity: 21 }
            Join on=(#0 = #19 AND #2 = #20 AND #3 = #13 AND #4 = #14 AND eq(#5, #15, #18) AND #7 = #17) type=differential // { arity: 21 }
              implementation
                %2:order[#2, #1, #0]UKKK » %1:l0[#2, #1, #0]KKKA » %3:stock[#0, #1]UKK » %0:supplier[#0]UK » %4:nation[#0]UKef
              ArrangeBy keys=[[#0]] // { arity: 3 }
                Project (#0, #1, #3) // { arity: 3 }
                  Get materialize.public.supplier // { arity: 7 }
              Get l0 // { arity: 10 }
              ArrangeBy keys=[[#2, #1, #0]] // { arity: 4 }
                Project (#0..=#2, #4) // { arity: 4 }
                  Get materialize.public.order // { arity: 8 }
              ArrangeBy keys=[[#0, #1]] // { arity: 3 }
                Project (#0, #1, #17) // { arity: 3 }
                  Get materialize.public.stock // { arity: 18 }
              ArrangeBy keys=[[#0]] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Filter (#1 = "GERMANY") // { arity: 4 }
                    Get materialize.public.nation // { arity: 4 }
      cte l0 =
        ArrangeBy keys=[[#2, #1, #0]] // { arity: 10 }
          Get materialize.public.orderline // { arity: 10 }

Used Indexes:
  - materialize.public.fk_order_customer
  - materialize.public.fk_orderline_order
  - materialize.public.fk_stock_warehouse
  - materialize.public.fk_nation_regionkey
  - materialize.public.fk_supplier_nationkey

EOF

# Query 22
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT
    substr(c_state, 1, 1) AS country,
    count(*) AS numcust,
    sum(c_balance) AS totacctbal
FROM customer
WHERE substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
AND c_balance > (
    SELECT avg(c_balance)
    FROM customer
    WHERE c_balance > 0.00
    AND substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
)
AND NOT EXISTS (
    SELECT *
    FROM "order"
    WHERE o_c_id = c_id AND o_w_id = c_w_id AND o_d_id = c_d_id
)
GROUP BY substr(c_state, 1, 1)
ORDER BY substr(c_state, 1, 1)
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#2]
    Return // { arity: 3 }
      Reduce group_by=[substr(char_to_text(#0), 1, 1)] aggregates=[count(*), sum(#1)] // { arity: 3 }
        Project (#3, #4) // { arity: 2 }
          Join on=(#0 = #5 AND #1 = #6 AND #2 = #7) type=differential // { arity: 8 }
            implementation
              %0:l1[#0..=#2]UKKK » %1[#0..=#2]KKK
            ArrangeBy keys=[[#0..=#2]] // { arity: 5 }
              Get l1 // { arity: 5 }
            ArrangeBy keys=[[#0..=#2]] // { arity: 3 }
              Union // { arity: 3 }
                Negate // { arity: 3 }
                  Project (#0..=#2) // { arity: 3 }
                    Join on=(#0 = #3 AND #1 = #4 AND #2 = #5) type=differential // { arity: 6 }
                      implementation
                        %1[#0..=#2]UKKKA » %0:l2[#0..=#2]UKKK
                      ArrangeBy keys=[[#0..=#2]] // { arity: 3 }
                        Get l2 // { arity: 3 }
                      ArrangeBy keys=[[#0..=#2]] // { arity: 3 }
                        Distinct group_by=[#2, #0, #1] // { arity: 3 }
                          Project (#1..=#3) // { arity: 3 }
                            Filter (#3) IS NOT NULL // { arity: 8 }
                              Get materialize.public.order // { arity: 8 }
                Get l2 // { arity: 3 }
    With
      cte l2 =
        Project (#0..=#2) // { arity: 3 }
          Get l1 // { arity: 5 }
      cte l1 =
        Project (#0..=#4) // { arity: 5 }
          Filter (numeric_to_double(#4) > (numeric_to_double(#5) / bigint_to_double(case when (#6 = 0) then null else #6 end))) // { arity: 7 }
            CrossJoin type=differential // { arity: 7 }
              implementation
                %1[×]UA » %0:l0[×]ef
              ArrangeBy keys=[[]] // { arity: 5 }
                Project (#0..=#2, #9, #16) // { arity: 5 }
                  Filter ((#22 = "1") OR (#22 = "2") OR (#22 = "3") OR (#22 = "4") OR (#22 = "5") OR (#22 = "6") OR (#22 = "7")) // { arity: 23 }
                    Get l0 // { arity: 23 }
              ArrangeBy keys=[[]] // { arity: 2 }
                Reduce aggregates=[sum(#0), count(*)] // { arity: 2 }
                  Project (#16) // { arity: 1 }
                    Filter (#16 > 0) AND ((#22 = "1") OR (#22 = "2") OR (#22 = "3") OR (#22 = "4") OR (#22 = "5") OR (#22 = "6") OR (#22 = "7")) // { arity: 23 }
                      Get l0 // { arity: 23 }
      cte l0 =
        Map (substr(char_to_text(#11), 1, 1)) // { arity: 23 }
          Get materialize.public.customer // { arity: 22 }

Used Indexes:
  - materialize.public.fk_customer_district
  - materialize.public.fk_order_customer

EOF
