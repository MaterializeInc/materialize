# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE input (key INT)

statement ok
CREATE CONTINUAL TASK ct (key INT) ON INPUT input AS (
    INSERT INTO ct SELECT * FROM input;
)

# Comments and SHOW
simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_comment TO true;
----
COMPLETE 0

statement ok
COMMENT ON CONTINUAL TASK ct IS 'foo'

query TTT
SHOW CONTINUAL TASKS;
----
ct  quickstart  foo

# Creating in other databases/schemas
statement ok
CREATE SCHEMA x

statement ok
CREATE DATABASE y

statement ok
CREATE SCHEMA y.z

statement ok
CREATE CONTINUAL TASK x.ct (key INT) ON INPUT input AS (
    INSERT INTO x.ct SELECT * FROM input;
)

statement ok
CREATE CONTINUAL TASK y.z.ct (key INT) ON INPUT input AS (
    INSERT INTO y.z.ct SELECT i.key FROM input i JOIN x.ct x_ct ON i.key = x_ct.key;
)

statement ok
INSERT INTO input VALUES (1);

query T
SELECT * FROM x.ct;
----
1

query T
SELECT * FROM y.z.ct;
----
1

# Also, ensure that we correctly resolve item with the same name in different
# schemas.
#
# TODO(ct2): Replace this with a SHOW CREATE CONTINUAL TASK once we've fixed it.
simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_unstable_dependencies TO true;
----
COMPLETE 0

query T
SELECT regexp_replace(create_sql, ' AS OF.*', '')
FROM mz_internal.mz_continual_tasks WHERE create_sql LIKE '%y.z.ct%';
----
CREATE CONTINUAL TASK y.z.ct ("key" [s20 AS "pg_catalog"."int4"]) IN CLUSTER [u1] ON INPUT [u1 AS "materialize"."public"."input"] AS (INSERT INTO y.z.ct SELECT "i"."key" FROM [u1 AS "materialize"."public"."input"] AS "i" JOIN [u3 AS "materialize"."x"."ct"] AS "x_ct" ON "i"."key" = "x_ct"."key")

simple conn=mz_system,user=mz_system
ALTER SYSTEM RESET enable_unstable_dependencies;
----
COMPLETE 0

# Regression test for a bug where we'd panic if no CT inputs were referenced.
statement ok
CREATE CONTINUAL TASK no_input_refs (key INT) ON INPUT input AS (
    INSERT INTO no_input_refs SELECT null::INT
)

query I
SELECT * FROM no_input_refs;
----

# INSERT will put in a cast if necessary
statement ok
CREATE CONTINUAL TASK cast_int_to_string (key STRING) ON INPUT input AS (
    INSERT INTO cast_int_to_string SELECT * FROM input WHERE key > 1;
)

statement ok
INSERT INTO input VALUES (2);

query T
SELECT * FROM cast_int_to_string;
----
2
