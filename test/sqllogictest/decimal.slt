# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

query R
SELECT '0.2'::decimal(38, 1)
----
0.2

query R
SELECT '-0.2'::decimal(38, 1)
----
-0.2

query R
SELECT '0.2'::decimal(38, 5)
----
0.20000

query R
SELECT '0.2'::decimal(38, 0)
----
0

statement ok
CREATE TABLE basic (
    a decimal(15, 1)
)

statement ok
INSERT INTO basic VALUES (0.1)

query R
SELECT a FROM basic
----
0.1

statement ok
CREATE TABLE multi_precision (
    p0 decimal(15, 0),
    p1 decimal(15, 1),
    p2 decimal(15, 2),
    p3 decimal(15, 3)
)

statement ok
INSERT INTO multi_precision VALUES (0.1, 0.1, 0.1, 0.1)

query RRRR
SELECT * FROM multi_precision
----
0  0.1  0.10  0.100

# Arithmetic that doesn't involve rescaling.

query R
SELECT a + 0.2 FROM basic
----
0.3

query R
SELECT a - 0.2 FROM basic
----
-0.1

query R
SELECT -a FROM basic
----
-0.1

query R
SELECT a * 0.2 FROM basic
----
0.02

# Arithmetic that involves coercion of integer literals.

query R
SELECT a + 2 FROM basic
----
2.1

query R
SELECT a - 2 FROM basic
----
-1.9

query R
SELECT a * 2 FROM basic
----
0.2

query R
SELECT a / 2 FROM basic
----
0.0500000

query R
SELECT a % 2 FROM basic
----
0.1

# Arithmetic that involves simple rescaling.

query RR
SELECT p1, p2 FROM multi_precision
----
0.1  0.10

query RR
SELECT p1 + p2, p2 + p1 FROM multi_precision
----
0.20  0.20

query RR
SELECT p1 - p2, p2 - p1 FROM multi_precision
----
0.00  0.00

query RR
SELECT p1 * p2, p2 * p1 FROM multi_precision
----
0.010  0.010

# "Complicated" arithmetic. These tests will need to be expanded.

query R
SELECT 10.01 * 1.1
----
11.011

query R
SELECT 10.001 * 0.001
----
0.010001

query R
SELECT 0.1 * 0.0000000000001
----
0.0000000000000

query R
SELECT 1.0 / 3.0
----
0.3333333

query R
SELECT CAST (2 AS decimal(1, 0)) / CAST (7 AS decimal(1, 0))
----
0.285714

query R
SELECT 10.1 / 2.1
----
4.8095238

query R
SELECT 10.001 / 0.001
----
10001

query R
SELECT 0.1 / 0.0000000000001
----
1000000000000

statement ok
CREATE TABLE agg (
    a decimal(15, 1)
)

statement ok
INSERT INTO agg VALUES (0.1), (0.2), (0.4)

query R
select sum(a) from agg
----
0.7

query R
select avg(a) from agg
----
0.2333333

query R
select min(a) from agg
----
0.1

query R
select max(a) from agg
----
0.4

statement ok
CREATE TABLE regression (
    a decimal(15, 2)
)

statement ok
INSERT INTO regression VALUES (0.07), (0.10)

query R rowsort
SELECT * FROM regression
----
0.07
0.10

statement ok
CREATE TABLE casts (
    a int,
    b decimal(15, 2),
    c float,
    d float
)

query RRR
SELECT
    CAST (0.1 AS int),
    CAST (0.1 AS decimal(15, 2)),
    CAST (0.1 AS float)
----
0  0.10  0.1

# Ensure precision doesn't overflow with chained multiplications (#646).
query R
SELECT 1.0 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1
----
1

query R
SELECT 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1.0
----
1

### edge cases ###
query error invalid input syntax for type numeric: malformed numeric literal: : ""
SELECT ''::decimal

query R
SELECT '  3  '::decimal
----
3

query R
SELECT '99999999999999999999999999999999999999'::decimal
----
99999999999999999999999999999999999999

query R
SELECT '-99999999999999999999999999999999999999'::decimal
----
-99999999999999999999999999999999999999

query error numeric literal exceeds maximum precision
SELECT '100000000000000000000000000000000000000'::decimal

query error numeric literal exceeds maximum precision
SELECT '-100000000000000000000000000000000000000'::decimal

### e-notation ###
query RRR
SELECT 0.03142529e2, 0.03142529e+2, 0.03142529E2
----
3.142529 3.142529 3.142529

query RRR
SELECT '0.03142529e2'::decimal(38, 6), '0.03142529e+2'::decimal(38, 6), '0.03142529E2'::decimal(38, 6)
----
3.142529 3.142529 3.142529

query R
SELECT 314.2529E-2;
----
3.142529

query R
SELECT '314.2529E-2'::decimal(38, 6);
----
3.142529

query R
SELECT -314.2529E-2;
----
-3.142529

query R
SELECT '-314.2529E-2'::decimal(38, 6);
----
-3.142529

# See #4925
#query R
#SELECT 3.14E37;
#----
#31400000000000000000000000000000000000

query R
SELECT 3.14E-36;
----
0.00000000000000000000000000000000000314

# Column rename instead of double exponentiation
query R
SELECT 0.03142529E2E2;
----
3.142529

# Only allow one negative sign in exponent
query R
SELECT 314.2529E-2-2;
----
1.142529

# Overflow
statement error numeric literal overflows i128
select 3.14E40;

statement error numeric literal exceeds maximum precision
select 3.14E-40;

### float64 to decimal ###

query R
SELECT CAST (3.141529::float AS decimal(38, 6))
----
3.141529

# Truncation
query R
SELECT CAST (3.141529::float AS decimal(38, 5))
----
3.14152

# Floating point imprecision
# Note that this result differs from PostgreSQL
query R
SELECT CAST (3.141529::float AS decimal(38, 7))
----
3.1415289

# Expansion with 0s
query R
SELECT CAST (3.141529::float AS decimal(38, 8))
----
3.14152900

# Numeric overflow
query error numeric field overflow
SELECT CAST (100::float AS decimal(38, 37))

# Null input
query R
SELECT CAST (null::float AS decimal(38, 7))
----
NULL

### No leading integer ###

query R
SELECT .123
----
0.123

statement error
SELECT ..123

statement error
SELECT .1.23

# Regression test for https://github.com/MaterializeInc/materialize/issues/2293.
#
# Verifies that errors propagate through decimal arithmetic properly.

statement ok
CREATE VIEW github_2293 AS SELECT 1 AS a

query error division by zero
SELECT 1::decimal(38,0) / 0 / a + 1 FROM github_2293;

query T
SELECT 1::decimal(38, 3) > 2::decimal(20,1)
----
false

query T
SELECT 10.5::decimal(38, 3) = 10.50::decimal(20,1)
----
true

# Invalid type mods

query error numeric scale 2 exceeds precision 1
SELECT '0.2'::decimal(1, 2);

query error precision for type numeric must be within \[1-38\], have 50
SELECT '0.2'::decimal(50);

query error precision for type numeric must be within \[1-38\], have 0
SELECT '0.2'::decimal(0);

query error precision for type numeric must be within \[1-38\], have 50
SELECT '0.2'::decimal(50, 0);

query error precision for type numeric must be within \[1-38\], have 0
SELECT '0.2'::decimal(0, 0);

query error scale for type numeric must be within \[0-38\], have 50
SELECT '0.2'::decimal(1, 50);

query error invalid numeric type modifier
SELECT '0.2'::decimal(1,1,1)
