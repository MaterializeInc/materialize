# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE VIEW v AS SELECT * FROM mz_schemas;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE VIEW v AS SELECT id FROM mz_columns NATURAL JOIN mz_indexes;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE VIEW v AS SELECT (mz_tables).* FROM mz_tables;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE VIEW v AS SELECT mz_connections.* FROM mz_connections;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE VIEW v AS SELECT * FROM (SELECT id, oid FROM mz_sources);

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE MATERIALIZED VIEW mv AS SELECT * FROM mz_schemas;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE MATERIALIZED VIEW mv AS SELECT id FROM mz_columns NATURAL JOIN mz_indexes;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE MATERIALIZED VIEW mv AS SELECT (mz_tables).* FROM mz_tables;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE MATERIALIZED VIEW mv AS SELECT mz_connections.* FROM mz_connections;

statement error cannot use wildcard expansions or NATURAL JOINs in a view that depends on system objects
CREATE MATERIALIZED VIEW mv AS SELECT * FROM (SELECT id, oid FROM mz_sources);

statement ok
CREATE VIEW v1 AS SELECT oid FROM mz_objects;

statement ok
CREATE VIEW v2 AS SELECT * FROM v1;

# Queries are fine

query IIIT
SELECT * FROM mz_schemas LIMIT 0;
----

query TTIBTTIITTT
SELECT id FROM mz_columns NATURAL JOIN mz_indexes LIMIT 0;
----

query TIIT
SELECT (mz_tables).* FROM mz_tables LIMIT 0;
----

query TIITT
SELECT mz_connections.* FROM mz_connections LIMIT 0;
----

query TI
SELECT * FROM (SELECT id, oid FROM mz_sources) LIMIT 0;
----

mode standard

statement ok
CREATE TABLE t (a INT, b INT);

statement ok
CREATE VIEW v as SELECT a, (a + 5), avg(b) FROM t WHERE a > 5 GROUP BY a HAVING t.a > 10 ORDER BY a;

query TT
SHOW CREATE VIEW v
----
materialize.public.v
CREATE VIEW "materialize"."public"."v" AS SELECT "materialize"."public"."t"."a", "materialize"."public"."t"."a" + 5, "mz_internal"."mz_avg_promotion"("pg_catalog"."sum"("materialize"."public"."t"."b")) / CASE WHEN "pg_catalog"."count"("materialize"."public"."t"."b") = 0 THEN NULL ELSE "pg_catalog"."count"("materialize"."public"."t"."b") END AS "avg" FROM "materialize"."public"."t" WHERE "materialize"."public"."t"."a" > 5 GROUP BY "materialize"."public"."t"."a" HAVING "materialize"."public"."t"."a" > 10 ORDER BY "materialize"."public"."t"."a"

statement ok
CREATE MATERIALIZED VIEW mv as SELECT a, (a + 5), avg(b) FROM t WHERE a > 5 GROUP BY a HAVING t.a > 10 ORDER BY a;

query TT
SHOW CREATE MATERIALIZED VIEW mv
----
materialize.public.mv
CREATE MATERIALIZED VIEW "materialize"."public"."mv" IN CLUSTER "default" AS SELECT "materialize"."public"."t"."a", "materialize"."public"."t"."a" + 5, "mz_internal"."mz_avg_promotion"("pg_catalog"."sum"("materialize"."public"."t"."b")) / CASE WHEN "pg_catalog"."count"("materialize"."public"."t"."b") = 0 THEN NULL ELSE "pg_catalog"."count"("materialize"."public"."t"."b") END AS "avg" FROM "materialize"."public"."t" WHERE "materialize"."public"."t"."a" > 5 GROUP BY "materialize"."public"."t"."a" HAVING "materialize"."public"."t"."a" > 10 ORDER BY "materialize"."public"."t"."a"

statement ok
DROP VIEW v;

statement ok
DROP MATERIALIZED VIEW mv

# Nested identifiers

statement ok
CREATE TABLE t1 (c INT);

statement ok
CREATE TABLE t2 (c INT);

statement ok
CREATE VIEW v AS SELECT c || 'a' AS f1 , (SELECT c || 'a' AS f2 FROM t2 GROUP BY c || 'a') FROM t1 GROUP BY c || 'a';

query TT
SHOW CREATE VIEW v
----
materialize.public.v
CREATE VIEW "materialize"."public"."v" AS SELECT "materialize"."public"."t1"."c" || 'a' AS "f1", (SELECT "materialize"."public"."t2"."c" || 'a' AS "f2" FROM "materialize"."public"."t2" GROUP BY "materialize"."public"."t2"."c" || 'a') FROM "materialize"."public"."t1" GROUP BY "materialize"."public"."t1"."c" || 'a'

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT c || 'a' AS f1 , (SELECT c || 'a' AS f2 FROM t2 GROUP BY c || 'a') FROM t1 GROUP BY c || 'a';

query TT
SHOW CREATE MATERIALIZED VIEW mv
----
materialize.public.mv
CREATE MATERIALIZED VIEW "materialize"."public"."mv" IN CLUSTER "default" AS SELECT "materialize"."public"."t1"."c" || 'a' AS "f1", (SELECT "materialize"."public"."t2"."c" || 'a' AS "f2" FROM "materialize"."public"."t2" GROUP BY "materialize"."public"."t2"."c" || 'a') FROM "materialize"."public"."t1" GROUP BY "materialize"."public"."t1"."c" || 'a'

statement ok
DROP VIEW v

statement ok
DROP MATERIALIZED VIEW mv
