# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_with_mutually_recursive = true
----
COMPLETE 0

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE TABLE u (
  c int,
  d int
)

statement ok
CREATE TABLE v (
  e int,
  f int
)

statement ok
CREATE INDEX t_a_idx ON T(a);

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW iv AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON iv

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test constant error.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT 1 / 0
----
Explained Query (fast path):
  Error "division by zero"

EOF

# Test constant with two elements.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
(SELECT 1, 2) UNION ALL (SELECT 1, 2) UNION ALL (SELECT 3, 4)
----
Explained Query (fast path):
  Constant
    - ((1, 2) x 2)
    - (3, 4)

EOF

# Test basic linear chains (fast path).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT 1, a + b as c FROM t WHERE a > 0 and b < 0 and a + b > 0
----
Explained Query (fast path):
  Project (#3, #2)
    Filter (#0 > 0) AND (#1 < 0) AND (#2 > 0)
      Map ((#0 + #1), 1)
        ReadExistingIndex materialize.public.t_a_idx

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test basic linear chains (slow path).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT 1, a + b as c FROM mv WHERE a > 0 and b < 0 and a + b > 0
----
Explained Query:
  Project (#3, #2)
    Filter (#1 < 0) AND (#0 > 0) AND (#2 > 0)
      Map ((#0 + #1), 1)
        Get materialize.public.mv

Source materialize.public.mv
  filter=((#0 > 0) AND (#1 < 0) AND ((#0 + #1) > 0))

EOF

# Test table functions in the select clause (FlatMap).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT generate_series(a, b) from t
----
Explained Query:
  Project (#2)
    FlatMap generate_series(#0, #1, 1)
      Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Explained Query:
  Threshold
    Union
      Distinct group_by=[#0]
        Project (#0)
          Get materialize.public.t
      Negate
        Distinct group_by=[#0]
          Project (#1)
            Get materialize.public.mv

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
Explained Query:
  Threshold
    Union
      Project (#0)
        Get materialize.public.t
      Negate
        Project (#1)
          Get materialize.public.mv

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test TopK.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
VIEW ov
----
materialize.public.ov:
  TopK order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5
    Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test Finish.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
Explained Query (fast path):
  Finish order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5 output=[#0, #1]
    ReadExistingIndex materialize.public.t_a_idx

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test Reduce (global).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t
----
Explained Query:
  Return
    Project (#2)
      Map (abs((#0 - #1)))
        Union
          Get l0
          Map (null, null)
            Union
              Negate
                Project ()
                  Get l0
              Constant
                - ()
  With
    cte l0 =
      Reduce aggregates=[min(#0), max(#0)]
        Project (#0)
          Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test Reduce (local).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
Explained Query:
  Project (#3)
    Map (abs((#1 - #2)))
      Reduce group_by=[#1] aggregates=[min(#0), max(#0)]
        Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
Explained Query:
  Return
    Project (#0, #1)
      Join on=(#1 = #2) type=differential
        ArrangeBy keys=[[#1]]
          Get l0
        ArrangeBy keys=[[#0]]
          Distinct group_by=[#0]
            Project (#0)
              Filter (#0 > #1)
                CrossJoin type=differential
                  ArrangeBy keys=[[]]
                    Distinct group_by=[#0]
                      Project (#1)
                        Get l0
                  ArrangeBy keys=[[]]
                    Project (#1)
                      Get materialize.public.mv
  With
    cte l0 =
      Project (#0, #1)
        Join on=(#0 = #2) type=differential
          ArrangeBy keys=[[#0]]
            Get materialize.public.t
          ArrangeBy keys=[[#0]]
            Distinct group_by=[#0]
              Project (#0)
                Filter (#0 < #1)
                  CrossJoin type=differential
                    ArrangeBy keys=[[]]
                      Distinct group_by=[#0]
                        Project (#0)
                          Get materialize.public.t
                    ArrangeBy keys=[[]]
                      Project (#0)
                        Get materialize.public.mv

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT (SELECT iv.a FROM iv WHERE iv.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
Explained Query:
  Return
    Project (#2, #4)
      Join on=(eq(#0, #1, #3)) type=delta
        ArrangeBy keys=[[#0]]
          Get l0
        ArrangeBy keys=[[#0]]
          Union
            Get l3
            Map (null)
              Union
                Negate
                  Project (#0)
                    Get l3
                Get l1
        ArrangeBy keys=[[#0]]
          Union
            Get l4
            Map (null)
              Union
                Negate
                  Project (#0)
                    Get l4
                Get l1
  With
    cte l4 =
      TopK group_by=[#0] limit=1
        Project (#0, #1)
          Filter (#0) IS NOT NULL
            Join on=(#0 = #2) type=differential
              Get l2
              ArrangeBy keys=[[#1]]
                Filter (#1) IS NOT NULL
                  Get materialize.public.mv
    cte l3 =
      TopK group_by=[#0] limit=1
        Project (#0, #1)
          Filter (#0) IS NOT NULL
            Join on=(#0 = #2) type=differential
              Get l2
              ArrangeBy keys=[[#1]]
                Filter (#1) IS NOT NULL
                  Get materialize.public.iv
    cte l2 =
      ArrangeBy keys=[[#0]]
        Get l1
    cte l1 =
      Distinct group_by=[#0]
        Get l0
    cte l0 =
      Project (#1)
        Get materialize.public.t

Source materialize.public.mv
  filter=((#1) IS NOT NULL)

Used Indexes:
  - materialize.public.t_a_idx
  - materialize.public.iv_primary_idx

EOF

# Test outer joins (ON syntax).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
Explained Query:
  Return
    Union
      Map (null, null)
        Union
          Negate
            Project ()
              Join on=(#0 = #1) type=differential
                ArrangeBy keys=[[#0]]
                  Project (#1)
                    Get materialize.public.t
                ArrangeBy keys=[[#0]]
                  Distinct group_by=[#0]
                    Project (#1)
                      Get l2
          Project ()
            Get materialize.public.t
      Project (#0, #2)
        Get l2
  With
    cte l2 =
      Project (#0..=#2)
        Join on=(eq(#1, #3, #4)) type=delta
          Get l1
          Get l1
          ArrangeBy keys=[[#0]]
            Project (#1)
              Get l0
    cte l1 =
      ArrangeBy keys=[[#1]]
        Get l0
    cte l0 =
      Filter (#1) IS NOT NULL
        Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test a single CTE.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT a.v + b.v FROM x as a, x as b
----
Explained Query:
  Return
    Project (#2)
      Map ((#0 + #1))
        CrossJoin type=differential
          Get l0
          Get l0
  With
    cte l0 =
      ArrangeBy keys=[[]]
        Project (#2)
          Map ((#0 * #1))
            Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
Explained Query:
  Return
    Project (#0..=#2, #4)
      Filter (#0 != #4)
        Join on=(#0 = #3) type=differential
          ArrangeBy keys=[[#0]]
            Get l2
          ArrangeBy keys=[[#0]]
            Reduce group_by=[#0] aggregates=[max((#0 * #1))]
              CrossJoin type=differential
                ArrangeBy keys=[[]]
                  Distinct group_by=[#0]
                    Project (#0)
                      Get l2
                Get l1
  With
    cte l2 =
      Project (#0, #1, #3)
        Filter (#0 != #3)
          Join on=(#0 = #2) type=differential
            ArrangeBy keys=[[#0]]
              Get materialize.public.t
            ArrangeBy keys=[[#0]]
              Reduce group_by=[#0] aggregates=[max((#0 * #1))]
                CrossJoin type=differential
                  ArrangeBy keys=[[]]
                    Distinct group_by=[#0]
                      Get l0
                  Get l1
    cte l1 =
      ArrangeBy keys=[[]]
        Get l0
    cte l0 =
      Project (#0)
        Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test cross join.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
Explained Query:
  Return
    CrossJoin type=differential
      Get l0
      Get l0
  With
    cte l0 =
      ArrangeBy keys=[[]]
        Project (#0)
          Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Test cyclic join.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
Explained Query:
  Return
    Project (#0, #2)
      Join on=(eq(#1, #3, #4)) type=delta
        Get l1
        Get l1
        ArrangeBy keys=[[#0]]
          Project (#1)
            Get l0
  With
    cte l1 =
      ArrangeBy keys=[[#1]]
        Get l0
    cte l0 =
      Filter (#1) IS NOT NULL
        Get materialize.public.t

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Create indexes required for differential join tests

statement ok
CREATE INDEX u_c_idx ON U(c);

statement ok
CREATE INDEX u_d_idx ON U(d);

statement ok
CREATE INDEX v_e_idx ON V(e);

# Test a differential join.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a, b, c, d, e, f
FROM t, u, v
WHERE a = c and d = e and b = f
----
Explained Query:
  Project (#0, #1, #0, #3, #3, #1)
    Filter (#0) IS NOT NULL AND (#1) IS NOT NULL AND (#3) IS NOT NULL
      Join on=(#0 = #2 AND #1 = #5 AND #3 = #4) type=differential
        ArrangeBy keys=[[#0]]
          Get materialize.public.t
        ArrangeBy keys=[[#0]]
          Get materialize.public.u
        ArrangeBy keys=[[#0, #1]]
          Filter (#0) IS NOT NULL AND (#1) IS NOT NULL
            Get materialize.public.v

Used Indexes:
  - materialize.public.t_a_idx
  - materialize.public.u_c_idx
  - materialize.public.v_e_idx

EOF

# Test a differential join WITH(join_impls).
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(join_impls) AS TEXT FOR
SELECT a, b, c, d, e, f
FROM t, u, v
WHERE a = c and d = e and b = f
----
Explained Query:
  Project (#0, #1, #0, #3, #3, #1)
    Filter (#0) IS NOT NULL AND (#1) IS NOT NULL AND (#3) IS NOT NULL
      Join on=(#0 = #2 AND #1 = #5 AND #3 = #4) type=differential
        implementation
          %0:t[#0]KA » %1:u[#0]KA » %2:v[#0, #1]KK
        ArrangeBy keys=[[#0]]
          Get materialize.public.t
        ArrangeBy keys=[[#0]]
          Get materialize.public.u
        ArrangeBy keys=[[#0, #1]]
          Filter (#0) IS NOT NULL AND (#1) IS NOT NULL
            Get materialize.public.v

Used Indexes:
  - materialize.public.t_a_idx
  - materialize.public.u_c_idx
  - materialize.public.v_e_idx

EOF

# Create indexes required for delta join tests

statement ok
CREATE INDEX t_b_idx ON T(b);

# Test a delta join without WITH(join_impls).
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a, b, c, d, e, f
FROM t, u, v
WHERE b = c and d = e
----
Explained Query:
  Project (#0, #1, #1, #3, #3, #5)
    Filter (#1) IS NOT NULL AND (#3) IS NOT NULL
      Join on=(#1 = #2 AND #3 = #4) type=delta
        ArrangeBy keys=[[#1]]
          Get materialize.public.t
        ArrangeBy keys=[[#0], [#1]]
          Get materialize.public.u
        ArrangeBy keys=[[#0]]
          Get materialize.public.v

Used Indexes:
  - materialize.public.u_c_idx
  - materialize.public.u_d_idx
  - materialize.public.v_e_idx
  - materialize.public.t_b_idx

EOF

# Test a delta join WITH(join_impls).
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(join_impls) AS TEXT FOR
SELECT a, b, c, d, e, f
FROM t, u, v
WHERE b = c and d = e
----
Explained Query:
  Project (#0, #1, #1, #3, #3, #5)
    Filter (#1) IS NOT NULL AND (#3) IS NOT NULL
      Join on=(#1 = #2 AND #3 = #4) type=delta
        implementation
          %0:t » %1:u[#0]KA » %2:v[#0]KA
          %1:u » %0:t[#1]KA » %2:v[#0]KA
          %2:v » %1:u[#1]KA » %0:t[#1]KA
        ArrangeBy keys=[[#1]]
          Get materialize.public.t
        ArrangeBy keys=[[#0], [#1]]
          Get materialize.public.u
        ArrangeBy keys=[[#0]]
          Get materialize.public.v

Used Indexes:
  - materialize.public.u_c_idx
  - materialize.public.u_d_idx
  - materialize.public.v_e_idx
  - materialize.public.t_b_idx

EOF

# Test an IndexedFilter join.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a, max(b)
FROM t
WHERE a = 0
GROUP BY a
----
Explained Query:
  Project (#1, #0)
    Map (0)
      Reduce aggregates=[max(#0)]
        Project (#1)
          ReadExistingIndex materialize.public.t lookup_value=(0)

Used Indexes:
  - materialize.public.t_a_idx

EOF

# Create index for IndexedFilter test

statement ok
CREATE INDEX t_a_b_idx ON T(a,b)

# Test an IndexedFilter join WITH(join_impls).
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(join_impls) AS TEXT FOR
SELECT a, max(b)
FROM t
WHERE (a = 0 AND b = 1) OR (a = 3 AND b = 4) OR (a = 7 AND b = 8)
GROUP BY a
----
Explained Query:
  Reduce group_by=[#0] aggregates=[max(#1)]
    Project (#0, #1)
      ReadExistingIndex materialize.public.t lookup_values=[(0, 1); (3, 4); (7, 8)]

Used Indexes:
  - materialize.public.t_a_b_idx

EOF

# Test an IndexedFilter join on fast path WITH(join_impls).
query T multiline
EXPLAIN OPTIMIZED PLAN WITH(join_impls) AS TEXT FOR
SELECT *
FROM t
WHERE (a = 0 AND b = 1) OR (a = 3 AND b = 4) OR (a = 7 AND b = 8)
----
Explained Query (fast path):
  Project (#0, #1)
    ReadExistingIndex materialize.public.t_a_b_idx lookup_values=[(0, 1); (3, 4); (7, 8)]

Used Indexes:
  - materialize.public.t_a_b_idx

EOF

# Test #17348.

statement ok
CREATE TABLE r(f0 INT, f1 INT, f2 INT, f3 INT, f4 INT, f5 INT, f6 INT, f7 INT, f8 INT, f9 INT, f10 INT, f11 INT, f12 INT, f13 INT, f14 INT, f15 INT, f16 INT);

query T multiline
EXPLAIN SELECT *
FROM r AS r0, r AS r1
WHERE
  r0.f0=r1.f0 AND
  r0.f2=r1.f2 AND
  r0.f3=r1.f3 AND
  r0.f4=r1.f4 AND
  r0.f6=r1.f6 AND
  r0.f8=r1.f8 AND
  r0.f9=r1.f9 AND
  r0.f11=r1.f11 AND
  r0.f12=r1.f12 AND
  r0.f13=r1.f13 AND
  r0.f15=r1.f15 AND
  r0.f16=r1.f16;
----
Explained Query:
  Return
    Project (#0..=#16, #0, #18, #2..=#4, #22, #6, #24, #8, #9, #27, #11..=#13, #31, #15, #16)
      Join on=(#0 = #17 AND #2 = #19 AND #3 = #20 AND #4 = #21 AND #6 = #23 AND #8 = #25 AND #9 = #26 AND #11 = #28 AND #12 = #29 AND #13 = #30 AND #15 = #32 AND #16 = #33) type=differential
        Get l0
        Get l0
  With
    cte l0 =
      ArrangeBy keys=[[#0, #2..=#4, #6, #8, #9, #11..=#13, #15, #16]]
        Filter (#0) IS NOT NULL AND (#2) IS NOT NULL AND (#3) IS NOT NULL AND (#4) IS NOT NULL AND (#6) IS NOT NULL AND (#8) IS NOT NULL AND (#9) IS NOT NULL AND (#11) IS NOT NULL AND (#12) IS NOT NULL AND (#13) IS NOT NULL AND (#15) IS NOT NULL AND (#16) IS NOT NULL
          Get materialize.public.r

Source materialize.public.r
  filter=((#0) IS NOT NULL AND (#2) IS NOT NULL AND (#3) IS NOT NULL AND (#4) IS NOT NULL AND (#6) IS NOT NULL AND (#8) IS NOT NULL AND (#9) IS NOT NULL AND (#11) IS NOT NULL AND (#12) IS NOT NULL AND (#13) IS NOT NULL AND (#15) IS NOT NULL AND (#16) IS NOT NULL)

EOF

## linear_chains is currently disabled for WMR.
statement error not supported
EXPLAIN WITH(linear_chains)
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT * FROM bar;

# Regression test for #19148: support mz_now() on select from indexed table
# ---

statement ok
DROP SCHEMA IF EXISTS public CASCADE;

statement ok
CREATE SCHEMA public;

statement ok
CREATE TABLE t(a TIMESTAMP);

statement ok
CREATE DEFAULT INDEX ON t;

# EXPLAIN output is time-dependent, so we don't want show the output here, just
# assert that the query doesn't fail.
statement ok
EXPLAIN SELECT * FROM t WHERE a < mz_now();

# Regression test for #19177
# ---

statement ok
DROP SCHEMA IF EXISTS public CASCADE;

statement ok
CREATE SCHEMA public;

statement ok
CREATE TABLE t1(x text);

statement ok
CREATE TABLE t2(x text);

statement ok
EXPLAIN SELECT * FROM t1, t2 WHERE t1.x || mz_internal.mz_session_id()  = t2.x || mz_internal.mz_session_id();

# Regression test for the join visitation part of #19177
statement ok
EXPLAIN SELECT * FROM t1, t2 WHERE t1.x || mz_now()  = t2.x || mz_now();
