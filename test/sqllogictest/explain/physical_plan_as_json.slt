# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE MATERIALIZED VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE RECORDED VIEW rv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

query T multiline
EXPLAIN PHYSICAL PLAN AS JSON FOR
SELECT
  *
FROM
  T as X
WHERE
  NOT EXISTS (SELECT * FROM T as Y WHERE X.a = Y.b)
LIMIT 10
----
Source materialize.public.t (u1):
{
  "predicates": [],
  "projection": [
    0,
    1
  ]
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 1
              }
            },
            "keys": {
              "raw": true,
              "arranged": []
            },
            "plan": {
              "Collection": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 2
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 1
            }
          }
        },
        "plan": "Distinct",
        "input_key": null
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "Union": {
              "inputs": [
                {
                  "Negate": {
                    "input": {
                      "Join": {
                        "inputs": [
                          {
                            "ArrangeBy": {
                              "input": {
                                "Get": {
                                  "id": {
                                    "Local": 0
                                  },
                                  "keys": {
                                    "raw": false,
                                    "arranged": [
                                      [
                                        [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        {
                                          "0": 0
                                        },
                                        []
                                      ]
                                    ]
                                  },
                                  "plan": "PassArrangements"
                                }
                              },
                              "forms": {
                                "raw": false,
                                "arranged": [
                                  [
                                    [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    {
                                      "0": 0
                                    },
                                    []
                                  ]
                                ]
                              },
                              "input_key": [
                                {
                                  "Column": 0
                                }
                              ],
                              "input_mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0
                                ],
                                "input_arity": 1
                              }
                            }
                          },
                          {
                            "ArrangeBy": {
                              "input": {
                                "Reduce": {
                                  "input": {
                                    "Get": {
                                      "id": {
                                        "Global": {
                                          "User": 1
                                        }
                                      },
                                      "keys": {
                                        "raw": true,
                                        "arranged": []
                                      },
                                      "plan": {
                                        "Collection": {
                                          "expressions": [],
                                          "predicates": [
                                            [
                                              2,
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "Not": null
                                                  },
                                                  "expr": {
                                                    "CallUnary": {
                                                      "func": {
                                                        "IsNull": null
                                                      },
                                                      "expr": {
                                                        "Column": 1
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          ],
                                          "projection": [
                                            1
                                          ],
                                          "input_arity": 2
                                        }
                                      }
                                    }
                                  },
                                  "key_val_plan": {
                                    "key_plan": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          0
                                        ],
                                        "input_arity": 1
                                      }
                                    },
                                    "val_plan": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [],
                                        "input_arity": 1
                                      }
                                    }
                                  },
                                  "plan": "Distinct",
                                  "input_key": null
                                }
                              },
                              "forms": {
                                "raw": false,
                                "arranged": [
                                  [
                                    [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    {
                                      "0": 0
                                    },
                                    []
                                  ]
                                ]
                              },
                              "input_key": [
                                {
                                  "Column": 0
                                }
                              ],
                              "input_mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0
                                ],
                                "input_arity": 1
                              }
                            }
                          }
                        ],
                        "plan": {
                          "Delta": {
                            "path_plans": [
                              {
                                "source_relation": 0,
                                "source_key": [
                                  {
                                    "Column": 0
                                  }
                                ],
                                "initial_closure": {
                                  "ready_equivalences": [],
                                  "before": {
                                    "mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                "stage_plans": [
                                  {
                                    "lookup_relation": 1,
                                    "stream_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "stream_thinning": [],
                                    "lookup_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "closure": {
                                      "ready_equivalences": [],
                                      "before": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0
                                          ],
                                          "input_arity": 1
                                        }
                                      }
                                    }
                                  }
                                ],
                                "final_closure": null
                              },
                              {
                                "source_relation": 1,
                                "source_key": [
                                  {
                                    "Column": 0
                                  }
                                ],
                                "initial_closure": {
                                  "ready_equivalences": [],
                                  "before": {
                                    "mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                "stage_plans": [
                                  {
                                    "lookup_relation": 0,
                                    "stream_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "stream_thinning": [],
                                    "lookup_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "closure": {
                                      "ready_equivalences": [],
                                      "before": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0
                                          ],
                                          "input_arity": 1
                                        }
                                      }
                                    }
                                  }
                                ],
                                "final_closure": null
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "ArrangeBy": {
                    "input": {
                      "Get": {
                        "id": {
                          "Local": 0
                        },
                        "keys": {
                          "raw": false,
                          "arranged": [
                            [
                              [
                                {
                                  "Column": 0
                                }
                              ],
                              {
                                "0": 0
                              },
                              []
                            ]
                          ]
                        },
                        "plan": "PassArrangements"
                      }
                    },
                    "forms": {
                      "raw": true,
                      "arranged": []
                    },
                    "input_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "input_mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                }
              ]
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 1,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=() limit=10 offset=0 project=(#0, #1)

EOF

query T multiline
EXPLAIN PHYSICAL PLAN WITH (TYPES) AS JSON FOR
VIEW v
----
Source materialize.public.t (u1):
{
  "predicates": [
    {
      "CallUnary": {
        "func": {
          "Not": null
        },
        "expr": {
          "CallUnary": {
            "func": {
              "IsNull": null
            },
            "expr": {
              "Column": 0
            }
          }
        }
      }
    }
  ],
  "projection": [
    0,
    1
  ]
}

Query:
{
  "Get": {
    "id": {
      "Global": {
        "User": 1
      }
    },
    "keys": {
      "raw": true,
      "arranged": []
    },
    "plan": {
      "Collection": {
        "expressions": [],
        "predicates": [
          [
            1,
            {
              "CallUnary": {
                "func": {
                  "Not": null
                },
                "expr": {
                  "CallUnary": {
                    "func": {
                      "IsNull": null
                    },
                    "expr": {
                      "Column": 0
                    }
                  }
                }
              }
            }
          ]
        ],
        "projection": [
          0,
          1
        ],
        "input_arity": 2
      }
    }
  }
}

EOF

query T multiline
EXPLAIN PHYSICAL PLAN WITH (TYPES) AS JSON FOR
RECORDED VIEW rv
----
Source materialize.public.t (u1):
{
  "predicates": [
    {
      "CallUnary": {
        "func": {
          "Not": null
        },
        "expr": {
          "CallUnary": {
            "func": {
              "IsNull": null
            },
            "expr": {
              "Column": 0
            }
          }
        }
      }
    }
  ],
  "projection": [
    0,
    1
  ]
}

Query:
{
  "Get": {
    "id": {
      "Global": {
        "User": 1
      }
    },
    "keys": {
      "raw": true,
      "arranged": []
    },
    "plan": {
      "Collection": {
        "expressions": [],
        "predicates": [
          [
            1,
            {
              "CallUnary": {
                "func": {
                  "Not": null
                },
                "expr": {
                  "CallUnary": {
                    "func": {
                      "IsNull": null
                    },
                    "expr": {
                      "Column": 0
                    }
                  }
                }
              }
            }
          ]
        ],
        "projection": [
          0,
          1
        ],
        "input_arity": 2
      }
    }
  }
}

EOF
