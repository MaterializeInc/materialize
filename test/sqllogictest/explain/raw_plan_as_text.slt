# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON v

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test basic linear chains.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a + 1, b, 4 FROM mv WHERE a > 0
----
Project (#2, #1, #3)
  Map ((#0 + 1), 4)
    Filter (#0 > 0)
      Get materialize.public.mv

EOF

# Test table functions (CallTable).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM generate_series(1, 7)
----
CallTable generate_series(1, 7, 1)

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN RAW PLAN WITH (raw_syntax) AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Threshold
  Union
    Distinct
      Project (#0)
        Get materialize.public.t
    Negate
      Distinct
        Project (#1)
          Get materialize.public.mv

EOF

# Test virtual syntax (EXCEPT).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Except
  Project (#0)
    Get materialize.public.t
  Project (#1)
    Get materialize.public.mv

EOF

# Test virtual syntax (EXCEPT ALL).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
ExceptAll
  Project (#0)
    Get materialize.public.t
  Project (#1)
    Get materialize.public.mv

EOF

# Test TopK.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
VIEW ov
----
Project (#0, #1)
  TopK order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5
    Get materialize.public.t

EOF

# Test Finish.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
Finish order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5 output=[#0, #1]
  Get materialize.public.t

EOF

# Test Reduce (global).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t
----
Project (#2)
  Map (abs((#0 - #1)))
    Reduce aggregates=[min(#0), max(#0)]
      Get materialize.public.t

EOF

# Test Reduce (local).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
Project (#3)
  Map (abs((#1 - #2)))
    Reduce group_by=[#2] aggregates=[min(#0), max(#0)]
      Map (#1)
        Get materialize.public.t

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
Return
  Filter (exists(Get l1) AND exists(Get l2))
    Get materialize.public.t
With
  cte l1 =
    Filter (#^0 < #0)
      Get materialize.public.mv
  cte l2 =
    Filter (#^1 > #1)
      Get materialize.public.mv

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT (SELECT v.a FROM v WHERE v.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
Project (#2, #3)
  Return
    Map (select(Get l1), select(Get l2))
      Get materialize.public.t
  With
    cte l1 =
      Project (#0)
        TopK limit=1
          Filter (#1 = #^1)
            Get materialize.public.v
    cte l2 =
      Project (#0)
        TopK limit=1
          Filter (#1 = #^1)
            Get materialize.public.mv

EOF

# Test CrossJoin derived from a comma join without a predicate.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
Project (#0, #2)
  CrossJoin
    Get materialize.public.t
    Get materialize.public.t

EOF

# Test CrossJoin derived from an INNER JOIN with a trivial ON clause.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1 INNER JOIN t as t2 ON true
----
Project (#0, #2)
  CrossJoin
    Get materialize.public.t
    Get materialize.public.t

EOF

# Test InnerJoin (comma syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
Project (#0, #2)
  Filter ((#1 = #3) AND (#3 = #5))
    CrossJoin
      CrossJoin
        Get materialize.public.t
        Get materialize.public.t
      Get materialize.public.t

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
INNER JOIN t as t2 ON t1.b = t2.b
INNER JOIN t as t3 ON t2.b = t3.b
----
Project (#0, #2)
  InnerJoin (#3 = #5)
    InnerJoin (#1 = #3)
      Get materialize.public.t
      Get materialize.public.t
    Get materialize.public.t

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
Project (#0, #2)
  RightOuterJoin (#3 = #5)
    LeftOuterJoin (#1 = #3)
      Get materialize.public.t
      Get materialize.public.t
    Get materialize.public.t

EOF

# Test a single CTE.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT x.v + 5 FROM x
----
Project (#1)
  Return
    Map ((#0 + 5))
      Get l0
  With
    cte l0 =
      Project (#2)
        Map ((#0 * #1))
          Get materialize.public.t

EOF

# Test multiple CTEs: directly nested 'Let' variants are rendered in a flattened way.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
WITH A AS (SELECT 1 AS a), B as (SELECT a as b FROM A WHERE a > 0) SELECT * FROM A, B;
----
Return
  CrossJoin
    Get l0
    Get l1
With
  cte l1 =
    Filter (#0 > 0)
      Get l0
  cte l0 =
    Map (1)
      Constant
        - ()

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
CrossJoin
  CrossJoin
    Get materialize.public.t
    Return
      Filter (#0 != #^0)
        Get l0
    With
      cte l0 =
        Reduce aggregates=[max((#^0 * #0))]
          Get materialize.public.t
  Return
    Filter ((#0 != #^0) OR ((#0) IS NOT NULL AND (#^0) IS NULL))
      Get l0
  With
    cte l0 =
      Reduce aggregates=[max((#^0 * #0))]
        Get materialize.public.t

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up
# through the join because the local l0 is correlated against the lhs of
# the enclosing join.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT *
    FROM
      r4
      CROSS JOIN LATERAL (
        WITH r2 as (
          SELECT MAX(r1.a * t.a) AS m FROM t
        )
        SELECT * FROM r2 WHERE r1.a = r4.m AND r2.m > 5
      ) as r3
    WHERE a != r1.a
  ) as r5;
----
CrossJoin
  Get materialize.public.t
  Return
    Filter (#^0 != #^0)
      CrossJoin
        Get l0
        Return
          Filter ((#^^0 = #^0) AND (#0 > 5))
            Get l1
        With
          cte l1 =
            Reduce aggregates=[max((#^^0 * #0))]
              Get materialize.public.t
  With
    cte l0 =
      Reduce aggregates=[max((#^0 * #0))]
        Get materialize.public.t

EOF

query T multiline
EXPLAIN RAW PLAN AS TEXT FOR SELECT COUNT(*);
----
Reduce aggregates=[count(*)]
  Constant
    - ()

EOF

# Test #17348.

statement ok
CREATE TABLE r(f0 INT, f1 INT, f2 INT, f3 INT, f4 INT, f5 INT, f6 INT, f7 INT, f8 INT, f9 INT, f10 INT, f11 INT, f12 INT, f13 INT, f14 INT, f15 INT, f16 INT);

query T multiline
EXPLAIN SELECT *
FROM r AS r0, r AS r1
WHERE
  r0.f0=r1.f0 AND
  r0.f2=r1.f2 AND
  r0.f3=r1.f3 AND
  r0.f4=r1.f4 AND
  r0.f6=r1.f6 AND
  r0.f8=r1.f8 AND
  r0.f9=r1.f9 AND
  r0.f11=r1.f11 AND
  r0.f12=r1.f12 AND
  r0.f13=r1.f13 AND
  r0.f15=r1.f15 AND
  r0.f16=r1.f16;
----
Explained Query:
  Return
    Project (#0..=#16, #0, #18, #2..=#4, #22, #6, #24, #8, #9, #27, #11..=#13, #31, #15, #16)
      Join on=(#0 = #17 AND #2 = #19 AND #3 = #20 AND #4 = #21 AND #6 = #23 AND #8 = #25 AND #9 = #26 AND #11 = #28 AND #12 = #29 AND #13 = #30 AND #15 = #32 AND #16 = #33) type=differential
        Get l0
        Get l0
  With
    cte l0 =
      ArrangeBy keys=[[#0, #2..=#4, #6, #8, #9, #11..=#13, #15, #16]]
        Filter (#0) IS NOT NULL AND (#2) IS NOT NULL AND (#3) IS NOT NULL AND (#4) IS NOT NULL AND (#6) IS NOT NULL AND (#8) IS NOT NULL AND (#9) IS NOT NULL AND (#11) IS NOT NULL AND (#12) IS NOT NULL AND (#13) IS NOT NULL AND (#15) IS NOT NULL AND (#16) IS NOT NULL
          Get materialize.public.r

Source materialize.public.r
  filter=((#0) IS NOT NULL AND (#2) IS NOT NULL AND (#3) IS NOT NULL AND (#4) IS NOT NULL AND (#6) IS NOT NULL AND (#8) IS NOT NULL AND (#9) IS NOT NULL AND (#11) IS NOT NULL AND (#12) IS NOT NULL AND (#13) IS NOT NULL AND (#15) IS NOT NULL AND (#16) IS NOT NULL)

EOF
