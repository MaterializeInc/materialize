# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t (
  a int,
  b int
)

statement ok
CREATE VIEW ov AS SELECT * FROM t ORDER BY b asc, a desc LIMIT 5

statement ok
CREATE VIEW v AS
SELECT * FROM t WHERE a IS NOT NULL

statement ok
CREATE DEFAULT INDEX ON v

statement ok
CREATE MATERIALIZED VIEW mv AS
SELECT * FROM t WHERE a IS NOT NULL

mode cockroach

# Test basic linear chains.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a + 1, b, 4 FROM mv WHERE a > 0
----
Project (#2, #1, #3)
  Map ((#0 + 1), 4)
    Filter (#0 > 0)
      Get materialize.public.mv

EOF

# Test table functions (CallTable).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM generate_series(1, 7)
----
CallTable generate_series(1, 7, 1)

EOF

# Test Threshold, Union, Distinct, Negate.
query T multiline
EXPLAIN RAW PLAN WITH (raw_syntax) AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Threshold
  Union
    Distinct
      Project (#1)
        Map (#0)
          Project (#0)
            Get materialize.public.t
    Negate
      Distinct
        Project (#1)
          Map (#0)
            Project (#1)
              Get materialize.public.mv

EOF

# Test virtual syntax (EXCEPT).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a FROM t EXCEPT SELECT b FROM mv
----
Except
  Project (#1)
    Map (#0)
      Project (#0)
        Get materialize.public.t
  Project (#1)
    Map (#0)
      Project (#1)
        Get materialize.public.mv

EOF

# Test virtual syntax (EXCEPT ALL).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT a FROM t EXCEPT ALL SELECT b FROM mv
----
ExceptAll
  Project (#1)
    Map (#0)
      Project (#0)
        Get materialize.public.t
  Project (#1)
    Map (#0)
      Project (#1)
        Get materialize.public.mv

EOF

# Test TopK.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
VIEW ov
----
Project (#0, #1)
  TopK order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5
    Get materialize.public.t

EOF

# Test Finish.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM t ORDER BY b asc, a desc LIMIT 5
----
Finish order_by=[#1 asc nulls_last, #0 desc nulls_first] limit=5 output=[#0, #1]
  Get materialize.public.t

EOF

# Test Reduce (global).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t
----
Project (#2)
  Map (abs((#0 - #1)))
    Reduce aggregates=[min(#0), max(#0)]
      Get materialize.public.t

EOF

# Test Reduce (local).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT abs(min(a) - max(a)) FROM t GROUP BY b
----
Project (#3)
  Map (abs((#1 - #2)))
    Reduce group_by=[#2] aggregates=[min(#0), max(#0)]
      Map (#1)
        Get materialize.public.t

EOF

# Test EXISTS subqueries.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT * FROM t WHERE EXISTS(SELECT * FROM mv WHERE t.a < mv.a) AND EXISTS(SELECT * FROM mv WHERE t.b > mv.b)
----
Return
  Filter (exists(Get l1) AND exists(Get l2))
    Get materialize.public.t
Where
  cte l1 =
    Filter (#^0 < #0)
      Get materialize.public.mv
  cte l2 =
    Filter (#^1 > #1)
      Get materialize.public.mv

EOF

# Test SELECT subqueries.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT (SELECT v.a FROM v WHERE v.b = t.b LIMIT 1), (SELECT mv.a FROM mv WHERE mv.b = t.b LIMIT 1) FROM t
----
Project (#2, #3)
  Return
    Map (select(Get l1), select(Get l2))
      Get materialize.public.t
  Where
    cte l1 =
      Project (#0)
        TopK limit=1
          Filter (#1 = #^1)
            Get materialize.public.v
    cte l2 =
      Project (#0)
        TopK limit=1
          Filter (#1 = #^1)
            Get materialize.public.mv

EOF

# Test CrossJoin derived from a comma join without a predicate.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1, t as t2
----
Project (#0, #2)
  CrossJoin
    Get materialize.public.t
    Get materialize.public.t

EOF

# Test CrossJoin derived from an INNER JOIN with a trivial ON clause.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a FROM t as t1 INNER JOIN t as t2 ON true
----
Project (#0, #2)
  CrossJoin
    Get materialize.public.t
    Get materialize.public.t

EOF

# Test InnerJoin (comma syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM
  t as t1,
  t as t2,
  t as t3
WHERE t1.b = t2.b AND t2.b = t3.b
----
Project (#0, #2)
  Filter ((#1 = #3) AND (#3 = #5))
    CrossJoin
      CrossJoin
        Get materialize.public.t
        Get materialize.public.t
      Get materialize.public.t

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
INNER JOIN t as t2 ON t1.b = t2.b
INNER JOIN t as t3 ON t2.b = t3.b
----
Project (#0, #2)
  InnerJoin (#3 = #5)
    InnerJoin (#1 = #3)
      Get materialize.public.t
      Get materialize.public.t
    Get materialize.public.t

EOF

# Test InnerJoin (ON syntax).
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT t1.a, t2.a
FROM t as t1
LEFT JOIN t as t2 ON t1.b = t2.b
RIGHT JOIN t as t3 ON t2.b = t3.b
----
Project (#0, #2)
  RightOuterJoin (#3 = #5)
    LeftOuterJoin (#1 = #3)
      Get materialize.public.t
      Get materialize.public.t
    Get materialize.public.t

EOF

# Test a single CTE.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
WITH x AS (SELECT t.a * t.b as v from t) SELECT x.v + 5 FROM x
----
Project (#1)
  Return
    Map ((#0 + 5))
      Get l0
  Where
    cte l0 =
      Project (#2)
        Map ((#0 * #1))
          Get materialize.public.t

EOF

# Test multiple CTEs: directly nested 'Let' variants are rendered in a flattened way.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
WITH A AS (SELECT 1 AS a), B as (SELECT a as b FROM A WHERE a > 0) SELECT * FROM A, B;
----
Return
  CrossJoin
    Get l0
    Get l1
Where
  cte l1 =
    Filter (#0 > 0)
      Get l0
  cte l0 =
    Map (1)
      Constant
        - ()

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up through
# the join because the local l0 is correlated against the lhs of the enclosing join.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r2 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r2 WHERE r2.m != r1.a
  ) as r3
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT * FROM r4 WHERE r4.m != r1.a OR (r4.m IS NOT NULL AND r1.a IS NULL)
  ) as r5;
----
CrossJoin
  CrossJoin
    Get materialize.public.t
    Return
      Filter (#0 != #^0)
        Get l0
    Where
      cte l0 =
        Reduce aggregates=[max((#^0 * #0))]
          Get materialize.public.t
  Return
    Filter ((#0 != #^0) OR ((#0) IS NOT NULL AND (#^0) IS NULL))
      Get l0
  Where
    cte l0 =
      Reduce aggregates=[max((#^0 * #0))]
        Get materialize.public.t

EOF

# Test multiple CTEs: a case where we cannot pull the let statement up
# through the join because the local l0 is correlated against the lhs of
# the enclosing join.
query T multiline
EXPLAIN RAW PLAN AS TEXT FOR
SELECT
  *
FROM
  (
    SELECT * FROM t
  ) as r1
  CROSS JOIN LATERAL (
    WITH r4 as (
      SELECT MAX(r1.a * t.a) AS m FROM t
    )
    SELECT *
    FROM
      r4
      CROSS JOIN LATERAL (
        WITH r2 as (
          SELECT MAX(r1.a * t.a) AS m FROM t
        )
        SELECT * FROM r2 WHERE r1.a = r4.m AND r2.m > 5
      ) as r3
    WHERE a != r1.a
  ) as r5;
----
CrossJoin
  Get materialize.public.t
  Return
    Filter (#^0 != #^0)
      CrossJoin
        Get l0
        Return
          Filter ((#^^0 = #^0) AND (#0 > 5))
            Get l1
        Where
          cte l1 =
            Reduce aggregates=[max((#^^0 * #0))]
              Get materialize.public.t
  Where
    cte l0 =
      Reduce aggregates=[max((#^0 * #0))]
        Get materialize.public.t

EOF

query T multiline
EXPLAIN RAW PLAN AS TEXT FOR SELECT COUNT(*);
----
Reduce aggregates=[count(*)]
  Constant
    - ()

EOF
