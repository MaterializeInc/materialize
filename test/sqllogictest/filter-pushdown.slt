# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_mfp_pushdown_explain = true
----
COMPLETE 0

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET persist_stats_filter_enabled = true
----
COMPLETE 0

# Verify filter pushdown information for various temporal filters.
# For straightforward temporal filters like these, every column mentioned in the filter
# should be present in the pushdown list.

statement ok
CREATE TABLE events (
    content text,
    insert_ms numeric,
    delete_ms numeric
);

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT count(*)
FROM events
WHERE mz_now() >= insert_ms
  AND mz_now() < delete_ms;
----
Explained Query:
  Return
    Union
      Get l0
      Map (0)
        Union
          Negate
            Project ()
              Get l0
          Constant
            - ()
  With
    cte l0 =
      Reduce aggregates=[count(*)]
        Project ()
          Filter (mz_now() < numeric_to_mz_timestamp(#2)) AND (mz_now() >= numeric_to_mz_timestamp(#1))
            Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() >= numeric_to_mz_timestamp(#1)) AND (mz_now() < numeric_to_mz_timestamp(#2)))
  pushdown=((mz_now() >= numeric_to_mz_timestamp(#1)) AND (mz_now() < numeric_to_mz_timestamp(#2)))

EOF

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms
FROM events
-- The event should appear in only one interval of duration `10000`.
-- The interval begins here ...
WHERE mz_now() >= 10000 * (insert_ms / 10000)
-- ... and ends here.
  AND mz_now() < 10000 * (1 + insert_ms / 10000)
----
Explained Query:
  Project (#0, #1)
    Filter (mz_now() >= numeric_to_mz_timestamp((10000 * #3))) AND (mz_now() < numeric_to_mz_timestamp((10000 * (1 + #3))))
      Map ((#1 / 10000))
        Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() < numeric_to_mz_timestamp((10000 * (1 + #3)))) AND (mz_now() >= numeric_to_mz_timestamp((10000 * #3))))
  map=((#1 / 10000))
  pushdown=((mz_now() < numeric_to_mz_timestamp((10000 * (1 + #3)))) AND (mz_now() >= numeric_to_mz_timestamp((10000 * #3))))

EOF

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms
FROM events
-- The event should appear in `6` intervals each of width `10000`.
-- The interval begins here ...
WHERE mz_now() >= 10000 * (insert_ms / 10000)
-- ... and ends here.
  AND mz_now() < 6 * (10000 + insert_ms / 10000)
----
Explained Query:
  Project (#0, #1)
    Filter (mz_now() >= numeric_to_mz_timestamp((10000 * #3))) AND (mz_now() < numeric_to_mz_timestamp((6 * (10000 + #3))))
      Map ((#1 / 10000))
        Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() < numeric_to_mz_timestamp((6 * (10000 + #3)))) AND (mz_now() >= numeric_to_mz_timestamp((10000 * #3))))
  map=((#1 / 10000))
  pushdown=((mz_now() < numeric_to_mz_timestamp((6 * (10000 + #3)))) AND (mz_now() >= numeric_to_mz_timestamp((10000 * #3))))

EOF

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms
FROM events
-- The event should appear inside the interval that begins at
-- `insert_ms` and ends at  `insert_ms + 30000`.
-- The interval begins here ..
WHERE mz_now() >= insert_ms
-- ... and ends here.
  AND mz_now() < insert_ms + 30000
----
Explained Query:
  Project (#0, #1)
    Filter (mz_now() >= numeric_to_mz_timestamp(#1)) AND (mz_now() < numeric_to_mz_timestamp((#1 + 30000)))
      Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() < numeric_to_mz_timestamp((#1 + 30000))) AND (mz_now() >= numeric_to_mz_timestamp(#1)))
  pushdown=((mz_now() < numeric_to_mz_timestamp((#1 + 30000))) AND (mz_now() >= numeric_to_mz_timestamp(#1)))

EOF

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms, delete_ms
FROM events
WHERE mz_now() >= insert_ms + 60000
  AND mz_now() < delete_ms + 60000;
----
Explained Query:
  Filter (mz_now() < numeric_to_mz_timestamp((#2 + 60000))) AND (mz_now() >= numeric_to_mz_timestamp((#1 + 60000)))
    Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() >= numeric_to_mz_timestamp((#1 + 60000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 60000))))
  pushdown=((mz_now() >= numeric_to_mz_timestamp((#1 + 60000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 60000))))

EOF

# Verify explain behaviour for functions with many arguments. In theory, we can't push down
# non-associative functions with long argument lists... but in practice all the functions we
# can push down are also associative, so this is moot. Let's at least check that an associative
# function _does_ report pushdown even when the argument list is long.

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms, delete_ms
FROM events
WHERE COALESCE(delete_ms, insert_ms) < mz_now();
----
Explained Query:
  Filter (numeric_to_mz_timestamp(coalesce(#2, #1)) < mz_now())
    Get materialize.public.events

Source materialize.public.events
  filter=((numeric_to_mz_timestamp(coalesce(#2, #1)) < mz_now()))
  pushdown=((numeric_to_mz_timestamp(coalesce(#2, #1)) < mz_now()))

EOF

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, insert_ms, delete_ms
FROM events
WHERE mz_now() < delete_ms + 10000
  AND mz_now() < delete_ms + 20000
  AND mz_now() < delete_ms + 30000
  AND mz_now() < delete_ms + 40000
  AND mz_now() < delete_ms + 50000
  AND mz_now() < delete_ms + 60000
  AND mz_now() < delete_ms + 70000
  AND mz_now() < delete_ms + 80000
  AND mz_now() < delete_ms + 90000;
----
Explained Query:
  Filter (mz_now() < numeric_to_mz_timestamp((#2 + 10000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 20000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 30000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 40000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 50000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 60000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 70000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 80000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 90000)))
    Get materialize.public.events

Source materialize.public.events
  filter=((mz_now() < numeric_to_mz_timestamp((#2 + 10000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 20000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 30000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 40000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 50000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 60000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 70000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 80000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 90000))))
  pushdown=((mz_now() < numeric_to_mz_timestamp((#2 + 10000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 20000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 30000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 40000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 50000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 60000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 70000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 80000))) AND (mz_now() < numeric_to_mz_timestamp((#2 + 90000))))

EOF

statement ok
CREATE TABLE events_timestamped (
    content text,
    inserted_at timestamp,
    deleted_at timestamp
);

query T multiline
EXPLAIN WITH(mfp_pushdown)
SELECT content, inserted_at
FROM events_timestamped
WHERE EXTRACT(YEAR FROM inserted_at) = 2021;
----
Explained Query:
  Project (#0, #1)
    Filter (2021 = extract_year_ts(#1))
      Get materialize.public.events_timestamped

Source materialize.public.events_timestamped
  filter=((2021 = extract_year_ts(#1)))
  pushdown=((2021 = extract_year_ts(#1)))

EOF
