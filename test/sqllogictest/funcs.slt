# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

# Test date_trunc()

# TODO: PostgreSQL truncates trailing zeros from seconds, we do not.
# This test should return:  2019-11-26 15:56:46.24115
query T
SELECT date_trunc('microseconds', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 15:56:46.24115

query T
SELECT date_trunc('milliseconds', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 15:56:46.241

query T
SELECT date_trunc('second', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 15:56:46

query T
SELECT date_trunc('minute', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 15:56:00

query T
SELECT date_trunc('hour', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 15:00:00

query T
SELECT date_trunc('day', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-26 00:00:00

query T
SELECT date_trunc('week', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-25 00:00:00

query T
SELECT date_trunc('week', TIMESTAMP '2020-08-02 00:00:00')
----
2020-07-27 00:00:00

query error timestamp out of range
SELECT date_trunc('week', make_timestamp(-262144, 1, 1, 0, 0, 0))

query T
SELECT date_trunc('month', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-11-01 00:00:00

query T
SELECT date_trunc('quarter', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-10-01 00:00:00

query T
SELECT date_trunc('year', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2019-01-01 00:00:00

query T
SELECT date_trunc('decade', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2010-01-01 00:00:00

# Expects the first year of the century, meaning 2001 instead of 2000.
query T
SELECT date_trunc('century', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2001-01-01 00:00:00

# Expects the first year of the millennium, meaning 2001 instead of 2000.
query T
SELECT date_trunc('millennium', TIMESTAMP '2019-11-26 15:56:46.241150')
----
2001-01-01 00:00:00

query error unknown units 'bad'
SELECT date_trunc('bad', TIMESTAMP '2019-11-26 15:56:46.241150')

query T
SELECT date_trunc('minute', TIMESTAMPTZ '1999-12-31 16:16:01+02:30')
----
1999-12-31 13:46:00+00

query T
SELECT date_trunc('day', TIMESTAMPTZ '1999-12-31 16:16:01+02:30')
----
1999-12-31 00:00:00+00

query error unknown units 'bad'
SELECT date_trunc('bad', TIMESTAMPTZ '1999-12-31 16:16:01+02:30')

statement ok
CREATE TABLE date_trunc_fields (
    field text
)

statement ok
INSERT INTO date_trunc_fields VALUES ('day'), ('DaY'), ('month'), ('MoNTH')

query T rowsort
SELECT date_trunc(field, TIMESTAMP '2019-11-26 15:56:46.241150') FROM date_trunc_fields
----
2019-11-26 00:00:00
2019-11-26 00:00:00
2019-11-01 00:00:00
2019-11-01 00:00:00

statement ok
INSERT INTO date_trunc_fields VALUES ('bad')

query error unknown units 'bad'
SELECT date_trunc(field, TIMESTAMP '2019-11-26 15:56:46.241150') FROM date_trunc_fields

mode standard

statement ok
CREATE TABLE date_trunc_timestamps (
    ts timestamp
)

query T multiline
EXPLAIN PLAN FOR SELECT date_trunc('day', ts) FROM date_trunc_timestamps
----
%0 =
| Get materialize.public.date_trunc_timestamps (u3)
| Map date_trunc_day_ts(#0)
| Project (#1)

EOF

query T multiline
EXPLAIN PLAN FOR SELECT date_trunc(field, ts) FROM date_trunc_fields, date_trunc_timestamps
----
%0 =
| Get materialize.public.date_trunc_fields (u1)
| ArrangeBy ()

%1 =
| Get materialize.public.date_trunc_timestamps (u3)

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| | demand = (#0, #1)
| Map date_truncts(#0, #1)
| Project (#2)

EOF

mode cockroach

query R
SELECT floor(CAST (1.1 AS double precision))
----
1

query R
SELECT floor(CAST (1.1 AS float))
----
1

query RRRRR
SELECT floor(1.1), floor(1.111), floor(100.1), floor(100.11), floor(-4.1)
----
1  1  100  100  -5


query R
SELECT ceil(CAST (1.1 AS double precision))
----
2

query R
SELECT ceil(CAST (1.1 AS float))
----
2

query RRRRR
SELECT ceil(1.1), ceil(1.111), ceil(100.1), ceil(100.11), ceil(-4.1)
----
2  2  101  101  -4

# postgres converts ints to floats on floor/ceil
query R
SELECT floor(1)
----
1

query R
SELECT floor(1)
----
1

query R
SELECT floor(cast(1 AS bigint))
----
1

query R
SELECT ceil(cast(1 AS bigint))
----
1

query R
SELECT floor(NULL)
----
NULL

query R
SELECT ceil(NULL)
----
NULL

statement ok
CREATE TABLE null_test (
   decimal_col decimal(14, 2),
   float_col float
)

statement ok
INSERT INTO null_test VALUES (5.06, -1.59), (-12.58, NULL), (2.96, 2.2), (NULL, 23.8), (-9.4, -48.2)

query RR rowsort
SELECT floor(decimal_col), floor(float_col) FROM null_test
----
-10  -49
-13  NULL
2  2
5  -2
NULL  23

query RR rowsort
SELECT ceil(decimal_col), ceil(float_col) FROM null_test
----
-12  NULL
-9  -48
3  3
6  -1
NULL  24

# Tests for the sqrt function.
#
# The implementation of sqrt delegates to {f32,f64}::sqrt, so these tests are
# not particularly extensive.

query error cannot take square root of a negative number
SELECT sqrt(-1::float)

query error cannot take square root of a negative number
SELECT sqrt(-1::double precision)

query error cannot take square root of a negative number
SELECT sqrt(-1::decimal(15, 2))

query R
SELECT sqrt(1.23783::float)
----
1.112578087147145

query R
SELECT sqrt(1.23783::double)
----
1.112578087147145

query R
SELECT sqrt(1.23783::decimal(15, 5))
----
1.11257

# Test coalesce.
query I
SELECT coalesce(NULL, 1, NULL)
----
1

query R
SELECT coalesce(NULL, 1, NULL)
----
1

query T
SELECT coalesce('hello', 'world', NULL)
----
hello

statement ok
CREATE VIEW v AS SELECT 1 AS a

# Coalesce should reduce away errors that statically can be shown not to occur.
query T
SELECT coalesce(1, 1 / 0, a) FROM v
----
1

# Tests issue #2355, that type information for Maps are correctly constructed
# before being passed to expressions for optimization.
statement ok
CREATE VIEW bytes AS SELECT null::bytea AS data

query T
SELECT
    COALESCE(data::jsonb->>'field1', data::jsonb->>'field2')
FROM (
    SELECT CONVERT_FROM(data, 'utf8') AS data FROM bytes
)
----
NULL

query T
SELECT trim(LEADING 'xy' FROM 'yxytrimyxy');
----
trimyxy

query T
SELECT ltrim('yxytrimyxy', 'xy');
----
trimyxy

query T
SELECT rtrim('yxytrimyxy', 'xy');
----
yxytrim

query T
SELECT btrim('yxytrimyxy', 'xy');
----
trim

query T
SELECT btrim('  yxytrimyxy  ');
----
yxytrimyxy

query T
SELECT rtrim('yxytrimyxy  ');
----
yxytrimyxy

query T
SELECT ltrim('   yxytrimyxy');
----
yxytrimyxy

query T
SELECT trim('xy' FROM 'yxytrimyxy');
----
trim

query T
SELECT trim(TRAILING FROM 'yxytrimyxy  ');
----
yxytrimyxy

query T
SELECT trim(FROM '  yxytrimyxy  ');
----
yxytrimyxy

query T
SELECT trim('   yxytrimyxy  ');
----
yxytrimyxy

query T
SELECT trim(LEADING '   yxytrimyxy');
----
yxytrimyxy

statement error
SELECT trim('c' 'ccccdogcc');

# Test IS NULL reduction.

mode standard

statement ok
CREATE TABLE t (
    a int,
    b int NOT NULL
)

query T multiline
EXPLAIN PLAN FOR SELECT a IS NULL FROM t
----
%0 =
| Get materialize.public.t (u9)
| Map isnull(#0)
| Project (#2)

EOF

query T multiline
EXPLAIN PLAN FOR SELECT a + a + a + a + a IS NULL FROM t
----
%0 =
| Get materialize.public.t (u9)
| Map isnull(#0)
| Project (#2)

EOF

query T multiline
EXPLAIN PLAN FOR SELECT a + b IS NULL FROM t
----
%0 =
| Get materialize.public.t (u9)
| Map isnull(#0)
| Project (#2)

EOF

# Ensure that (a AND b) IS NULL is *not* reduced, as it is not as simple as
# rewriting (A IS NULL) OR (b IS NULL). There are probably rewrite rules that
# exist, but we do not support them yet. Similarly for OR.

query T multiline
EXPLAIN PLAN FOR SELECT (a::bool AND b::bool) IS NULL FROM t
----
%0 =
| Get materialize.public.t (u9)
| Map isnull((i32tobool(#0) && i32tobool(#1)))
| Project (#2)

EOF

# Test qualified function names.

query I
SELECT abs(-1)
----
1

query I
SELECT pg_catalog.abs(1)
----
1

query I
SELECT materialize.pg_catalog.abs(1)
----
1

query error function "mz_catalog.abs" does not exist
SELECT mz_catalog.abs(1)

query error unknown database 'noexist'
SELECT noexist.pg_catalog.abs(1)

# mod is a special case for qualified function names, since it is transformed
# away by an early pass in the planner.

query I
SELECT mod(7, 4)
----
3

query I
SELECT pg_catalog.mod(7, 4)
----
3

query error function "mz_catalog.mod" does not exist
SELECT mz_catalog.mod(7, 4)

query error unknown database 'noexist'
SELECT noexist.pg_catalog.mod(7, 4)

query T
SELECT pg_catalog.pg_encoding_to_char(6)
----
UTF8

query T
SELECT pg_catalog.pg_encoding_to_char(7)
----
NULL

# The following tests are taken from cockroach/builtin_function.slt
# todo@jldlaughlin: remove these duplicates

query I
SELECT array_lower(ARRAY['a', 'b'], 1)
----
1

query I
SELECT array_lower(ARRAY['a'], 1)
----
1

query I
SELECT array_lower(ARRAY['a'], 0)
----
NULL

query I
SELECT array_lower(ARRAY['a'], 2)
----
NULL

query I
SELECT array_lower(ARRAY[ARRAY[1, 2]], 2)
----
1

query I
SELECT array_upper(ARRAY['a', 'b'], 1)
----
2

query I
SELECT array_upper(ARRAY['a'], 1)
----
1

query I
SELECT array_upper(ARRAY['a'], 0)
----
NULL

query I
SELECT array_upper(ARRAY['a'], 2)
----
NULL

query I
SELECT array_upper(ARRAY[ARRAY[1, 2]], 2)
----
2

# Additional array_lower, array_upper tests
query I
SELECT array_lower(ARRAY[[[9]]], 2)
----
1

query I
SELECT array_lower(ARRAY[[['a', 'b']]], 3)
----
1

query I
SELECT array_lower(ARRAY[[['a', 'b']]], 4)
----
NULL

query I
SELECT array_upper(ARRAY[[[1, 2]]], 3)
----
2

query I
SELECT array_upper(ARRAY[[[1, 2]]], 4)
----
NULL

query I
SELECT array_upper(ARRAY[NULL], 1)
----
1

query I
SELECT array_upper(ARRAY[1], NULL)
----
NULL

query I
SELECT array_upper(NULL::text[], 1)
----
NULL

query error Cannot call function array_upper\(unknown, i32\): arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT array_upper(NULL, 1)

# pg_crypto functions
# Includes tests partially ported over from pg_crypto
# https://github.com/postgres/postgres/tree/ca7f8e2b86e5f15a40b67e6199d714f45a467ff1/contrib/pgcrypto/expected

# digest
query error invalid hash algorithm 'nonsense'
SELECT digest('hi'::text, 'nonsense'::text)

## digest with md5
query T
SELECT digest(''::text, 'md5'::text)::text
----
\xd41d8cd98f00b204e9800998ecf8427e

query T
SELECT digest(''::bytea, 'md5'::text)::text
----
\xd41d8cd98f00b204e9800998ecf8427e

query T
SELECT digest('a'::text, 'md5'::text)::text
----
\x0cc175b9c0f1b6a831c399e269772661

query T
SELECT digest('abc'::bytea, 'md5'::text)::text
----
\x900150983cd24fb0d6963f7d28e17f72

query T
SELECT digest('message digest'::text, 'md5'::text)::text
----
\xf96b697d7cb7938d525a2f31aaf161d0

query T
SELECT digest('abcdefghijklmnopqrstuvwxyz'::bytea, 'md5'::text)::text
----
\xc3fcd3d76192e4007dfb496cca67e13b

query T
SELECT digest('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'::text, 'md5'::text)::text
----
\xd174ab98d277d9f5a5611c2c9f419d9f

query T
SELECT digest('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::bytea, 'md5'::text)::text
----
\x57edf4a22be3c955ac49da2e2107b67a

## digest with sha1
query T
SELECT digest(''::text, 'sha1'::text)::text
----
\xda39a3ee5e6b4b0d3255bfef95601890afd80709

query T
SELECT digest('a'::bytea, 'sha1'::text)::text
----
\x86f7e437faa5a7fce15d1ddcb9eaeaea377667b8

query T
SELECT digest('abc'::text, 'sha1'::text)::text
----
\xa9993e364706816aba3e25717850c26c9cd0d89d

query T
SELECT digest('message digest'::bytea, 'sha1'::text)::text
----
\xc12252ceda8be8994d5fa0290a47231c1d16aae3

query T
SELECT digest('abcdefghijklmnopqrstuvwxyz'::text, 'sha1'::text)::text
----
\x32d10c7b8cf96570ca04ce37f2a19d84240d3a89

query T
SELECT digest('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'::bytea, 'sha1'::text)::text
----
\x761c457bf73b14d27e9e9265c46f4b4dda11f940

query T
SELECT digest('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::text, 'sha1'::text)::text
----
\x50abf5706a150990a08b2c5ea40fa0e585554732

## digest with sha224
query T
SELECT digest(''::text, 'sha224'::text)::text
----
\xd14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f

query T
SELECT digest('a'::bytea, 'sha224'::text)::text
----
\xabd37534c7d9a2efb9465de931cd7055ffdb8879563ae98078d6d6d5

query T
SELECT digest('abc'::text, 'sha224'::text)::text
----
\x23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7

query T
SELECT digest('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'::text, 'sha224'::text)::text
----
\x75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525

query T
SELECT digest('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::text, 'sha224'::text)::text
----
\xb50aecbe4e9bb0b57bc5f3ae760a8e01db24f203fb3cdcd13148046e

## digest with sha256
query T
SELECT digest(''::text, 'sha256'::text)::text
----
\xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

query T
SELECT digest('a'::bytea, 'sha256'::text)::text
----
\xca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb

query T
SELECT digest('abc'::text, 'sha256'::text)::text
----
\xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad

query T
SELECT digest('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'::bytea, 'sha256'::text)::text
----
\x248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1

query T
SELECT digest('12345678901234567890123456789012345678901234567890123456789012345678901234567890'::text, 'sha256'::text)::text
----
\xf371bc4a311f2b009eef952dd83ca80e2b60026c8e935592d0f9c308453c813e

## digest with sha384
query T
SELECT digest(''::text, 'sha384'::text)::text
----
\x38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b

query T
SELECT digest('a'::bytea, 'sha384'::text)::text
----
\x54a59b9f22b0b80880d8427e548b7c23abd873486e1f035dce9cd697e85175033caa88e6d57bc35efae0b5afd3145f31

query T
SELECT digest('abc'::text, 'sha384'::text)::text
----
\xcb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7

query T
SELECT digest('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'::bytea, 'sha384'::text)::text
----
\x3391fdddfc8dc7393707a65b1b4709397cf8b1d162af05abfe8f450de5f36bc6b0455a8520bc4e6f5fe95b1fe3c8452b

query T
SELECT digest('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'::text, 'sha384'::text)::text
----
\x3d208973ab3508dbbd7e2c2862ba290ad3010e4978c198dc4d8fd014e582823a89e16f9b2a7bbc1ac938e2d199e8bea4

## digest with sha512
query T
SELECT digest(''::text, 'sha512'::text)::text
----
\xcf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e

query T
SELECT digest('a'::bytea, 'sha512'::text)::text
----
\x1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75

query T
SELECT digest('abc'::text, 'sha512'::text)::text
----
\xddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f

query T
SELECT digest('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq'::bytea, 'sha512'::text)::text
----
\x204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c33596fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445

query T
SELECT digest('abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu'::text, 'sha512'::text)::text
----
\x8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909

query T
SELECT digest('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'::bytea, 'sha512'::text)::text
----
\x930d0cefcb30ff1133b6898121f1cf3d27578afcafe8677c5257cf069911f75d8f5831b56ebfda67b278e66dff8b84fe2b2870f742a580d8edb41987232850c9

#hmac

## hmac with md5
query T
SELECT hmac(''::text, ''::text, 'md5'::text)::text
----
\x74e6f7298a9c2d168935f58c001bad88

query T
SELECT hmac(''::bytea, ''::text, 'md5'::text)::text
----
\x74e6f7298a9c2d168935f58c001bad88

query T
SELECT hmac(''::text, 'some key here'::text, 'md5'::text)::text
----
\xc8ca20116ea2cf24dce475f4c3b8cf79

query T
SELECT hmac('some text here'::bytea, ''::text, 'md5'::text)::text
----
\x8816cf958d363c75ebd6db9795995f8b

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'md5'::text)::text
----
\xf34204642f7f1c3ffc2a05170f4a3b84

# sha224's block-size is 64 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'md5'::text)::text
----
\xf4d787e9ad2aef45765ef18b7f055cfd

## hmac with sha1
query T
SELECT hmac(''::text, ''::text, 'sha1'::text)::text
----
\xfbdb1d1b18aa6c08324b7d64b71fb76370690e1d

query T
SELECT hmac(''::bytea, ''::text, 'sha1'::text)::text
----
\xfbdb1d1b18aa6c08324b7d64b71fb76370690e1d

query T
SELECT hmac(''::text, 'some key here'::text, 'sha1'::text)::text
----
\xd30b88796d86e6ecf2ac3ad424ba59504f6e29f6

query T
SELECT hmac('some text here'::bytea, ''::text, 'sha1'::text)::text
----
\xa15273bebb53bca4ef2118c8896e6b4786ea67c8

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'sha1'::text)::text
----
\xd965ff402c6b2a676837dd523e121a2df1e1e328

# sha1's block-size is 64 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'sha1'::text)::text
----
\x92aafbe48e89d4a07dcd875dad4c7db64a4c2151

## hmac with sha224
query T
SELECT hmac(''::text, ''::text, 'sha224'::text)::text
----
\x5ce14f72894662213e2748d2a6ba234b74263910cedde2f5a9271524

query T
SELECT hmac(''::bytea, ''::text, 'sha224'::text)::text
----
\x5ce14f72894662213e2748d2a6ba234b74263910cedde2f5a9271524

query T
SELECT hmac(''::text, 'some key here'::text, 'sha224'::text)::text
----
\xea4c7e7c38e93c4ed536e074e3243471098399f5050721b871cbe050

query T
SELECT hmac('some text here'::bytea, ''::text, 'sha224'::text)::text
----
\xcd2ca3aa6ced91b60c8925107bcb28f0afb7c2eab141d2e5de8165cd

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'sha224'::text)::text
----
\xbb81579cab6947e27d3dec8641e23d00ec7bd9c2a8556f896969f88e

# sha224's block-size is 64 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'sha224'::text)::text
----
\x3575d11b6a03629992b587f5abcbb4564c13d0989b4668346ac5baeb

## hmac with sha256
query T
SELECT hmac(''::text, ''::text, 'sha256'::text)::text
----
\xb613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad

query T
SELECT hmac(''::bytea, ''::text, 'sha256'::text)::text
----
\xb613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad

query T
SELECT hmac(''::text, 'some key here'::text, 'sha256'::text)::text
----
\x10c496cd3c86c1873978f4f5b9ba28436f7b99ac09c05498558f9e1500373e1b

query T
SELECT hmac('some text here'::bytea, ''::text, 'sha256'::text)::text
----
\xb126917dc129d588aa8be1b0de4a245242890d947651179f94c560f2ad2dec03

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'sha256'::text)::text
----
\xfed2237056af610704ab8d910f718aef08e684dbe6e38afe404f17ec77eb9808

# sha256's block-size is 64 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'sha256'::text)::text
----
\x02c8c554c5931b331ca1436f2efbd05e8ad53a84c6e7bb3973fa22ca2a5a4926

## hmac with sha384
query T
SELECT hmac(''::text, ''::text, 'sha384'::text)::text
----
\x6c1f2ee938fad2e24bd91298474382ca218c75db3d83e114b3d4367776d14d3551289e75e8209cd4b792302840234adc

query T
SELECT hmac(''::bytea, ''::text, 'sha384'::text)::text
----
\x6c1f2ee938fad2e24bd91298474382ca218c75db3d83e114b3d4367776d14d3551289e75e8209cd4b792302840234adc

query T
SELECT hmac(''::text, 'some key here'::text, 'sha384'::text)::text
----
\xdec33afd5bfa9684d50288c17ea9a4b44b79d01cd0e24d7a384b6930679da25a617ea04dd8a7741b3cee89a3046471a1

query T
SELECT hmac('some text here'::bytea, ''::text, 'sha384'::text)::text
----
\x40983943a05c34f9070f77c91ab56d9f40b88c3e4830eee6b6d90ef4e48c4d8729c4c65d92fa4402b9409f2123388b37

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'sha384'::text)::text
----
\x52be88c80306c8fe2a9c13e10ba4b317a0e88369c0e639ba7325951cb67221a2e4bfdd1a48afe4d07c4fc1775dc58aaf

# sha384's block-size is 128 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'sha384'::text)::text
----
\xf60bc806a9f11ec560e8129d7933c8bafb58c876c49c5bc2955973043b5dfc54daa7c09361e73478cd91c73fcbea3416

## hmac with sha256
query T
SELECT hmac(''::text, ''::text, 'sha256'::text)::text
----
\xb613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad

query T
SELECT hmac(''::bytea, ''::text, 'sha256'::text)::text
----
\xb613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad

query T
SELECT hmac(''::text, 'some key here'::text, 'sha256'::text)::text
----
\x10c496cd3c86c1873978f4f5b9ba28436f7b99ac09c05498558f9e1500373e1b

query T
SELECT hmac('some text here'::bytea, ''::text, 'sha256'::text)::text
----
\xb126917dc129d588aa8be1b0de4a245242890d947651179f94c560f2ad2dec03

query T
SELECT hmac('some text here'::text, 'some key here'::text, 'sha256'::text)::text
----
\xfed2237056af610704ab8d910f718aef08e684dbe6e38afe404f17ec77eb9808

# sha384's block-size is 64 bytes
query T
SELECT hmac('Test Using Larger Than Block-Size Key and Larger Than Block-Size Data'::bytea,
            'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'::text,
            'sha256'::text)::text
----
\x02c8c554c5931b331ca1436f2efbd05e8ad53a84c6e7bb3973fa22ca2a5a4926
