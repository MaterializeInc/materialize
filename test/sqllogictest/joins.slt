# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE l (la int, lb text)

statement ok
CREATE TABLE r (ra int, rb text)

statement ok
INSERT INTO l VALUES (1, 'l1'), (2, 'l2'), (3, 'l3')

statement ok
INSERT INTO r VALUES (1, 'r1'), (3, 'r3'), (4, 'r4')

query ITIT rowsort
SELECT * FROM l LEFT JOIN r ON l.la = r.ra
----
1  l1  1     r1
2  l2  NULL  NULL
3  l3  3     r3

# This test may look the same as the last, but listing out the columns
# explicitly checks for regressions of #1314.
query ITIT rowsort
SELECT l.la, l.lb, r.ra, r.rb FROM l LEFT JOIN r ON l.la = r.ra
----
1  l1  1     r1
2  l2  NULL  NULL
3  l3  3     r3

query ITIT rowsort
SELECT * FROM l RIGHT JOIN r ON l.la = r.ra
----
NULL  NULL  4  r4
1     l1    1  r1
3     l3    3  r3

# This test may look the same as the last, but listing out the columns
# explicitly checks for regressions of #1314.
query ITIT rowsort
SELECT l.la, l.lb, r.ra, r.rb FROM l RIGHT JOIN r ON l.la = r.ra
----
NULL  NULL  4  r4
1     l1    1  r1
3     l3    3  r3


# Test that columns detected to be equivalent retain the names that the user
# asks for. Protects against regression of #1217.
query II colnames,rowsort
SELECT ra, r.ra FROM l JOIN r ON l.la = r.ra LIMIT 0
----
ra  ra


# Test that columns detected to be equivalent retain the names that the user
# asks for. Protects against regression of #1217.
query ITIT colnames,rowsort
SELECT * FROM l JOIN r ON l.la = r.ra LIMIT 0
----
la  lb  ra  rb

# Test that with scalars introduced to join plans we still get the right answers.
query ITITIT rowsort
SELECT * FROM l as l1, l as l2, l as l3 WHERE l1.la + 1 = l2.la AND l3.la = l1.la + l2.la
----
1  l1  2  l2  3  l3

# Test that scalar expressions are introduced to join plans.
query T multiline
EXPLAIN PLAN FOR SELECT * FROM l as l1, l as l2, l as l3 WHERE l1.la + 1 = l2.la AND l3.la = l1.la + l2.la
----
0 =
| Get materialize.public.l (u1)
| Filter !(isnull((#0 + 1)))

1 =
| Get materialize.public.l (u1)
| Filter !(isnull(#0))
| ArrangeBy (#0)

2 =
| Get materialize.public.l (u1)
| Filter !(isnull(#0))
| ArrangeBy (#0)

3 =
| Join %0 %1 %2 (= #2 (#0 + 1)) (= #4 (#0 + #2))
| | implementation = Differential %0 %1.(#0) %2.(#0)
| | demand = (#0..#5)
| Filter !(isnull((#0 + #2)))

EOF
