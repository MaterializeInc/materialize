# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

query T
select LIST[1,2,3]
----
{1,2,3}

query error Cannot create list with mixed types
select LIST[1,LIST[2,3]]

query T
select LIST[[1],[2,3]]
----
{{1},{2,3}}

query error unable to infer type for empty list
select LIST[]

query T
select LIST[] :: INT LIST
----
{}

query T
select LIST[null]
----
{NULL}

query T
select LIST[1, null]
----
{1,NULL}

query T
select LIST[1, null] :: INT LIST
----
{1,NULL}

query T
select LIST[[1, null], []] :: INT LIST LIST
----
{{1,NULL},{}}

# Lists support arbitrarily deep nesting
query T
SELECT LIST[[[[1], [2]]], [[[3]]]]
----
{{{{1},{2}}},{{{3}}}}

# List(Int) cannot be cast to List(List(Int))
query error Cannot create list with mixed types
select LIST[1, null] :: INT LIST LIST

query error
select LIST[1, null] :: TEXT LIST

query T
select LIST['foo', 'f}o', '"\', null, 'null', 'NULL']
----
{foo,"f}o","\"\\",NULL,null,"NULL"}

query T
select list[list[list['"']]];
----
{{{"\""}}}

query T
select list['{1}']
----
{"{1}"}

query T
SELECT LIST[LIST[]::text list, LIST['a', 'b'], LIST['z']]
----
{{},{a,b},{z}}

# ðŸ”¬ list subscripts
# ðŸ”¬ðŸ”¬ list indexes
query R
SELECT LIST [1, 2, 3][2];
----
2

# exceeds maximum index
query R
SELECT LIST [1, 2, 3][100];
----
NULL

# exceeds maximum dimension
query error cannot subscript type i32
SELECT LIST [1, 2, 3][1][1];

# ðŸ”¬ðŸ”¬ list slices
query T
SELECT LIST [1, 2, 3][2:3];
----
{2,3}

query T
SELECT LIST [1, 2, 3][2:];
----
{2,3}

query T
SELECT LIST [1, 2, 3][:2];
----
{1,2}

query T
SELECT LIST [1, 2, 3][:];
----
{1,2,3}

# start exceeds maximum index
query R
SELECT LIST [1, 2, 3][100:];
----
NULL

# end exceeds maximum index
query T
SELECT LIST [1, 2, 3][:100];
----
{1,2,3}

# exceeds maximum dimension
query error cannot slice on 2 dimensions; list only has 1 dimension
SELECT LIST [1, 2, 3][:, :]

# successive slices
query T
SELECT LIST [1, 2, 3][2:3][1:1];
----
{2}

# ðŸ”¬ðŸ”¬ list slices + index
query T
SELECT LIST [1, 2, 3][2:3][2];
----
3

# ðŸ”¬ list list subscripts
# ðŸ”¬ðŸ”¬ list list indexes
query T
SELECT LIST [[1, 2, 3], [4, 5]][1]
----
{1,2,3}

query R
SELECT LIST [[1, 2, 3], [4, 5]][1][3]
----
3

# exceeds maximum index
query T
SELECT LIST [[1, 2, 3], [4, 5]][100]
----
NULL

query T
SELECT LIST [[1, 2, 3], [4, 5]][1][100]
----
NULL

query T
SELECT LIST [[1, 2, 3], [4, 5]][100][1]
----
NULL

# exceeds maximum dimension
query error cannot subscript type i32
SELECT LIST [[1, 2, 3], [4, 5]][1][1][1]

# ðŸ”¬ðŸ”¬ list list slices
query T
SELECT LIST [[1, 2, 3], [4, 5]][2:2]
----
{{4,5}}

query T
SELECT LIST [[1, 2, 3], [4, 5]][1:2, 2:3];
----
{{2,3},{5}}

query T
SELECT LIST [[1, 2, 3], [4, 5]][2:]
----
{{4,5}}

query T
SELECT LIST [[1, 2, 3], [4, 5]][:2, 2:]
----
{{2,3},{5}}

query T
SELECT LIST [[1, 2, 3], [4, 5]][:, 2:]
----
{{2,3},{5}}

# start exceeds maximum index
query T
SELECT LIST [[1, 2, 3], [4, 5]][100:, :]
----
NULL

query T
SELECT LIST [[1, 2, 3], [4, 5]][:, 100:]
----
NULL

# propagating NULL lists
query T
SELECT LIST [[1, 2, 3], [4, 5]][:, 3:3]
----
{{3},NULL}

# end exceeds maximum index
query T
SELECT LIST [[1, 2, 3], [4, 5]][:100, :];
----
{{1,2,3},{4,5}}

query T
SELECT LIST [[1, 2, 3], [4, 5]][:, :100]
----
{{1,2,3},{4,5}}

# exceeds maximum dimension
query error cannot slice on 3 dimensions; list only has 2 dimensions
SELECT LIST [[1, 2, 3], [4, 5]][:, :, :]

# successive slice operations
query T
SELECT LIST [[1, 2, 3], [4, 5]][2:2][1:1]
----
{{4,5}}

# ðŸ”¬ðŸ”¬ list list slices + index
query T
SELECT LIST [[1, 2, 3], [4, 5]][1:2][2]
----
{4,5}

query T
SELECT LIST [[1, 2, 3], [4, 5]][1:2][2][2:2]
----
{5}

query T
SELECT LIST [[1, 2, 3], [4, 5]][1:2][2][2:2][1]
----
5

# ðŸ”¬ list list list
# ðŸ”¬ðŸ”¬ list list list indexes

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1]
----
{{1,2},{3,4,5}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2]
----
{3,4,5}

query R
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][3]
----
5

# exceeds maximum index
query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100]
----
NULL

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][100]
----
NULL

query R
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][100]
----
NULL

query R
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100][2][3]
----
NULL

# exceeds maximum dimension
query error cannot subscript type i32
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1][2][3][1]

# ðŸ”¬ðŸ”¬ list list list slices
query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2]
----
{{{1,2},{3,4,5}},{{6}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 1:1];
----
{{{1,2}},{{6}},{{7,8}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, 1:1];
----
{{{1},{3}},{{6}},{{7},{9}}}

# start exceeds maximum index
query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][100:100];
----
NULL

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 100:100];
----
NULL

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, 100:100];
----
NULL

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 100:100, :];
----
NULL

# propagating NULL lists
query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 2:2];
----
{{{3,4,5}},NULL,{{9}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, 2:2, 2:2];
----
{{{4}},NULL,NULL}

# end exceeds maximum index
query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:100];
----
{{{1,2},{3,4,5}},{{6}},{{7,8},{9}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :100];
----
{{{1,2},{3,4,5}},{{6}},{{7,8},{9}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, :100];
----
{{{1,2},{3,4,5}},{{6}},{{7,8},{9}}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :100, :100];
----
{{{1,2},{3,4,5}},{{6}},{{7,8},{9}}}

# exceeds maximum dimension
query error cannot slice on 4 dimensions; list only has 3 dimensions
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][:, :, :, :];

# ðŸ”¬ðŸ”¬ list list list slices + index

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1];
----
{{1,2},{3,4,5}}

query T
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1][2:2][1];
----
{3,4,5}

query R
SELECT LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2][1][2:3][1][2:3][2];
----
5

# ðŸ”¬ NULL expressions
query R
SELECT (LIST[[1, 2, 3], NULL, [4]]::INT LIST LIST)[2][1]
----
NULL

query T
SELECT (LIST[[1, 2, 3], NULL, [4]]::INT LIST LIST)[2:3, 2:2]
----
NULL

query T
SELECT LIST[1, 2, 3][NULL]
----
NULL

query T
SELECT LIST[1, 2, 3][NULL:NULL]
----
NULL

query T
SELECT LIST[1, 2, 3][1:NULL]
----
NULL

query T
SELECT LIST[1, 2, 3][NULL:1]
----
NULL

query T
SELECT LIST[1, 2, 3][NULL:]
----
NULL

query T
SELECT LIST[1, 2, 3][:NULL]
----
NULL

query T
SELECT LIST[NULL][:]
----
{NULL}

query T
SELECT LIST[1, NULL, 3][:NULL]
----
NULL

query T
SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:];
----
{NULL,{4,NULL,6}}

query T
SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3][1];
----
NULL

# ðŸ”¬ðŸ”¬ Slices and NULLs

# NULL literals are not touched by slice operations
query T
SELECT (LIST[NULL]::INT LIST)[1:1];
----
{NULL}

# Slicing into a NULL list produces an empty result expressed as NULL; if all
# results are empty, reduce them all to a single NULL
query T
SELECT (LIST[NULL, NULL]::INT LIST LIST)[:, 1:1];
----
NULL

# Literal NULLs are NOT empty results and don't get reduced
query T
SELECT (LIST[NULL, [NULL]]::INT LIST LIST)[:, 1:1];
----
{NULL,{NULL}}

# Results can mix values and empty-results-as-NULLs
query T
SELECT (LIST [[1, NULL, 3], NULL, [4, 5, 6]]::INT LIST LIST)[2:3, 2:2];
----
{NULL,{5}}

# Results can mix NULL values and empty-results-as-NULLs
query T
SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3, 2:2];
----
{NULL,{NULL}}

# Empty results across dimensions are still reduced
query T
SELECT (LIST [[1, NULL, 3], NULL, [4, NULL, 6]]::INT LIST LIST)[2:3, 4:4];
----
NULL

# Outer list's second position produces empty results, but third position
# produces value, so cannot be totally reduced
query T
SELECT (LIST [NULL, [NULL], [[NULL]]]::INT LIST LIST LIST)[:, :, :];
----
{NULL,NULL,{{NULL}}}

# Third position returns empty results, along with the first and second
# position, so all can be reduced to NULL
query T
SELECT (LIST [NULL, [NULL], [[NULL]]]::INT LIST LIST LIST)[:, :, 2:2];
----
NULL

# ðŸ”¬ Empty lists expressions
query T
SELECT (LIST[]::INT LIST)[1]
----
NULL

query T
SELECT (LIST[]::INT LIST)[:]
----
NULL

query T
SELECT (LIST[]::INT LIST)[1:1]
----
NULL

query T
SELECT (LIST[]::INT LIST LIST)[1:1, 1:1]
----
NULL

# ðŸ”¬ Other subscript values

# ðŸ”¬ðŸ”¬ end > start
query T
SELECT LIST[1, 2, 3][2:1];
----
NULL

# ðŸ”¬ðŸ”¬ Negative values
query T
SELECT LIST[1, 2, 3][-100];
----
NULL

query T
SELECT LIST[1, 2, 3][-100:];
----
{1,2,3}

query T
SELECT LIST[1, 2, 3][-100:99];
----
{1,2,3}

query T
SELECT LIST[1, 2, 3][-100:-99];
----
NULL

query T
SELECT LIST[1, 2, 3][-100:-101];
----
NULL

query T
SELECT LIST[1, 2, 3][:-100];
----
NULL

# ðŸ”¬ðŸ”¬ min/max
query R
SELECT LIST[1][9223372036854775807::bigint]
----
NULL

query R
SELECT LIST[1][-9223372036854775807::bigint]
----
NULL

query R
SELECT LIST[1][9223372036854775807::bigint:9223372036854775807::bigint]
----
NULL

query R
SELECT LIST[1][9223372036854775807::bigint:-9223372036854775807::bigint]
----
NULL

query T
SELECT LIST[1][-9223372036854775807::bigint:9223372036854775807::bigint]
----
{1}

query R
SELECT LIST[1][-9223372036854775807::bigint:-9223372036854775807::bigint]
----
NULL

# ðŸ”¬ Non-int subscript values
# ðŸ”¬ðŸ”¬ Ok
query R
select LIST[1,2,3][1.4];
----
1

query R
select LIST[1,2,3][1.5];
----
2

query R
select LIST[1,2,3][1.5::real];
----
2

query R
select LIST[1,2,3][1.5::float];
----
2

query R
select LIST[1,2,3][1.5 + 1.6];
----
3

query T
select LIST[1,2,3][0.1 * 2 : 0.5 + 1.6];
----
{1,2}

query T
select LIST[1,2,3][LIST[1][2.0 / 2]];
----
1

# ðŸ”¬ðŸ”¬ Err
query error invalid input syntax for int8: invalid digit found in string: "dog"
SELECT LIST[1,2,3]['dog']

query error subscript \(indexing\) does not support casting from date to i64
SELECT LIST [[1, 2, 3], [4, 5]][DATE '2001-01-01']

query error subscript \(indexing\) does not support casting from timestamp to i64
SELECT LIST [[1, 2, 3], [4, 5]][TIMESTAMP '2001-01-01']

query error invalid input syntax for int8: invalid digit found in string: "dog"
SELECT LIST[1,2,3][1:'dog']

query error subscript \(slicing\) does not support casting from date to i64
SELECT LIST [[1, 2, 3], [4, 5]][1:DATE '2001-01-01']

query error subscript \(slicing\) does not support casting from timestamp to i64
SELECT LIST [[1, 2, 3], [4, 5]][1:TIMESTAMP '2001-01-01']

# ðŸ”¬ Built-in functions

# ðŸ”¬ðŸ”¬ list_ndims
query R
SELECT list_ndims(LIST [1, 2, 3])
----
1

query R
SELECT list_ndims(LIST []::INT LIST)
----
1

query R
SELECT list_ndims(LIST[[1],[1]])
----
2

query R
SELECT list_ndims(LIST [[[1], [1]], [[1]]])
----
3

# ðŸ”¬ðŸ”¬ðŸ”¬ slices

query R
SELECT list_ndims(LIST[[1],[1]][1:1])
----
2

query R
SELECT list_ndims(LIST [[[1], [1]], [[1]]][1:2])
----
3

# ðŸ”¬ðŸ”¬ðŸ”¬ interior lists
query R
SELECT list_ndims(LIST[[1],[1]][1])
----
1

query R
SELECT list_ndims(LIST [[[1], [1]], [[1]]][1])
----
2

query R
SELECT list_ndims(LIST [[[1], [1]], [[1]]][1][1])
----
1

# ðŸ”¬ðŸ”¬ðŸ”¬ NULL elements

query R
SELECT list_ndims(LIST[NULL]::INT LIST)
----
1

query R
SELECT list_ndims(LIST[NULL]::INT LIST LIST)
----
2

query R
SELECT list_ndims(LIST[[1], NULL]::INT LIST LIST)
----
2

query R
SELECT list_ndims((LIST[[1],NULL]::INT LIST LIST)[2])
----
1

# ðŸ”¬ðŸ”¬ list_length

query R
SELECT list_length(LIST [1])
----
1

query R
SELECT list_length(LIST [1, 1])
----
2

query R
SELECT list_length(LIST[[1],[1]])
----
2

query R
SELECT list_length(LIST [[[1], [1]], [[1]]])
----
2

query R
SELECT list_length(LIST []::INT LIST)
----
0

# ðŸ”¬ðŸ”¬ðŸ”¬ slices

query R
SELECT list_length(LIST[[1],[1]][1:1])
----
1

query R
SELECT list_length(LIST [[[1, 2], [3, 4, 5]], [[6]], [[7, 8], [9]]][1:2])
----
2

# ðŸ”¬ðŸ”¬ðŸ”¬ indexing operations
query R
SELECT list_length(LIST [[[1], [1]], [[1]]][1])
----
2

query R
SELECT list_length(LIST [[[1], [1]], [[1]]][1][1])
----
1

# ðŸ”¬ðŸ”¬ðŸ”¬ NULL elements

query R
SELECT list_length(LIST[1, NULL]::INT LIST)
----
2

query R
SELECT list_length(LIST[[1],NULL]::INT LIST LIST)
----
2

query R
SELECT list_length((LIST[[1],NULL]::INT LIST LIST)[2])
----
NULL

# ðŸ”¬ðŸ”¬ list_length_max
query R
SELECT list_length_max(LIST [1, 2, 3], 1)
----
3

query R
SELECT list_length_max(LIST [1, 2, 3, 4], 1)
----
4

query R
SELECT list_length_max(LIST[[1],[2,3]], 2)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]], 2)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]], 3)
----
3

query R
SELECT list_length_max(LIST []::INT LIST, 1)
----
0

query R
SELECT list_length_max(LIST [[]]::INT LIST LIST, 2)
----
0

# ðŸ”¬ðŸ”¬ðŸ”¬ slices

query R
SELECT list_length_max(LIST[[1], [2]][1:1], 1)
----
1

query R
SELECT list_length_max(LIST[[1], [2, 3]][2:2], 2)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:2], 1)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:1], 2)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1:1], 3)
----
3

# ðŸ”¬ðŸ”¬ðŸ”¬ indexing operations
query R
SELECT list_length_max(LIST[[1], [2, 3]][2], 1)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1], 1)
----
2

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1], 2)
----
3

query R
SELECT list_length_max(LIST [[[1, 2, 3], [4]], [[5]]][1][2], 1)
----
1

# ðŸ”¬ðŸ”¬ðŸ”¬ NULL elements

query R
SELECT list_length_max(NULL::INT LIST, 1);
----
NULL

query R
SELECT list_length_max(LIST[1, NULL, 3]::INT LIST, 1)
----
3

query R
SELECT list_length_max(LIST[[1],NULL]::INT LIST LIST, 1)
----
2

query R
SELECT list_length_max((LIST[[1],NULL]::INT LIST LIST), 2)
----
1

query T
SELECT list_length_max((LIST[NULL]::INT LIST LIST), 2)
----
NULL

# ðŸ”¬ðŸ”¬ðŸ”¬ errors
query error invalid dimension: 2; must use value within \[1, 1\]
SELECT list_length_max((LIST[1]::INT LIST), 2)

query error invalid dimension: 2; must use value within \[1, 1\]
SELECT list_length_max((LIST[NULL]::INT LIST), 2)

query error invalid dimension: 3; must use value within \[1, 2\]
SELECT list_length_max((LIST[NULL]::INT LIST LIST), 3)

query error invalid dimension: 0; must use value within \[1, 1\]
SELECT list_length_max((LIST[1]::INT LIST), 0)

query error invalid dimension: -1; must use value within \[1, 1\]
SELECT list_length_max((LIST[1]::INT LIST), -1)

query error invalid dimension: -1; must use value within \[1, 1\]
SELECT list_length_max((LIST[1]::INT LIST), LIST[-1][1])

# ðŸ”¬ List casts

# ðŸ”¬ðŸ”¬ Between lists

# ðŸ”¬ðŸ”¬ðŸ”¬ Single-dimensional lists

query T
SELECT LIST['1']::int list
----
{1}

query T
SELECT LIST[NULL]::int list
----
{NULL}

query T
SELECT LIST[NULL, '1']::int list
----
{NULL,1}

query T
SELECT LIST[1.4, 1.5]::int list;
----
{1,2}

query T
SELECT LIST[1.4::float, -1.5::float]::int list;
----
{1,-2}

query T
SELECT NULL::int list
----
NULL

# ðŸ”¬ðŸ”¬ðŸ”¬ðŸ”¬ Errors

query error invalid input syntax for int4: invalid digit found in string: "dog"
SELECT LIST['1', 'dog']::int list

query error CAST does not support casting from date to i32
SELECT LIST[DATE '2008-02-01']::int list

# ðŸ”¬ðŸ”¬ðŸ”¬ Multi-dimensional and jagged lists

query T
SELECT LIST[[1.4::float], [-1.5::float, 2.5::float]]::int list list;
----
{{1},{-2,3}}

query T
SELECT LIST[[1.4::float], [-1.5::float, 2.5::float], NULL::float list]::int list list;
----
{{1},{-2,3},NULL}

# ðŸ”¬ðŸ”¬ðŸ”¬ Non-numeric types

query T
SELECT LIST[TIMESTAMP '2008-02-01 15:04:05', TIMESTAMP '2007-02-01 15:04:05']::date list
----
{2008-02-01,2007-02-01}

query T
SELECT LIST[DATE '2008-02-01', DATE '2007-02-01']::timestamp list
----
{"2008-02-01 00:00:00","2007-02-01 00:00:00"}

# ðŸ”¬ðŸ”¬ list to text

query T
SELECT LIST['1']::text
----
{1}

query T
SELECT LIST[NULL]::text
----
{NULL}

query T
SELECT LIST[NULL, '1']::text
----
{NULL,1}

query T
SELECT LIST[NULL, 1]::text
----
{NULL,1}

query T
SELECT LIST[1.4, -1.5]::text
----
{1.4,-1.5}

query T
SELECT LIST[[1.4], [-1.5]]::text
----
{{1.4},{-1.5}}

query T
SELECT LIST[[1.4::float], [-1.5::float, 2.5::float]]::text
----
{{1.4},{-1.5,2.5}}

# Show that these are actually strings
query I
SELECT length(LIST['1','2']::text)
----
5

query error Cannot call function length\(unknown\): length does not support implicitly casting from string list to string
SELECT length(LIST['1','2'])
