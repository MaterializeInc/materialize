# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

# Test basic string to map casts.
query error value_type parameter required
CREATE TYPE custom AS MAP (key_type=text)

query error key_type parameter required
CREATE TYPE custom AS MAP (value_type='bool')

query error unexpected parameters for CREATE TYPE: extra_type
CREATE TYPE custom AS MAP (key_type=text, value_type='bool', extra_type=customthing)

query error CREATE TYPE not yet supported
CREATE TYPE custom AS MAP (key_type=text, value_type=bool)

query error expected '\{', found a: "a=>1"
SELECT 'a=>1'::map[text=>int]

query T
SELECT '{a=>1}'::map[text=>int]
----
{a=>1}

query T
SELECT '{  c  =>3, a=>     2, a => 1 }'::map[text=>int]
----
{a=>1,c=>3}

query error Expected TEXT, found INT
SELECT '{1=>true}'::map[int=>bool]

query T
SELECT '{1=>true}'::map[text=>bool]
----
{1=>t}

query error malformed literal; missing element
SELECT '{}'::map[text=>int]

query error invalid input syntax for bool: "2.0"
SELECT '{a=>1, b=>false, c=>2.0}'::map[text=>bool]

query T
SELECT '{a\=\>=>2}'::map[text=>int]
----
{"a=>"=>2}

query T
SELECT '{13=>hello \[\=\>     value\], 31=>  normal  }'::map[text=>text]
----
{13=>"hello [=>     value]",31=>normal}

query T
SELECT '{"a"=>"hello there!", b=>"129387123"}'::map[text=>text]
----
{a=>"hello there!",b=>129387123}

query T
SELECT '{key=>"here is a string => with a map operator in it"}'::map[text=>text]
----
{key=>"here is a string => with a map operator in it"}

query T
SELECT '{31=> normal \ }'::map[text=>text]
----
{31=>"normal  "}

query T
SELECT '{31=> \ normal }'::map[text=>text]
----
{31=>" normal"}

query error unterminated quoted string
SELECT '{"a"=>"hello there!}'::map[text=>text]

query error nested map types not yet supported
SELECT '{a=>{b=>c}}'::map[text=>map[text=>text]]

# Test map operators.

## Test ?
query T
SELECT '{a=>1, b=>2}'::map[text=>int] ? 'a'
----
true

query T
SELECT '{a=>1, b=>2}'::map[text=>int] ? 'b'
----
true

query T
SELECT '{a=>1, b=>2}'::map[text=>int] ? 'c'
----
false

query error arguments cannot be implicitly cast to any implementation's parameters
SELECT '{a=>1, b=>2}'::map[text=>int] ? 1

query T
SELECT '{a=>1}'::map[text=>int] ? ''
----
false

query T
SELECT '{""=>1}'::map[text=>int] ? ''
----
true
