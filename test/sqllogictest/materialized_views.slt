# Copyright Materialize, Inc. and contributors. All rights resemved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

# Setup

statement ok
CREATE TABLE t (a int, b int)

statement ok
INSERT INTO t VALUES (1, 2), (3, 4), (5, 6)

statement ok
CREATE CLUSTER other REPLICAS (r1 (SIZE '1'), r2 (SIZE '2-2'))


# Test: Materialized view can be created.

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1


# Test: Materialized view can be replaced.

statement ok
CREATE OR REPLACE MATERIALIZED VIEW mv AS SELECT 2

query I
SELECT * FROM mv
----
2


# Test: Materialized view creation can be skipped if a materialized view already exists.

statement error materialized view "materialize.public.mv" already exists
CREATE MATERIALIZED VIEW mv AS SELECT 1

statement ok
CREATE MATERIALIZED VIEW IF NOT EXISTS mv AS SELECT 1

query I
SELECT * FROM mv
----
2


# Test: Materialized view can have explicit column names.

statement ok
CREATE OR REPLACE MATERIALIZED VIEW mv (name, age) AS SELECT 'jon', 12

query TI colnames
SELECT * FROM mv
----
name age
jon  12


# Test: Explicit column names must have the right cardinality.

statement error materialized view .+ definition names 2 columns, but materialized view .+ has 1 column
CREATE MATERIALIZED VIEW error (name, age) AS SELECT 'jon'


# Test: Materialized view can be created in another cluster.

statement ok
CREATE MATERIALIZED VIEW other_mv IN CLUSTER other AS SELECT 1

query TT colnames,rowsort
SHOW MATERIALIZED VIEWS
----
name      cluster
mv        default
other_mv  other

statement ok
DROP MATERIALIZED VIEW other_mv


# Test: Materialized view can not be created in a non-existing cluster.

statement error unknown cluster 'doesnotexist'
CREATE MATERIALIZED VIEW error IN CLUSTER doesnotexist AS SELECT 1


# Test: Materialized view data is accessible from the same cluster.

statement ok
CREATE OR REPLACE MATERIALIZED VIEW mv AS SELECT a + b FROM t

query I rowsort
SELECT * FROM mv
----
3
7
11


# Test: Materialized view data is accessible from other clusters.

statement ok
SET cluster = other

query I rowsort
SELECT * FROM mv
----
3
7
11

statement ok
RESET cluster


# Test: Materialized view reflects input data changes.

statement ok
INSERT INTO t VALUES (7, 8)

query I rowsort
SELECT * FROM mv
----
3
7
11
15

statement ok
DELETE FROM t WHERE a = 1

query I rowsort
SELECT * FROM mv
----
7
11
15


# Test: Query errors are propagated through materialized views.

statement ok
CREATE OR REPLACE MATERIALIZED VIEW mv AS SELECT 100 / a FROM t

query I rowsort
SELECT * FROM mv
----
14
20
33

statement ok
INSERT INTO t VALUES (0, 0)

query error Evaluation error: division by zero
SELECT * FROM mv

statement ok
DELETE FROM t WHERE a = 0

query I rowsort
SELECT * FROM mv
----
14
20
33


# Test: Materialized views can be nested.

statement ok
CREATE MATERIALIZED VIEW mv2 AS SELECT count(*) FROM mv

query I
SELECT * FROM mv2
----
3

statement ok
DROP MATERIALIZED VIEW mv2


# Test: Materialized views can have indexes on top.

statement ok
CREATE DEFAULT INDEX ON mv;


# Test: Materialized views can be dropped.

statement ok
CREATE OR REPLACE MATERIALIZED VIEW mv AS SELECT 1

statement ok
DROP MATERIALIZED VIEW mv


# Test: Materialized views can not be dropped if they have dependants.

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1

statement ok
CREATE VIEW v AS SELECT * FROM mv

statement error cannot drop materialized view mv: still depended upon by view v
DROP MATERIALIZED VIEW mv


# Test: Materialized views with dependants can be dropped with CASCADE.

statement ok
DROP MATERIALIZED VIEW mv CASCADE

query error unknown catalog item 'v'
SELECT * FROM v


# Test: a view on a materialized view that optimizes to the empty set
# still prevents the underlying view from being dropped.
# See: https://github.com/MaterializeInc/materialize/issues/20315

statement ok
CREATE VIEW v AS SELECT 1 AS c

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT * FROM v WHERE c IS NULL

statement error cannot drop view v: still depended upon by materialized view mv
DROP VIEW v

statement ok
DROP VIEW v CASCADE

query I
SELECT count(*) FROM mz_materialized_views WHERE name = 'mv'
----
0

# mz_scheduling_elapsed_raw, a log source, is optimized away, but should still count as a dependency
query error db error: ERROR: materialized view objects cannot depend on log sources
CREATE MATERIALIZED VIEW mv AS SELECT (SELECT 1 FROM mz_internal.mz_scheduling_elapsed_raw WHERE FALSE);

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_table_keys = true
----
COMPLETE 0

statement ok
CREATE TABLE t1 (f1 INTEGER NOT NULL PRIMARY KEY);

statement ok
CREATE TABLE t2 (f1 INTEGER NOT NULL PRIMARY KEY);

# Folds to Constant, t1 is optimized away but must still be counted as a dependency
statement ok
CREATE MATERIALIZED VIEW mv AS SELECT * FROM t1 WHERE FALSE;

statement error db error: ERROR: cannot drop table t1: still depended upon by materialized view mv
DROP TABLE t1

statement ok
DROP MATERIALIZED VIEW mv

# In the cases below, t2 is optimized away but should still be present as a dependency
statement ok
CREATE MATERIALIZED VIEW mv AS SELECT t1.* FROM t1 LEFT JOIN t2 ON (t1.f1 = t2.f1);

statement error db error: ERROR: cannot drop table t2: still depended upon by materialized view mv
DROP TABLE t2

statement ok
DROP MATERIALIZED VIEW mv

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT * FROM t1 WHERE FALSE AND EXISTS (SELECT * FROM t2);

statement error db error: ERROR: cannot drop table t2: still depended upon by materialized view mv
DROP TABLE t2

statement ok
DROP MATERIALIZED VIEW mv

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT * FROM t1 WHERE TRUE OR EXISTS (SELECT * FROM t2);

statement error db error: ERROR: cannot drop table t2: still depended upon by materialized view mv
DROP TABLE t2

statement ok
DROP MATERIALIZED VIEW mv

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT (SELECT f1 FROM t2 WHERE FALSE) FROM t1;

statement error db error: ERROR: cannot drop table t2: still depended upon by materialized view mv
DROP TABLE t2

statement ok
DROP MATERIALIZED VIEW mv

# No need to evaluate second argument of COALESCE if first is non-null
statement ok
CREATE MATERIALIZED VIEW mv AS SELECT COALESCE(1, (SELECT * FROM t2 LIMIT 1)) FROM t1;

statement error db error: ERROR: cannot drop table t2: still depended upon by materialized view mv
DROP TABLE t2

statement ok
DROP MATERIALIZED VIEW mv

statement ok
CREATE TYPE int4_list AS LIST (ELEMENT TYPE = int4);

# Mention of int4_list is optimized away
statement ok
CREATE MATERIALIZED VIEW mv AS SELECT * FROM t1 WHERE NULL::int4_list IS NOT NULL;

statement error db error: ERROR: cannot drop type int4_list: still depended upon by materialized view mv
DROP TYPE int4_list

statement ok
DROP MATERIALIZED VIEW mv

statement ok
DROP TYPE int4_list

statement ok
DROP TABLE t1

statement ok
DROP TABLE t2


# Test: Materialized view prevents dropping its cluster.

statement ok
CREATE CLUSTER to_drop REPLICAS ()

statement ok
CREATE MATERIALIZED VIEW to_drop_mv IN CLUSTER to_drop AS SELECT 1

statement error cannot drop cluster with active objects
DROP CLUSTER to_drop


# Test: Cluster with dependent materialized view can be dropped with CASCADE.

statement ok
DROP CLUSTER to_drop CASCADE

query error unknown catalog item 'to_drop_mv'
SELECT * FROM to_drop_mv


# Test: SHOW CREATE MATERIALIZED VIEW

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1

query TT colnames
SHOW CREATE MATERIALIZED VIEW mv
----
name                  create_sql
materialize.public.mv CREATE␠MATERIALIZED␠VIEW␠"materialize"."public"."mv"␠IN␠CLUSTER␠"default"␠AS␠SELECT␠1

# Test: SHOW CREATE MATERIALIZED VIEW as mz_introspection

simple conn=mz_introspection,user=mz_introspection
SHOW CREATE MATERIALIZED VIEW mv
----
materialize.public.mv,CREATE MATERIALIZED VIEW "materialize"."public"."mv" IN CLUSTER "default" AS SELECT 1
COMPLETE 1

# Test: SHOW MATERIALIZED VIEWS

statement ok
CREATE MATERIALIZED VIEW other_mv IN CLUSTER other AS SELECT 1

query TT colnames,rowsort
SHOW MATERIALIZED VIEWS
----
name      cluster
mv        default
other_mv  other

query TT colnames,rowsort
SHOW MATERIALIZED VIEWS IN CLUSTER other
----
name      cluster
other_mv  other

statement ok
DROP MATERIALIZED VIEW other_mv


# Test: Materialized view can be renamed.

statement ok
ALTER MATERIALIZED VIEW mv RENAME TO mv2

query I
SELECT * FROM mv2
----
1

statement ok
DROP MATERIALIZED VIEW mv2


# Test: Materialized views show up in mz_materialized_views.

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1

query TT colnames
SELECT name, definition FROM mz_materialized_views
----
name definition
mv   SELECT␠1;

statement ok
DROP MATERIALIZED VIEW mv

query I
SELECT count(*) FROM mz_materialized_views
----
0


# Test: Materialized views show in `SHOW OBJECTS`.

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1

mode standard

query TT colnames,rowsort
SHOW OBJECTS
----
name type
mv
materialized-view
t
table

mode cockroach

# Test: Indexes on materialized views show in `SHOW INDEXES`.

statement ok
CREATE DEFAULT INDEX ON mv

query TTTT colnames
SHOW INDEXES ON mv
----
name            on  cluster key
mv_primary_idx  mv  default {?column?}


# Test: Creating materialized views that depend on log sources is forbidden.

statement error materialized view objects cannot depend on log sources
CREATE OR REPLACE MATERIALIZED VIEW mv AS SELECT id, name FROM mz_internal.mz_dataflow_operators;


# Test: Attempting to use view commands on materialized views gives helpful errors.

statement error materialize\.public\.mv is not a view\nHINT: Use DROP MATERIALIZED VIEW to remove a materialized view\.
DROP VIEW mv

statement error materialize\.public\.mv is not a view\nHINT: Use SHOW CREATE MATERIALIZED VIEW to show a materialized view\.
SHOW CREATE VIEW mv

statement error materialize\.public\.mv is not a view\nHINT: Use ALTER MATERIALIZED VIEW to rename a materialized view\.
ALTER VIEW mv RENAME TO mv2

statement error materialize\.public\.mv is not a view\nHINT: Use EXPLAIN \[\.\.\.\] MATERIALIZED VIEW to explain a materialized view\.
EXPLAIN WITH(arity, join_impls) VIEW mv

# We should not be able to create materialized views on top of 'SHOW' commands.

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_clusters AS SELECT name FROM (SHOW CLUSTERS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_cluster_replicas AS SELECT cluster, replica, size, ready FROM (SHOW CLUSTER REPLICAS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_columns AS SELECT name, nullable, type FROM (SHOW COLUMNS FROM mz_tables);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_connections AS SELECT name, type FROM (SHOW CONNECTIONS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_databases AS SELECT name FROM (SHOW DATABASES);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_indexes AS SELECT name, on, cluster, key FROM (SHOW INDEXES);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_mat_views AS SELECT name, cluster FROM (SHOW MATERIALIZED VIEWS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_objects AS SELECT name FROM (SHOW OBJECTS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_schemas AS SELECT name FROM (SHOW SCHEMAS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_secrets AS SELECT name FROM (SHOW SECRETS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_sinks AS SELECT name, type, size FROM (SHOW SINKS);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_sources AS SELECT name, type, size FROM (SHOW SOURCES);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_tables AS SELECT name FROM (SHOW TABLES);

statement error SHOW commands are not allowed in views
CREATE MATERIALIZED VIEW mat_views AS SELECT name FROM (SHOW VIEWS);

# Cleanup

statement ok
DROP TABLE t CASCADE

statement ok
DROP CLUSTER other CASCADE
