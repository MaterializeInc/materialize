# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE int_table (col_null INTEGER, col_not_null INTEGER NOT NULL);

statement ok
CREATE TABLE bool_table (col_null BOOLEAN, col_not_null BOOLEAN NOT NULL);

statement ok
CREATE TABLE str_table (col_null STRING, col_not_null STRING NOT NULL);

statement ok
CREATE TABLE ts_table (col_null TIMESTAMP, col_not_null TIMESTAMP NOT NULL);


#
# Constants are NOT NULL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1;
----
Explained Query:
  Constant // { types: "(integer)" }
    - (1)

EOF

# NULL literal is NULL-able

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT NULL;
----
Explained Query:
  Constant // { types: "(text?)" }
    - (null)

EOF

#
# VALUES
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT * FROM (VALUES(1), (2));
----
Explained Query:
  Constant // { types: "(integer)" }
    - (1)
    - (2)

EOF


query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT * FROM (VALUES(1), (NULL));
----
Explained Query:
  Constant // { types: "(integer?)" }
    - (null)
    - (1)

EOF


#
# CAST propagates NOT NULL property
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT CAST(col_null AS BIGINT), CAST(col_not_null AS BIGINT) FROM int_table;
----
Explained Query:
  Project (#2, #3) // { types: "(bigint?, bigint)" }
    Map (integer_to_bigint(#0), integer_to_bigint(#1)) // { types: "(integer?, integer, bigint?, bigint)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# IS NULL and friends
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null IS NULL, col_null IS NOT NULL FROM int_table;
----
Explained Query:
  Project (#2, #3) // { types: "(boolean, boolean)" }
    Map ((#0) IS NULL, NOT(#2)) // { types: "(integer?, integer, boolean, boolean)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#0, #2)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null IS TRUE, col_null IS NOT TRUE FROM bool_table;
----
Explained Query:
  Project (#2, #3) // { types: "(boolean, boolean)" }
    Map ((#0) IS TRUE, NOT(#2)) // { types: "(boolean?, boolean, boolean, boolean)" }
      Get materialize.public.bool_table // { types: "(boolean?, boolean)" }

Source materialize.public.bool_table
  project=(#0, #2)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null IS UNKNOWN, col_null IS NOT UNKNOWN FROM bool_table;
----
Explained Query:
  Project (#2, #3) // { types: "(boolean, boolean)" }
    Map ((#0) IS NULL, NOT(#2)) // { types: "(boolean?, boolean, boolean, boolean)" }
      Get materialize.public.bool_table // { types: "(boolean?, boolean)" }

Source materialize.public.bool_table
  project=(#0, #2)
  map=(dummy)

EOF

#
# Try some other operators
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null + col_not_null , col_not_null + 1 , col_not_null % col_not_null , col_not_null % 2 FROM int_table;
----
Explained Query:
  Project (#2..=#5) // { types: "(integer, integer, integer, integer)" }
    Map ((#1 + #1), (#1 + 1), (#1 % #1), (#1 % 2)) // { types: "(integer?, integer, integer, integer, integer, integer)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF


#
# GREATEST / LEAST / COALESCE are NOT NULL if at leat one of their arguments is NOT NULL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT GREATEST(col_not_null), GREATEST(col_not_null, col_not_null), GREATEST(col_not_null, col_null), GREATEST(col_null, col_null) FROM int_table;
----
Explained Query:
  Project (#2..=#5) // { types: "(integer, integer, integer?, integer?)" }
    Map (greatest(#1), greatest(#1, #1), greatest(#1, #0), greatest(#0, #0)) // { types: "(integer?, integer, integer, integer, integer?, integer?)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT LEAST(col_not_null), LEAST(col_not_null, col_not_null), LEAST(col_not_null, col_null), LEAST(col_null, col_null) FROM int_table;
----
Explained Query:
  Project (#2..=#5) // { types: "(integer, integer, integer?, integer?)" }
    Map (least(#1), least(#1, #1), least(#1, #0), least(#0, #0)) // { types: "(integer?, integer, integer, integer, integer?, integer?)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT COALESCE(col_not_null), COALESCE(col_not_null, col_not_null), COALESCE(col_not_null, col_null), COALESCE(col_null, col_null) FROM int_table;
----
Explained Query:
  Project (#1, #1, #1, #0) // { types: "(integer, integer, integer, integer?)" }
    Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# NULLIF is NOT NULL if first argument is NOT NULL, second argument is NULL, NULL-able otherwise
#


query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT NULLIF(col_not_null, 'a') , NULLIF(col_not_null, NULL), NULLIF(col_null, NULL) , NULLIF(col_null, col_not_null) FROM int_table;
----
Explained Query:
  Project (#3, #1, #0, #2) // { types: "(integer?, integer, integer?, integer?)" }
    Map (error("invalid input syntax for type integer: invalid digit found in string: \"a\"")) // { types: "(integer?, integer, integer?, integer?)" }
      Map (case when (#0 = #1) then null else #0 end) // { types: "(integer?, integer, integer?)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# Equality, logical operators
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null = 1 FROM int_table;
----
Explained Query:
  Project (#2) // { types: "(boolean)" }
    Map ((#1 = 1)) // { types: "(integer?, integer, boolean)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null AND col_not_null , col_not_null OR col_not_null FROM bool_table;
----
Explained Query:
  Project (#1, #1) // { types: "(boolean, boolean)" }
    Get materialize.public.bool_table // { types: "(boolean?, boolean)" }

Source materialize.public.bool_table
  project=(#2, #1)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null AND col_not_null , col_null OR col_not_null FROM bool_table;
----
Explained Query:
  Project (#2, #3) // { types: "(boolean?, boolean?)" }
    Map ((#0 AND #1), (#0 OR #1)) // { types: "(boolean?, boolean, boolean?, boolean?)" }
      Get materialize.public.bool_table // { types: "(boolean?, boolean)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT NOT col_null , NOT col_not_null FROM bool_table;
----
Explained Query:
  Project (#2, #3) // { types: "(boolean?, boolean)" }
    Map (NOT(#0), NOT(#1)) // { types: "(boolean?, boolean, boolean?, boolean)" }
      Get materialize.public.bool_table // { types: "(boolean?, boolean)" }

EOF

#
# Meth, that is, math
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT ABS(col_not_null), LOG(col_not_null), ROUND(col_not_null), COS(col_not_null), col_not_null << col_not_null FROM int_table;
----
Explained Query:
  Project (#2, #4..=#7) // { types: "(integer, double precision, double precision, double precision, integer)" }
    Map (abs(#1), integer_to_double(#1), log10f64(#3), roundf64(#3), cos(#3), (#1 << #1)) // { types: "(integer?, integer, integer, double precision, double precision, double precision, double precision, integer)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# MIN/MAX/AVG/.. can be NULL even on a NOT NULL column
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT MIN(col_not_null), MAX(col_not_null), AVG(col_not_null), STDDEV(col_not_null), LIST_AGG(col_not_null) FROM int_table;
----
Explained Query:
  Return // { types: "(integer?, integer?, double precision?, numeric?, integer list?)" }
    Project (#0, #1, #8, #9, #7) // { types: "(integer?, integer?, double precision?, numeric?, integer list?)" }
      Map ((bigint_to_double(#2) / bigint_to_double(case when (#3 = 0) then null else #3 end)), sqrtnumeric(((#4 - ((#5 * #5) / bigint_to_numeric(case when (#6 = 0) then null else #6 end))) / bigint_to_numeric(case when (0 = (#6 - 1)) then null else (#6 - 1) end)))) // { types: "(integer?, integer?, bigint?, bigint, numeric?, numeric?, bigint, integer list?, double precision?, numeric?)" }
        Union // { types: "(integer?, integer?, bigint?, bigint, numeric?, numeric?, bigint, integer list?)" }
          Get l0 // { types: "(integer, integer, bigint, bigint, numeric, numeric, bigint, integer list)" }
          Map (null, null, null, 0, null, null, 0, null) // { types: "(integer?, integer?, bigint?, bigint, numeric?, numeric?, bigint, integer list?)" }
            Union // { types: "()" }
              Negate // { types: "()" }
                Project () // { types: "()" }
                  Get l0 // { types: "(integer, integer, bigint, bigint, numeric, numeric, bigint, integer list)" }
              Constant // { types: "()" }
                - ()
  With
    cte l0 =
      Reduce aggregates=[min(#0), max(#0), sum(#0), count(true), sum((integer_to_numeric(#0) * integer_to_numeric(#0))), sum(integer_to_numeric(#0)), count(integer_to_numeric(#0)), list_agg(row(list[#0]))] // { types: "(integer, integer, bigint, bigint, numeric, numeric, bigint, integer list)" }
        Project (#1) // { types: "(integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# COUNT preserves NOT NULL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT COUNT(col_not_null), COUNT(DISTINCT col_not_null) FROM int_table;
----
Explained Query:
  Return // { types: "(bigint, bigint)" }
    Union // { types: "(bigint, bigint)" }
      Get l0 // { types: "(bigint, bigint)" }
      Map (0, 0) // { types: "(bigint, bigint)" }
        Union // { types: "()" }
          Negate // { types: "()" }
            Project () // { types: "()" }
              Get l0 // { types: "(bigint, bigint)" }
          Constant // { types: "()" }
            - ()
  With
    cte l0 =
      Reduce aggregates=[count(true), count(distinct #0)] // { types: "(bigint, bigint)" }
        Project (#1) // { types: "(integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# LIKE
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null LIKE col_not_null, col_null LIKE col_not_null, col_not_null LIKE col_null FROM str_table;
----
Explained Query:
  Project (#2..=#4) // { types: "(boolean?, boolean?, boolean?)" }
    Map ((#1 like #1), (#0 like #1), (#1 like #0)) // { types: "(text?, text, boolean?, boolean?, boolean?)" }
      Get materialize.public.str_table // { types: "(text?, text)" }

EOF

#
# REGEXP returns NULL on no match, so can not be NOT NULL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT REGEXP_MATCH(col_not_null, 'aaa'), REGEXP_MATCH('aaa', col_not_null) FROM str_table;
----
Explained Query:
  Project (#2, #3) // { types: "(text[]?, text[]?)" }
    Map (regexp_match[aaa](#1), regexp_match("aaa", #1)) // { types: "(text?, text, text[]?, text[]?)" }
      Get materialize.public.str_table // { types: "(text?, text)" }

Source materialize.public.str_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# SPLIT_PART on the other hand returns an empty string, so can be NOT NULL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT SPLIT_PART(col_not_null, 'a', 100), SPLIT_PART('a', col_not_null, 100), SPLIT_PART('a', 'a', col_not_null::int) FROM str_table;
----
Explained Query:
  Project (#2..=#4) // { types: "(text, text, text)" }
    Map (split_string(#1, "a", 100), split_string("a", #1, 100), split_string("a", "a", integer_to_bigint(text_to_integer(#1)))) // { types: "(text?, text, text, text, text)" }
      Get materialize.public.str_table // { types: "(text?, text)" }

Source materialize.public.str_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# IN , NOT IN
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null IN (1), 1 IN (col_not_null), 1 IN (1, col_null) , 1 IN (NULL), NULL IN (1), NULL IN (col_not_null) FROM int_table;
----
Explained Query:
  Project (#2, #2..=#6) // { types: "(boolean, boolean, boolean, boolean?, boolean?, boolean?)" }
    Map ((#1 = 1), true, null, null, null) // { types: "(integer?, integer, boolean, boolean, boolean?, boolean?, boolean?)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null NOT IN (1), 1 not IN (col_not_null), 1 NOT IN (1, col_null) , 1 NOT IN (NULL), NULL NOT IN (1), NULL NOT IN (col_not_null) FROM int_table;
----
Explained Query:
  Project (#2, #2..=#6) // { types: "(boolean, boolean, boolean, boolean?, boolean?, boolean?)" }
    Map ((#1 != 1), false, null, null, null) // { types: "(integer?, integer, boolean, boolean, boolean?, boolean?, boolean?)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# SOME, ANY, ALL
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 = SOME (VALUES(col_null)), 1 = SOME (VALUES(col_not_null)), col_null = SOME (VALUES(NULL::int)), col_not_null = SOME (VALUES(NULL::int)) , col_null = SOME (VALUES(col_not_null)) , col_not_null = SOME (VALUES(col_null)) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
    Project (#3, #6, #10, #11, #9, #9) // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
      Map (null, null) // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?, boolean?, boolean?)" }
        Join on=(eq(#0, #2, #4, #7) AND eq(#1, #5, #8)) type=differential // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0]] // { types: "(integer?, boolean?)" }
            Union // { types: "(integer?, boolean?)" }
              Get l1 // { types: "(integer?, boolean?)" }
              Map (null) // { types: "(integer?, boolean?)" }
                Union // { types: "(integer?)" }
                  Negate // { types: "(integer?)" }
                    Project (#0) // { types: "(integer?)" }
                      Get l1 // { types: "(integer?, boolean?)" }
                  Get l0 // { types: "(integer?)" }
          Union // { types: "(integer?, integer, boolean)" }
            Project (#0, #2, #3) // { types: "(integer?, integer, boolean)" }
              Filter (#1 = 1) // { types: "(integer?, integer, integer, boolean)" }
                Map (1, true) // { types: "(integer?, integer, integer, boolean)" }
                  Get l2 // { types: "(integer?, integer)" }
            Map (false) // { types: "(integer?, integer, boolean)" }
              Union // { types: "(integer?, integer)" }
                Map (1) // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?)" }
                    Project (#0) // { types: "(integer?)" }
                      Filter (#1 = 1) // { types: "(integer?, integer)" }
                        Get l2 // { types: "(integer?, integer)" }
                Get l2 // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean?)" }
            Union // { types: "(integer?, integer, boolean?)" }
              Get l3 // { types: "(integer?, integer, boolean?)" }
              Map (null) // { types: "(integer?, integer, boolean?)" }
                Union // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l3 // { types: "(integer?, integer, boolean?)" }
                  Get l2 // { types: "(integer?, integer)" }
  With
    cte l3 =
      Union // { types: "(integer?, integer, boolean?)" }
        Map ((#0 = #1)) // { types: "(integer?, integer, boolean?)" }
          Get l2 // { types: "(integer?, integer)" }
        Map (false) // { types: "(integer?, integer, boolean)" }
          Union // { types: "(integer?, integer)" }
            Negate // { types: "(integer?, integer)" }
              Get l2 // { types: "(integer?, integer)" }
            Get l2 // { types: "(integer?, integer)" }
    cte l2 =
      Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l1 =
      Union // { types: "(integer?, boolean?)" }
        Map ((#0 = 1)) // { types: "(integer?, boolean?)" }
          Get l0 // { types: "(integer?)" }
        Map (false) // { types: "(integer?, boolean)" }
          Union // { types: "(integer?)" }
            Negate // { types: "(integer?)" }
              Get l0 // { types: "(integer?)" }
            Get l0 // { types: "(integer?)" }
    cte l0 =
      Distinct group_by=[#0] // { types: "(integer?)" }
        Project (#0) // { types: "(integer?)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF


query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 > ANY (VALUES(col_null)), 1 > ANY (VALUES(col_not_null)), col_null > ANY (VALUES(NULL::int)), col_not_null > ANY (VALUES(NULL::int)) , col_null > ANY (VALUES(col_not_null)) , col_not_null > ANY (VALUES(col_null)) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
    Project (#3, #6, #13, #14, #9, #12) // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
      Map (null, null) // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?, integer?, integer, boolean?, boolean?, boolean?)" }
        Join on=(eq(#0, #2, #4, #7, #10) AND eq(#1, #5, #8, #11)) type=differential // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?, integer?, integer, boolean?)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0]] // { types: "(integer?, boolean?)" }
            Union // { types: "(integer?, boolean?)" }
              Get l1 // { types: "(integer?, boolean?)" }
              Map (null) // { types: "(integer?, boolean?)" }
                Union // { types: "(integer?)" }
                  Negate // { types: "(integer?)" }
                    Project (#0) // { types: "(integer?)" }
                      Get l1 // { types: "(integer?, boolean?)" }
                  Get l0 // { types: "(integer?)" }
          Union // { types: "(integer?, integer, boolean)" }
            Filter (1 > #1) // { types: "(integer?, integer, boolean)" }
              Map (true) // { types: "(integer?, integer, boolean)" }
                Get l2 // { types: "(integer?, integer)" }
            Map (false) // { types: "(integer?, integer, boolean)" }
              Union // { types: "(integer?, integer)" }
                Negate // { types: "(integer?, integer)" }
                  Filter (1 > #1) // { types: "(integer?, integer)" }
                    Get l2 // { types: "(integer?, integer)" }
                Get l2 // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean?)" }
            Union // { types: "(integer?, integer, boolean?)" }
              Get l4 // { types: "(integer?, integer, boolean?)" }
              Map (null) // { types: "(integer?, integer, boolean?)" }
                Union // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l4 // { types: "(integer?, integer, boolean?)" }
                  Get l2 // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean?)" }
            Union // { types: "(integer?, integer, boolean?)" }
              Get l5 // { types: "(integer?, integer, boolean?)" }
              Map (null) // { types: "(integer?, integer, boolean?)" }
                Union // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l5 // { types: "(integer?, integer, boolean?)" }
                  Get l2 // { types: "(integer?, integer)" }
  With
    cte l5 =
      Union // { types: "(integer?, integer, boolean?)" }
        Map ((#1 > #0)) // { types: "(integer?, integer, boolean?)" }
          Get l2 // { types: "(integer?, integer)" }
        Get l3 // { types: "(integer?, integer, boolean)" }
    cte l4 =
      Union // { types: "(integer?, integer, boolean?)" }
        Map ((#0 > #1)) // { types: "(integer?, integer, boolean?)" }
          Get l2 // { types: "(integer?, integer)" }
        Get l3 // { types: "(integer?, integer, boolean)" }
    cte l3 =
      Map (false) // { types: "(integer?, integer, boolean)" }
        Union // { types: "(integer?, integer)" }
          Negate // { types: "(integer?, integer)" }
            Get l2 // { types: "(integer?, integer)" }
          Get l2 // { types: "(integer?, integer)" }
    cte l2 =
      Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l1 =
      Union // { types: "(integer?, boolean?)" }
        Map ((1 > #0)) // { types: "(integer?, boolean?)" }
          Get l0 // { types: "(integer?)" }
        Map (false) // { types: "(integer?, boolean)" }
          Union // { types: "(integer?)" }
            Negate // { types: "(integer?)" }
              Get l0 // { types: "(integer?)" }
            Get l0 // { types: "(integer?)" }
    cte l0 =
      Distinct group_by=[#0] // { types: "(integer?)" }
        Project (#0) // { types: "(integer?)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 < ALL (VALUES(col_null)), 1 < ALL (VALUES(col_not_null)), col_null < ALL (VALUES(NULL::int)), col_not_null < ALL (VALUES(NULL::int)) , col_null < ALL (VALUES(col_not_null)) , col_not_null < ALL (VALUES(col_null)) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
    Project (#3, #13..=#15, #9, #12) // { types: "(boolean?, boolean, boolean?, boolean?, boolean?, boolean?)" }
      Map (NOT(#6), null, null) // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?, integer?, integer, boolean?, boolean, boolean?, boolean?)" }
        Join on=(eq(#0, #2, #4, #7, #10) AND eq(#1, #5, #8, #11)) type=differential // { types: "(integer?, integer, integer?, boolean?, integer?, integer, boolean, integer?, integer, boolean?, integer?, integer, boolean?)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0]] // { types: "(integer?, boolean?)" }
            Union // { types: "(integer?, boolean?)" }
              Get l1 // { types: "(integer?, boolean?)" }
              Map (null) // { types: "(integer?, boolean?)" }
                Union // { types: "(integer?)" }
                  Negate // { types: "(integer?)" }
                    Project (#0) // { types: "(integer?)" }
                      Get l1 // { types: "(integer?, boolean?)" }
                  Get l0 // { types: "(integer?)" }
          Union // { types: "(integer?, integer, boolean)" }
            Filter (1 >= #1) // { types: "(integer?, integer, boolean)" }
              Map (true) // { types: "(integer?, integer, boolean)" }
                Get l2 // { types: "(integer?, integer)" }
            Map (false) // { types: "(integer?, integer, boolean)" }
              Union // { types: "(integer?, integer)" }
                Negate // { types: "(integer?, integer)" }
                  Filter (1 >= #1) // { types: "(integer?, integer)" }
                    Get l2 // { types: "(integer?, integer)" }
                Get l2 // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean?)" }
            Union // { types: "(integer?, integer, boolean?)" }
              Get l4 // { types: "(integer?, integer, boolean?)" }
              Map (null) // { types: "(integer?, integer, boolean?)" }
                Union // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l4 // { types: "(integer?, integer, boolean?)" }
                  Get l2 // { types: "(integer?, integer)" }
          ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean?)" }
            Union // { types: "(integer?, integer, boolean?)" }
              Get l5 // { types: "(integer?, integer, boolean?)" }
              Map (null) // { types: "(integer?, integer, boolean?)" }
                Union // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l5 // { types: "(integer?, integer, boolean?)" }
                  Get l2 // { types: "(integer?, integer)" }
  With
    cte l5 =
      Union // { types: "(integer?, integer, boolean?)" }
        Map ((#1 < #0)) // { types: "(integer?, integer, boolean?)" }
          Get l2 // { types: "(integer?, integer)" }
        Get l3 // { types: "(integer?, integer, boolean)" }
    cte l4 =
      Union // { types: "(integer?, integer, boolean?)" }
        Map ((#0 < #1)) // { types: "(integer?, integer, boolean?)" }
          Get l2 // { types: "(integer?, integer)" }
        Get l3 // { types: "(integer?, integer, boolean)" }
    cte l3 =
      Map (true) // { types: "(integer?, integer, boolean)" }
        Union // { types: "(integer?, integer)" }
          Negate // { types: "(integer?, integer)" }
            Get l2 // { types: "(integer?, integer)" }
          Get l2 // { types: "(integer?, integer)" }
    cte l2 =
      Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l1 =
      Union // { types: "(integer?, boolean?)" }
        Map ((1 < #0)) // { types: "(integer?, boolean?)" }
          Get l0 // { types: "(integer?)" }
        Map (true) // { types: "(integer?, boolean)" }
          Union // { types: "(integer?)" }
            Negate // { types: "(integer?)" }
              Get l0 // { types: "(integer?)" }
            Get l0 // { types: "(integer?)" }
    cte l0 =
      Distinct group_by=[#0] // { types: "(integer?)" }
        Project (#0) // { types: "(integer?)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 = SOME(VALUES(1), (NULL::int)), 1 = ALL (VALUES(1), (NULL::int)) , 1 = ANY (VALUES(1), (NULL::int));
----
Explained Query:
  Constant // { types: "(boolean, boolean?, boolean)" }
    - (true, null, true)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 = SOME(VALUES(NULL::int), (1)), 1 = ALL (VALUES(NULL::int), (1)) , 1 = ANY (VALUES(NULL::int), (1));
----
Explained Query:
  Constant // { types: "(boolean, boolean?, boolean)" }
    - (true, null, true)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 = SOME(VALUES(col_not_null), (NULL::int)), 1 = ALL (VALUES(col_not_null), (NULL::int)) , 1 = ANY (VALUES(col_not_null), (NULL::int)) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean?, boolean?, boolean?)" }
    Project (#2, #4, #2) // { types: "(boolean?, boolean?, boolean?)" }
      Join on=(eq(#0, #1, #3)) type=differential // { types: "(integer, integer, boolean?, integer, boolean?)" }
        Get l0 // { types: "(integer)" }
        ArrangeBy keys=[[#0]] // { types: "(integer, boolean?)" }
          Union // { types: "(integer, boolean?)" }
            Get l4 // { types: "(integer, boolean?)" }
            Map (null) // { types: "(integer, boolean?)" }
              Union // { types: "(integer)" }
                Negate // { types: "(integer)" }
                  Project (#0) // { types: "(integer)" }
                    Get l4 // { types: "(integer, boolean?)" }
                Get l1 // { types: "(integer)" }
        ArrangeBy keys=[[#0]] // { types: "(integer, boolean?)" }
          Union // { types: "(integer, boolean?)" }
            Get l6 // { types: "(integer, boolean?)" }
            Map (null) // { types: "(integer, boolean?)" }
              Union // { types: "(integer)" }
                Negate // { types: "(integer)" }
                  Project (#0) // { types: "(integer)" }
                    Get l6 // { types: "(integer, boolean?)" }
                Get l1 // { types: "(integer)" }
  With
    cte l6 =
      Union // { types: "(integer, boolean?)" }
        Get l5 // { types: "(integer, boolean?)" }
        Map (true) // { types: "(integer, boolean)" }
          Union // { types: "(integer)" }
            Negate // { types: "(integer)" }
              Project (#0) // { types: "(integer)" }
                Get l5 // { types: "(integer, boolean?)" }
            Get l1 // { types: "(integer)" }
    cte l5 =
      Reduce group_by=[#0] aggregates=[all((#1 = 1))] // { types: "(integer, boolean?)" }
        Get l2 // { types: "(integer, integer?)" }
    cte l4 =
      Union // { types: "(integer, boolean?)" }
        Get l3 // { types: "(integer, boolean?)" }
        Map (false) // { types: "(integer, boolean)" }
          Union // { types: "(integer)" }
            Negate // { types: "(integer)" }
              Project (#0) // { types: "(integer)" }
                Get l3 // { types: "(integer, boolean?)" }
            Get l1 // { types: "(integer)" }
    cte l3 =
      Reduce group_by=[#0] aggregates=[any((#1 = 1))] // { types: "(integer, boolean?)" }
        Get l2 // { types: "(integer, integer?)" }
    cte l2 =
      FlatMap wrap1(#0, null) // { types: "(integer, integer?)" }
        Get l1 // { types: "(integer)" }
    cte l1 =
      Distinct group_by=[#0] // { types: "(integer)" }
        Get l0 // { types: "(integer)" }
    cte l0 =
      Project (#1) // { types: "(integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# Scalar subqueries can return NULL on no rows returned by the subquery
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT (SELECT col_not_null FROM int_table) FROM int_table;
----
Explained Query:
  Return // { types: "(integer?)" }
    CrossJoin type=differential // { types: "(integer?)" }
      ArrangeBy keys=[[]] // { types: "()" }
        Get l0 // { types: "()" }
      Union // { types: "(integer?)" }
        Get l1 // { types: "(integer)" }
        Map (null) // { types: "(integer?)" }
          Union // { types: "()" }
            Negate // { types: "()" }
              Distinct // { types: "()" }
                Project () // { types: "()" }
                  Get l1 // { types: "(integer)" }
            Constant // { types: "()" }
              - ()
  With
    cte l1 =
      Union // { types: "(integer)" }
        Project (#1) // { types: "(integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }
        Map (error("more than one record produced in subquery")) // { types: "(integer)" }
          Project () // { types: "()" }
            Filter (#0 > 1) // { types: "(bigint)" }
              Reduce aggregates=[count(true)] // { types: "(bigint)" }
                Get l0 // { types: "()" }
    cte l0 =
      Project () // { types: "()" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# IN/EXISTS
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 IN (SELECT col_not_null FROM int_table), 1 NOT IN (SELECT col_not_null FROM int_table) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean, boolean)" }
    Map (NOT(#0)) // { types: "(boolean, boolean)" }
      CrossJoin type=differential // { types: "(boolean)" }
        ArrangeBy keys=[[]] // { types: "()" }
          Project () // { types: "()" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
        Union // { types: "(boolean)" }
          Map (true) // { types: "(boolean)" }
            Get l0 // { types: "()" }
          Map (false) // { types: "(boolean)" }
            Union // { types: "()" }
              Negate // { types: "()" }
                Get l0 // { types: "()" }
              Constant // { types: "()" }
                - ()
  With
    cte l0 =
      Distinct // { types: "()" }
        Project () // { types: "()" }
          Filter (#1 = 1) // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT EXISTS (SELECT col_not_null FROM int_table), NOT EXISTS (SELECT col_not_null FROM int_table) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean, boolean)" }
    Map (NOT(#0)) // { types: "(boolean, boolean)" }
      CrossJoin type=differential // { types: "(boolean)" }
        ArrangeBy keys=[[]] // { types: "()" }
          Get l0 // { types: "()" }
        Union // { types: "(boolean)" }
          Map (true) // { types: "(boolean)" }
            Get l1 // { types: "()" }
          Map (false) // { types: "(boolean)" }
            Union // { types: "()" }
              Negate // { types: "()" }
                Get l1 // { types: "()" }
              Constant // { types: "()" }
                - ()
  With
    cte l1 =
      Distinct // { types: "()" }
        Get l0 // { types: "()" }
    cte l0 =
      Project () // { types: "()" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #3)
  map=(dummy, dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT 1 = SOME (SELECT col_not_null FROM int_table), col_not_null = SOME (SELECT 1), col_null = SOME ( SELECT col_not_null FROM int_table ) FROM int_table;
----
Explained Query:
  Return // { types: "(boolean, boolean, boolean?)" }
    Project (#2, #5, #7) // { types: "(boolean, boolean, boolean?)" }
      Join on=(eq(#0, #3, #6) AND #1 = #4) type=differential // { types: "(integer?, integer, boolean, integer?, integer, boolean, integer?, boolean?)" }
        ArrangeBy keys=[[]] // { types: "(integer?, integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }
        Union // { types: "(boolean)" }
          Map (true) // { types: "(boolean)" }
            Get l0 // { types: "()" }
          Map (false) // { types: "(boolean)" }
            Union // { types: "()" }
              Negate // { types: "()" }
                Get l0 // { types: "()" }
              Constant // { types: "()" }
                - ()
        ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer, boolean)" }
          Union // { types: "(integer?, integer, boolean)" }
            Project (#0, #2, #3) // { types: "(integer?, integer, boolean)" }
              Filter (#1 = 1) // { types: "(integer?, integer, integer, boolean)" }
                Map (1, true) // { types: "(integer?, integer, integer, boolean)" }
                  Get l1 // { types: "(integer?, integer)" }
            Map (false) // { types: "(integer?, integer, boolean)" }
              Union // { types: "(integer?, integer)" }
                Map (1) // { types: "(integer?, integer)" }
                  Negate // { types: "(integer?)" }
                    Project (#0) // { types: "(integer?)" }
                      Filter (#1 = 1) // { types: "(integer?, integer)" }
                        Get l1 // { types: "(integer?, integer)" }
                Get l1 // { types: "(integer?, integer)" }
        ArrangeBy keys=[[#0]] // { types: "(integer?, boolean?)" }
          Union // { types: "(integer?, boolean?)" }
            Get l4 // { types: "(integer?, boolean?)" }
            Map (null) // { types: "(integer?, boolean?)" }
              Union // { types: "(integer?)" }
                Negate // { types: "(integer?)" }
                  Project (#0) // { types: "(integer?)" }
                    Get l4 // { types: "(integer?, boolean?)" }
                Get l2 // { types: "(integer?)" }
  With
    cte l4 =
      Union // { types: "(integer?, boolean?)" }
        Get l3 // { types: "(integer?, boolean?)" }
        Map (false) // { types: "(integer?, boolean)" }
          Union // { types: "(integer?)" }
            Negate // { types: "(integer?)" }
              Project (#0) // { types: "(integer?)" }
                Get l3 // { types: "(integer?, boolean?)" }
            Get l2 // { types: "(integer?)" }
    cte l3 =
      Reduce group_by=[#0] aggregates=[any((#0 = #1))] // { types: "(integer?, boolean?)" }
        CrossJoin type=differential // { types: "(integer?, integer)" }
          ArrangeBy keys=[[]] // { types: "(integer?)" }
            Get l2 // { types: "(integer?)" }
          Project (#1) // { types: "(integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l2 =
      Distinct group_by=[#0] // { types: "(integer?)" }
        Project (#0) // { types: "(integer?)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l1 =
      Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l0 =
      Distinct // { types: "()" }
        Project () // { types: "()" }
          Filter (#1 = 1) // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# DATE / TIME functions
#
query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null - INTERVAL '1 second' , col_not_null - INTERVAL '1 second' FROM ts_table;
----
Explained Query:
  Project (#2, #3) // { types: "(timestamp?, timestamp)" }
    Map ((#0 - 00:00:01), (#1 - 00:00:01)) // { types: "(timestamp?, timestamp, timestamp?, timestamp)" }
      Get materialize.public.ts_table // { types: "(timestamp?, timestamp)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_null - col_not_null, col_not_null - col_null FROM ts_table;
----
Explained Query:
  Project (#2, #3) // { types: "(interval?, interval?)" }
    Map ((#0 - #1), (#1 - #0)) // { types: "(timestamp?, timestamp, interval?, interval?)" }
      Get materialize.public.ts_table // { types: "(timestamp?, timestamp)" }

EOF


#
# INNER JOIN preserves
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT a1.col_not_null, a2.col_not_null FROM int_table AS a1 INNER JOIN int_table AS a2 ON TRUE;
----
Explained Query:
  Return // { types: "(integer, integer)" }
    CrossJoin type=differential // { types: "(integer, integer)" }
      ArrangeBy keys=[[]] // { types: "(integer)" }
        Get l0 // { types: "(integer)" }
      Get l0 // { types: "(integer)" }
  With
    cte l0 =
      Project (#1) // { types: "(integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

#
# OUTER JOIN does not for columns coming from the right side
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT a1.col_not_null, a2.col_not_null FROM int_table AS a1 LEFT JOIN int_table AS a2 ON TRUE;
----
Explained Query:
  Return // { types: "(integer, integer?)" }
    Union // { types: "(integer, integer?)" }
      Project (#1, #2) // { types: "(integer, integer)" }
        Get l0 // { types: "(integer?, integer, integer)" }
      Project (#1, #4) // { types: "(integer, integer?)" }
        Map (null) // { types: "(integer?, integer, integer?, integer, integer?)" }
          Join on=(#0 = #2 AND #1 = #3) type=differential // { types: "(integer?, integer, integer?, integer)" }
            ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
              Union // { types: "(integer?, integer)" }
                Negate // { types: "(integer?, integer)" }
                  Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l0 // { types: "(integer?, integer, integer)" }
                Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
                  Get materialize.public.int_table // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
  With
    cte l0 =
      CrossJoin type=differential // { types: "(integer?, integer, integer)" }
        ArrangeBy keys=[[]] // { types: "(integer?, integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }
        Project (#1) // { types: "(integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT a1.col_not_null, a2.col_not_null FROM int_table AS a1 FULL OUTER JOIN int_table AS a2 ON TRUE;
----
Explained Query:
  Return // { types: "(integer?, integer?)" }
    Union // { types: "(integer?, integer?)" }
      Project (#1, #3) // { types: "(integer, integer)" }
        Get l0 // { types: "(integer?, integer, integer?, integer)" }
      Project (#1, #4) // { types: "(integer, integer?)" }
        Map (null) // { types: "(integer?, integer, integer?, integer, integer?)" }
          Join on=(#0 = #2 AND #1 = #3) type=differential // { types: "(integer?, integer, integer?, integer)" }
            ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
              Union // { types: "(integer?, integer)" }
                Negate // { types: "(integer?, integer)" }
                  Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
                    Project (#0, #1) // { types: "(integer?, integer)" }
                      Get l0 // { types: "(integer?, integer, integer?, integer)" }
                Get l1 // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
      Project (#4, #1) // { types: "(integer?, integer)" }
        Map (null) // { types: "(integer?, integer, integer?, integer, integer?)" }
          Join on=(#0 = #2 AND #1 = #3) type=differential // { types: "(integer?, integer, integer?, integer)" }
            ArrangeBy keys=[[#0, #1]] // { types: "(integer?, integer)" }
              Union // { types: "(integer?, integer)" }
                Negate // { types: "(integer?, integer)" }
                  Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
                    Project (#2, #3) // { types: "(integer?, integer)" }
                      Get l0 // { types: "(integer?, integer, integer?, integer)" }
                Get l1 // { types: "(integer?, integer)" }
            Get materialize.public.int_table // { types: "(integer?, integer)" }
  With
    cte l1 =
      Distinct group_by=[#0, #1] // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }
    cte l0 =
      CrossJoin type=differential // { types: "(integer?, integer, integer?, integer)" }
        ArrangeBy keys=[[]] // { types: "(integer?, integer)" }
          Get materialize.public.int_table // { types: "(integer?, integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# UNION
#


query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null FROM int_table UNION ALL SELECT col_not_null FROM int_table;
----
Explained Query:
  Return // { types: "(integer)" }
    Union // { types: "(integer)" }
      Get l0 // { types: "(integer)" }
      Get l0 // { types: "(integer)" }
  With
    cte l0 =
      Project (#1) // { types: "(integer)" }
        Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT col_not_null FROM int_table UNION ALL SELECT col_null FROM int_table;
----
Explained Query:
  Union // { types: "(integer?)" }
    Project (#1) // { types: "(integer)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }
    Project (#0) // { types: "(integer?)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

EOF

#
# DERIVED TABLES
#

query T multiline
EXPLAIN WITH(types, no_fast_path) SELECT f1 + 1 FROM (SELECT col_not_null + 1 AS f1 FROM int_table);
----
Explained Query:
  Project (#2) // { types: "(integer)" }
    Map (((#1 + 1) + 1)) // { types: "(integer?, integer, integer)" }
      Get materialize.public.int_table // { types: "(integer?, integer)" }

Source materialize.public.int_table
  project=(#2, #1)
  map=(dummy)

EOF
