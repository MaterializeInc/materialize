# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE foo (
    a int,
    b text
)

statement ok
INSERT INTO foo (a, b) VALUES (0, 'zero'), (1, 'one'), (2, 'two')

query I nosort
SELECT a FROM foo ORDER BY a
----
0
1
2

query I nosort
SELECT a FROM foo ORDER BY a DESC
----
2
1
0

query I nosort
SELECT a + 1 FROM foo ORDER BY a + 1
----
1
2
3

query I nosort
SELECT sum(a) FROM foo ORDER BY sum(a)
----
3

query I nosort
SELECT a FROM foo ORDER BY (0-a)
----
2
1
0

# ORDER BY can implicitly project columns from the inner SELECT...
query I
SELECT a FROM foo ORDER BY b
----
1
2
0

# ...including when they are used in functions...
query I
SELECT a FROM foo ORDER BY b || 'blah'
----
1
2
0

# ...or even in aggregate functions...
query I
SELECT a FROM foo GROUP BY a ORDER BY max(b)
----
1
2
0

# ...unless you use DISTINCT...
query error for SELECT DISTINCT, ORDER BY expressions must appear in select list
SELECT DISTINCT a FROM foo ORDER BY b

query error for SELECT DISTINCT, ORDER BY expressions must appear in select list
SELECT DISTINCT a FROM foo ORDER BY a + 1

# ...or a set expression.
query error column "b" does not exist
(SELECT a FROM foo) UNION (SELECT a FROM foo) ORDER BY b

# Using a column twice and referring to it by its alias in the ORDER BY should
# work.
query II
SELECT a, a AS c FROM foo ORDER BY c
----
0  0
1  1
2  2

# Columns from the underlying table and columns introduced in the select list
# can be freely matched in ORDER BY expressions.
query I
SELECT a + 1 AS c FROM foo ORDER BY a + c
----
1
2
3

# When a name from the underlying table is shadowed, using the shadowed name in
# the ORDER BY should refer to the column in the select list...
query T
SELECT b AS a FROM foo ORDER BY a
----
one
two
zero

# ...unless the shadowed name is ambiguous.
query error column name "a" is ambiguous
SELECT 1 AS a, b AS a FROM foo ORDER BY a

statement ok
CREATE TABLE bar (a int)

statement ok
INSERT INTO bar (a) VALUES (1)

query I nosort
SELECT a FROM foo ORDER BY exists (SELECT * FROM bar WHERE bar.a = foo.a), a
----
0
2
1

query TI nosort
SELECT b, a FROM foo ORDER BY b
----
one  1
two  2
zero 0

# Ensure SELECT DISTINCT is not confused by permuting columns in the SELECT
# list.
query TI nosort
SELECT DISTINCT b, a FROM foo ORDER BY b
----
one  1
two  2
zero 0

### sorts, limits, and offsets in subqueries ###

# These tests have been designed to cover a wide range of situations where there
# may be a subquery. Be sure when modifying these tests to maintain a
# representation for each situation.

statement ok
CREATE TABLE fizz(a int, b text)

statement ok
INSERT INTO fizz(a, b) VALUES
    (2079, 'thirteen'), (12345, 'one'),
    (12345, 'two'), (12345, 'three'),
    (6745, 'five'), (24223, 'four'),
    (21243, 'four'), (1735, 'two'),
    (25040, 'two')

# the ORDER BY's inside the subquery are technically meaningless because they do not
# propagate to the outer query, but we should still return correct results.
query T rowsort
SELECT b FROM (SELECT min(b) AS b FROM fizz GROUP BY a ORDER BY a DESC)
----
five
four
four
one
thirteen
two
two

query I rowsort
SELECT ascii(b) FROM (SELECT a, b FROM fizz ORDER BY a ASC, b DESC)
----
102
102
102
111
116
116
116
116
116

statement ok
CREATE TABLE baz (
    val1 int,
    val2 int
)

statement ok
INSERT INTO baz VALUES
    (12345, 1735), (12345, 1735), (12345, 1735),
    (1735, 24223), (12345, 12345), (2079, 24223),
    (1735, 2079), (1735, 2079), (1735, 2079)

# offset

query I rowsort
SELECT a FROM fizz WHERE a > ANY(SELECT val1 FROM baz ORDER BY val1 offset 3 ROWS)
----
12345
12345
12345
2079
21243
24223
25040
6745

query I rowsort
SELECT a FROM fizz WHERE a IN (SELECT val1 FROM baz ORDER BY val1 offset 0 rows)
----
12345
12345
12345
1735
2079

# limit
query I
SELECT a FROM fizz WHERE a < ALL(SELECT val1 FROM baz ORDER BY val1 DESC limit 5)
----
1735

query I
SELECT count(*) FROM fizz WHERE exists(SELECT val1 FROM baz ORDER BY val1 limit 0)
----
0

query error FETCH ... WITH TIES not yet supported
SELECT * FROM fizz FETCH FIRST 2 ROWS WITH TIES

# offset + limit
query TI
SELECT b, (SELECT val1 FROM baz WHERE val2 = a ORDER BY val1 limit 1 offset 1 rows) c
FROM fizz ORDER BY b, c DESC
----
five      NULL
four      2079
four      NULL
one       NULL
thirteen  1735
three     NULL
two       12345
two       NULL
two       NULL

# limit + offset return correct results when there are identical rows
query I
SELECT val1 FROM (SELECT val1, val2 FROM baz ORDER BY val2 LIMIT 2)
----
12345
12345

query I
SELECT val1 FROM (SELECT val1, val2 FROM baz ORDER BY val2 DESC OFFSET 7 ROWS)
----
12345
12345

query I rowsort
SELECT val1 FROM (SELECT val1, val2 FROM baz ORDER BY val2 LIMIT 2 OFFSET 2 ROWS)
----
1735
12345

query I
SELECT val1 FROM (SELECT val1, val2 FROM baz ORDER BY val2 DESC LIMIT 1 OFFSET 7 ROWS)
----
12345

# ORDER BY/limit/offset in subqueries still works after deleting some entries
# Note: the parentheses around the SELECT statement currently makes it a subquery
# test. Change the test if we optimize so that the SELECT is no longer treated
# as a subquery.
statement ok
CREATE VIEW bazv AS (SELECT val1, val2 FROM baz ORDER BY val2 DESC, val1 LIMIT 2 OFFSET 1 ROW)

query II rowsort
SELECT * FROM bazv
----
2079   24223
12345  12345

statement ok
DELETE FROM baz WHERE val1=12345

query II rowsort
SELECT * FROM bazv
----
1735   2079
2079   24223

### ORDER BY/offset/limit in toplevel select query in view creation ###

statement ok
CREATE VIEW fizzorderview AS SELECT a, b FROM fizz ORDER BY a DESC, b

# TODO: materialize#724 take out the rowsort and rearrange results
# when ORDER BY's persist past the view creation
query IT rowsort
SELECT * FROM fizzorderview
----
12345 one
12345 three
12345 two
1735  two
2079  thirteen
6745  five
21243 four
24223 four
25040 two

statement ok
CREATE VIEW fizzlimitview AS SELECT a, b FROM fizz LIMIT 4

query II
SELECT count(a), count(b) FROM fizzlimitview
----
4 4

statement ok
CREATE VIEW fizzlimitview2 AS SELECT b, a FROM fizz ORDER BY a ASC LIMIT 2

query TI rowsort
SELECT * FROM fizzlimitview2
----
thirteen 2079
two      1735

statement ok
CREATE VIEW fizzoffsetview AS SELECT a, b FROM fizz OFFSET 6 ROWS

query II
SELECT count(b), count(a) FROM fizzoffsetview
----
3 3

statement ok
CREATE VIEW fizzoffsetview2 AS SELECT b, a FROM fizz ORDER BY b DESC, a OFFSET 3 ROWS

query TI rowsort
SELECT * FROM fizzoffsetview2
----
four     21243
four     24223
five     6745
one      12345
thirteen 2079
three    12345

statement ok
CREATE VIEW fizzlimitoffsetview AS SELECT sum(a) AS tot, b FROM fizz GROUP BY b
ORDER BY tot LIMIT 1 OFFSET 4 ROWS

query I
SELECT count(tot) FROM fizzlimitoffsetview
----
1

statement ok
CREATE VIEW fizzlimitoffsetview2 AS SELECT avg(a), b FROM fizz GROUP BY b
ORDER BY b DESC LIMIT 3 OFFSET 2 ROWS

query RT rowsort
SELECT * FROM fizzlimitoffsetview2
----
12345 one
2079  thirteen
22733 four

# delete and add an entry see how views update
statement ok
DELETE FROM fizz WHERE b = 'thirteen'

query IT rowsort
SELECT * FROM fizzorderview
----
12345 one
12345 three
12345 two
1735  two
21243 four
24223 four
25040 two
6745  five

query TI rowsort
SELECT * FROM fizzlimitview2
----
five     6745
two      1735

query II
SELECT count(b), count(a) FROM fizzoffsetview
----
2 2

query TI rowsort
SELECT * FROM fizzoffsetview2
----
five     6745
four     21243
four     24223
one      12345
three    12345

query RT rowsort
SELECT * FROM fizzlimitoffsetview2
----
12345 one
22733 four
6745  five

statement ok
DELETE FROM fizz WHERE b = 'five'

query II
SELECT count(a), count(b) FROM fizzlimitview
----
4 4

query I
SELECT count(tot) FROM fizzlimitoffsetview
----
0

statement ok
INSERT INTO fizz VALUES (7584, 'twelve'), (21758, 'fourteen')

query IT rowsort
SELECT * FROM fizzorderview
----
12345 one
12345 three
12345 two
1735  two
21243 four
21758 fourteen
24223 four
25040 two
7584  twelve

query II
SELECT count(a), count(b) FROM fizzlimitview
----
4 4

query TI rowsort
SELECT * FROM fizzlimitview2
----
twelve   7584
two      1735

query II
SELECT count(b), count(a) FROM fizzoffsetview
----
3 3

query TI rowsort
SELECT * FROM fizzoffsetview2
----
four     21243
four     24223
fourteen 21758
one      12345
three    12345
twelve   7584

query I
SELECT count(tot) FROM fizzlimitoffsetview
----
1

query RT rowsort
SELECT * FROM fizzlimitoffsetview2
----
12345 one
21758 fourteen
12345 three
