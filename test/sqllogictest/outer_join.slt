# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE a(a INTEGER);

statement ok
CREATE TABLE b(b INTEGER);

statement ok
CREATE TABLE c(c INTEGER);

statement ok
INSERT INTO a VALUES (1);

statement ok
INSERT INTO b VALUES (2);

statement ok
INSERT INTO c VALUES (3);

query III
SELECT * FROM a, b full join c on b = c;
----
1  NULL  3
1  2  NULL

query III
SELECT * FROM a, b right join c on b = c;
----
1  NULL  3

query III
SELECT * FROM a, b left join c on b = c;
----
1  2  NULL

query III
SELECT * FROM a CROSS JOIN b JOIN LATERAL(SELECT a.a FROM c) x ON TRUE;
----
1 2 1

query III
SELECT * FROM a, b FULL JOIN LATERAL(SELECT a.a FROM c) x ON TRUE;
----
1 2 1

query III
SELECT * FROM a CROSS JOIN (b FULL JOIN LATERAL(SELECT a.a FROM c) x ON TRUE);
----
1 2 1

statement ok
CREATE TABLE t1 (a int, b int);

statement ok
CREATE TABLE t2 (a int, c int);

statement ok
INSERT INTO t1 VALUES (1, 2), (2, 3);

statement ok
INSERT INTO t2 VALUES (2, 4), (5, 7);

query IIII rowsort
SELECT * FROM generate_series(1, 2), LATERAL (SELECT * FROM t1) _ NATURAL RIGHT JOIN t2;
----
1 2 3    4
2 2 3    4
1 5 NULL 7
2 5 NULL 7

statement ok
create table left(x int, y int);

statement ok
create table right1(x int, y int);

statement ok
create view right1_keyed(x, y) as select distinct on(x) * from right1;

statement ok
create table right2(x int, y int);

statement ok
insert into left values (0,0);

statement ok
insert into right2 values (0,0);

# `consolidate_output` should be true when there is a negated input to a Union.
query T multiline
explain physical plan for
select *
from
  left
  LEFT JOIN right1_keyed ON left.x = right1_keyed.x
  LEFT JOIN right2 ON left.x = right2.x;
----
Explained Query:
  Return
    Union
      Mfp
        project=(#0..=#5)
        map=(null, null)
        Union consolidate_output=true
          Negate
            Join::Linear
              linear_stage[0]
                lookup={ relation=0, key=[#0] }
                stream={ key=[#0], thinning=() }
              source={ relation=1, key=[#0] }
              ArrangeBy
                raw=true
                arrangements[0]={ key=[#0], permutation=id, thinning=(#1..=#3) }
                types=[integer?, integer?, integer?, integer?]
                Get::PassArrangements l1
                  raw=true
              Reduce::Distinct
                val_plan
                  project=()
                key_plan=id
                Get::Collection l2
                  project=(#0)
                  raw=true
          Get::PassArrangements l1
            raw=true
      Get::Collection l2
        project=(#0..=#3, #0, #4)
        raw=true
  With
    cte l2 =
      Join::Linear
        linear_stage[0]
          lookup={ relation=1, key=[#0] }
          stream={ key=[#0], thinning=(#1..=#3) }
        source={ relation=0, key=[#0] }
        ArrangeBy
          raw=true
          arrangements[0]={ key=[#0], permutation=id, thinning=(#1..=#3) }
          types=[integer, integer?, integer?, integer?]
          Get::Collection l1
            filter=((#0) IS NOT NULL)
            raw=true
        ArrangeBy
          raw=true
          arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
          types=[integer, integer?]
          Get::Collection materialize.public.right2
            raw=true
    cte l1 =
      Union
        Mfp
          project=(#0..=#3)
          map=(null, null)
          Union consolidate_output=true
            Negate
              Get::Collection l0
                project=(#0, #1)
                raw=true
            Get::PassArrangements materialize.public.left
              raw=true
        Get::Collection l0
          project=(#0, #1, #0, #2)
          raw=true
    cte l0 =
      Join::Linear
        linear_stage[0]
          closure
            project=(#0, #2, #1)
          lookup={ relation=0, key=[#0] }
          stream={ key=[#0], thinning=(#1) }
        source={ relation=1, key=[#0] }
        ArrangeBy
          raw=true
          arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
          types=[integer, integer?]
          Get::Collection materialize.public.left
            filter=((#0) IS NOT NULL)
            raw=true
        ArrangeBy
          raw=true
          arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
          types=[integer, integer?]
          TopK::MonotonicTop1 group_by=[#0] must_consolidate
            Get::Collection materialize.public.right1
              raw=true

Source materialize.public.right1
  filter=((#0) IS NOT NULL)
Source materialize.public.right2
  filter=((#0) IS NOT NULL)

EOF

query IIIIII
select *
from
  left
  LEFT JOIN right1_keyed ON left.x = right1_keyed.x
  LEFT JOIN right2 ON left.x = right2.x;
----
0  0  NULL  NULL  0  0
