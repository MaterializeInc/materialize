# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

reset-server

# Test mz_aclitem type and functions

query T
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'CREATE')
----
u1=C/u2

query T
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'CREATE, USAGE')
----
u1=UC/u2

query T
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'CREATE')::text
----
default_owner=C/materialize

query T
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'CREATE, USAGE')::text
----
default_owner=UC/materialize

query T
SELECT mz_internal.make_mz_aclitem('p', 'u2', 'CREATE')
----
=C/u2

query T
SELECT mz_internal.make_mz_aclitem('p', 'u2', 'CREATE, USAGE')
----
=UC/u2

query T
SELECT mz_internal.make_mz_aclitem('p', 'u2', 'SELECT')::text
----
=r/materialize

query T
SELECT mz_internal.make_mz_aclitem('p', 'u2', 'INSERT, SELECT')::text
----
=ar/materialize

query error mz_aclitem grantor cannot be PUBLIC role
SELECT mz_internal.make_mz_aclitem('u1', 'p', 'CREATE')

query error mz_aclitem grantor cannot be PUBLIC role
SELECT mz_internal.make_mz_aclitem('u1', 'p', 'CREATE, USAGE')

query T
SELECT mz_internal.mz_aclitem_grantee(mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE'))
----
u1

query T
SELECT mz_internal.mz_aclitem_grantee(mz_internal.make_mz_aclitem('p', 'u2', 'DELETE'))
----
p

query T
SELECT mz_internal.mz_aclitem_grantor(mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE'))
----
u2

query T
SELECT mz_internal.mz_aclitem_privileges(mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE'))
----
d

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE') = mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
true

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE') <> mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
false

query B
SELECT mz_internal.make_mz_aclitem('u3', 'u2', 'DELETE') = mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
false

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u3', 'DELETE') = mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
false

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u3', 'DELETE, USAGE') = mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
false

query B
SELECT mz_internal.make_mz_aclitem('u3', 'u2', 'DELETE') <> mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
true

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u3', 'DELETE') <> mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
true

query B
SELECT mz_internal.make_mz_aclitem('u1', 'u3', 'DELETE, USAGE') <> mz_internal.make_mz_aclitem('u1', 'u2', 'DELETE')
----
true

# RoleIds that don't exist are printed as IDs instead of names

query T
SELECT mz_internal.make_mz_aclitem('u99991', 'u2', 'CREATE')::text
----
u99991=C/materialize

query T
SELECT mz_internal.make_mz_aclitem('u1', 'u87398', 'CREATE')::text
----
default_owner=C/u87398

query T
SELECT mz_internal.make_mz_aclitem('u3251', 's345', 'CREATE')::text
----
u3251=C/s345

# Test parsing errors

query error couldn't parse role id 'uasdf7890ad'
SELECT mz_internal.make_mz_aclitem('u1', 'uasdf7890ad', 'CREATE')

query error couldn't parse role id 'sd98fas9df8'
SELECT mz_internal.make_mz_aclitem('sd98fas9df8', 's1', 'CREATE')

query error unrecognized privilege type: "asdfa ljefioj"
SELECT mz_internal.make_mz_aclitem('u1', 's1', 'asdfa ljefioj')

# Test default privileges

simple conn=mz_system,user=mz_system
ALTER ROLE materialize CREATEDB CREATECLUSTER;
----
COMPLETE 0

## Create some helper views

statement ok
CREATE VIEW database_privileges (name, privilege) AS SELECT name, unnest(privileges)::text FROM mz_databases;

statement ok
CREATE VIEW schema_privileges (name, privilege) AS SELECT name, unnest(privileges)::text FROM mz_schemas;

statement ok
CREATE VIEW cluster_privileges (name, privilege) AS SELECT name, unnest(privileges)::text FROM mz_clusters;

statement ok
CREATE VIEW item_privileges (name, type, privilege) AS SELECT name, type, unnest(privileges)::text FROM mz_objects;

## Test built-in objects

query TT
SELECT * FROM database_privileges
----
materialize  =U/mz_system
materialize  mz_system=UC/mz_system

query TT
SELECT * FROM schema_privileges ORDER BY name
----
information_schema  =U/mz_system
information_schema  mz_system=UC/mz_system
mz_catalog          =U/mz_system
mz_catalog          mz_system=UC/mz_system
mz_internal         =U/mz_system
mz_internal         mz_system=UC/mz_system
pg_catalog          =U/mz_system
pg_catalog          mz_system=UC/mz_system
public              =U/mz_system
public              mz_system=UC/mz_system

query TT
SELECT * FROM cluster_privileges ORDER BY name
----
default           =U/mz_system
default           mz_system=UC/mz_system
mz_introspection  =U/mz_system
mz_introspection  mz_system=UC/mz_system
mz_introspection  mz_introspection=UC/mz_system
mz_system         mz_system=UC/mz_system

### The materialize privilege comes from the views created above
query T
SELECT DISTINCT(privilege) FROM item_privileges WHERE type = 'view' OR type = 'materialized view' OR type = 'source'
----
=r/mz_system
mz_system=r/mz_system
materialize=r/materialize

query T
SELECT DISTINCT(privilege) FROM item_privileges WHERE type = 'table'
----
=r/mz_system
mz_system=arwd/mz_system

query T
SELECT DISTINCT(privilege) FROM item_privileges WHERE type = 'type'
----
=U/mz_system
mz_system=U/mz_system

## Test user created objects

statement ok
CREATE TABLE t (a INT);

query TT
SELECT name, privilege FROM item_privileges WHERE name ='t'
----
t  materialize=arwd/materialize

statement ok
CREATE VIEW v AS SELECT 1;

query TT
SELECT name, privilege FROM item_privileges WHERE name ='v'
----
v  materialize=r/materialize

statement ok
CREATE MATERIALIZED VIEW mv AS SELECT 1;

query TT
SELECT name, privilege FROM item_privileges WHERE name ='mv'
----
mv  materialize=r/materialize

statement ok
CREATE SOURCE s FROM LOAD GENERATOR COUNTER WITH (SIZE '1');

query TT
SELECT name, privilege FROM item_privileges WHERE name ='s'
----
s  materialize=r/materialize

statement ok
CREATE TYPE ty AS LIST (ELEMENT TYPE=bool);

query TT
SELECT name, privilege FROM item_privileges WHERE name ='ty'
----
ty  =U/materialize
ty  materialize=U/materialize

statement ok
CREATE SECRET se AS decode('c2VjcmV0Cg==', 'base64');

query TT
SELECT name, privilege FROM item_privileges WHERE name ='se'
----
se  materialize=U/materialize

statement ok
CREATE CONNECTION conn TO KAFKA (BROKER 'localhost:9092');

query TT
SELECT name, privilege FROM item_privileges WHERE name ='conn'
----
conn  materialize=U/materialize

statement ok
CREATE CLUSTER c REPLICAS (r1 (SIZE '1'));

query TT
SELECT * FROM cluster_privileges WHERE name ='c'
----
c  materialize=UC/materialize

statement ok
CREATE DATABASE d;

query TT
SELECT * FROM database_privileges WHERE name ='d'
----
d  materialize=UC/materialize

query TT
SELECT * FROM schema_privileges WHERE name ='public' ORDER BY name
----
public  =U/mz_system
public  =U/materialize
public  mz_system=UC/mz_system
public  materialize=UC/materialize

statement ok
CREATE SCHEMA sch;

query TT
SELECT * FROM schema_privileges WHERE name ='sch'
----
sch  materialize=UC/materialize

# Changing the owner of an object should change the grantor of all privileges to the new owner and
# transfer the privileges of the old owner to the new owner.

statement ok
CREATE ROLE joe

simple conn=mz_system,user=mz_system
ALTER TABLE t OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name = 't'
----
t  joe=arwd/joe

simple conn=mz_system,user=mz_system
ALTER VIEW v OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name = 'v'
----
v  joe=r/joe

simple conn=mz_system,user=mz_system
ALTER MATERIALIZED VIEW mv OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name = 'mv'
----
mv  joe=r/joe

simple conn=mz_system,user=mz_system
ALTER SOURCE s OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name ='s'
----
s  joe=r/joe

simple conn=mz_system,user=mz_system
ALTER TYPE ty OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name ='ty'
----
ty  =U/joe
ty  joe=U/joe

simple conn=mz_system,user=mz_system
ALTER SECRET se OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name ='se'
----
se  joe=U/joe

simple conn=mz_system,user=mz_system
ALTER CONNECTION conn OWNER TO joe
----
COMPLETE 0

query TT
SELECT name, privilege FROM item_privileges WHERE name ='conn'
----
conn  joe=U/joe

simple conn=mz_system,user=mz_system
ALTER CLUSTER c OWNER TO joe
----
COMPLETE 0

query TT
SELECT * FROM cluster_privileges WHERE name ='c'
----
c  joe=UC/joe

simple conn=mz_system,user=mz_system
ALTER DATABASE d OWNER TO joe
----
COMPLETE 0

query TT
SELECT * FROM database_privileges WHERE name ='d'
----
d  joe=UC/joe

simple conn=mz_system,user=mz_system
ALTER SCHEMA sch OWNER TO joe
----
COMPLETE 0

query TT
SELECT * FROM schema_privileges WHERE name ='sch'
----
sch  joe=UC/joe
