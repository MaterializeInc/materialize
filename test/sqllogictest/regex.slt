# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE data (input text)

statement ok
INSERT INTO data VALUES ('asdfjkl'), ('foo'), ('asdf'), (NULL), ('jkl')

query TTT
SELECT data.*, reg.* FROM data, regexp_extract('(asdf)|(?P<foo>jkl)', data.input) reg ORDER BY data.input
----
asdf asdf NULL
asdfjkl asdf NULL
jkl NULL jkl

# TODO - Test that the columns have the correct nullability, once they actually do (#1685)

# Standard regex matching.
query TTT
SELECT 'foo' ~ 'foo?', 'fo' ~ 'foo?', 'f' ~ 'foo?'
----
true  true  false

# Standard regex not-matching.
query TTT
SELECT 'foo' !~ 'foo?', 'fo' !~ 'foo?', 'f' !~ 'foo?'
----
false  false  true

# Case-insensitive matching.
query TT
SELECT 'Foo' ~ 'foo', 'Foo' ~* 'foo'
----
false  true

# Case-insensitive not-matching.
query TT
SELECT 'Foo' !~ 'foo', 'Foo' !~* 'foo'
----
true  false

mode standard

# Check that literal regexes are pre-compiled...
query T multiline
EXPLAIN WITH(arity, join_impls) SELECT input ~ 'foo?' FROM data
----
Explained Query:
  Project (#1) // { arity: 1 }
    Map (is_regexp_match["foo?", case_insensitive=false](#0)) // { arity: 2 }
      ReadStorage materialize.public.data // { arity: 1 }

EOF

# ...but not variable regexes.
query T multiline
EXPLAIN WITH(arity, join_impls) SELECT input ~ input FROM data
----
Explained Query:
  Project (#1) // { arity: 1 }
    Map ((#0 ~ #0)) // { arity: 2 }
      ReadStorage materialize.public.data // { arity: 1 }

EOF

query T multiline
EXPLAIN
SELECT regexp_match('ABC', 'a.*');
----
Explained Query (fast path):
  Constant
    - (null)

EOF

query T
SELECT regexp_match('ABC', 'a.*');
----
NULL

query T multiline
EXPLAIN
SELECT regexp_match('ABC', 'a.*', 'i');
----
Explained Query (fast path):
  Constant
    - ({"ABC"})

EOF

query T
SELECT regexp_match('ABC', 'a.*', 'i');
----
{ABC}

# We have to accept it when both flags are present (taking the last one), because Postgres also does the same.
query T
SELECT regexp_match('ABC', 'a.*', 'ic');
----
NULL

query T
SELECT regexp_match('ABC', 'a.*', 'ci');
----
{ABC}

query error invalid regular expression: regex parse error:
SELECT 'abs' ~ '\';

# Case-insensitive vs. case-sensitive regexes when there is no full const folding, but MirScalarExpr::reduce changes
# from the binary to unary versions.

statement ok
CREATE TABLE t(s string, like_pat string, regex_pat string);

statement ok
INSERT INTO t VALUES ('abc', 'a%', 'a.*'), ('ABC', 'a%', 'a.*'), ('ccc', 'a%', 'a.*');

query T multiline
EXPLAIN
SELECT s FROM t WHERE s~'a.*';
----
Explained Query:
  Project (#0)
    Filter is_regexp_match["a.*", case_insensitive=false](#0)
      ReadStorage materialize.public.t

Source materialize.public.t
  filter=(is_regexp_match["a.*", case_insensitive=false](#0))

EOF

query T
SELECT s FROM t WHERE s~'a.*';
----
abc

query T multiline
EXPLAIN
SELECT s FROM t WHERE s~*'a.*';
----
Explained Query:
  Project (#0)
    Filter is_regexp_match["a.*", case_insensitive=true](#0)
      ReadStorage materialize.public.t

Source materialize.public.t
  filter=(is_regexp_match["a.*", case_insensitive=true](#0))

EOF

query T
SELECT s FROM t WHERE s~*'a.*';
----
ABC
abc

query T multiline
EXPLAIN
SELECT s, regexp_match(s, 'a.*') FROM t;
----
Explained Query:
  Project (#0, #3)
    Map (regexp_match["a.*", case_insensitive=false](#0))
      ReadStorage materialize.public.t

EOF

query TT
SELECT s, regexp_match(s, 'a.*') FROM t;
----
ABC
NULL
ccc
NULL
abc
{abc}

query T multiline
EXPLAIN
SELECT s, regexp_match(s, 'a.*', 'i') FROM t;
----
Explained Query:
  Project (#0, #3)
    Map (regexp_match["a.*", case_insensitive=true](#0))
      ReadStorage materialize.public.t

EOF

query TT
SELECT s, regexp_match(s, 'a.*', 'i') FROM t;
----
ccc
NULL
ABC
{ABC}
abc
{abc}

query TT
SELECT s, regexp_match(s, 'a.*', 'ic') FROM t;
----
ABC
NULL
ccc
NULL
abc
{abc}

query TT
SELECT s, regexp_match(s, 'a.*', 'ci') FROM t;
----
ccc
NULL
ABC
{ABC}
abc
{abc}

query error db error: ERROR: Evaluation error: invalid regular expression: regex parse error:
SELECT s FROM t WHERE s ~ '\';

# Dynamic regexes (binary (or variadic) versions)

query T multiline
EXPLAIN
SELECT s FROM t WHERE s ~ regex_pat;
----
Explained Query:
  Project (#0)
    Filter (#0 ~ #2)
      ReadStorage materialize.public.t

Source materialize.public.t
  filter=((#0 ~ #2))

EOF

query T
SELECT s FROM t WHERE s ~ regex_pat;
----
abc

query T multiline
EXPLAIN
SELECT s FROM t WHERE s ~* regex_pat;
----
Explained Query:
  Project (#0)
    Filter (#0 ~* #2)
      ReadStorage materialize.public.t

Source materialize.public.t
  filter=((#0 ~* #2))

EOF

query T
SELECT s FROM t WHERE s ~* regex_pat;
----
ABC
abc

query T multiline
EXPLAIN
SELECT s, regex_pat, regexp_match(s, regex_pat) FROM t;
----
Explained Query:
  Project (#0, #2, #3)
    Map (regexp_match(#0, #2))
      ReadStorage materialize.public.t

EOF

query TTT
SELECT s, regex_pat, regexp_match(s, regex_pat) FROM t;
----
ABC
a.*
NULL
ccc
a.*
NULL
abc
a.*
{abc}

query T multiline
EXPLAIN
SELECT s, regex_pat, regexp_match(s, regex_pat, 'i') FROM t;
----
Explained Query:
  Project (#0, #2, #3)
    Map (regexp_match(#0, #2, "i"))
      ReadStorage materialize.public.t

EOF

query TTT
SELECT s, regex_pat, regexp_match(s, regex_pat, 'i') FROM t;
----
ccc
a.*
NULL
ABC
a.*
{ABC}
abc
a.*
{abc}

query TTT
SELECT s, regex_pat, regexp_match(s, regex_pat, 'ic') FROM t;
----
ABC
a.*
NULL
ccc
a.*
NULL
abc
a.*
{abc}

query TTT
SELECT s, regex_pat, regexp_match(s, regex_pat, 'ci') FROM t;
----
ccc
a.*
NULL
ABC
a.*
{ABC}
abc
a.*
{abc}

statement ok
INSERT INTO T VALUES ('this is gonna be an invalid regex', '', '\');

# Note: The actual error msg shows the regex itself (as it should), but it seems sqllogictest can't handle multiline
# error msgs.
query error db error: ERROR: Evaluation error: invalid regular expression: regex parse error:
SELECT s FROM t WHERE s ~* regex_pat;

# TODO: multiline literal errors should be printed somehow differently in EXPLAIN
query T multiline
EXPLAIN
SELECT *, s~'\' FROM t;
----
Explained Query:
  Map (error("invalid regular expression: regex parse error:
    \
    ^
error: incomplete escape sequence, reached end of pattern prematurely"))
    ReadStorage materialize.public.t

EOF

mode cockroach

query T
SELECT regexp_split_to_array(txt, re) FROM (VALUES
  ('hello world'),
  ('12  34'),
  (' 12  34 '),
  (''),
  (' ')
) TXT(txt),
(VALUES
  (''),
  (' '),
  ('\s+'),
  ('\s*'),
  ('\s')
) RE(re)
ORDER BY 1
----
{""}
{""}
{""}
{""}
{""}
{"",""}
{"",""}
{"",""}
{"",""}
{"",1,2,3,4,""}
{"",12,"",34,""}
{"",12,"",34,""}
{"",12,34,""}
{" "}
{" ",1,2," "," ",3,4," "}
{1,2," "," ",3,4}
{1,2,3,4}
{12,"",34}
{12,"",34}
{12,34}
{h,e,l,l,o," ",w,o,r,l,d}
{h,e,l,l,o,w,o,r,l,d}
{hello,world}
{hello,world}
{hello,world}

# TODO: Correct ordering when #16464 is fixed.
query T
SELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\s+') AS foo ORDER BY 1
----
brown
dog
fox
jumps
lazy
over
quick
the
the

# TODO: Correct ordering when #16464 is fixed.
query T
SELECT foo FROM regexp_split_to_table('the quick brown fox', '\s*') AS foo ORDER BY 1
----
b
c
e
f
h
i
k
n
o
o
q
r
t
u
w
x

query T
SELECT regexp_split_to_array('no match', 'nope')
----
{"no match"}

query T
SELECT regexp_split_to_table('no match', 'nope')
----
no match

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X')
----
fooXbaz

query T
SELECT regexp_replace('foobarbaz', 'b..', 'X', 'g')
----
fooXX

query T
SELECT regexp_replace('foobarbaz', 'b(..)', 'X${1}Y', 'g')
----
fooXarYXazY

query T
SELECT regexp_replace('foobarbaz', 'no match', 'X')
----
foobarbaz
