# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

reset-server

# Verify initial roles.
query TTB rowsort
SELECT id, name, inherit FROM mz_roles WHERE id LIKE 's%' OR id LIKE 'g%'
----
s1  mz_system  true
s2  mz_support  true
s3  mz_analytics  true
g1  mz_monitor  true
g2  mz_monitor_redacted  true

query TB
SELECT name, inherit FROM mz_roles WHERE id LIKE 'u%'
----
materialize  true

simple conn=mz_support,user=mz_support
SELECT mz_catalog.mz_is_superuser()
----
f
COMPLETE 1

simple conn=mz_system,user=mz_system
SELECT mz_catalog.mz_is_superuser()
----
t
COMPLETE 1

# Give materialize the CREATEROLE attribute.
simple conn=mz_system,user=mz_system
GRANT CREATEROLE ON SYSTEM TO materialize
----
COMPLETE 0

statement error non inherit roles not yet supported
CREATE ROLE foo NOINHERIT

statement error db error: ERROR: SUPERUSER, PASSWORD, and LOGIN attributes is not supported in this environment. For more information consult the documentation at https://materialize.com/docs/sql/create-role/#details
CREATE ROLE foo LOGIN

simple
CREATE ROLE foo SUPERUSER
----
db error: ERROR: permission denied to create superuser role
DETAIL: You must be a superuser to create superuser role

statement error conflicting or redundant options
CREATE ROLE foo INHERIT INHERIT

statement error CREATEDB attribute is not supported
CREATE ROLE foo CREATEDB

statement error CREATEROLE attribute is not supported
CREATE ROLE foo CREATEROLE

statement error CREATECLUSTER attribute is not supported
CREATE ROLE foo CREATECLUSTER

# Create role and verify its existence.
statement ok
CREATE ROLE rj

statement error CREATE USER is not supported, for more information consult the documentation at
CREATE USER fms

query TB rowsort
SELECT name, inherit FROM mz_roles
----
materialize  true
mz_analytics  true
mz_monitor  true
mz_monitor_redacted  true
mz_support  true
mz_system  true
rj  true

# Dropping multiple roles should not have any effect if one of the role names
# is bad...
statement error unknown role 'bad'
DROP ROLE rj, bad

query T rowsort
SELECT name FROM mz_roles
----
materialize
mz_analytics
mz_monitor
mz_monitor_redacted
mz_support
mz_system
rj

# ...unless IF EXISTS is specified.
statement ok
DROP ROLE IF EXISTS rj, bad

query T rowsort
SELECT name FROM mz_roles
----
materialize
mz_analytics
mz_monitor
mz_monitor_redacted
mz_support
mz_system

# Verify that the single name version of DROP ROLE works too.
statement ok
CREATE ROLE nlb

query T rowsort
SELECT name FROM mz_roles
----
materialize
mz_analytics
mz_monitor
mz_monitor_redacted
mz_support
mz_system
nlb

statement ok
DROP ROLE nlb

query T rowsort
SELECT name FROM mz_roles
----
mz_system
mz_monitor
mz_support
materialize
mz_analytics
mz_monitor_redacted

statement ok
DROP ROLE IF EXISTS nlb

# No dropping the current role.
statement error current role cannot be dropped
DROP ROLE materialize

# No creating roles that already exist.
statement error role 'materialize' already exists
CREATE ROLE materialize

# No creating roles that look like system roles.
statement error role name "mz_system" is reserved
CREATE ROLE mz_system

statement error role name "mz_foo" is reserved
CREATE ROLE mz_foo

# Create role
statement ok
CREATE ROLE foo

query TB rowsort
SELECT name, inherit FROM mz_roles WHERE name = 'foo'
----
foo true

statement error non inherit roles not yet supported
ALTER ROLE foo NOINHERIT

statement error role name "mz_system" is reserved
ALTER ROLE mz_system INHERIT

statement error conflicting or redundant options
ALTER ROLE foo INHERIT INHERIT

statement error CREATEDB attribute is not supported
ALTER ROLE foo CREATEDB

statement error CREATEROLE attribute is not supported
ALTER ROLE foo CREATEROLE

statement error CREATECLUSTER attribute is not supported
ALTER ROLE foo CREATECLUSTER

# Prevent creating, dropping, and altering PUBLIC role

statement error role name "public" is reserved
CREATE ROLE puBLic

statement error role name "public" is reserved
DROP ROLE PUBLIC

statement error role name "public" is reserved
ALTER ROLE public INHERIT

query T
SELECT pg_get_userbyid((SELECT oid FROM mz_roles WHERE name = 'materialize'))
----
materialize

query T
SELECT pg_get_userbyid((SELECT oid FROM mz_roles WHERE name = 'foo'))
----
foo

query T
SELECT pg_get_userbyid(NULL)
----
NULL

query T
SELECT pg_get_userbyid(4294967295);
----
 unknown (OID=4294967295)

# Test concurrently dropped role

simple conn=foo,user=foo
SELECT current_user();
----
foo
COMPLETE 1

statement ok
DROP ROLE foo

simple conn=foo,user=foo
SELECT current_user();
----
db error: ERROR: role u4 was concurrently dropped
DETAIL: Please disconnect and re-connect with a valid role.

simple conn=mz_system,user=mz_system
DROP CLUSTER mz_system CASCADE;
----
db error: ERROR: system cluster 'mz_system' cannot be modified

simple conn=mz_system,user=mz_system
DROP CLUSTER mz_catalog_server CASCADE;
----
db error: ERROR: system cluster 'mz_catalog_server' cannot be modified

statement error role name "external_foo" is reserved
CREATE ROLE external_foo

# Test SHOW ROLES

query TT
SHOW ROLES
----
materialize (empty)

statement ok
CREATE ROLE foo

query TT
SHOW ROLES
----
foo (empty)
materialize (empty)

query TT
SHOW ROLES WHERE name = 'foo'
----
foo (empty)

query TT
SHOW ROLES LIKE 'f%'
----
foo (empty)

# Enable password authentication in the system.
simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_password_auth = true;
----
COMPLETE 0

# Test creating and using a role with password
simple conn=mz_system,user=mz_system
CREATE ROLE password_user WITH LOGIN PASSWORD 'test_password123'
----
COMPLETE 0

simple conn=mz_system,user=mz_system
CREATE ROLE password_superuser WITH LOGIN SUPERUSER PASSWORD 'super_password123'
----
COMPLETE 0

# Grant necessary permissions to the new role
simple conn=mz_system,user=mz_system
GRANT USAGE ON DATABASE materialize TO password_user
----
COMPLETE 0

simple conn=mz_system,user=mz_system
GRANT CREATE ON SCHEMA materialize.public TO password_user
----
COMPLETE 0

simple conn=mz_system,user=mz_system
SELECT rolsuper, rolcanlogin FROM mz_roles WHERE name = 'password_user'
----
f,t
COMPLETE 1

simple conn=mz_system,user=mz_system
SELECT rolsuper, rolcanlogin FROM mz_roles WHERE name = 'password_superuser'
----
t,t
COMPLETE 1

simple conn=mz_system,user=mz_system
SELECT rolsuper, rolcanlogin FROM pg_authid WHERE rolname = 'password_superuser'
----
t,t
COMPLETE 1

simple conn=superuser_conn,user=password_superuser,password=super_password123
SELECT rolsuper, rolcanlogin FROM pg_authid WHERE rolname = 'password_superuser'
----
t,t
COMPLETE 1

simple
SELECT rolsuper, rolcanlogin FROM pg_authid WHERE rolname = 'password_superuser'
----
db error: ERROR: permission denied for VIEW "pg_catalog.pg_authid"
DETAIL: The 'materialize' role needs SELECT privileges on VIEW "pg_catalog.pg_authid"

# Test connecting with the password
simple conn=password_conn,user=password_user,password=test_password123
SELECT current_user();
----
password_user
COMPLETE 1

# Test that connection fails with wrong password (should error)
simple conn=bad_password_conn,user=password_user,password=wrong_password
SELECT current_user();
----
db error: FATAL: invalid password

# Test that connection succeeds even without password when using the no-auth listener
# This is expected behavior - the external listener doesn't require authentication
simple conn=no_password_conn,user=password_user
SELECT current_user();
----
password_user
COMPLETE 1

# Clean up
# First revoke the privileges that were granted to password_user
simple conn=mz_system,user=mz_system
REVOKE USAGE ON DATABASE materialize FROM password_user
----
COMPLETE 0

simple conn=mz_system,user=mz_system
REVOKE CREATE ON SCHEMA materialize.public FROM password_user
----
COMPLETE 0

# Now drop the role using the default connection
simple
DROP ROLE password_user
----
COMPLETE 0

# Test role inheritance with password authentication
# Create a base role to grant privileges
statement ok
CREATE ROLE base_role

# Create a user with LOGIN and PASSWORD
statement ok
CREATE ROLE test_user WITH LOGIN PASSWORD 'secure_password456'

# Grant the base role to the user
statement ok
GRANT base_role TO test_user

# Grant necessary permissions for the user to connect
simple conn=mz_system,user=mz_system
GRANT USAGE ON DATABASE materialize TO test_user
----
COMPLETE 0

# Test that the user can login with password
simple conn=test_user_conn,user=test_user,password=secure_password456
SELECT current_user()
----
test_user
COMPLETE 1

# Create another role
statement ok
CREATE ROLE additional_role

# Grant the additional role to the user
statement ok
GRANT additional_role TO test_user

# Verify the user can still login after being granted another role
simple conn=test_user_conn2,user=test_user,password=secure_password456
SELECT current_user()
----
test_user
COMPLETE 1

# Clean up - revoke privileges and drop roles
simple conn=mz_system,user=mz_system
REVOKE USAGE ON DATABASE materialize FROM test_user
----
COMPLETE 0

statement ok
REVOKE base_role FROM test_user

statement ok
REVOKE additional_role FROM test_user

statement ok
DROP ROLE test_user

statement ok
DROP ROLE base_role

statement ok
DROP ROLE additional_role

# Test removing password from a role
# Create a role with a password
statement ok
CREATE ROLE password_removal_test WITH LOGIN PASSWORD 'initial_password789'

# Grant necessary permissions for connection
simple conn=mz_system,user=mz_system
GRANT USAGE ON DATABASE materialize TO password_removal_test
----
COMPLETE 0

# Verify login works with password
simple conn=pwd_test_conn,user=password_removal_test,password=initial_password789
SELECT current_user()
----
password_removal_test
COMPLETE 1

# Remove the password from the role
statement ok
ALTER ROLE password_removal_test PASSWORD NULL

# Test that connection with the old password now fails
simple conn=pwd_test_conn2,user=password_removal_test,password=initial_password789
SELECT current_user()
----
db error: FATAL: invalid password

# Test that connection without password still works on no-auth listener
simple conn=pwd_test_noauth,user=password_removal_test
SELECT current_user()
----
password_removal_test
COMPLETE 1

# Clean up
simple conn=mz_system,user=mz_system
REVOKE USAGE ON DATABASE materialize FROM password_removal_test
----
COMPLETE 0

statement ok
DROP ROLE password_removal_test

# Test that granting a role with a password to a role without a password
# only inherits privileges, not the password
statement ok
CREATE ROLE role_with_password WITH LOGIN PASSWORD 'secure_password123'

statement ok
CREATE ROLE role_without_password

# Grant necessary permissions to the role with password
simple conn=mz_system,user=mz_system
GRANT USAGE ON DATABASE materialize TO role_with_password
----
COMPLETE 0

# Grant the role with password to the role without password
statement ok
GRANT role_with_password TO role_without_password

# Grant USAGE permission directly to role_without_password so it can connect
simple conn=mz_system,user=mz_system
GRANT USAGE ON DATABASE materialize TO role_without_password
----
COMPLETE 0

# Verify that role_without_password can connect without a password
simple conn=no_pwd_inherit,user=role_without_password
SELECT current_user()
----
role_without_password
COMPLETE 1

# Verify that trying to connect to role_without_password with the password
# from role_with_password fails (password is not inherited)
simple conn=pwd_inherit_test,user=role_without_password,password=secure_password123
SELECT current_user()
----
db error: FATAL: invalid password

# Verify that role_with_password still requires its password
simple conn=with_pwd_test,user=role_with_password,password=secure_password123
SELECT current_user()
----
role_with_password
COMPLETE 1

# Clean up
simple conn=mz_system,user=mz_system
REVOKE USAGE ON DATABASE materialize FROM role_with_password
----
COMPLETE 0

simple conn=mz_system,user=mz_system
REVOKE USAGE ON DATABASE materialize FROM role_without_password
----
COMPLETE 0

statement ok
REVOKE role_with_password FROM role_without_password

statement ok
DROP ROLE role_without_password

statement ok
DROP ROLE role_with_password
