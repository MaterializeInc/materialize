# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE t1 (a int)

statement ok
CREATE TABLE t2 (a int)

statement ok
CREATE TABLE t3 (a int)

# This works in MySQL, but not PostgreSQL.
query I
SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a GROUP BY t2.a
----

# As above, this works in MySQL, but not PostgreSQL.
query I
SELECT t1.a FROM t1 JOIN t2 ON t1.a = t2.a LEFT JOIN t3 ON t2.a = t3.a GROUP BY t2.a
----

# Same as last query, but with associativity reversed.
query I
SELECT t1.a FROM t1 JOIN (t2 JOIN t3 ON t2.a = t3.a) ON t1.a = t2.a GROUP BY t3.a
----

# Ensure that reflexive equality expressions do not cause the specified column
# to become unnameable. See #5765.
query I
SELECT t1.a FROM t1 JOIN t2 ON t1.a = t1.a GROUP BY t1.a
----

# This works in PostgreSQL.
query I
SELECT t1.a FROM t1 NATURAL JOIN t2
----

# This works in PostgreSQL too.
query I
SELECT t2.a FROM t1 NATURAL JOIN t2
----

# Test sources with unnamed columns.

statement ok
CREATE VIEW v1 AS SELECT 1, 2

query II
SELECT * FROM v1
----
1  2

query II
SELECT v1.* FROM v1
----
1  2

# Test wildcards in SELECT list.

query II
SELECT v1.* FROM v1
----
1  2

query II
SELECT v.* FROM v1 v
----
1  2

query error no table named 'v1' in scope
SELECT v1.* FROM v1 v

query error no table named 'totalgarbage' in scope
SELECT totalgarbage.* FROM v1

query error no table named 'totalgarbage' in scope
SELECT totalgarbage.*

query error SELECT \* with no tables specified is not valid
SELECT *

query error column name "k" is ambiguous
SELECT k FROM (SELECT 1 AS k, 2 AS k)

# Wildcards on a zero-arity table are ok, though.

statement ok
CREATE TABLE nullary ()

query
SELECT * FROM nullary
----

# Check that column names propagate through several layers of subqueries.
query T colnames
SELECT (SELECT * FROM (SELECT 1 AS a) _)
----
a
1

# Check that the EXISTS operator names its output column as such.
query T colnames
SELECT EXISTS (SELECT 1)
----
exists
true

# Check that duplicated columns with different names retain their different
# names.
query TT colnames
SELECT column1, column1 as column2 FROM (VALUES (1))
----
column1  column2
1  1
