# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

### column names ###

query TTT colnames
SELECT length('a'), ascii('a'), substr('a', 1) LIMIT 0
----
length  ascii  substr

query T colnames
SELECT length(column1) FROM (VALUES ('a')) GROUP BY length(column1) LIMIT 0
----
length

query T colnames
SELECT column1::text FROM (VALUES ('a')) LIMIT 0
----
column1

### ascii ###

statement ok
CREATE TABLE asciitest (strcol CHAR(15), vccol VARCHAR(15))

# TODO: materialize#589 Add two tests:
# 1: empty string to each column
# 2: single space in each column
statement ok
INSERT INTO asciitest VALUES ('hello world', 'goodbye moon'), (NULL, NULL),
    ('‰Ω†Â•Ω', 'ÂÜçËßÅ'), ('üòÄ', 'üëª')

statement error
SELECT ascii(98)

query II colnames
SELECT ascii(strcol) AS strres, ascii(vccol) AS vcres FROM asciitest ORDER BY strres
----
strres  vcres
NULL    NULL
104     103
20320   20877
128512  128123

query I
SELECT ascii(NULL)
----
NULL

query I
SELECT ascii(substr('inside literal', 3, 4))
----
115

### substr ###
statement ok
CREATE TABLE substrtest (strcol char(15), vccol varchar(15), smicol smallint, intcol int)

statement ok
INSERT INTO substrtest VALUES ('Mg', 'Mn', 1, 1), ('magnesium', 'manganese', 3, NULL),
    (NULL, NULL, 0, 0), ('24.31', '54.94', 2, 3), ('Èïø‰πÖ‰∏çËßÅ', 'Áà±‰∏çÈáäÊâã', NULL, 2),
    ('', '', -1, 2)

# invalid input
statement error
SELECT substr(192, 1, 1)

statement error
SELECT substr('from wrong type', 1.5, 2)

statement error
SELECT substr('for wrong type', 2, 1.5)

query error negative substring length not allowed
SELECT substr('for cannot be negative', 1, -3)

query error negative substring length not allowed
SELECT substr('for still cannot be negative', 30, -2)

# standard tests

# TODO: materialize#589 SELECT strcol FROM substrtest
query T colnames
SELECT substr(vccol, 1, 3) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.
Mn
man
Áà±‰∏çÈáä

query T colnames
SELECT substr(vccol, 1, 5) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.94
Mn
manga
Áà±‰∏çÈáäÊâã

query T colnames
SELECT substr(vccol, 1) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.94
Mn
manganese
Áà±‰∏çÈáäÊâã

query T colnames
SELECT substr(vccol, 3) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
(empty)
.94
nganese
ÈáäÊâã

query T colnames
SELECT substr(vccol, 3, 1) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
(empty)
.
n
Èáä

# negative start position
query T colnames
SELECT substr(vccol, -1) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.94
Mn
manganese
Áà±‰∏çÈáäÊâã

query T colnames
SELECT substr(vccol, -2, 6) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.
Mn
man
Áà±‰∏çÈáä

query T colnames
SELECT substr(vccol, -3, 5) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
5
M
m
Áà±

query TT colnames
SELECT substr(strcol, -4, 5) AS strres, substr(vccol, -4, 5) AS vcres FROM substrtest ORDER BY vcres
----
strres  vcres
NULL    NULL
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)

query TT colnames
SELECT substr(strcol, -6, 6) AS strres, substr(vccol, -6, 6) AS vcres FROM substrtest ORDER BY vcres
----
strres  vcres
NULL    NULL
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)

query TT colnames
SELECT substr(strcol, -5, 4) AS strres, substr(vccol, -5, 4) AS vcres FROM substrtest ORDER BY vcres
----
strres  vcres
NULL    NULL
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)

# for or start is zero
query T colnames
SELECT substr(vccol, 0) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.94
Mn
manganese
Áà±‰∏çÈáäÊâã

query T colnames
SELECT substr(vccol, 0, 3) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54
Mn
ma
Áà±‰∏ç

query TT colnames
SELECT substr(strcol, 0, 0) AS strres, substr(vccol, 0, 0) AS vcres FROM substrtest ORDER BY vcres
----
strres  vcres
NULL    NULL
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)

query TT colnames
SELECT substr(strcol, 3, 0) AS strres, substr(vccol, 3, 0) AS vcres FROM substrtest ORDER BY vcres
----
strres  vcres
NULL    NULL
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)
(empty) (empty)

# NULL inputs
query T
SELECT substr(NULL, 1)
----
NULL

query T
SELECT substr(NULL, 1, 3)
----
NULL

query T
SELECT substr('text string', NULL)
----
NULL

query T
SELECT substr(NULL, NULL)
----
NULL

query T
SELECT substr('foo', NULL, 3)
----
NULL

query T
SELECT substr('bar', NULL, NULL)
----
NULL

query T
SELECT substr('baz', 2, NULL)
----
NULL

query T
SELECT substr(NULL, NULL, NULL)
----
NULL

# alternative syntax
query T colnames
SELECT substring(vccol, 1, 3) AS vcres FROM substrtest ORDER BY vcres
----
vcres
NULL
(empty)
54.
Mn
man
Áà±‰∏çÈáä

# testing different kinds of int columns and NULL content in columns
query T
SELECT substr(vccol, smicol, smicol) AS vcres FROM substrtest WHERE smicol > -1  ORDER BY vcres
----
NULL
4.
M
nga

query error negative substring length not allowed
SELECT substr(vccol, smicol, smicol) AS vcres FROM substrtest ORDER BY vcres

query T
SELECT substr(vccol, intcol, intcol) AS vcres FROM substrtest ORDER BY vcres
----
NULL
NULL
(empty)
.94
M
‰∏çÈáä

query T
SELECT substr(vccol, smicol, intcol) AS vcres FROM substrtest ORDER BY vcres
----
NULL
NULL
NULL
(empty)
4.9
M

query T
SELECT substr(vccol, intcol, smicol) AS vcres FROM substrtest WHERE smicol > -1 ORDER BY vcres
----
NULL
NULL
.9
M

query T
SELECT substr('subexpression test', ascii(''), 3)
----
su

# testing large numbers
query T
SELECT substr('abcdef', 2, 2147483648);
----
bcdef

query T
SELECT substr('abcdef', 2147483648, 2);
----
(empty)

query T
SELECT substr('abcdef', 2147483648, 2147483648);
----
(empty)

# TODO: materialize#606 Add tests for the alternate syntax if it is enabled

### length ###
statement ok
CREATE TABLE lengthtest(strcol char(15), vccol varchar(15))

statement ok
INSERT INTO lengthtest VALUES
    ('str', 'str'), (' str', ' str'), ('str ', 'str '), ('‰Ω†Â•Ω', '‰Ω†Â•Ω'),
    ('‰ªäÊó•„ÅØ', '‰ªäÊó•„ÅØ'), ('‡§π‡•á‡§≤‡•ã', '‡§π‡•á‡§≤‡•ã'),
    (NULL, NULL), ('', '')

# invalid input
statement error
SELECT length(99)

statement error
SELECT length('str', 99)

# standard tests
query I rowsort
SELECT length(strcol) FROM lengthtest
----
15
15
15
15
15
15
15
NULL

query I rowsort
SELECT length(vccol) FROM lengthtest
----
0
2
3
3
4
4
4
NULL

query I
SELECT length('‰Ω†Â•Ω', 'big5')
----
3

query I
SELECT length('‰Ω†Â•Ω', 'iso-8859-5')
----
6

query I
SELECT octet_length('‰Ω†Â•Ω');
----
6

query I
SELECT bit_length('‰Ω†Â•Ω');
----
48

# encoding name conversion FROM pg to WHATWG
query I
SELECT length('‰Ω†Â•Ω', 'ISO_8859_5')
----
6

query error invalid encoding name 'iso-123'
SELECT length('‰Ω†Â•Ω', 'iso-123')

# NULL inputs
query I
SELECT length(NULL)
----
NULL

query I
SELECT length('str', NULL)
----
NULL

query T
SELECT replace('one', 'one', 'two')
----
two

query T
SELECT replace('in a longer string', 'longer', 'shorter')
----
in a shorter string

query T
SELECT 'hello'::bytea::text
----
\x68656c6c6f


### concat ###

query T
SELECT concat('CONCAT', 'function')
----
CONCATfunction

query T
SELECT concat('CONCAT', ' ', 'function')
----
CONCAT function

query T
SELECT concat('CONCAT', NULL , 'function')
----
CONCATfunction

query I
SELECT length(concat(''))
----
0

query I
SELECT length(concat(NULL))
----
0

query I
SELECT length(concat(' '))
----
1

query T
SELECT concat('CONCAT', 3 , 'function')
----
CONCAT3function

query T
SELECT concat('CONCAT', length('abc') , 'function')
----
CONCAT3function

query T
SELECT concat(3.32::float)
----
3.32

query T
SELECT concat(3.32::double precision)
----
3.32

query T
SELECT concat(3.32::int)
----
3

query T
SELECT concat(3.32)
----
3.32

query T
SELECT concat(3.32::decimal, 3)
----
33

query T
SELECT concat(3.32::float, 3)
----
3.323

query T
SELECT concat(3.32::float, '3')
----
3.323

query T
SELECT concat(true, false, 'function')
----
tffunction

query T
SELECT concat('‰Ω†Â•Ω')
----
‰Ω†Â•Ω

query T
SELECT 'CONCAT' || 'operator'
----
CONCAToperator

query T
SELECT 'CONCAT' || ' ' || 'operator'
----
CONCAT operator

query T
SELECT 'CONCAT' || NULL
----
NULL

query T
SELECT NULL || 'CONCAT'
----
NULL

query I
SELECT length('' || '')
----
0

query I
SELECT length(NULL || NULL)
----
NULL

query I
SELECT length(' ' || ' ')
----
2

query T
SELECT 'CONCAT' || 3 || 'operator'
----
CONCAT3operator

query T
SELECT 'CONCAT' || length('abc') || 'operator'
----
CONCAT3operator

query T
SELECT '' || true || false
----
truefalse

query T
SELECT '‰Ω†' || 'Â•Ω'
----
‰Ω†Â•Ω

query error no overload for boolean \|\| boolean
SELECT true || false

query T
SELECT split_part('abc~@~def~@~ghi', '~@~', 2)
----
def

query T
SELECT split_part('abc~@~def~@~ghi', '', 1)
----
abc~@~def~@~ghi

query T
SELECT split_part('abc~@~def~@~ghi', '~@~', 4)
----
(empty)

query T
SELECT split_part('hello there', '', 1)
----
hello there

query T
SELECT split_part('', 'not', 1)
----
(empty)

query error field position must be greater than zero
SELECT split_part('abc~@~def~@~ghi', '~@~', 0)

query error arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT split_part()

query error arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT split_part('one', 'two')

query error arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT split_part(1, 2, 3)

### lpad ###
query T
SELECT lpad('str', 42, 'pad')
----
padpadpadpadpadpadpadpadpadpadpadpadpadstr

query T
SELECT lpad('str', 4, 'pad')
----
pstr

query T
SELECT lpad('str', 5, 'pad')
----
pastr

query T
SELECT REPLACE(lpad('str', 5), ' ', '_')
----
__str

query T
SELECT lpad('str', 7, 'pad')
----
padpstr

query T
SELECT lpad('str', 3, 'pad')
----
str

query T
SELECT lpad('str', 2, 'pad')
----
st

query T
SELECT lpad('str', 1, 'pad')
----
s

statement error
SELECT lpad('str', -1, 'pad')

query T
SELECT lpad('str', 0, 'pad')
----
(empty)

query T
SELECT lpad('str', NULL, 'pad')
----
NULL

query T
SELECT lpad(NULL, 10, 'pad')
----
NULL

query T
SELECT lpad(NULL, 10, NULL)
----
NULL

query T
SELECT lpad('str', 10, NULL)
----
NULL

query T
SELECT lpad('str', 10, '')
----
str

query T
SELECT lpad('', 10, '')
----
(empty)

query T
SELECT lpad('', 10, 'pad')
----
padpadpadp

query T
SELECT lpad('ƒë·∫πp', 1, 'pad')
----
ƒë

query T
SELECT lpad('str', 5, 'ƒë·∫πp')
----
ƒë·∫πstr


### ilike ###
# ILIKE tests lifted from Cockroach

query B
SELECT 'TEST' ILIKE 'TEST'
----
true

query B
SELECT 'TEST' ILIKE 'test'
----
true

query B
SELECT 'TEST' ILIKE 'TE%'
----
true

query B
SELECT 'TEST' ILIKE '%E%'
----
true

query B
SELECT 'TEST' ILIKE '%e%'
----
true

query B
SELECT 'TEST' ILIKE 'TES_'
----
true

query B
SELECT 'TEST' ILIKE 'TE_%'
----
true

query B
SELECT 'TEST' ILIKE 'TE_'
----
false

query B
SELECT 'TEST' ILIKE '%'
----
true

query B
SELECT 'TEST' ILIKE '%R'
----
false

query B
SELECT 'TEST' ILIKE 'TESTER'
----
false

query B
SELECT 'TEST' ILIKE 'tester'
----
false

query B
SELECT 'TEST' ILIKE ''
----
false

query B
SELECT '' ILIKE ''
----
true

query B
SELECT 'T' ILIKE '_'
----
true

query B
SELECT 'TE' ILIKE '_'
----
false

query B
SELECT 'TEST' NOT ILIKE '%E%'
----
false

query B
SELECT 'TEST' NOT ILIKE 'TES_'
----
false

query B
SELECT 'TEST' NOT ILIKE 'TeS_'
----
false

query B
SELECT 'TEST' NOT ILIKE 'TE_'
----
true

# Invalid type mods

query error length for type varchar must be within \[1-10485760\], have 0
SELECT ''::VARCHAR(0)

query error length for type varchar must be within \[1-10485760\], have 10485761
SELECT ''::VARCHAR(10485761)

query error length for type char must be within \[1-10485760\], have 0
SELECT ''::CHAR(0)

query error length for type char must be within \[1-10485760\], have 10485761
SELECT ''::CHAR(10485761)

query error length for type varchar must be within \[1-10485760\], have 0
SELECT ''::pg_catalog.VARCHAR(0)

query error length for type varchar must be within \[1-10485760\], have 10485761
SELECT ''::pg_catalog.VARCHAR(10485761)

query error length for type char must be within \[1-10485760\], have 0
SELECT ''::pg_catalog.CHAR(0)

query error length for type char must be within \[1-10485760\], have 10485761
SELECT ''::pg_catalog.CHAR(10485761)

### position ###
statement ok
CREATE TABLE positiontest (strcol1 char(15), strcol2 char(15), vccol1 varchar(15), vccol2 varchar(15))

statement ok
INSERT INTO positiontest VALUES ('om', 'Thomas', 'om', 'Thomas'), ('foo', 'barbar', 'foo', 'barbar'),
    (NULL, 'str', NULL, 'str'), ('str', NULL, 'str', NULL), ('ÈáäÊâã', 'Áà±‰∏çÈáäÊâã', 'ÈáäÊâã', 'Áà±‰∏çÈáäÊâã'),
    ('', 'str', '', 'str'), ('str', '', 'str', '')

# invalid input
statement error Expected IN, found right parenthesis
SELECT position(42)

statement error Expected IN, found right parenthesis
SELECT position('str')

statement error arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT position(42 IN 'str')

statement error arguments cannot be implicitly cast to any implementation's parameters; try providing explicit casts
SELECT position('str' IN 42)

statement error Expected right parenthesis, found comma
SELECT position('str' IN 42, 172)

# standard tests

#TODO: materialize#589 select position(strcol1 IN strcol2) from positiontest

query I rowsort
SELECT position(vccol1 IN vccol2) FROM positiontest
----
3
0
NULL
NULL
3
1
0

# NULL inputs
query I
SELECT position(NULL IN 'str')
----
NULL

query I
SELECT position('str' IN NULL)
----
NULL

# combining characters

query I
SELECT position('‡§É‡•ë' IN '‡§∞‡§É‡•ë')
----
2

# this is exactly the same as above, but using unicode escapes
query I
SELECT position(e'\u0903\u0951' IN e'\u0930\u0903\u0951')
----
2

### right ###
statement ok
CREATE TABLE righttest (strcol char(15), vccol varchar(15), smicol smallint, intcol int)

statement ok
INSERT INTO righttest VALUES ('Mg', 'Mn', 1, -1), ('magnesium', 'manganese', 3, NULL),
    (NULL, NULL, 0, 0), ('24.31', '54.94', 3, -3), ('Èïø‰πÖ‰∏çËßÅ', 'Áà±‰∏çÈáäÊâã', NULL, 3),
    ('', '', -1, 2)

# invalid input
statement error
SELECT right(42)

statement error
SELECT right('str')

statement error
SELECT right(42, 'str')

statement error
SELECT right('str', 42, 17)

# standard tests

#TODO: materialize#589 select right(strcol, foo) from righttest

# edge case
query T rowsort
SELECT right(vccol, 0) FROM righttest
----
(empty)
(empty)
NULL
(empty)
(empty)
(empty)

# from the back
query T rowsort
SELECT right(vccol, 2) FROM righttest
----
Mn
se
NULL
94
ÈáäÊâã
(empty)

# from the front
query T rowsort
SELECT right(vccol, -2) FROM righttest
----
(empty)
nganese
NULL
.94
ÈáäÊâã
(empty)

query TT rowsort
SELECT right(vccol, smicol), right(vccol, intcol) FROM righttest
----
n   n
ese NULL
NULL    NULL
.94    94
NULL    ‰∏çÈáäÊâã
(empty) (empty)


# NULL inputs
query T
SELECT right(NULL, 99)
----
NULL

query T
SELECT right('str', NULL)
----
NULL

# combining characters

query T
SELECT right('‡§∞‡§É‡•ë', 0)
----
(empty)

query T
SELECT right('‡§∞‡§É‡•ë', 1)
----
 ‡•ë

query T
SELECT right('‡§∞‡§É‡•ë', -1)
----
‡§É‡•ë

# this is exactly the same as above, but using unicode escapes
query T
SELECT right(e'\u0930\u0903\u0951', -1)
----
‡§É‡•ë

# integer edge cases

# i32:MIN, this seems strange, but it's what Postgres does
query T
SELECT right('hello', -2147483648)
----
hello

# i32:MIN + 1
query T
SELECT right('hello', -2147483647)
----
(empty)

# i64
query error arguments cannot be implicitly cast to any implementation's parameters
SELECT right('hello', 2147483648)

query T
SELECT repeat('hi', 5)
----
hihihihihi

query T
SELECT repeat('a', 0)
----
(empty)

query T
SELECT repeat('a', -1)
----
(empty)
