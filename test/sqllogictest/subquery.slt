# Copyright 2019 Materialize, Inc. All rights reserved.
#
# This file is part of Materialize. Materialize may not be used or
# distributed without the express permission of Materialize, Inc.

mode cockroach

statement ok
CREATE TABLE peeps (
  peep text
)

statement ok
INSERT INTO peeps VALUES ('alice'), ('bob'), ('eve')

statement ok
CREATE TABLE likes (
  liker text,
  likee text
)

statement ok
INSERT INTO likes VALUES ('alice', 'bob'), ('bob', 'eve'), ('alice', 'eve')

query TB rowsort
SELECT peep, EXISTS(
  SELECT * FROM likes WHERE peep = liker
) FROM peeps
----
alice true
bob true
eve false

query TTB rowsort
SELECT *, EXISTS(
  SELECT * FROM likes as likes2 WHERE likes.likee = likes2.liker
) FROM likes
----
alice bob true
alice eve false
bob eve false

# inner scope shadows outer scope, so `likee` without qualification refers to `likes2.likee`
query TTB rowsort
SELECT *, EXISTS(
  SELECT * FROM likes as likes2 WHERE likee = likes2.liker
) FROM likes
----
alice bob false
alice eve false
bob eve false

# similarly, without `as likes2`, `likes.liker` refers to the inner scope
query TTB rowsort
SELECT *, EXISTS(
  SELECT * FROM likes WHERE likee = likes.liker
) FROM likes
----
alice bob false
alice eve false
bob eve false

query TT rowsort
SELECT peep, (
  SELECT likee FROM likes WHERE liker = peep
) FROM peeps
----
alice bob
alice eve
bob eve
eve NULL

statement ok
CREATE TABLE favorites (peep text, other text)

statement ok
INSERT INTO favorites VALUES ('alice', 'eve'), ('alice', 'alice'), ('bob', 'bob')

query TTB rowsort
SELECT
    liker,
    likee,
    likee IN (SELECT other FROM favorites WHERE peep = liker) AS is_favorite
FROM likes
----
alice  bob  false
bob    eve  false
alice  eve  true

query TTB rowsort
SELECT
    liker,
    likee,
    likee NOT IN (SELECT other FROM favorites WHERE peep = liker) AS is_favorite
FROM likes
----
alice  bob  true
bob    eve  true
alice  eve  false

statement ok
CREATE TABLE age (peep text, age int)

statement ok
INSERT INTO age VALUES ('alice', 103), ('bob', 100), ('eve', 104)

# TODO: materialize#489 This test should throw an error because
# subquery returns more than one row
query TI rowsort
SELECT peeps.peep, (
  SELECT age FROM likes, age WHERE peeps.peep = liker AND likee = age.peep
) FROM peeps
----
alice 100
alice 104
bob 104
eve NULL

query TB rowsort
SELECT peeps.peep, age < ANY (
  SELECT age FROM likes, age WHERE peeps.peep = liker AND likee = age.peep
) FROM peeps, age
WHERE peeps.peep = age.peep
----
alice true
bob true
eve false

query TB rowsort
SELECT peeps.peep, age < ALL (
  SELECT age FROM likes, age WHERE peeps.peep = liker AND likee = age.peep
) FROM peeps, age
WHERE peeps.peep = age.peep
----
alice false
bob true
eve true

statement ok
CREATE TABLE s1 (a int NOT NULL)

statement ok
CREATE TABLE s2 (a int NOT NULL)

statement ok
CREATE TABLE s3 (b int NOT NULL)

statement ok
INSERT INTO s1 VALUES (0)

statement ok
INSERT INTO s2 VALUES (1)

statement ok
INSERT INTO s3 VALUES (1)

# Verify that scope resolution prefers the closer scope when a name occurs in
# multiple outer levels.
query B
SELECT true FROM s1 WHERE EXISTS (SELECT true FROM s2 WHERE EXISTS (SELECT true FROM s3 WHERE a = s3.b))
----
true

statement ok
CREATE TABLE t1 (a int NOT NULL)

statement ok
CREATE TABLE t2 (b int NOT NULL)

statement ok
CREATE TABLE t3 (a int NOT NULL, b int NOT NULL)

statement ok
INSERT INTO t1 VALUES (1), (2), (3)

statement ok
INSERT INTO t2 VALUES (1), (2), (3)

statement ok
INSERT INTO t3 VALUES (2, 3), (1, 4)

# Test a constraint that spans multiple levels of nesting.
query I
SELECT a FROM t1 WHERE EXISTS (SELECT 1 FROM t2 WHERE EXISTS (SELECT 1 FROM t3 WHERE t1.a = t3.a AND t2.b = t3.b))
----
2

mode standard

# Verify that the plans for some simple non-correlated subqueries are sane.

query T multiline
EXPLAIN PLAN FOR SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2)
----
Project {
  outputs: [0],
  Map {
    scalars: [true],
    Join {
      variables: [],
      implementation: DifferentialLinear,
      Get { materialize.public.t1 (u37) },
      ArrangeBy {
        keys: [[]],
        Distinct {
          group_key: [],
          Get { materialize.public.t2 (u39) }
        }
      }
    }
  }
}

query T multiline
EXPLAIN PLAN FOR SELECT *  FROM t1, t3 WHERE t1.a = t3.a AND EXISTS (SELECT * FROM t2)
----
Project {
  outputs: [0, 0, 2],
  Map {
    scalars: [true],
    Join {
      variables: [[(0, 0), (2, 0)]],
      implementation: DifferentialLinear,
      Get { materialize.public.t3 (u41) },
      ArrangeBy {
        keys: [[]],
        Distinct {
          group_key: [],
          Get { materialize.public.t2 (u39) }
        }
      },
      ArrangeBy { keys: [[#0]], Get { materialize.public.t1 (u37) } }
    }
  }
}

query T multiline
EXPLAIN PLAN FOR SELECT *  FROM t1, t3 WHERE t1.a = t3.a AND EXISTS (SELECT * FROM t2 WHERE t3.b = t2.b)
----
Let {
  l0 = Join {
    variables: [[(0, 0), (1, 0)]],
    implementation: DifferentialLinear,
    Get { materialize.public.t3 (u41) },
    ArrangeBy { keys: [[#0]], Get { materialize.public.t1 (u37) } }
  }
} in
Project {
  outputs: [0, 0, 2],
  Map {
    scalars: [true],
    Join {
      variables: [[(0, 2), (1, 0)]],
      implementation: DifferentialLinear,
      Get { l0 },
      ArrangeBy {
        keys: [[#0]],
        Distinct {
          group_key: [#0],
          Join {
            variables: [[(0, 0), (1, 0)]],
            implementation: DeltaQuery,
            ArrangeBy {
              keys: [[#0]],
              Distinct { group_key: [#2], Get { l0 } }
            },
            ArrangeBy {
              keys: [[#0]],
              Get { materialize.public.t2 (u39) }
            }
          }
        }
      }
    }
  }
}

mode cockroach
# Regression test for materialize#1158
# The following subquery currently generates a plan with a map with
# 4 scalars that refer to other scalars in the map. If query planning optimizes away
# this particular case, replace with another query that generates such a plan
query T
EXPLAIN PLAN FOR
SELECT age, ascii_num * 2 as result FROM (
  SELECT age, ascii(letter) AS ascii_num FROM (
    SELECT age, substr(replaced, 2, 1) AS letter FROM (
      SELECT age, replace(likee, 'o', 'i') AS replaced FROM (
        SELECT likee, age FROM likes, age WHERE liker=peep
      )
    )
  )
)
----
Project {
  outputs: [3, 7],
  Map {
    scalars: [
      replace(#1, "o", "i"),
      substr(#4, 2, 1),
      ascii #5,
      i32toi64 #6 * 2
    ],
    Join {
      variables: [[(0, 0), (1, 0)]],
      Filter { predicates: [!isnull #0], Get { likes (u3) } },
      Filter { predicates: [!isnull #0], Get { age (u21) } }
    }
  }
}

query II rowsort
SELECT age, ascii_num * 2 as result FROM (
  SELECT age, ascii(letter) AS ascii_num FROM (
    SELECT age, substr(replaced, 2, 1) AS letter FROM (
      SELECT age, replace(likee, 'o', 'i') AS replaced FROM (
        SELECT likee, age FROM likes, age WHERE liker=peep
      )
    )
  )
)
----
100  236
103  210
103  236

# regression test for https://github.com/MaterializeInc/materialize/issues/1708

statement ok
CREATE TABLE tab0(pk INTEGER PRIMARY KEY, col0 INTEGER, col1 FLOAT, col3 INTEGER)

statement ok
INSERT INTO tab0 VALUES(0,1,2,63)

statement ok
INSERT INTO tab0 VALUES(87,63,3,4)

query I rowsort
SELECT pk FROM tab0 WHERE
(
  col3 IN (
    SELECT col0 FROM tab0
  )
)
----
0

query I rowsort
SELECT pk FROM tab0 WHERE
(
  (
    col0 IN (
      SELECT col3 FROM tab0 WHERE col3 IN (
        SELECT col0 FROM tab0
      )
    )
  )
)
----
87

query I rowsort
SELECT pk FROM tab0 WHERE
(
  col3 IN (
    SELECT col0 FROM tab0
  )
  OR
  (
    col0 IN (
      SELECT col3 FROM tab0 WHERE col3 IN (
        SELECT col0 FROM tab0
      )
    )
  )
)
----
0
87
