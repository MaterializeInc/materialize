# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# PRIMARY KEY annotations (which are in the spec) are currently
# removed from this slt, because we don't support them at the moment.
# (Note that _in slts_ they are actually supported, but it's better
# to match the plans of real runs more closely.)

statement ok
CREATE TABLE nation (
    n_nationkey  integer,
    n_name       char(25) NOT NULL,
    n_regionkey  integer NOT NULL,
    n_comment    varchar(152)
)

statement ok
CREATE INDEX pk_nation_nationkey ON nation (n_nationkey ASC)

statement ok
CREATE INDEX fk_nation_regionkey ON nation (n_regionkey ASC)

statement ok
CREATE TABLE region  (
    r_regionkey  integer,
    r_name       char(25) NOT NULL,
    r_comment    varchar(152)
)

statement ok
CREATE INDEX pk_region_regionkey ON region (r_regionkey ASC)

statement ok
CREATE TABLE part (
    p_partkey     integer,
    p_name        varchar(55) NOT NULL,
    p_mfgr        char(25) NOT NULL,
    p_brand       char(10) NOT NULL,
    p_type        varchar(25) NOT NULL,
    p_size        integer NOT NULL,
    p_container   char(10) NOT NULL,
    p_retailprice decimal(15, 2) NOT NULL,
    p_comment     varchar(23) NOT NULL
)

statement ok
CREATE INDEX pk_part_partkey ON part (p_partkey ASC)

statement ok
CREATE TABLE supplier (
    s_suppkey     integer,
    s_name        char(25) NOT NULL,
    s_address     varchar(40) NOT NULL,
    s_nationkey   integer NOT NULL,
    s_phone       char(15) NOT NULL,
    s_acctbal     decimal(15, 2) NOT NULL,
    s_comment     varchar(101) NOT NULL
)

statement ok
CREATE INDEX pk_supplier_suppkey ON supplier (s_suppkey ASC)

statement ok
CREATE INDEX fk_supplier_nationkey ON supplier (s_nationkey ASC)

statement ok
CREATE TABLE partsupp (
    ps_partkey     integer NOT NULL,
    ps_suppkey     integer NOT NULL,
    ps_availqty    integer NOT NULL,
    ps_supplycost  decimal(15, 2) NOT NULL,
    ps_comment     varchar(199) NOT NULL
)

statement ok
CREATE INDEX pk_partsupp_partkey_suppkey ON partsupp (ps_partkey ASC, ps_suppkey ASC)

statement ok
CREATE INDEX fk_partsupp_partkey ON partsupp (ps_partkey ASC)

statement ok
CREATE INDEX fk_partsupp_suppkey ON partsupp (ps_suppkey ASC)

statement ok
CREATE TABLE customer (
    c_custkey     integer,
    c_name        varchar(25) NOT NULL,
    c_address     varchar(40) NOT NULL,
    c_nationkey   integer NOT NULL,
    c_phone       char(15) NOT NULL,
    c_acctbal     decimal(15, 2) NOT NULL,
    c_mktsegment  char(10) NOT NULL,
    c_comment     varchar(117) NOT NULL
)

statement ok
CREATE INDEX pk_customer_custkey ON customer (c_custkey ASC)

statement ok
CREATE INDEX fk_customer_nationkey ON customer (c_nationkey ASC)

statement ok
CREATE TABLE orders (
    o_orderkey       integer,
    o_custkey        integer NOT NULL,
    o_orderstatus    char(1) NOT NULL,
    o_totalprice     decimal(15, 2) NOT NULL,
    o_orderdate      DATE NOT NULL,
    o_orderpriority  char(15) NOT NULL,
    o_clerk          char(15) NOT NULL,
    o_shippriority   integer NOT NULL,
    o_comment        varchar(79) NOT NULL
)

statement ok
CREATE INDEX pk_orders_orderkey ON orders (o_orderkey ASC)

statement ok
CREATE INDEX fk_orders_custkey ON orders (o_custkey ASC)

statement ok
CREATE TABLE lineitem (
    l_orderkey       integer NOT NULL,
    l_partkey        integer NOT NULL,
    l_suppkey        integer NOT NULL,
    l_linenumber     integer NOT NULL,
    l_quantity       decimal(15, 2) NOT NULL,
    l_extendedprice  decimal(15, 2) NOT NULL,
    l_discount       decimal(15, 2) NOT NULL,
    l_tax            decimal(15, 2) NOT NULL,
    l_returnflag     char(1) NOT NULL,
    l_linestatus     char(1) NOT NULL,
    l_shipdate       date NOT NULL,
    l_commitdate     date NOT NULL,
    l_receiptdate    date NOT NULL,
    l_shipinstruct   char(25) NOT NULL,
    l_shipmode       char(10) NOT NULL,
    l_comment        varchar(44) NOT NULL
)

statement ok
CREATE INDEX pk_lineitem_orderkey_linenumber ON lineitem (l_orderkey ASC, l_linenumber ASC)

statement ok
CREATE INDEX fk_lineitem_orderkey ON lineitem (l_orderkey ASC)

statement ok
CREATE INDEX fk_lineitem_partkey ON lineitem (l_partkey ASC)

statement ok
CREATE INDEX fk_lineitem_suppkey ON lineitem (l_suppkey ASC)

statement ok
CREATE INDEX fk_lineitem_partsuppkey ON lineitem (l_partkey ASC, l_suppkey ASC)



query T multiline
-- Query 01
EXPLAIN WITH(arity, join_impls) SELECT
	l_returnflag,
	l_linestatus,
	sum(l_quantity) AS sum_qty,
	sum(l_extendedprice) AS sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,
	avg(l_quantity) AS avg_qty,
	avg(l_extendedprice) AS avg_price,
	avg(l_discount) AS avg_disc,
	count(*) AS count_order
FROM
	lineitem
WHERE
	l_shipdate <= DATE '1998-12-01' - INTERVAL '60' day
GROUP BY
	l_returnflag,
	l_linestatus
ORDER BY
	l_returnflag,
	l_linestatus
----
Explained Query:
  Finish order_by=[#0 asc nulls_last, #1 asc nulls_last] output=[#0..=#9]
    Project (#0..=#5, #9..=#11, #6) // { arity: 10 }
      Map (bigint_to_double(case when (#6 = 0) then null else #6 end), (numeric_to_double(#2) / #8), (numeric_to_double(#3) / #8), (numeric_to_double(#7) / #8)) // { arity: 12 }
        Reduce group_by=[#4, #5] aggregates=[sum(#0), sum(#1), sum((#1 * (1 - #2))), sum(((#1 * (1 - #2)) * (1 + #3))), count(true), sum(#2)] // { arity: 8 }
          Project (#4..=#9) // { arity: 6 }
            Filter (date_to_timestamp(#10) <= 1998-10-02 00:00:00) // { arity: 16 }
              Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF


query T multiline
-- Query 02
EXPLAIN WITH(arity, join_impls) SELECT
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
FROM
    part, supplier, partsupp, nation, region
WHERE
    p_partkey = ps_partkey
    AND s_suppkey = ps_suppkey
    AND p_size = CAST (15 AS smallint)
    AND p_type LIKE '%BRASS'
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'EUROPE'
    AND ps_supplycost
        = (
                SELECT
                    min(ps_supplycost)
                FROM
                    partsupp, supplier, nation, region
                WHERE
                    p_partkey = ps_partkey
                    AND s_suppkey = ps_suppkey
                    AND s_nationkey = n_nationkey
                    AND n_regionkey = r_regionkey
                    AND r_name = 'EUROPE'
            )
ORDER BY
    s_acctbal DESC, n_name, s_name, p_partkey
----
Explained Query:
  Finish order_by=[#0 desc nulls_first, #2 asc nulls_last, #1 asc nulls_last, #3 asc nulls_last] output=[#0..=#7]
    Return // { arity: 8 }
      Project (#5, #2, #8, #0, #1, #3, #4, #6) // { arity: 8 }
        Join on=(#0 = #9 AND #7 = #10) type=differential // { arity: 11 }
          implementation
            l4 » %1[#0, #1]
          Get l4 // { arity: 9 }
          ArrangeBy keys=[[#0, #1]] // { arity: 2 }
            Reduce group_by=[#0] aggregates=[min(#1)] // { arity: 2 }
              Project (#0, #4) // { arity: 2 }
                Filter (#18 = "EUROPE") // { arity: 20 }
                  Join on=(#0 = #1 AND #2 = #6 AND #9 = #13 AND #15 = #17) type=delta // { arity: 20 }
                    implementation
                      %0 » l1[#0] » l0[#0] » l2[#0] » l3[#0]
                      l1 » %0[#0] » l0[#0] » l2[#0] » l3[#0]
                      l0 » l1[#1] » %0[#0] » l2[#0] » l3[#0]
                      l2 » l3[#0] » l0[#3] » l1[#1] » %0[#0]
                      l3 » l2[#2] » l0[#3] » l1[#1] » %0[#0]
                    ArrangeBy keys=[[#0]] // { arity: 1 }
                      Distinct group_by=[#0] // { arity: 1 }
                        Project (#0) // { arity: 1 }
                          Get l4 // { arity: 9 }
                    Get l1 // { arity: 5 }
                    Get l0 // { arity: 7 }
                    Get l2 // { arity: 4 }
                    Get l3 // { arity: 3 }
    With
      cte l4 =
        Project (#0, #2, #10, #11, #13..=#15, #19, #22) // { arity: 9 }
          Filter (#5 = 15) AND (#26 = "EUROPE") AND "%BRASS" ~~(varchar_to_text(#4)) // { arity: 28 }
            Join on=(#0 = #16 AND #9 = #17 AND #12 = #21 AND #23 = #25) type=delta // { arity: 28 }
              implementation
                %0 » l1[#0] » l0[#0] » l2[#0] » l3[#0]
                l0 » l1[#1] » %0[#0] » l2[#0] » l3[#0]
                l1 » %0[#0] » l0[#0] » l2[#0] » l3[#0]
                l2 » l3[#0] » l0[#3] » l1[#1] » %0[#0]
                l3 » l2[#2] » l0[#3] » l1[#1] » %0[#0]
              ArrangeBy keys=[[#0]] // { arity: 9 }
                Get materialize.public.part // { arity: 9 }
              Get l0 // { arity: 7 }
              Get l1 // { arity: 5 }
              Get l2 // { arity: 4 }
              Get l3 // { arity: 3 }
      cte l3 =
        ArrangeBy keys=[[#0]] // { arity: 3 }
          Get materialize.public.region // { arity: 3 }
      cte l2 =
        ArrangeBy keys=[[#0], [#2]] // { arity: 4 }
          Get materialize.public.nation // { arity: 4 }
      cte l1 =
        ArrangeBy keys=[[#0], [#1]] // { arity: 5 }
          Get materialize.public.partsupp // { arity: 5 }
      cte l0 =
        ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
          Get materialize.public.supplier // { arity: 7 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.fk_nation_regionkey
  - materialize.public.pk_region_regionkey
  - materialize.public.pk_part_partkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.fk_partsupp_partkey
  - materialize.public.fk_partsupp_suppkey

EOF


query T multiline
-- Query 03
EXPLAIN WITH(arity, join_impls) SELECT
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    o_orderdate,
    o_shippriority
FROM
    customer,
    orders,
    lineitem
WHERE
    c_mktsegment = 'BUILDING'
    AND c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate < DATE '1995-03-15'
    AND l_shipdate > DATE '1995-03-15'
GROUP BY
    l_orderkey,
    o_orderdate,
    o_shippriority
ORDER BY
    revenue DESC,
    o_orderdate
----
Explained Query:
  Finish order_by=[#1 desc nulls_first, #2 asc nulls_last] output=[#0..=#3]
    Project (#0, #3, #1, #2) // { arity: 4 }
      Reduce group_by=[#0, #1, #2] aggregates=[sum((#3 * (1 - #4)))] // { arity: 4 }
        Project (#8, #12, #15, #22, #23) // { arity: 5 }
          Filter (#6 = "BUILDING") AND (#12 < 1995-03-15) AND (#27 > 1995-03-15) // { arity: 33 }
            Join on=(#0 = #9 AND #8 = #17) type=delta // { arity: 33 }
              implementation
                %0 » %1[#1] » %2[#0]
                %1 » %0[#0] » %2[#0]
                %2 » %1[#0] » %0[#0]
              ArrangeBy keys=[[#0]] // { arity: 8 }
                Get materialize.public.customer // { arity: 8 }
              ArrangeBy keys=[[#0], [#1]] // { arity: 9 }
                Get materialize.public.orders // { arity: 9 }
              ArrangeBy keys=[[#0]] // { arity: 16 }
                Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey

EOF


query T multiline
-- Query 04
EXPLAIN WITH(arity, join_impls) SELECT
    o_orderpriority,
    count(*) AS order_count
FROM
    orders
WHERE
    o_orderdate >= DATE '1993-07-01'
    AND o_orderdate < DATE '1993-07-01' + INTERVAL '3' month
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem
        WHERE
            l_orderkey = o_orderkey
            AND l_commitdate < l_receiptdate
    )
GROUP BY
    o_orderpriority
ORDER BY
    o_orderpriority
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Reduce group_by=[#0] aggregates=[count(true)] // { arity: 2 }
      Project (#5) // { arity: 1 }
        Filter (#4 >= 1993-07-01) AND (date_to_timestamp(#4) < 1993-10-01 00:00:00) // { arity: 11 }
          Join on=(eq(#0, #9, #10)) type=delta // { arity: 11 }
            implementation
              %0 » %1[#0] » %2[#0]
              %1 » %2[#0] » %0[#0]
              %2 » %1[#0] » %0[#0]
            ArrangeBy keys=[[#0]] // { arity: 9 }
              Get materialize.public.orders // { arity: 9 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Distinct group_by=[#0] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Filter (#4 >= 1993-07-01) AND (#0) IS NOT NULL AND (date_to_timestamp(#4) < 1993-10-01 00:00:00) // { arity: 9 }
                    Get materialize.public.orders // { arity: 9 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Distinct group_by=[#0] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Filter (#11 < #12) // { arity: 16 }
                    Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_orders_orderkey
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF


query T multiline
-- Query 05
EXPLAIN WITH(arity, join_impls) SELECT
    n_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue
FROM
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND l_suppkey = s_suppkey
    AND c_nationkey = s_nationkey
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'ASIA'
    AND o_orderdate >= DATE '1994-01-01'
    AND o_orderdate < DATE '1995-01-01'
GROUP BY
    n_name
ORDER BY
    revenue DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first] output=[#0, #1]
    Reduce group_by=[#2] aggregates=[sum((#0 * (1 - #1)))] // { arity: 2 }
      Project (#22, #23, #36) // { arity: 3 }
        Filter (#40 = "ASIA") AND (#12 < 1995-01-01) AND (#12 >= 1994-01-01) // { arity: 42 }
          Join on=(#0 = #9 AND eq(#3, #34, #35) AND #8 = #17 AND #19 = #33 AND #37 = #39) type=differential // { arity: 42 }
            implementation
              %5 » %4[#2] » %0[#3] » %1[#1] » %2[#0] » %3[#0, #1]
            ArrangeBy keys=[[#3]] // { arity: 8 }
              Get materialize.public.customer // { arity: 8 }
            ArrangeBy keys=[[#1]] // { arity: 9 }
              Get materialize.public.orders // { arity: 9 }
            ArrangeBy keys=[[#0]] // { arity: 16 }
              Get materialize.public.lineitem // { arity: 16 }
            ArrangeBy keys=[[#0, #1]] // { arity: 2 }
              Project (#0, #3) // { arity: 2 }
                Filter (#0) IS NOT NULL // { arity: 7 }
                  Get materialize.public.supplier // { arity: 7 }
            ArrangeBy keys=[[#2]] // { arity: 4 }
              Get materialize.public.nation // { arity: 4 }
            ArrangeBy keys=[[#0]] // { arity: 3 }
              Get materialize.public.region // { arity: 3 }

Used Indexes:
  - materialize.public.fk_nation_regionkey
  - materialize.public.pk_region_regionkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_customer_nationkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey

EOF


query T multiline
-- Query 06
EXPLAIN WITH(arity, join_impls) SELECT
    sum(l_extendedprice * l_discount) AS revenue
FROM
    lineitem
WHERE
    l_quantity < 24
    AND l_shipdate >= DATE '1994-01-01'
    AND l_shipdate < DATE '1994-01-01' + INTERVAL '1' year
    AND l_discount BETWEEN 0.06 - 0.01 AND 0.07
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum((#0 * #1))] // { arity: 1 }
        Project (#5, #6) // { arity: 2 }
          Filter (#4 < 24) AND (#6 <= 0.07) AND (#6 >= 0.05) AND (#10 >= 1994-01-01) AND (date_to_timestamp(#10) < 1995-01-01 00:00:00) // { arity: 16 }
            Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF


query T multiline
-- Query 07
EXPLAIN WITH(arity, join_impls) SELECT
    supp_nation,
    cust_nation,
    l_year,
    sum(volume) AS revenue
FROM
    (
        SELECT
            n1.n_name AS supp_nation,
            n2.n_name AS cust_nation,
            extract(year FROM l_shipdate) AS l_year,
            l_extendedprice * (1 - l_discount) AS volume
        FROM
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        WHERE
            s_suppkey = l_suppkey
            AND o_orderkey = l_orderkey
            AND c_custkey = o_custkey
            AND s_nationkey = n1.n_nationkey
            AND c_nationkey = n2.n_nationkey
            AND (
                (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
            )
            AND l_shipdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
    ) AS shipping
GROUP BY
    supp_nation,
    cust_nation,
    l_year
ORDER BY
    supp_nation,
    cust_nation,
    l_year
----
Explained Query:
  Finish order_by=[#0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#3, #4, extract_year_d(#2)] aggregates=[sum((#0 * (1 - #1)))] // { arity: 4 }
        Project (#12, #13, #17, #41, #45) // { arity: 5 }
          Filter (#17 <= 1996-12-31) AND (#17 >= 1995-01-01) AND (#48 OR #49) AND (#50 OR #51) AND ((#48 AND #51) OR (#49 AND #50)) // { arity: 52 }
            Map ((#41 = "FRANCE"), (#41 = "GERMANY"), (#45 = "FRANCE"), (#45 = "GERMANY")) // { arity: 52 }
              Join on=(#0 = #9 AND #3 = #40 AND #7 = #23 AND #24 = #32 AND #35 = #44) type=delta // { arity: 48 }
                implementation
                  %0 » l0[#0] » %1[#2] » %2[#0] » %3[#0] » l0[#0]
                  %1 » %0[#0] » l0[#0] » %2[#0] » %3[#0] » l0[#0]
                  %2 » %1[#0] » %0[#0] » l0[#0] » %3[#0] » l0[#0]
                  %3 » l0[#0] » %2[#1] » %1[#0] » %0[#0] » l0[#0]
                  l0 » %0[#3] » %1[#2] » %2[#0] » %3[#0] » l0[#0]
                  l0 » %3[#3] » %2[#1] » %1[#0] » %0[#0] » l0[#0]
                ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
                  Get materialize.public.supplier // { arity: 7 }
                ArrangeBy keys=[[#0], [#2]] // { arity: 16 }
                  Get materialize.public.lineitem // { arity: 16 }
                ArrangeBy keys=[[#0], [#1]] // { arity: 9 }
                  Get materialize.public.orders // { arity: 9 }
                ArrangeBy keys=[[#0], [#3]] // { arity: 8 }
                  Get materialize.public.customer // { arity: 8 }
                Get l0 // { arity: 4 }
                Get l0 // { arity: 4 }
    With
      cte l0 =
        ArrangeBy keys=[[#0]] // { arity: 4 }
          Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_customer_nationkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey
  - materialize.public.fk_lineitem_suppkey

EOF


query T multiline
-- Query 08
EXPLAIN WITH(arity, join_impls) SELECT
    o_year,
    sum(case
        when nation = 'BRAZIL' then volume
        else 0
    end) / sum(volume) AS mkt_share
FROM
    (
        SELECT
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) AS volume,
            n2.n_name AS nation
        FROM
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        WHERE
            p_partkey = l_partkey
            AND s_suppkey = l_suppkey
            AND l_orderkey = o_orderkey
            AND o_custkey = c_custkey
            AND c_nationkey = n1.n_nationkey
            AND n1.n_regionkey = r_regionkey
            AND r_name = 'AMERICA'
            AND s_nationkey = n2.n_nationkey
            AND o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
            AND p_type = 'ECONOMY ANODIZED STEEL'
    ) AS all_nations
GROUP BY
    o_year
ORDER BY
    o_year
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Project (#0, #3) // { arity: 2 }
      Map ((#1 / #2)) // { arity: 4 }
        Reduce group_by=[extract_year_d(#2)] aggregates=[sum(case when (#3 = "BRAZIL") then (#0 * (1 - #1)) else 0 end), sum((#0 * (1 - #1)))] // { arity: 3 }
          Project (#21, #22, #36, #54) // { arity: 4 }
            Filter (#58 = "AMERICA") AND (#36 <= 1996-12-31) AND (#36 >= 1995-01-01) AND ("ECONOMY ANODIZED STEEL" = varchar_to_text(#4)) // { arity: 60 }
              Join on=(#0 = #17 AND #9 = #18 AND #12 = #53 AND #16 = #32 AND #33 = #41 AND #44 = #49 AND #51 = #57) type=delta // { arity: 60 }
                implementation
                  %0 » %2[#1] » %3[#0] » %1[#0] » %4[#0] » %5[#0] » %7[#0] » %6[#0]
                  %1 » %2[#2] » %0[#0] » %3[#0] » %4[#0] » %5[#0] » %7[#0] » %6[#0]
                  %2 » %0[#0] » %3[#0] » %1[#0] » %4[#0] » %5[#0] » %7[#0] » %6[#0]
                  %3 » %2[#0] » %0[#0] » %1[#0] » %4[#0] » %5[#0] » %7[#0] » %6[#0]
                  %4 » %3[#1] » %2[#0] » %0[#0] » %1[#0] » %5[#0] » %7[#0] » %6[#0]
                  %5 » %7[#0] » %4[#3] » %3[#1] » %2[#0] » %0[#0] » %1[#0] » %6[#0]
                  %6 » %1[#3] » %2[#2] » %0[#0] » %3[#0] » %4[#0] » %5[#0] » %7[#0]
                  %7 » %5[#2] » %4[#3] » %3[#1] » %2[#0] » %0[#0] » %1[#0] » %6[#0]
                ArrangeBy keys=[[#0]] // { arity: 9 }
                  Get materialize.public.part // { arity: 9 }
                ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
                  Get materialize.public.supplier // { arity: 7 }
                ArrangeBy keys=[[#0], [#1], [#2]] // { arity: 16 }
                  Get materialize.public.lineitem // { arity: 16 }
                ArrangeBy keys=[[#0], [#1]] // { arity: 9 }
                  Get materialize.public.orders // { arity: 9 }
                ArrangeBy keys=[[#0], [#3]] // { arity: 8 }
                  Get materialize.public.customer // { arity: 8 }
                ArrangeBy keys=[[#0], [#2]] // { arity: 4 }
                  Get materialize.public.nation // { arity: 4 }
                ArrangeBy keys=[[#0]] // { arity: 4 }
                  Get materialize.public.nation // { arity: 4 }
                ArrangeBy keys=[[#0]] // { arity: 3 }
                  Get materialize.public.region // { arity: 3 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.fk_nation_regionkey
  - materialize.public.pk_region_regionkey
  - materialize.public.pk_part_partkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_customer_nationkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey
  - materialize.public.fk_lineitem_partkey
  - materialize.public.fk_lineitem_suppkey

EOF


query T multiline
-- Query 09
EXPLAIN WITH(arity, join_impls) SELECT
    nation,
    o_year,
    sum(amount) AS sum_profit
FROM
    (
        SELECT
            n_name AS nation,
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
        FROM
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        WHERE
            s_suppkey = l_suppkey
            AND ps_suppkey = l_suppkey
            AND ps_partkey = l_partkey
            AND p_partkey = l_partkey
            AND o_orderkey = l_orderkey
            AND s_nationkey = n_nationkey
            AND p_name like '%green%'
    ) AS profit
GROUP BY
    nation,
    o_year
ORDER BY
    nation,
    o_year DESC
----
Explained Query:
  Finish order_by=[#0 asc nulls_last, #1 desc nulls_first] output=[#0..=#2]
    Reduce group_by=[#5, extract_year_d(#4)] aggregates=[sum(((#1 * (1 - #2)) - (#3 * #0)))] // { arity: 3 }
      Project (#20..=#22, #35, #41, #47) // { arity: 6 }
        Filter "%green%" ~~(varchar_to_text(#1)) // { arity: 50 }
          Join on=(eq(#0, #17, #32) AND eq(#9, #18, #33) AND #12 = #46 AND #16 = #37) type=delta // { arity: 50 }
            implementation
              %0 » %2[#1] » %3[#0, #1] » %1[#0] » %4[#0] » %5[#0]
              %1 » %2[#2] » %3[#0, #1] » %0[#0] » %4[#0] » %5[#0]
              %2 » %3[#0, #1] » %0[#0] » %1[#0] » %4[#0] » %5[#0]
              %3 » %2[#1, #2] » %0[#0] » %1[#0] » %4[#0] » %5[#0]
              %4 » %2[#0] » %3[#0, #1] » %0[#0] » %1[#0] » %5[#0]
              %5 » %1[#3] » %2[#2] » %3[#0, #1] » %0[#0] » %4[#0]
            ArrangeBy keys=[[#0]] // { arity: 9 }
              Get materialize.public.part // { arity: 9 }
            ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
              Get materialize.public.supplier // { arity: 7 }
            ArrangeBy keys=[[#0], [#1], [#1, #2], [#2]] // { arity: 16 }
              Get materialize.public.lineitem // { arity: 16 }
            ArrangeBy keys=[[#0, #1]] // { arity: 5 }
              Get materialize.public.partsupp // { arity: 5 }
            ArrangeBy keys=[[#0]] // { arity: 9 }
              Get materialize.public.orders // { arity: 9 }
            ArrangeBy keys=[[#0]] // { arity: 4 }
              Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_part_partkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.pk_partsupp_partkey_suppkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_lineitem_orderkey
  - materialize.public.fk_lineitem_partkey
  - materialize.public.fk_lineitem_suppkey
  - materialize.public.fk_lineitem_partsuppkey

EOF


query T multiline
-- Query 10
EXPLAIN WITH(arity, join_impls) SELECT
    c_custkey,
    c_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
FROM
    customer,
    orders,
    lineitem,
    nation
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate >= DATE '1993-10-01'
    AND o_orderdate < DATE '1994-01-01'
    AND o_orderdate < DATE '1993-10-01' + INTERVAL '3' month
    AND l_returnflag = 'R'
    AND c_nationkey = n_nationkey
GROUP BY
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
ORDER BY
    revenue DESC
----
Explained Query:
  Finish order_by=[#2 desc nulls_first] output=[#0..=#7]
    Project (#0, #1, #7, #2, #4, #5, #3, #6) // { arity: 8 }
      Reduce group_by=[#0, #1, #4, #3, #8, #2, #5] aggregates=[sum((#6 * (1 - #7)))] // { arity: 8 }
        Project (#0..=#2, #4, #5, #7, #22, #23, #34) // { arity: 9 }
          Filter (#25 = "R") AND (#12 < 1994-01-01) AND (#12 >= 1993-10-01) AND (date_to_timestamp(#12) < 1994-01-01 00:00:00) // { arity: 37 }
            Join on=(#0 = #9 AND #3 = #33 AND #8 = #17) type=delta // { arity: 37 }
              implementation
                %0 » %1[#1] » %2[#0] » %3[#0]
                %1 » %2[#0] » %0[#0] » %3[#0]
                %2 » %1[#0] » %0[#0] » %3[#0]
                %3 » %0[#3] » %1[#1] » %2[#0]
              ArrangeBy keys=[[#0], [#3]] // { arity: 8 }
                Get materialize.public.customer // { arity: 8 }
              ArrangeBy keys=[[#0], [#1]] // { arity: 9 }
                Get materialize.public.orders // { arity: 9 }
              ArrangeBy keys=[[#0]] // { arity: 16 }
                Get materialize.public.lineitem // { arity: 16 }
              ArrangeBy keys=[[#0]] // { arity: 4 }
                Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_customer_nationkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey

EOF


query T multiline
-- Query 11
EXPLAIN WITH(arity, join_impls) SELECT
    ps_partkey,
    sum(ps_supplycost * ps_availqty) AS value
FROM
    partsupp,
    supplier,
    nation
WHERE
    ps_suppkey = s_suppkey
    AND s_nationkey = n_nationkey
    AND n_name = 'GERMANY'
GROUP BY
    ps_partkey having
        sum(ps_supplycost * ps_availqty) > (
            SELECT
                sum(ps_supplycost * ps_availqty) * 0.0001
            FROM
                partsupp,
                supplier,
                nation
            WHERE
                ps_suppkey = s_suppkey
                AND s_nationkey = n_nationkey
                AND n_name = 'GERMANY'
        )
ORDER BY
    value DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Project (#0, #1) // { arity: 2 }
        Filter (#1 > (#2 * 0.0001)) // { arity: 3 }
          CrossJoin type=differential // { arity: 3 }
            implementation
              %0 » %1[]
            Reduce group_by=[#0] aggregates=[sum((#2 * integer_to_numeric(#1)))] // { arity: 2 }
              Get l0 // { arity: 3 }
            ArrangeBy keys=[[]] // { arity: 1 }
              Reduce aggregates=[sum((#1 * integer_to_numeric(#0)))] // { arity: 1 }
                Project (#1, #2) // { arity: 2 }
                  Get l0 // { arity: 3 }
    With
      cte l0 =
        Project (#0, #2, #3) // { arity: 3 }
          Filter (#13 = "GERMANY") // { arity: 16 }
            Join on=(#1 = #5 AND #8 = #12) type=delta // { arity: 16 }
              implementation
                %0 » %1[#0] » %2[#0]
                %1 » %2[#0] » %0[#1]
                %2 » %1[#3] » %0[#1]
              ArrangeBy keys=[[#1]] // { arity: 5 }
                Get materialize.public.partsupp // { arity: 5 }
              ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
                Get materialize.public.supplier // { arity: 7 }
              ArrangeBy keys=[[#0]] // { arity: 4 }
                Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.fk_partsupp_suppkey

EOF


query T multiline
-- Query 12
EXPLAIN WITH(arity, join_impls) SELECT
    l_shipmode,
    sum(case
        when o_orderpriority = '1-URGENT'
            or o_orderpriority = '2-HIGH'
            then 1
        else 0
    end) AS high_line_count,
    sum(case
        when o_orderpriority <> '1-URGENT'
            AND o_orderpriority <> '2-HIGH'
            then 1
        else 0
    end) AS low_line_count
FROM
    orders,
    lineitem
WHERE
    o_orderkey = l_orderkey
    AND l_shipmode IN ('MAIL', 'SHIP')
    AND l_commitdate < l_receiptdate
    AND l_shipdate < l_commitdate
    AND l_receiptdate >= DATE '1994-01-01'
    AND l_receiptdate < DATE '1994-01-01' + INTERVAL '1' year
GROUP BY
    l_shipmode
ORDER BY
    l_shipmode
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#2]
    Reduce group_by=[#1] aggregates=[sum(case when ((#0 = "2-HIGH") OR (#0 = "1-URGENT")) then 1 else 0 end), sum(case when ((#0 != "2-HIGH") AND (#0 != "1-URGENT")) then 1 else 0 end)] // { arity: 3 }
      Project (#5, #23) // { arity: 2 }
        Filter (#21 >= 1994-01-01) AND (#19 < #20) AND (#20 < #21) AND (date_to_timestamp(#21) < 1995-01-01 00:00:00) AND ((#23 = "MAIL") OR (#23 = "SHIP")) // { arity: 25 }
          Join on=(#0 = #9) type=delta // { arity: 25 }
            implementation
              %0 » %1[#0]
              %1 » %0[#0]
            ArrangeBy keys=[[#0]] // { arity: 9 }
              Get materialize.public.orders // { arity: 9 }
            ArrangeBy keys=[[#0]] // { arity: 16 }
              Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_lineitem_orderkey

EOF


query T multiline
-- Query 13
EXPLAIN WITH(arity, join_impls) SELECT
    c_count,
    count(*) AS custdist
FROM
    (
        SELECT
            c_custkey,
            count(o_orderkey) c_count -- workaround for no column aliases
        FROM
            customer LEFT OUTER JOIN orders ON
                c_custkey = o_custkey
                AND o_comment NOT LIKE '%special%requests%'
        GROUP BY
            c_custkey
    ) AS c_orders -- (c_custkey, c_count) -- no column aliases yet
GROUP BY
    c_count
ORDER BY
    custdist DESC,
    c_count DESC
----
Explained Query:
  Finish order_by=[#1 desc nulls_first, #0 desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0] aggregates=[count(true)] // { arity: 2 }
        Project (#1) // { arity: 1 }
          Reduce group_by=[#0] aggregates=[count(#1)] // { arity: 2 }
            Union // { arity: 2 }
              Project (#0, #8) // { arity: 2 }
                Get l0 // { arity: 9 }
              Project (#0, #16) // { arity: 2 }
                Map (null) // { arity: 17 }
                  Join on=(#0 = #8 AND #1 = #9 AND #2 = #10 AND #3 = #11 AND #4 = #12 AND #5 = #13 AND #6 = #14 AND #7 = #15) type=differential // { arity: 16 }
                    implementation
                      materialize.public.customer » %0[#0, #1, #2, #3, #4, #5, #6, #7]
                    ArrangeBy keys=[[#0, #1, #2, #3, #4, #5, #6, #7]] // { arity: 8 }
                      Union // { arity: 8 }
                        Negate // { arity: 8 }
                          Distinct group_by=[#0, #1, #2, #3, #4, #5, #6, #7] // { arity: 8 }
                            Project (#0..=#7) // { arity: 8 }
                              Get l0 // { arity: 9 }
                        Distinct group_by=[#0, #1, #2, #3, #4, #5, #6, #7] // { arity: 8 }
                          Get materialize.public.customer // { arity: 8 }
                    Get materialize.public.customer // { arity: 8 }
    With
      cte l0 =
        Project (#0..=#8) // { arity: 9 }
          Filter NOT("%special%requests%" ~~(varchar_to_text(#16))) // { arity: 17 }
            Join on=(#0 = #9) type=delta // { arity: 17 }
              implementation
                %0 » %1[#1]
                %1 » %0[#0]
              ArrangeBy keys=[[#0]] // { arity: 8 }
                Get materialize.public.customer // { arity: 8 }
              ArrangeBy keys=[[#1]] // { arity: 9 }
                Get materialize.public.orders // { arity: 9 }

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_orders_custkey

EOF


query T multiline
-- Query 14
EXPLAIN WITH(arity, join_impls) SELECT
    100.00 * sum(case
        when p_type like 'PROMO%'
            then l_extendedprice * (1 - l_discount)
        else 0
    end) / sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey
    AND l_shipdate >= DATE '1995-09-01'
    AND l_shipdate < DATE '1995-09-01' + INTERVAL '1' month
----
Explained Query:
  Return // { arity: 1 }
    Project (#2) // { arity: 1 }
      Map (((100 * #0) / #1)) // { arity: 3 }
        Union // { arity: 2 }
          Get l0 // { arity: 2 }
          Map (null, null) // { arity: 2 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l0 // { arity: 2 }
              Constant // { arity: 0 }
                - ()
  With
    cte l0 =
      Reduce aggregates=[sum(case when "PROMO%" ~~(varchar_to_text(#2)) then (#0 * (1 - #1)) else 0 end), sum((#0 * (1 - #1)))] // { arity: 2 }
        Project (#5, #6, #20) // { arity: 3 }
          Filter (#10 >= 1995-09-01) AND (date_to_timestamp(#10) < 1995-10-01 00:00:00) // { arity: 25 }
            Join on=(#1 = #16) type=delta // { arity: 25 }
              implementation
                %0 » %1[#0]
                %1 » %0[#1]
              ArrangeBy keys=[[#1]] // { arity: 16 }
                Get materialize.public.lineitem // { arity: 16 }
              ArrangeBy keys=[[#0]] // { arity: 9 }
                Get materialize.public.part // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey
  - materialize.public.fk_lineitem_partkey

EOF


statement ok
create view revenue (supplier_no, total_revenue) as
    SELECT
        l_suppkey,
        sum(l_extendedprice * (1 - l_discount))
    FROM
        lineitem
    WHERE
        l_shipdate >= DATE '1996-01-01'
        AND l_shipdate < DATE '1996-01-01' + INTERVAL '3' month
    GROUP BY
        l_suppkey

query T multiline
-- Query 15
EXPLAIN WITH(arity, join_impls) SELECT
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
FROM
    supplier,
    revenue
WHERE
    s_suppkey = supplier_no
    AND total_revenue = (
        SELECT
            max(total_revenue)
        FROM
            revenue
    )
ORDER BY
    s_suppkey
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#4]
    Return // { arity: 5 }
      Project (#0..=#2, #4, #8) // { arity: 5 }
        Join on=(#0 = #7 AND #8 = #9) type=differential // { arity: 10 }
          implementation
            %0 » %1[#0] » %2[#0]
          ArrangeBy keys=[[#0]] // { arity: 7 }
            Get materialize.public.supplier // { arity: 7 }
          ArrangeBy keys=[[#0]] // { arity: 2 }
            Get l0 // { arity: 2 }
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Reduce aggregates=[max(#0)] // { arity: 1 }
              Project (#1) // { arity: 1 }
                Get l0 // { arity: 2 }
    With
      cte l0 =
        Reduce group_by=[#0] aggregates=[sum((#1 * (1 - #2)))] // { arity: 2 }
          Project (#2, #5, #6) // { arity: 3 }
            Filter (#10 >= 1996-01-01) AND (date_to_timestamp(#10) < 1996-04-01 00:00:00) // { arity: 16 }
              Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_supplier_suppkey
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF

statement ok
drop view revenue


query T multiline
-- Query 16
EXPLAIN WITH(arity, join_impls) SELECT
    p_brand,
    p_type,
    p_size,
    count(DISTINCT ps_suppkey) AS supplier_cnt
FROM
    partsupp,
    part
WHERE
    p_partkey = ps_partkey
    AND p_brand <> 'Brand#45'
    AND p_type NOT LIKE 'MEDIUM POLISHED%'
    AND p_size IN (49, 14, 23, 45, 19, 3, 36, 9)
    AND ps_suppkey NOT IN (
        SELECT
            s_suppkey
        FROM
            supplier
        WHERE
            s_comment like '%Customer%Complaints%'
    )
GROUP BY
    p_brand,
    p_type,
    p_size
ORDER BY
    supplier_cnt DESC,
    p_brand,
    p_type,
    p_size
----
Explained Query:
  Finish order_by=[#3 desc nulls_first, #0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#1, #2, #3] aggregates=[count(distinct #0)] // { arity: 4 }
        Project (#0..=#3) // { arity: 4 }
          Join on=(#0 = #4) type=differential // { arity: 5 }
            implementation
              %1 » %0[#0]
            ArrangeBy keys=[[#0]] // { arity: 4 }
              Get l0 // { arity: 4 }
            Union // { arity: 1 }
              Negate // { arity: 1 }
                Distinct group_by=[#0] // { arity: 1 }
                  Project (#0) // { arity: 1 }
                    Filter ((#1) IS NULL OR (#0 = #1)) // { arity: 2 }
                      CrossJoin type=differential // { arity: 2 }
                        implementation
                          %1 » %0[]
                        ArrangeBy keys=[[]] // { arity: 1 }
                          Get l1 // { arity: 1 }
                        Project (#0) // { arity: 1 }
                          Filter "%Customer%Complaints%" ~~(varchar_to_text(#6)) // { arity: 7 }
                            Get materialize.public.supplier // { arity: 7 }
              Get l1 // { arity: 1 }
    With
      cte l1 =
        Distinct group_by=[#0] // { arity: 1 }
          Project (#0) // { arity: 1 }
            Get l0 // { arity: 4 }
      cte l0 =
        Project (#1, #8..=#10) // { arity: 4 }
          Filter (#8 != "Brand#45") AND NOT("MEDIUM POLISHED%" ~~(varchar_to_text(#9))) AND ((#10 = 3) OR (#10 = 9) OR (#10 = 14) OR (#10 = 19) OR (#10 = 23) OR (#10 = 36) OR (#10 = 45) OR (#10 = 49)) // { arity: 14 }
            Join on=(#0 = #5) type=delta // { arity: 14 }
              implementation
                %0 » %1[#0]
                %1 » %0[#0]
              ArrangeBy keys=[[#0]] // { arity: 5 }
                Get materialize.public.partsupp // { arity: 5 }
              ArrangeBy keys=[[#0]] // { arity: 9 }
                Get materialize.public.part // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_partsupp_partkey

EOF


query T multiline
-- Query 17
EXPLAIN WITH(arity, join_impls) SELECT
  sum(l_extendedprice) / 7.0 AS avg_yearly
FROM
  lineitem,
  part
WHERE
  p_partkey = l_partkey
  AND p_brand = 'Brand#23'
  AND p_container = 'MED BOX'
  AND l_quantity < (
    SELECT
      0.2 * avg(l_quantity)
    FROM
      lineitem
    WHERE
      l_partkey = p_partkey
  )
----
Explained Query:
  Return // { arity: 1 }
    Project (#1) // { arity: 1 }
      Map ((#0 / 7)) // { arity: 2 }
        Union // { arity: 1 }
          Get l2 // { arity: 1 }
          Map (null) // { arity: 1 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l2 // { arity: 1 }
              Constant // { arity: 0 }
                - ()
  With
    cte l2 =
      Reduce aggregates=[sum(#0)] // { arity: 1 }
        Project (#2) // { arity: 1 }
          Filter (numeric_to_double(#1) < (0.2 * (numeric_to_double(#4) / bigint_to_double(case when (#5 = 0) then null else #5 end)))) // { arity: 6 }
            Join on=(#0 = #3) type=differential // { arity: 6 }
              implementation
                l1 » %1[#0]
              Get l1 // { arity: 3 }
              ArrangeBy keys=[[#0]] // { arity: 3 }
                Reduce group_by=[#0] aggregates=[sum(#1), count(true)] // { arity: 3 }
                  Project (#0, #5) // { arity: 2 }
                    Join on=(#0 = #2) type=delta // { arity: 17 }
                      implementation
                        %0 » l0[#1]
                        l0 » %0[#0]
                      ArrangeBy keys=[[#0]] // { arity: 1 }
                        Distinct group_by=[#0] // { arity: 1 }
                          Project (#0) // { arity: 1 }
                            Get l1 // { arity: 3 }
                      Get l0 // { arity: 16 }
    cte l1 =
      Project (#1, #4, #5) // { arity: 3 }
        Filter (#19 = "Brand#23") AND (#22 = "MED BOX") // { arity: 25 }
          Join on=(#1 = #16) type=delta // { arity: 25 }
            implementation
              l0 » %1[#0]
              %1 » l0[#1]
            Get l0 // { arity: 16 }
            ArrangeBy keys=[[#0]] // { arity: 9 }
              Get materialize.public.part // { arity: 9 }
    cte l0 =
      ArrangeBy keys=[[#1]] // { arity: 16 }
        Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_part_partkey
  - materialize.public.fk_lineitem_partkey

EOF


query T multiline
-- Query 18
EXPLAIN WITH(arity, join_impls) SELECT
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
FROM
    customer,
    orders,
    lineitem
WHERE
    o_orderkey IN (
        SELECT
            l_orderkey
        FROM
            lineitem
        GROUP BY
            l_orderkey having
                sum(l_quantity) > 300
    )
    AND c_custkey = o_custkey
    AND o_orderkey = l_orderkey
GROUP BY
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
ORDER BY
    o_totalprice DESC,
    o_orderdate
----
Explained Query:
  Finish order_by=[#4 desc nulls_first, #3 asc nulls_last] output=[#0..=#5]
    Return // { arity: 6 }
      Reduce group_by=[#1, #0, #2, #4, #3] aggregates=[sum(#5)] // { arity: 6 }
        Project (#0..=#5) // { arity: 6 }
          Filter (#7 > 300) // { arity: 8 }
            Join on=(#2 = #6) type=differential // { arity: 8 }
              implementation
                l1 » %1[#0]
              Get l1 // { arity: 6 }
              ArrangeBy keys=[[#0]] // { arity: 2 }
                Reduce group_by=[#0] aggregates=[sum(#1)] // { arity: 2 }
                  Project (#0, #5) // { arity: 2 }
                    Join on=(#0 = #1) type=delta // { arity: 17 }
                      implementation
                        %0 » l0[#0]
                        l0 » %0[#0]
                      ArrangeBy keys=[[#0]] // { arity: 1 }
                        Distinct group_by=[#0] // { arity: 1 }
                          Project (#2) // { arity: 1 }
                            Get l1 // { arity: 6 }
                      Get l0 // { arity: 16 }
    With
      cte l1 =
        Project (#0, #1, #8, #11, #12, #21) // { arity: 6 }
          Join on=(#0 = #9 AND #8 = #17) type=delta // { arity: 33 }
            implementation
              %0 » %1[#1] » l0[#0]
              %1 » %0[#0] » l0[#0]
              l0 » %1[#0] » %0[#0]
            ArrangeBy keys=[[#0]] // { arity: 8 }
              Get materialize.public.customer // { arity: 8 }
            ArrangeBy keys=[[#0], [#1]] // { arity: 9 }
              Get materialize.public.orders // { arity: 9 }
            Get l0 // { arity: 16 }
      cte l0 =
        ArrangeBy keys=[[#0]] // { arity: 16 }
          Get materialize.public.lineitem // { arity: 16 }

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_orders_custkey
  - materialize.public.fk_lineitem_orderkey

EOF


query T multiline
-- Query 19
EXPLAIN WITH(arity, join_impls) SELECT
    sum(l_extendedprice* (1 - l_discount)) AS revenue
FROM
    lineitem,
    part
WHERE
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#12'
        AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
        AND l_quantity >= CAST (1 AS smallint) AND l_quantity <= CAST (1 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (5 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#23'
        AND p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
        AND l_quantity >= CAST (10 AS smallint) AND l_quantity <= CAST (10 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (10 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#34'
        AND p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
        AND l_quantity >= CAST (20 AS smallint) AND l_quantity <= CAST (20 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (15 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum((#0 * (1 - #1)))] // { arity: 1 }
        Project (#5, #6) // { arity: 2 }
          Filter (#13 = "DELIVER IN PERSON") AND (#21 >= 1) AND ((#14 = "AIR") OR (#14 = "AIR REG")) AND ((#25 AND #26) OR (#27 AND #28) OR (#29 AND #30)) AND ((#31 AND #32 AND #33) OR (#34 AND #35 AND #36) OR (#37 AND #38 AND #39)) AND ((#25 AND #26 AND #34 AND #35 AND #36) OR (#27 AND #28 AND #37 AND #38 AND #39) OR (#29 AND #30 AND #31 AND #32 AND #33)) // { arity: 40 }
            Map ((#4 <= 20), (#4 >= 10), (#4 <= 30), (#4 >= 20), (#4 <= 11), (#4 >= 1), (#19 = "Brand#12"), (#21 <= 5), ((#22 = "SM BOX") OR (#22 = "SM PKG") OR (#22 = "SM CASE") OR (#22 = "SM PACK")), (#19 = "Brand#23"), (#21 <= 10), ((#22 = "MED BAG") OR (#22 = "MED BOX") OR (#22 = "MED PKG") OR (#22 = "MED PACK")), (#19 = "Brand#34"), (#21 <= 15), ((#22 = "LG BOX") OR (#22 = "LG PKG") OR (#22 = "LG CASE") OR (#22 = "LG PACK"))) // { arity: 40 }
              Join on=(#1 = #16) type=delta // { arity: 25 }
                implementation
                  %0 » %1[#0]
                  %1 » %0[#1]
                ArrangeBy keys=[[#1]] // { arity: 16 }
                  Get materialize.public.lineitem // { arity: 16 }
                ArrangeBy keys=[[#0]] // { arity: 9 }
                  Get materialize.public.part // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey
  - materialize.public.fk_lineitem_partkey

EOF


query T multiline
-- Query 20
EXPLAIN WITH(arity, join_impls) SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Project (#1, #2) // { arity: 2 }
        Join on=(#0 = #3) type=differential // { arity: 4 }
          implementation
            l0 » %1[#0]
          Get l0 // { arity: 3 }
          ArrangeBy keys=[[#0]] // { arity: 1 }
            Distinct group_by=[#0] // { arity: 1 }
              Project (#0) // { arity: 1 }
                Filter (integer_to_numeric(#2) > (0.5 * #5)) // { arity: 6 }
                  Join on=(#0 = #4 AND #1 = #3) type=differential // { arity: 6 }
                    implementation
                      %0 » %1[#0, #1]
                    Project (#0, #1, #3) // { arity: 3 }
                      Filter (#0 = #2) // { arity: 4 }
                        Get l1 // { arity: 4 }
                    ArrangeBy keys=[[#0, #1]] // { arity: 3 }
                      Reduce group_by=[#0, #1] aggregates=[sum(#2)] // { arity: 3 }
                        Project (#0, #1, #6) // { arity: 3 }
                          Filter (#12 >= 1995-01-01) AND (date_to_timestamp(#12) < 1996-01-01 00:00:00) // { arity: 18 }
                            Join on=(#0 = #3 AND #1 = #4) type=delta // { arity: 18 }
                              implementation
                                %0 » %1[#1, #2]
                                %1 » %0[#0, #1]
                              ArrangeBy keys=[[#0, #1]] // { arity: 2 }
                                Distinct group_by=[#0, #1] // { arity: 2 }
                                  Project (#1, #2) // { arity: 2 }
                                    Get l1 // { arity: 4 }
                              ArrangeBy keys=[[#1, #2]] // { arity: 16 }
                                Get materialize.public.lineitem // { arity: 16 }
    With
      cte l1 =
        Project (#0..=#3) // { arity: 4 }
          Join on=(#1 = #6) type=differential // { arity: 7 }
            implementation
              %1 » %2[#0] » %0[]
            ArrangeBy keys=[[]] // { arity: 1 }
              Distinct group_by=[#0] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Get l0 // { arity: 3 }
            ArrangeBy keys=[[#0]] // { arity: 5 }
              Get materialize.public.partsupp // { arity: 5 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Distinct group_by=[#0] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Filter (#0) IS NOT NULL AND "forest%" ~~(varchar_to_text(#1)) // { arity: 9 }
                    Get materialize.public.part // { arity: 9 }
      cte l0 =
        Project (#0..=#2) // { arity: 3 }
          Filter (#8 = "CANADA") // { arity: 11 }
            Join on=(#3 = #7) type=delta // { arity: 11 }
              implementation
                %0 » %1[#0]
                %1 » %0[#3]
              ArrangeBy keys=[[#3]] // { arity: 7 }
                Get materialize.public.supplier // { arity: 7 }
              ArrangeBy keys=[[#0]] // { arity: 4 }
                Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_part_partkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.fk_partsupp_partkey
  - materialize.public.fk_lineitem_partsuppkey

EOF


query T multiline
-- Query 21
EXPLAIN WITH(arity, join_impls) SELECT
    s_name,
    count(*) AS numwait
FROM
    supplier,
    lineitem l1,
    orders,
    nation
WHERE
    s_suppkey = l1.l_suppkey
    AND o_orderkey = l1.l_orderkey
    AND o_orderstatus = 'F'
    AND l1.l_receiptdate > l1.l_commitdate
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem l2
        WHERE
            l2.l_orderkey = l1.l_orderkey
            AND l2.l_suppkey <> l1.l_suppkey
    )
    AND not EXISTS (
        SELECT
            *
        FROM
            lineitem l3
        WHERE
            l3.l_orderkey = l1.l_orderkey
            AND l3.l_suppkey <> l1.l_suppkey
            AND l3.l_receiptdate > l3.l_commitdate
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'SAUDI ARABIA'
GROUP BY
    s_name
ORDER BY
    numwait DESC,
    s_name
----
Explained Query:
  Finish order_by=[#1 desc nulls_first, #0 asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0] aggregates=[count(true)] // { arity: 2 }
        Project (#1) // { arity: 1 }
          Join on=(#0 = #4 AND #2 = #3) type=differential // { arity: 5 }
            implementation
              %1 » %0[#0, #2]
            ArrangeBy keys=[[#0, #2]] // { arity: 3 }
              Get l2 // { arity: 3 }
            Union // { arity: 2 }
              Negate // { arity: 2 }
                Distinct group_by=[#0, #1] // { arity: 2 }
                  Project (#0, #1) // { arity: 2 }
                    Filter (#1 != #4) AND (#14 > #13) // { arity: 18 }
                      Join on=(#0 = #2) type=differential // { arity: 18 }
                        implementation
                          l3 » l1[#0]
                        Get l3 // { arity: 2 }
                        Get l1 // { arity: 16 }
              Get l3 // { arity: 2 }
    With
      cte l3 =
        Distinct group_by=[#1, #0] // { arity: 2 }
          Project (#0, #2) // { arity: 2 }
            Get l2 // { arity: 3 }
      cte l2 =
        Project (#0..=#2) // { arity: 3 }
          Join on=(#0 = #4 AND #2 = #3) type=differential // { arity: 5 }
            implementation
              l0 » %1[#0, #1]
            Get l0 // { arity: 3 }
            ArrangeBy keys=[[#0, #1]] // { arity: 2 }
              Distinct group_by=[#0, #1] // { arity: 2 }
                Project (#0, #1) // { arity: 2 }
                  Filter (#1 != #4) // { arity: 18 }
                    Join on=(#0 = #2) type=differential // { arity: 18 }
                      implementation
                        %0 » l1[#0]
                      Distinct group_by=[#1, #0] // { arity: 2 }
                        Project (#0, #2) // { arity: 2 }
                          Get l0 // { arity: 3 }
                      Get l1 // { arity: 16 }
      cte l1 =
        ArrangeBy keys=[[#0]] // { arity: 16 }
          Get materialize.public.lineitem // { arity: 16 }
      cte l0 =
        Project (#0, #1, #7) // { arity: 3 }
          Filter (#25 = "F") AND (#33 = "SAUDI ARABIA") AND (#19 > #18) // { arity: 36 }
            Join on=(#0 = #9 AND #3 = #32 AND #7 = #23) type=delta // { arity: 36 }
              implementation
                %0 » %3[#0] » %1[#2] » %2[#0]
                %1 » %2[#0] » %0[#0] » %3[#0]
                %2 » %1[#0] » %0[#0] » %3[#0]
                %3 » %0[#3] » %1[#2] » %2[#0]
              ArrangeBy keys=[[#0], [#3]] // { arity: 7 }
                Get materialize.public.supplier // { arity: 7 }
              ArrangeBy keys=[[#0], [#2]] // { arity: 16 }
                Get materialize.public.lineitem // { arity: 16 }
              ArrangeBy keys=[[#0]] // { arity: 9 }
                Get materialize.public.orders // { arity: 9 }
              ArrangeBy keys=[[#0]] // { arity: 4 }
                Get materialize.public.nation // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey
  - materialize.public.pk_supplier_suppkey
  - materialize.public.fk_supplier_nationkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_lineitem_orderkey
  - materialize.public.fk_lineitem_suppkey

EOF


query T multiline
-- Query 22
EXPLAIN WITH(arity, join_impls) SELECT
    cntrycode,
    count(*) AS numcust,
    sum(c_acctbal) AS totacctbal
FROM
    (
        SELECT
            substring(c_phone, 1, 2) AS cntrycode, c_acctbal
        FROM
            customer
        WHERE
            substring(c_phone, 1, 2)
            IN ('13', '31', '23', '29', '30', '18', '17')
            AND c_acctbal
                > (
                        SELECT
                            avg(c_acctbal)
                        FROM
                            customer
                        WHERE
                            c_acctbal > 0.00
                            AND substring(c_phone, 1, 2)
                                IN (
                                        '13',
                                        '31',
                                        '23',
                                        '29',
                                        '30',
                                        '18',
                                        '17'
                                    )
                    )
            AND NOT
                    EXISTS(
                        SELECT
                            *
                        FROM
                            orders
                        WHERE
                            o_custkey = c_custkey
                    )
    )
        AS custsale
GROUP BY
    cntrycode
ORDER BY
    cntrycode
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#2]
    Return // { arity: 3 }
      Reduce group_by=[substr(char_to_text(#0), 1, 2)] aggregates=[count(true), sum(#1)] // { arity: 3 }
        Project (#1, #2) // { arity: 2 }
          Join on=(#0 = #3) type=differential // { arity: 4 }
            implementation
              %1 » %0[#0]
            ArrangeBy keys=[[#0]] // { arity: 3 }
              Get l1 // { arity: 3 }
            Union // { arity: 1 }
              Negate // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Join on=(#0 = #1) type=delta // { arity: 2 }
                    implementation
                      %0 » %1[#0]
                      %1 » %0[#0]
                    ArrangeBy keys=[[#0]] // { arity: 1 }
                      Get l2 // { arity: 1 }
                    ArrangeBy keys=[[#0]] // { arity: 1 }
                      Distinct group_by=[#0] // { arity: 1 }
                        Project (#1) // { arity: 1 }
                          Get materialize.public.orders // { arity: 9 }
              Get l2 // { arity: 1 }
    With
      cte l2 =
        Distinct group_by=[#0] // { arity: 1 }
          Project (#0) // { arity: 1 }
            Get l1 // { arity: 3 }
      cte l1 =
        Project (#0..=#2) // { arity: 3 }
          Filter (numeric_to_double(#2) > (numeric_to_double(#3) / bigint_to_double(case when (#4 = 0) then null else #4 end))) // { arity: 5 }
            CrossJoin type=differential // { arity: 5 }
              implementation
                %0 » %1[]
              Project (#0, #4, #5) // { arity: 3 }
                Filter ((#8 = "13") OR (#8 = "17") OR (#8 = "18") OR (#8 = "23") OR (#8 = "29") OR (#8 = "30") OR (#8 = "31")) // { arity: 9 }
                  Get l0 // { arity: 9 }
              ArrangeBy keys=[[]] // { arity: 2 }
                Reduce aggregates=[sum(#0), count(true)] // { arity: 2 }
                  Project (#5) // { arity: 1 }
                    Filter (#5 > 0) AND ((#8 = "13") OR (#8 = "17") OR (#8 = "18") OR (#8 = "23") OR (#8 = "29") OR (#8 = "30") OR (#8 = "31")) // { arity: 9 }
                      Get l0 // { arity: 9 }
      cte l0 =
        Map (substr(char_to_text(#4), 1, 2)) // { arity: 9 }
          Get materialize.public.customer // { arity: 8 }

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.pk_orders_orderkey

EOF

################################################################################
# end of optimized plans - below here is a sampling of other plan info
################################################################################

query T multiline
-- Query 20
EXPLAIN RAW PLAN FOR SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name
----
Finish order_by=[#0 asc nulls_last] output=[#0, #1]
  Project (#1, #2)
    Return
      Filter ((select(Get l3) AND (#3 = #7)) AND (#8 = text_to_char("CANADA")))
        CrossJoin
          Get materialize.public.supplier
          Get materialize.public.nation
    Where
      cte l3 =
        Reduce aggregates=[any(((#^0 = #0) AND true))]
          Project (#1)
            Return
              Filter (select(Get l1) AND (integer_to_numeric(#2) > select(Get l2)))
                Get materialize.public.partsupp
            Where
              cte l1 =
                Reduce aggregates=[any(((#^0 = #0) AND true))]
                  Project (#0)
                    Filter (varchar_to_text(#1) like "forest%")
                      Get materialize.public.part
              cte l2 =
                Project (#1)
                  Map ((0.5 * #0))
                    Reduce aggregates=[sum(#4)]
                      Filter ((((#1 = #^0) AND (#2 = #^1)) AND (#10 >= text_to_date("1995-01-01"))) AND (date_to_timestamp(#10) < (text_to_date("1995-01-01") + 1 year)))
                        Get materialize.public.lineitem

EOF
