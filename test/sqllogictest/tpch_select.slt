# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# Plans for the TPC-H workload modeled as plain old SELECT statements.

# PRIMARY KEY annotations (which are in the spec) are currently
# removed from this slt, because we don't support them at the moment.
# (Note that _in slts_ they are actually supported, but it's better
# to match the plans of real runs more closely.)

statement ok
CREATE TABLE nation (
    n_nationkey  integer,
    n_name       char(25) NOT NULL,
    n_regionkey  integer NOT NULL,
    n_comment    varchar(152)
);

statement ok
CREATE INDEX pk_nation_nationkey ON nation (n_nationkey ASC);

statement ok
CREATE INDEX fk_nation_regionkey ON nation (n_regionkey ASC);

statement ok
CREATE TABLE region  (
    r_regionkey  integer,
    r_name       char(25) NOT NULL,
    r_comment    varchar(152)
);

statement ok
CREATE INDEX pk_region_regionkey ON region (r_regionkey ASC);

statement ok
CREATE TABLE part (
    p_partkey     integer,
    p_name        varchar(55) NOT NULL,
    p_mfgr        char(25) NOT NULL,
    p_brand       char(10) NOT NULL,
    p_type        varchar(25) NOT NULL,
    p_size        integer NOT NULL,
    p_container   char(10) NOT NULL,
    p_retailprice decimal(15, 2) NOT NULL,
    p_comment     varchar(23) NOT NULL
);

statement ok
CREATE INDEX pk_part_partkey ON part (p_partkey ASC);

statement ok
CREATE TABLE supplier (
    s_suppkey     integer,
    s_name        char(25) NOT NULL,
    s_address     varchar(40) NOT NULL,
    s_nationkey   integer NOT NULL,
    s_phone       char(15) NOT NULL,
    s_acctbal     decimal(15, 2) NOT NULL,
    s_comment     varchar(101) NOT NULL
);

statement ok
CREATE INDEX pk_supplier_suppkey ON supplier (s_suppkey ASC);

statement ok
CREATE INDEX fk_supplier_nationkey ON supplier (s_nationkey ASC);

statement ok
CREATE TABLE partsupp (
    ps_partkey     integer NOT NULL,
    ps_suppkey     integer NOT NULL,
    ps_availqty    integer NOT NULL,
    ps_supplycost  decimal(15, 2) NOT NULL,
    ps_comment     varchar(199) NOT NULL
);

statement ok
CREATE INDEX pk_partsupp_partkey_suppkey ON partsupp (ps_partkey ASC, ps_suppkey ASC);

statement ok
CREATE INDEX fk_partsupp_partkey ON partsupp (ps_partkey ASC);

statement ok
CREATE INDEX fk_partsupp_suppkey ON partsupp (ps_suppkey ASC);

statement ok
CREATE TABLE customer (
    c_custkey     integer,
    c_name        varchar(25) NOT NULL,
    c_address     varchar(40) NOT NULL,
    c_nationkey   integer NOT NULL,
    c_phone       char(15) NOT NULL,
    c_acctbal     decimal(15, 2) NOT NULL,
    c_mktsegment  char(10) NOT NULL,
    c_comment     varchar(117) NOT NULL
);

statement ok
CREATE INDEX pk_customer_custkey ON customer (c_custkey ASC);

statement ok
CREATE INDEX fk_customer_nationkey ON customer (c_nationkey ASC);

statement ok
CREATE TABLE orders (
    o_orderkey       integer,
    o_custkey        integer NOT NULL,
    o_orderstatus    char(1) NOT NULL,
    o_totalprice     decimal(15, 2) NOT NULL,
    o_orderdate      DATE NOT NULL,
    o_orderpriority  char(15) NOT NULL,
    o_clerk          char(15) NOT NULL,
    o_shippriority   integer NOT NULL,
    o_comment        varchar(79) NOT NULL
);

statement ok
CREATE INDEX pk_orders_orderkey ON orders (o_orderkey ASC);

statement ok
CREATE INDEX fk_orders_custkey ON orders (o_custkey ASC);

statement ok
CREATE TABLE lineitem (
    l_orderkey       integer NOT NULL,
    l_partkey        integer NOT NULL,
    l_suppkey        integer NOT NULL,
    l_linenumber     integer NOT NULL,
    l_quantity       decimal(15, 2) NOT NULL,
    l_extendedprice  decimal(15, 2) NOT NULL,
    l_discount       decimal(15, 2) NOT NULL,
    l_tax            decimal(15, 2) NOT NULL,
    l_returnflag     char(1) NOT NULL,
    l_linestatus     char(1) NOT NULL,
    l_shipdate       date NOT NULL,
    l_commitdate     date NOT NULL,
    l_receiptdate    date NOT NULL,
    l_shipinstruct   char(25) NOT NULL,
    l_shipmode       char(10) NOT NULL,
    l_comment        varchar(44) NOT NULL
);

statement ok
CREATE INDEX pk_lineitem_orderkey_linenumber ON lineitem (l_orderkey ASC, l_linenumber ASC);

statement ok
CREATE INDEX fk_lineitem_orderkey ON lineitem (l_orderkey ASC);

statement ok
CREATE INDEX fk_lineitem_partkey ON lineitem (l_partkey ASC);

statement ok
CREATE INDEX fk_lineitem_suppkey ON lineitem (l_suppkey ASC);

statement ok
CREATE INDEX fk_lineitem_partsuppkey ON lineitem (l_partkey ASC, l_suppkey ASC);



query T multiline
-- Query 01
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
	l_returnflag,
	l_linestatus,
	sum(l_quantity) AS sum_qty,
	sum(l_extendedprice) AS sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,
	avg(l_quantity) AS avg_qty,
	avg(l_extendedprice) AS avg_price,
	avg(l_discount) AS avg_disc,
	count(*) AS count_order
FROM
	lineitem
WHERE
	l_shipdate <= DATE '1998-12-01' - INTERVAL '60' day
GROUP BY
	l_returnflag,
	l_linestatus
ORDER BY
	l_returnflag,
	l_linestatus;
----
Explained Query:
  Finish order_by=[#0{l_returnflag} asc nulls_last, #1{l_linestatus} asc nulls_last] output=[#0..=#9]
    Project (#0{l_returnflag}..=#5{sum}, #9{count}..=#11, #6) // { arity: 10 }
      Map (bigint_to_numeric(case when (#6{count} = 0) then null else #6{count} end), (#2{sum_l_quantity} / #8), (#3{sum_l_extendedprice} / #8), (#7{sum_l_discount} / #8)) // { arity: 12 }
        Reduce group_by=[#4{l_returnflag}, #5{l_linestatus}] aggregates=[sum(#0{l_quantity}), sum(#1{l_extendedprice}), sum((#1{l_extendedprice} * (1 - #2{l_discount}))), sum(((#1{l_extendedprice} * (1 - #2{l_discount})) * (1 + #3{l_tax}))), count(*), sum(#2{l_discount})] // { arity: 8 }
          Project (#4{l_returnflag}..=#9) // { arity: 6 }
            Filter (date_to_timestamp(#10{l_shipdate}) <= 1998-10-02 00:00:00) // { arity: 16 }
              ReadIndex on=lineitem pk_lineitem_orderkey_linenumber=[*** full scan ***] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_lineitem_orderkey_linenumber (*** full scan ***)

Target cluster: quickstart

EOF


query T multiline
-- Query 02
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
FROM
    part, supplier, partsupp, nation, region
WHERE
    p_partkey = ps_partkey
    AND s_suppkey = ps_suppkey
    AND p_size = CAST (15 AS smallint)
    AND p_type LIKE '%BRASS'
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'EUROPE'
    AND ps_supplycost
        = (
                SELECT
                    min(ps_supplycost)
                FROM
                    partsupp, supplier, nation, region
                WHERE
                    p_partkey = ps_partkey
                    AND s_suppkey = ps_suppkey
                    AND s_nationkey = n_nationkey
                    AND n_regionkey = r_regionkey
                    AND r_name = 'EUROPE'
            )
ORDER BY
    s_acctbal DESC, n_name, s_name, p_partkey;
----
Explained Query:
  Finish order_by=[#0{s_acctbal} desc nulls_first, #2{n_name} asc nulls_last, #1{s_name} asc nulls_last, #3{p_partkey} asc nulls_last] output=[#0..=#7]
    Return // { arity: 8 }
      Project (#13, #9, #18, #0{s_acctbal}, #2{n_name}, #10, #12, #14) // { arity: 8 }
        Join on=(#0{p_partkey} = #22{p_partkey} = #44{p_partkey} AND #1{p_name} = #23{p_name} AND #2{p_mfgr} = #24{p_mfgr} AND #3{p_brand} = #25{p_brand} AND #4{p_type} = #26{p_type} AND #5{p_container} = #27{p_container} AND #6{p_retailprice} = #28{p_retailprice} AND #7{p_comment} = #29{p_comment} AND #8{s_suppkey} = #30{s_suppkey} AND #9{s_name} = #31{s_name} AND #10{s_address} = #32{s_address} AND #11{s_nationkey} = #33{s_nationkey} AND #12{s_phone} = #34{s_phone} AND #13{s_acctbal} = #35{s_acctbal} AND #14{s_comment} = #36{s_comment} AND #15{ps_availqty} = #37{ps_availqty} AND #16{ps_supplycost} = #38{ps_supplycost} = #45{min_ps_supplycost} AND #17{ps_comment} = #39{ps_comment} AND #18{n_name} = #40{n_name} AND #19{n_regionkey} = #41{n_regionkey} AND #20{n_comment} = #42{n_comment} AND #21{r_comment} = #43{r_comment}) type=delta // { arity: 46 }
          implementation
            %0:l0 » %1:l1[#0..=#21]UKKKKKKKKKKKKKKKKKKKKKKelf » %2[#0, #1]UKK
            %1:l1 » %2[#0, #1]UKK » %0:l0[#0..=#21]KKKKKKKKKKKKKKKKKKKKKKelf
            %2 » %0:l0[#0, #16]KKelf » %1:l1[#0..=#21]UKKKKKKKKKKKKKKKKKKKKKKelf
          ArrangeBy keys=[[#0{p_partkey}..=#21{r_comment}], [#0{p_partkey}, #16{ps_supplycost}]] // { arity: 22 }
            Project (#0{p_partkey}..=#4{p_type}, #6{p_retailprice}..=#15{ps_availqty}, #18{n_name}..=#20{n_comment}, #22..=#24, #27) // { arity: 22 }
              Filter (#5{p_size} = 15) AND (#26{r_name} = "EUROPE") AND like["%BRASS"](varchar_to_text(#4{p_type})) AND (#0{p_partkey} = #16{ps_partkey}) AND (#9{s_suppkey} = #17{ps_suppkey}) AND (#12{s_nationkey} = #21{n_nationkey}) AND (#23{n_regionkey} = #25{r_regionkey}) // { arity: 28 }
                Get l0 // { arity: 28 }
          ArrangeBy keys=[[#0{p_partkey}..=#21{r_comment}]] // { arity: 22 }
            Project (#0{p_partkey}..=#4{p_type}, #6{p_retailprice}..=#15{ps_availqty}, #18{n_name}..=#20{n_comment}, #22..=#24, #27) // { arity: 22 }
              Filter (#5{p_size} = 15) AND (#26{r_name} = "EUROPE") AND like["%BRASS"](varchar_to_text(#4{p_type})) AND (#0{p_partkey} = #16{ps_partkey}) AND (#9{s_suppkey} = #17{ps_suppkey}) AND (#12{s_nationkey} = #21{n_nationkey}) AND (#23{n_regionkey} = #25{r_regionkey}) // { arity: 28 }
                Get l1 // { arity: 28 }
          ArrangeBy keys=[[#0{p_partkey}, #1{min_ps_supplycost}]] // { arity: 2 }
            Reduce group_by=[#0{p_partkey}] aggregates=[min(#1{ps_supplycost})] // { arity: 2 }
              Project (#0{p_partkey}, #4) // { arity: 2 }
                Filter (#18{r_name} = "EUROPE") // { arity: 20 }
                  Join on=(#0{p_partkey} = #1{ps_partkey} AND #2{ps_suppkey} = #6{s_suppkey} AND #9{s_nationkey} = #13{n_nationkey} AND #15{n_regionkey} = #17{r_regionkey}) type=delta // { arity: 20 }
                    implementation
                      %0 » %1:partsupp[#0]KA » %2:supplier[#0]KA » %3:nation[#0]KA » %4:region[#0]KAef
                      %1:partsupp » %0[#0]UKA » %2:supplier[#0]KA » %3:nation[#0]KA » %4:region[#0]KAef
                      %2:supplier » %1:partsupp[#1]KA » %0[#0]UKA » %3:nation[#0]KA » %4:region[#0]KAef
                      %3:nation » %4:region[#0]KAef » %2:supplier[#3]KA » %1:partsupp[#1]KA » %0[#0]UKA
                      %4:region » %3:nation[#2]KA » %2:supplier[#3]KA » %1:partsupp[#1]KA » %0[#0]UKA
                    ArrangeBy keys=[[#0{p_partkey}]] // { arity: 1 }
                      Distinct project=[#0{p_partkey}] // { arity: 1 }
                        Project (#0{p_partkey}) // { arity: 1 }
                          Get l1 // { arity: 28 }
                    ArrangeBy keys=[[#0{ps_partkey}], [#1{ps_suppkey}]] // { arity: 5 }
                      ReadIndex on=partsupp fk_partsupp_partkey=[delta join lookup] fk_partsupp_suppkey=[delta join lookup] // { arity: 5 }
                    ArrangeBy keys=[[#0{s_suppkey}], [#3{s_nationkey}]] // { arity: 7 }
                      ReadIndex on=supplier pk_supplier_suppkey=[delta join lookup] fk_supplier_nationkey=[delta join lookup] // { arity: 7 }
                    ArrangeBy keys=[[#0{n_nationkey}], [#2{n_regionkey}]] // { arity: 4 }
                      ReadIndex on=nation pk_nation_nationkey=[delta join lookup] fk_nation_regionkey=[delta join lookup] // { arity: 4 }
                    ArrangeBy keys=[[#0{r_regionkey}]] // { arity: 3 }
                      ReadIndex on=region pk_region_regionkey=[delta join lookup] // { arity: 3 }
    With
      cte l1 =
        Distinct project=[#0{p_partkey}..=#27{r_comment}] // { arity: 28 }
          Get l0 // { arity: 28 }
      cte l0 =
        CrossJoin type=delta // { arity: 28 }
          implementation
            %0:part » %1:supplier[×] » %2:partsupp[×] » %3:nation[×] » %4:region[×]
            %1:supplier » %0:part[×] » %2:partsupp[×] » %3:nation[×] » %4:region[×]
            %2:partsupp » %0:part[×] » %1:supplier[×] » %3:nation[×] » %4:region[×]
            %3:nation » %0:part[×] » %1:supplier[×] » %2:partsupp[×] » %4:region[×]
            %4:region » %0:part[×] » %1:supplier[×] » %2:partsupp[×] » %3:nation[×]
          ArrangeBy keys=[[]] // { arity: 9 }
            Filter (#0{p_partkey}) IS NOT NULL // { arity: 9 }
              ReadIndex on=part pk_part_partkey=[*** full scan ***] // { arity: 9 }
          ArrangeBy keys=[[]] // { arity: 7 }
            ReadIndex on=supplier pk_supplier_suppkey=[*** full scan ***] // { arity: 7 }
          ArrangeBy keys=[[]] // { arity: 5 }
            ReadIndex on=partsupp fk_partsupp_partkey=[*** full scan ***] // { arity: 5 }
          ArrangeBy keys=[[]] // { arity: 4 }
            ReadIndex on=nation pk_nation_nationkey=[*** full scan ***] // { arity: 4 }
          ArrangeBy keys=[[]] // { arity: 3 }
            ReadIndex on=region pk_region_regionkey=[*** full scan ***] // { arity: 3 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (*** full scan ***, delta join lookup)
  - materialize.public.fk_nation_regionkey (delta join lookup)
  - materialize.public.pk_region_regionkey (*** full scan ***, delta join lookup)
  - materialize.public.pk_part_partkey (*** full scan ***)
  - materialize.public.pk_supplier_suppkey (*** full scan ***, delta join lookup)
  - materialize.public.fk_supplier_nationkey (delta join lookup)
  - materialize.public.fk_partsupp_partkey (*** full scan ***, delta join lookup)
  - materialize.public.fk_partsupp_suppkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 03
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    o_orderdate,
    o_shippriority
FROM
    customer,
    orders,
    lineitem
WHERE
    c_mktsegment = 'BUILDING'
    AND c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate < DATE '1995-03-15'
    AND l_shipdate > DATE '1995-03-15'
GROUP BY
    l_orderkey,
    o_orderdate,
    o_shippriority
ORDER BY
    revenue DESC,
    o_orderdate;
----
Explained Query:
  Finish order_by=[#1{sum} desc nulls_first, #2{o_orderdate} asc nulls_last] output=[#0..=#3]
    Project (#0{o_orderkey}, #3{o_shippriority}, #1{sum}, #2{o_orderdate}) // { arity: 4 }
      Reduce group_by=[#0{o_orderkey}..=#2{o_shippriority}] aggregates=[sum((#3{l_extendedprice} * (1 - #4{l_discount})))] // { arity: 4 }
        Project (#8, #12, #15, #22, #23) // { arity: 5 }
          Filter (#6{c_mktsegment} = "BUILDING") AND (#12{o_orderdate} < 1995-03-15) AND (#27{l_shipdate} > 1995-03-15) // { arity: 33 }
            Join on=(#0{c_custkey} = #9{o_custkey} AND #8{o_orderkey} = #17{l_orderkey}) type=delta // { arity: 33 }
              implementation
                %0:customer » %1:orders[#1]KAif » %2:lineitem[#0]KAif
                %1:orders » %0:customer[#0]KAef » %2:lineitem[#0]KAif
                %2:lineitem » %1:orders[#0]KAif » %0:customer[#0]KAef
              ArrangeBy keys=[[#0{c_custkey}]] // { arity: 8 }
                ReadIndex on=customer pk_customer_custkey=[delta join 1st input (full scan)] // { arity: 8 }
              ArrangeBy keys=[[#0{o_orderkey}], [#1{o_custkey}]] // { arity: 9 }
                ReadIndex on=orders pk_orders_orderkey=[delta join lookup] fk_orders_custkey=[delta join lookup] // { arity: 9 }
              ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 16 }
                ReadIndex on=lineitem fk_lineitem_orderkey=[delta join lookup] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_customer_custkey (delta join 1st input (full scan))
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_orders_custkey (delta join lookup)
  - materialize.public.fk_lineitem_orderkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 04
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    o_orderpriority,
    count(*) AS order_count
FROM
    orders
WHERE
    o_orderdate >= DATE '1993-07-01'
    AND o_orderdate < DATE '1993-07-01' + INTERVAL '3' month
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem
        WHERE
            l_orderkey = o_orderkey
            AND l_commitdate < l_receiptdate
    )
GROUP BY
    o_orderpriority
ORDER BY
    o_orderpriority;
----
Explained Query:
  Finish order_by=[#0{o_orderpriority} asc nulls_last] output=[#0, #1]
    Reduce group_by=[#0{o_orderpriority}] aggregates=[count(*)] // { arity: 2 }
      Project (#5) // { arity: 1 }
        Filter (#4{o_orderdate} >= 1993-07-01) AND (date_to_timestamp(#4{o_orderdate}) < 1993-10-01 00:00:00) // { arity: 10 }
          Join on=(#0{o_orderkey} = #9{l_orderkey}) type=differential // { arity: 10 }
            implementation
              %1[#0]UKA » %0:orders[#0]KAiif
            ArrangeBy keys=[[#0{o_orderkey}]] // { arity: 9 }
              ReadIndex on=orders pk_orders_orderkey=[differential join] // { arity: 9 }
            ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 1 }
              Distinct project=[#0{l_orderkey}] // { arity: 1 }
                Project (#0{l_orderkey}) // { arity: 1 }
                  Filter (#11{l_commitdate} < #12{l_receiptdate}) // { arity: 16 }
                    ReadIndex on=lineitem pk_lineitem_orderkey_linenumber=[*** full scan ***] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_orders_orderkey (differential join)
  - materialize.public.pk_lineitem_orderkey_linenumber (*** full scan ***)

Target cluster: quickstart

EOF


query T multiline
-- Query 05
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    n_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue
FROM
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND l_suppkey = s_suppkey
    AND c_nationkey = s_nationkey
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'ASIA'
    AND o_orderdate >= DATE '1994-01-01'
    AND o_orderdate < DATE '1995-01-01'
GROUP BY
    n_name
ORDER BY
    revenue DESC;
----
Explained Query:
  Finish order_by=[#1{sum} desc nulls_first] output=[#0, #1]
    Reduce group_by=[#2{n_name}] aggregates=[sum((#0{l_extendedprice} * (1 - #1{l_discount})))] // { arity: 2 }
      Project (#19, #20, #24) // { arity: 3 }
        Filter (#28{r_name} = "ASIA") AND (#12{o_orderdate} < 1995-01-01) AND (#12{o_orderdate} >= 1994-01-01) // { arity: 30 }
          Join on=(#0{c_custkey} = #9{o_custkey} AND #3{c_nationkey} = #22{s_nationkey} = #23{n_nationkey} AND #8{o_orderkey} = #17{l_orderkey} AND #18{l_suppkey} = #21{s_suppkey} AND #25{n_regionkey} = #27{r_regionkey}) type=delta // { arity: 30 }
            implementation
              %0:customer » %1:orders[#1]KAiif » %2:lineitem[#0]KA » %3:supplier[#0, #1]KK » %4:nation[#0]KA » %5:region[#0]KAef
              %1:orders » %0:customer[#0]KA » %2:lineitem[#0]KA » %3:supplier[#0, #1]KK » %4:nation[#0]KA » %5:region[#0]KAef
              %2:lineitem » %1:orders[#0]KAiif » %0:customer[#0]KA » %3:supplier[#0, #1]KK » %4:nation[#0]KA » %5:region[#0]KAef
              %3:supplier » %0:customer[#3]KA » %1:orders[#1]KAiif » %2:lineitem[#0, #1]KK » %4:nation[#0]KA » %5:region[#0]KAef
              %4:nation » %5:region[#0]KAef » %0:customer[#3]KA » %1:orders[#1]KAiif » %2:lineitem[#0]KA » %3:supplier[#0, #1]KK
              %5:region » %4:nation[#2]KA » %0:customer[#3]KA » %1:orders[#1]KAiif » %2:lineitem[#0]KA » %3:supplier[#0, #1]KK
            ArrangeBy keys=[[#0{c_custkey}], [#3{c_nationkey}]] // { arity: 8 }
              ReadIndex on=customer pk_customer_custkey=[delta join 1st input (full scan)] fk_customer_nationkey=[delta join lookup] // { arity: 8 }
            ArrangeBy keys=[[#0{o_orderkey}], [#1{o_custkey}]] // { arity: 9 }
              ReadIndex on=orders pk_orders_orderkey=[delta join lookup] fk_orders_custkey=[delta join lookup] // { arity: 9 }
            ArrangeBy keys=[[#0{l_orderkey}], [#0{l_orderkey}, #1{l_suppkey}]] // { arity: 4 }
              Project (#0{l_orderkey}, #2{l_extendedprice}, #5, #6) // { arity: 4 }
                ReadIndex on=lineitem pk_lineitem_orderkey_linenumber=[*** full scan ***] // { arity: 16 }
            ArrangeBy keys=[[#0{s_suppkey}, #1{s_nationkey}]] // { arity: 2 }
              Project (#0{s_suppkey}, #3) // { arity: 2 }
                Filter (#0{s_suppkey}) IS NOT NULL // { arity: 7 }
                  ReadIndex on=supplier pk_supplier_suppkey=[*** full scan ***] // { arity: 7 }
            ArrangeBy keys=[[#0{n_nationkey}], [#2{n_regionkey}]] // { arity: 4 }
              ReadIndex on=nation pk_nation_nationkey=[delta join lookup] fk_nation_regionkey=[delta join lookup] // { arity: 4 }
            ArrangeBy keys=[[#0{r_regionkey}]] // { arity: 3 }
              ReadIndex on=region pk_region_regionkey=[delta join lookup] // { arity: 3 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.fk_nation_regionkey (delta join lookup)
  - materialize.public.pk_region_regionkey (delta join lookup)
  - materialize.public.pk_supplier_suppkey (*** full scan ***)
  - materialize.public.pk_customer_custkey (delta join 1st input (full scan))
  - materialize.public.fk_customer_nationkey (delta join lookup)
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_orders_custkey (delta join lookup)
  - materialize.public.pk_lineitem_orderkey_linenumber (*** full scan ***)

Target cluster: quickstart

EOF


query T multiline
-- Query 06
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    sum(l_extendedprice * l_discount) AS revenue
FROM
    lineitem
WHERE
    l_quantity < 24
    AND l_shipdate >= DATE '1994-01-01'
    AND l_shipdate < DATE '1994-01-01' + INTERVAL '1' year
    AND l_discount BETWEEN 0.06 - 0.01 AND 0.07;
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum((#0{l_extendedprice} * #1{l_discount}))] // { arity: 1 }
        Project (#5, #6) // { arity: 2 }
          Filter (#4{l_quantity} < 24) AND (#6{l_discount} <= 0.07) AND (#6{l_discount} >= 0.05) AND (#10{l_shipdate} >= 1994-01-01) AND (date_to_timestamp(#10{l_shipdate}) < 1995-01-01 00:00:00) // { arity: 16 }
            ReadIndex on=lineitem pk_lineitem_orderkey_linenumber=[*** full scan ***] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_lineitem_orderkey_linenumber (*** full scan ***)

Target cluster: quickstart

EOF


query T multiline
-- Query 07
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    supp_nation,
    cust_nation,
    l_year,
    sum(volume) AS revenue
FROM
    (
        SELECT
            n1.n_name AS supp_nation,
            n2.n_name AS cust_nation,
            extract(year FROM l_shipdate) AS l_year,
            l_extendedprice * (1 - l_discount) AS volume
        FROM
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        WHERE
            s_suppkey = l_suppkey
            AND o_orderkey = l_orderkey
            AND c_custkey = o_custkey
            AND s_nationkey = n1.n_nationkey
            AND c_nationkey = n2.n_nationkey
            AND (
                (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
            )
            AND l_shipdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
    ) AS shipping
GROUP BY
    supp_nation,
    cust_nation,
    l_year
ORDER BY
    supp_nation,
    cust_nation,
    l_year;
----
Explained Query:
  Finish order_by=[#0{n_name} asc nulls_last, #1{n_name} asc nulls_last, #2 asc nulls_last] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#3{n_name}, #4{n_name}, extract_year_d(#2{l_shipdate})] aggregates=[sum((#0{l_extendedprice} * (1 - #1{l_discount})))] // { arity: 4 }
        Project (#12, #13, #17, #41, #45) // { arity: 5 }
          Filter (#17{l_shipdate} <= 1996-12-31) AND (#17{l_shipdate} >= 1995-01-01) AND (#48 OR #49) AND (#50 OR #51) AND ((#48 AND #51) OR (#49 AND #50)) // { arity: 52 }
            Map ((#41{n_name} = "FRANCE"), (#41{n_name} = "GERMANY"), (#45{n_name} = "FRANCE"), (#45{n_name} = "GERMANY")) // { arity: 52 }
              Join on=(#0{s_suppkey} = #9{l_suppkey} AND #3{s_nationkey} = #40{n_nationkey} AND #7{l_orderkey} = #23{o_orderkey} AND #24{o_custkey} = #32{c_custkey} AND #35{c_nationkey} = #44{n_nationkey}) type=delta // { arity: 48 }
                implementation
                  %0:supplier » %4:l0[#0]KAef » %1:lineitem[#2]KAiif » %2:orders[#0]KA » %3:customer[#0]KA » %5:l0[#0]KAef
                  %1:lineitem » %0:supplier[#0]KA » %4:l0[#0]KAef » %2:orders[#0]KA » %3:customer[#0]KA » %5:l0[#0]KAef
                  %2:orders » %1:lineitem[#0]KAiif » %0:supplier[#0]KA » %4:l0[#0]KAef » %3:customer[#0]KA » %5:l0[#0]KAef
                  %3:customer » %5:l0[#0]KAef » %2:orders[#1]KA » %1:lineitem[#0]KAiif » %0:supplier[#0]KA » %4:l0[#0]KAef
                  %4:l0 » %0:supplier[#3]KA » %1:lineitem[#2]KAiif » %2:orders[#0]KA » %3:customer[#0]KA » %5:l0[#0]KAef
                  %5:l0 » %3:customer[#3]KA » %2:orders[#1]KA » %1:lineitem[#0]KAiif » %0:supplier[#0]KA » %4:l0[#0]KAef
                ArrangeBy keys=[[#0{s_suppkey}], [#3{s_nationkey}]] // { arity: 7 }
                  ReadIndex on=supplier pk_supplier_suppkey=[delta join 1st input (full scan)] fk_supplier_nationkey=[delta join lookup] // { arity: 7 }
                ArrangeBy keys=[[#0{l_orderkey}], [#2{l_suppkey}]] // { arity: 16 }
                  ReadIndex on=lineitem fk_lineitem_orderkey=[delta join lookup] fk_lineitem_suppkey=[delta join lookup] // { arity: 16 }
                ArrangeBy keys=[[#0{o_orderkey}], [#1{o_custkey}]] // { arity: 9 }
                  ReadIndex on=orders pk_orders_orderkey=[delta join lookup] fk_orders_custkey=[delta join lookup] // { arity: 9 }
                ArrangeBy keys=[[#0{c_custkey}], [#3{c_nationkey}]] // { arity: 8 }
                  ReadIndex on=customer pk_customer_custkey=[delta join lookup] fk_customer_nationkey=[delta join lookup] // { arity: 8 }
                Get l0 // { arity: 4 }
                Get l0 // { arity: 4 }
    With
      cte l0 =
        ArrangeBy keys=[[#0{n_nationkey}]] // { arity: 4 }
          ReadIndex on=nation pk_nation_nationkey=[delta join lookup] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.pk_supplier_suppkey (delta join 1st input (full scan))
  - materialize.public.fk_supplier_nationkey (delta join lookup)
  - materialize.public.pk_customer_custkey (delta join lookup)
  - materialize.public.fk_customer_nationkey (delta join lookup)
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_orders_custkey (delta join lookup)
  - materialize.public.fk_lineitem_orderkey (delta join lookup)
  - materialize.public.fk_lineitem_suppkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 08
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    o_year,
    sum(case
        when nation = 'BRAZIL' then volume
        else 0
    end) / sum(volume) AS mkt_share
FROM
    (
        SELECT
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) AS volume,
            n2.n_name AS nation
        FROM
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        WHERE
            p_partkey = l_partkey
            AND s_suppkey = l_suppkey
            AND l_orderkey = o_orderkey
            AND o_custkey = c_custkey
            AND c_nationkey = n1.n_nationkey
            AND n1.n_regionkey = r_regionkey
            AND r_name = 'AMERICA'
            AND s_nationkey = n2.n_nationkey
            AND o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
            AND p_type = 'ECONOMY ANODIZED STEEL'
    ) AS all_nations
GROUP BY
    o_year
ORDER BY
    o_year;
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0, #1]
    Project (#0, #3) // { arity: 2 }
      Map ((#1{sum} / #2{sum})) // { arity: 4 }
        Reduce group_by=[extract_year_d(#2{o_orderdate})] aggregates=[sum(case when (#3{n_name} = "BRAZIL") then (#0{l_extendedprice} * (1 - #1{l_discount})) else 0 end), sum((#0{l_extendedprice} * (1 - #1{l_discount})))] // { arity: 3 }
          Project (#21, #22, #36, #54) // { arity: 4 }
            Filter (#58{r_name} = "AMERICA") AND (#36{o_orderdate} <= 1996-12-31) AND (#36{o_orderdate} >= 1995-01-01) AND ("ECONOMY ANODIZED STEEL" = varchar_to_text(#4{p_type})) // { arity: 60 }
              Join on=(#0{p_partkey} = #17{l_partkey} AND #9{s_suppkey} = #18{l_suppkey} AND #12{s_nationkey} = #53{n_nationkey} AND #16{l_orderkey} = #32{o_orderkey} AND #33{o_custkey} = #41{c_custkey} AND #44{c_nationkey} = #49{n_nationkey} AND #51{n_regionkey} = #57{r_regionkey}) type=delta // { arity: 60 }
                implementation
                  %0:part » %2:lineitem[#1]KA » %3:orders[#0]KAiif » %1:supplier[#0]KA » %4:customer[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef » %6:nation[#0]KA
                  %1:supplier » %2:lineitem[#2]KA » %0:part[#0]KAef » %3:orders[#0]KAiif » %4:customer[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef » %6:nation[#0]KA
                  %2:lineitem » %0:part[#0]KAef » %3:orders[#0]KAiif » %1:supplier[#0]KA » %4:customer[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef » %6:nation[#0]KA
                  %3:orders » %2:lineitem[#0]KA » %0:part[#0]KAef » %1:supplier[#0]KA » %4:customer[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef » %6:nation[#0]KA
                  %4:customer » %3:orders[#1]KAiif » %2:lineitem[#0]KA » %0:part[#0]KAef » %1:supplier[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef » %6:nation[#0]KA
                  %5:nation » %7:region[#0]KAef » %4:customer[#3]KA » %3:orders[#1]KAiif » %2:lineitem[#0]KA » %0:part[#0]KAef » %1:supplier[#0]KA » %6:nation[#0]KA
                  %6:nation » %1:supplier[#3]KA » %2:lineitem[#2]KA » %0:part[#0]KAef » %3:orders[#0]KAiif » %4:customer[#0]KA » %5:nation[#0]KA » %7:region[#0]KAef
                  %7:region » %5:nation[#2]KA » %4:customer[#3]KA » %3:orders[#1]KAiif » %2:lineitem[#0]KA » %0:part[#0]KAef » %1:supplier[#0]KA » %6:nation[#0]KA
                ArrangeBy keys=[[#0{p_partkey}]] // { arity: 9 }
                  ReadIndex on=part pk_part_partkey=[delta join 1st input (full scan)] // { arity: 9 }
                ArrangeBy keys=[[#0{s_suppkey}], [#3{s_nationkey}]] // { arity: 7 }
                  ReadIndex on=supplier pk_supplier_suppkey=[delta join lookup] fk_supplier_nationkey=[delta join lookup] // { arity: 7 }
                ArrangeBy keys=[[#0{l_orderkey}], [#1{l_partkey}], [#2{l_suppkey}]] // { arity: 16 }
                  ReadIndex on=lineitem fk_lineitem_orderkey=[delta join lookup] fk_lineitem_partkey=[delta join lookup] fk_lineitem_suppkey=[delta join lookup] // { arity: 16 }
                ArrangeBy keys=[[#0{o_orderkey}], [#1{o_custkey}]] // { arity: 9 }
                  ReadIndex on=orders pk_orders_orderkey=[delta join lookup] fk_orders_custkey=[delta join lookup] // { arity: 9 }
                ArrangeBy keys=[[#0{c_custkey}], [#3{c_nationkey}]] // { arity: 8 }
                  ReadIndex on=customer pk_customer_custkey=[delta join lookup] fk_customer_nationkey=[delta join lookup] // { arity: 8 }
                ArrangeBy keys=[[#0{n_nationkey}], [#2{n_regionkey}]] // { arity: 4 }
                  ReadIndex on=nation pk_nation_nationkey=[delta join lookup] fk_nation_regionkey=[delta join lookup] // { arity: 4 }
                ArrangeBy keys=[[#0{n_nationkey}]] // { arity: 4 }
                  ReadIndex on=nation pk_nation_nationkey=[delta join lookup] // { arity: 4 }
                ArrangeBy keys=[[#0{r_regionkey}]] // { arity: 3 }
                  ReadIndex on=region pk_region_regionkey=[delta join lookup] // { arity: 3 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.fk_nation_regionkey (delta join lookup)
  - materialize.public.pk_region_regionkey (delta join lookup)
  - materialize.public.pk_part_partkey (delta join 1st input (full scan))
  - materialize.public.pk_supplier_suppkey (delta join lookup)
  - materialize.public.fk_supplier_nationkey (delta join lookup)
  - materialize.public.pk_customer_custkey (delta join lookup)
  - materialize.public.fk_customer_nationkey (delta join lookup)
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_orders_custkey (delta join lookup)
  - materialize.public.fk_lineitem_orderkey (delta join lookup)
  - materialize.public.fk_lineitem_partkey (delta join lookup)
  - materialize.public.fk_lineitem_suppkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 09
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    nation,
    o_year,
    sum(amount) AS sum_profit
FROM
    (
        SELECT
            n_name AS nation,
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
        FROM
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        WHERE
            s_suppkey = l_suppkey
            AND ps_suppkey = l_suppkey
            AND ps_partkey = l_partkey
            AND p_partkey = l_partkey
            AND o_orderkey = l_orderkey
            AND s_nationkey = n_nationkey
            AND p_name like '%green%'
    ) AS profit
GROUP BY
    nation,
    o_year
ORDER BY
    nation,
    o_year DESC;
----
Explained Query:
  Finish order_by=[#0{n_name} asc nulls_last, #1 desc nulls_first] output=[#0..=#2]
    Reduce group_by=[#5{n_name}, extract_year_d(#4{o_orderdate})] aggregates=[sum(((#1{l_extendedprice} * (1 - #2{l_discount})) - (#3{ps_supplycost} * #0{l_quantity})))] // { arity: 3 }
      Project (#20..=#22, #35, #41, #47) // { arity: 6 }
        Filter like["%green%"](varchar_to_text(#1{p_name})) // { arity: 50 }
          Join on=(#0{p_partkey} = #17{l_partkey} = #32{ps_partkey} AND #9{s_suppkey} = #18{l_suppkey} = #33{ps_suppkey} AND #12{s_nationkey} = #46{n_nationkey} AND #16{l_orderkey} = #37{o_orderkey}) type=delta // { arity: 50 }
            implementation
              %0:part » %2:lineitem[#1]KA » %3:partsupp[#0, #1]KKA » %1:supplier[#0]KA » %4:orders[#0]KA » %5:nation[#0]KA
              %1:supplier » %2:lineitem[#2]KA » %3:partsupp[#0, #1]KKA » %0:part[#0]KAlf » %4:orders[#0]KA » %5:nation[#0]KA
              %2:lineitem » %3:partsupp[#0, #1]KKA » %0:part[#0]KAlf » %1:supplier[#0]KA » %4:orders[#0]KA » %5:nation[#0]KA
              %3:partsupp » %2:lineitem[#1, #2]KKA » %0:part[#0]KAlf » %1:supplier[#0]KA » %4:orders[#0]KA » %5:nation[#0]KA
              %4:orders » %2:lineitem[#0]KA » %3:partsupp[#0, #1]KKA » %0:part[#0]KAlf » %1:supplier[#0]KA » %5:nation[#0]KA
              %5:nation » %1:supplier[#3]KA » %2:lineitem[#2]KA » %3:partsupp[#0, #1]KKA » %0:part[#0]KAlf » %4:orders[#0]KA
            ArrangeBy keys=[[#0{p_partkey}]] // { arity: 9 }
              ReadIndex on=part pk_part_partkey=[delta join 1st input (full scan)] // { arity: 9 }
            ArrangeBy keys=[[#0{s_suppkey}], [#3{s_nationkey}]] // { arity: 7 }
              ReadIndex on=supplier pk_supplier_suppkey=[delta join lookup] fk_supplier_nationkey=[delta join lookup] // { arity: 7 }
            ArrangeBy keys=[[#0{l_orderkey}], [#1{l_partkey}], [#1{l_partkey}, #2{l_suppkey}], [#2{l_suppkey}]] // { arity: 16 }
              ReadIndex on=lineitem fk_lineitem_orderkey=[delta join lookup] fk_lineitem_partkey=[delta join lookup] fk_lineitem_suppkey=[delta join lookup] fk_lineitem_partsuppkey=[delta join lookup] // { arity: 16 }
            ArrangeBy keys=[[#0{ps_partkey}, #1{ps_suppkey}]] // { arity: 5 }
              ReadIndex on=partsupp pk_partsupp_partkey_suppkey=[delta join lookup] // { arity: 5 }
            ArrangeBy keys=[[#0{o_orderkey}]] // { arity: 9 }
              ReadIndex on=orders pk_orders_orderkey=[delta join lookup] // { arity: 9 }
            ArrangeBy keys=[[#0{n_nationkey}]] // { arity: 4 }
              ReadIndex on=nation pk_nation_nationkey=[delta join lookup] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.pk_part_partkey (delta join 1st input (full scan))
  - materialize.public.pk_supplier_suppkey (delta join lookup)
  - materialize.public.fk_supplier_nationkey (delta join lookup)
  - materialize.public.pk_partsupp_partkey_suppkey (delta join lookup)
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_lineitem_orderkey (delta join lookup)
  - materialize.public.fk_lineitem_partkey (delta join lookup)
  - materialize.public.fk_lineitem_suppkey (delta join lookup)
  - materialize.public.fk_lineitem_partsuppkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 10
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    c_custkey,
    c_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
FROM
    customer,
    orders,
    lineitem,
    nation
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate >= DATE '1993-10-01'
    AND o_orderdate < DATE '1994-01-01'
    AND o_orderdate < DATE '1993-10-01' + INTERVAL '3' month
    AND l_returnflag = 'R'
    AND c_nationkey = n_nationkey
GROUP BY
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
ORDER BY
    revenue DESC;
----
Explained Query:
  Finish order_by=[#2{sum} desc nulls_first] output=[#0..=#7]
    Project (#0{c_custkey}, #1{c_name}, #7{c_comment}, #2{sum}, #4{n_name}, #5{c_address}, #3{c_acctbal}, #6{c_phone}) // { arity: 8 }
      Reduce group_by=[#0{c_custkey}, #1{c_name}, #4{c_acctbal}, #3{c_phone}, #8{n_name}, #2{c_address}, #5{c_comment}] aggregates=[sum((#6{l_extendedprice} * (1 - #7{l_discount})))] // { arity: 8 }
        Project (#0{c_custkey}..=#2{c_address}, #4{c_acctbal}, #5{c_comment}, #7{l_discount}, #22, #23, #34) // { arity: 9 }
          Filter (#25{l_returnflag} = "R") AND (#12{o_orderdate} < 1994-01-01) AND (#12{o_orderdate} >= 1993-10-01) AND (date_to_timestamp(#12{o_orderdate}) < 1994-01-01 00:00:00) // { arity: 37 }
            Join on=(#0{c_custkey} = #9{o_custkey} AND #3{c_nationkey} = #33{n_nationkey} AND #8{o_orderkey} = #17{l_orderkey}) type=delta // { arity: 37 }
              implementation
                %0:customer » %1:orders[#1]KAiiif » %2:lineitem[#0]KAef » %3:nation[#0]KA
                %1:orders » %2:lineitem[#0]KAef » %0:customer[#0]KA » %3:nation[#0]KA
                %2:lineitem » %1:orders[#0]KAiiif » %0:customer[#0]KA » %3:nation[#0]KA
                %3:nation » %0:customer[#3]KA » %1:orders[#1]KAiiif » %2:lineitem[#0]KAef
              ArrangeBy keys=[[#0{c_custkey}], [#3{c_nationkey}]] // { arity: 8 }
                ReadIndex on=customer pk_customer_custkey=[delta join 1st input (full scan)] fk_customer_nationkey=[delta join lookup] // { arity: 8 }
              ArrangeBy keys=[[#0{o_orderkey}], [#1{o_custkey}]] // { arity: 9 }
                ReadIndex on=orders pk_orders_orderkey=[delta join lookup] fk_orders_custkey=[delta join lookup] // { arity: 9 }
              ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 16 }
                ReadIndex on=lineitem fk_lineitem_orderkey=[delta join lookup] // { arity: 16 }
              ArrangeBy keys=[[#0{n_nationkey}]] // { arity: 4 }
                ReadIndex on=nation pk_nation_nationkey=[delta join lookup] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.pk_customer_custkey (delta join 1st input (full scan))
  - materialize.public.fk_customer_nationkey (delta join lookup)
  - materialize.public.pk_orders_orderkey (delta join lookup)
  - materialize.public.fk_orders_custkey (delta join lookup)
  - materialize.public.fk_lineitem_orderkey (delta join lookup)

Target cluster: quickstart

EOF


query T multiline
-- Query 11
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    ps_partkey,
    sum(ps_supplycost * ps_availqty) AS value
FROM
    partsupp,
    supplier,
    nation
WHERE
    ps_suppkey = s_suppkey
    AND s_nationkey = n_nationkey
    AND n_name = 'GERMANY'
GROUP BY
    ps_partkey having
        sum(ps_supplycost * ps_availqty) > (
            SELECT
                sum(ps_supplycost * ps_availqty) * 0.0001
            FROM
                partsupp,
                supplier,
                nation
            WHERE
                ps_suppkey = s_suppkey
                AND s_nationkey = n_nationkey
                AND n_name = 'GERMANY'
        )
ORDER BY
    value DESC;
----
Explained Query:
  Finish order_by=[#1{sum} desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Project (#0{ps_partkey}, #1{sum}) // { arity: 2 }
        Filter (#1{sum} > (#2{sum} * 0.0001)) // { arity: 3 }
          CrossJoin type=differential // { arity: 3 }
            implementation
              %1[×]UA » %0[×]
            ArrangeBy keys=[[]] // { arity: 2 }
              Reduce group_by=[#0{ps_partkey}] aggregates=[sum((#2{ps_supplycost} * integer_to_numeric(#1{ps_availqty})))] // { arity: 2 }
                Get l0 // { arity: 3 }
            ArrangeBy keys=[[]] // { arity: 1 }
              Reduce aggregates=[sum((#1{ps_supplycost} * integer_to_numeric(#0{ps_availqty})))] // { arity: 1 }
                Project (#1{ps_supplycost}, #2) // { arity: 2 }
                  Get l0 // { arity: 3 }
    With
      cte l0 =
        Project (#0{ps_partkey}, #2{ps_supplycost}, #3) // { arity: 3 }
          Filter (#13{n_name} = "GERMANY") // { arity: 16 }
            Join on=(#1{ps_suppkey} = #5{s_suppkey} AND #8{s_nationkey} = #12{n_nationkey}) type=delta // { arity: 16 }
              implementation
                %0:partsupp » %1:supplier[#0]KA » %2:nation[#0]KAef
                %1:supplier » %2:nation[#0]KAef » %0:partsupp[#1]KA
                %2:nation » %1:supplier[#3]KA » %0:partsupp[#1]KA
              ArrangeBy keys=[[#1{ps_suppkey}]] // { arity: 5 }
                ReadIndex on=partsupp fk_partsupp_suppkey=[delta join 1st input (full scan)] // { arity: 5 }
              ArrangeBy keys=[[#0{s_suppkey}], [#3{s_nationkey}]] // { arity: 7 }
                ReadIndex on=supplier pk_supplier_suppkey=[delta join lookup] fk_supplier_nationkey=[delta join lookup] // { arity: 7 }
              ArrangeBy keys=[[#0{n_nationkey}]] // { arity: 4 }
                ReadIndex on=nation pk_nation_nationkey=[delta join lookup] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (delta join lookup)
  - materialize.public.pk_supplier_suppkey (delta join lookup)
  - materialize.public.fk_supplier_nationkey (delta join lookup)
  - materialize.public.fk_partsupp_suppkey (delta join 1st input (full scan))

Target cluster: quickstart

EOF


query T multiline
-- Query 12
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    l_shipmode,
    sum(case
        when o_orderpriority = '1-URGENT'
            or o_orderpriority = '2-HIGH'
            then 1
        else 0
    end) AS high_line_count,
    sum(case
        when o_orderpriority <> '1-URGENT'
            AND o_orderpriority <> '2-HIGH'
            then 1
        else 0
    end) AS low_line_count
FROM
    orders,
    lineitem
WHERE
    o_orderkey = l_orderkey
    AND l_shipmode IN ('MAIL', 'SHIP')
    AND l_commitdate < l_receiptdate
    AND l_shipdate < l_commitdate
    AND l_receiptdate >= DATE '1994-01-01'
    AND l_receiptdate < DATE '1994-01-01' + INTERVAL '1' year
GROUP BY
    l_shipmode
ORDER BY
    l_shipmode;
----
Explained Query:
  Finish order_by=[#0{l_shipmode} asc nulls_last] output=[#0..=#2]
    Reduce group_by=[#1{l_shipmode}] aggregates=[sum(case when ((#0{o_orderpriority} = "2-HIGH") OR (#0{o_orderpriority} = "1-URGENT")) then 1 else 0 end), sum(case when ((#0{o_orderpriority} != "2-HIGH") AND (#0{o_orderpriority} != "1-URGENT")) then 1 else 0 end)] // { arity: 3 }
      Project (#5, #23) // { arity: 2 }
        Filter (#21{l_receiptdate} >= 1994-01-01) AND (#19{l_shipdate} < #20{l_commitdate}) AND (#20{l_commitdate} < #21{l_receiptdate}) AND (date_to_timestamp(#21{l_receiptdate}) < 1995-01-01 00:00:00) AND ((#23{l_shipmode} = "MAIL") OR (#23{l_shipmode} = "SHIP")) // { arity: 25 }
          Join on=(#0{o_orderkey} = #9{l_orderkey}) type=differential // { arity: 25 }
            implementation
              %1:lineitem[#0]KAeiif » %0:orders[#0]KAeiif
            ArrangeBy keys=[[#0{o_orderkey}]] // { arity: 9 }
              ReadIndex on=orders pk_orders_orderkey=[differential join] // { arity: 9 }
            ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 16 }
              ReadIndex on=lineitem fk_lineitem_orderkey=[differential join] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_orders_orderkey (differential join)
  - materialize.public.fk_lineitem_orderkey (differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 13
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    c_count,
    count(*) AS custdist
FROM
    (
        SELECT
            c_custkey,
            count(o_orderkey) c_count -- workaround for no column aliases
        FROM
            customer LEFT OUTER JOIN orders ON
                c_custkey = o_custkey
                AND o_comment NOT LIKE '%special%requests%'
        GROUP BY
            c_custkey
    ) AS c_orders -- (c_custkey, c_count) -- no column aliases yet
GROUP BY
    c_count
ORDER BY
    custdist DESC,
    c_count DESC;
----
Explained Query:
  Finish order_by=[#1{count} desc nulls_first, #0{count_o_orderkey} desc nulls_first] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0{count_o_orderkey}] aggregates=[count(*)] // { arity: 2 }
        Project (#1) // { arity: 1 }
          Reduce group_by=[#0{c_custkey}] aggregates=[count(#1{o_orderkey})] // { arity: 2 }
            Union // { arity: 2 }
              Map (null) // { arity: 2 }
                Union // { arity: 1 }
                  Negate // { arity: 1 }
                    Project (#0{c_custkey}) // { arity: 1 }
                      Join on=(#0{c_custkey} = #8{c_custkey}) type=differential // { arity: 9 }
                        implementation
                          %1[#0]UKA » %0:l0[#0]KA
                        Get l0 // { arity: 8 }
                        ArrangeBy keys=[[#0{c_custkey}]] // { arity: 1 }
                          Distinct project=[#0{c_custkey}] // { arity: 1 }
                            Project (#0{c_custkey}) // { arity: 1 }
                              Get l1 // { arity: 2 }
                  Project (#0{c_custkey}) // { arity: 1 }
                    ReadIndex on=customer pk_customer_custkey=[*** full scan ***] // { arity: 8 }
              Get l1 // { arity: 2 }
    With
      cte l1 =
        Project (#0{c_custkey}, #8) // { arity: 2 }
          Filter NOT(like["%special%requests%"](varchar_to_text(#16{o_comment}))) // { arity: 17 }
            Join on=(#0{c_custkey} = #9{o_custkey}) type=differential // { arity: 17 }
              implementation
                %1:orders[#1]KAf » %0:l0[#0]KAf
              Get l0 // { arity: 8 }
              ArrangeBy keys=[[#1{o_custkey}]] // { arity: 9 }
                ReadIndex on=orders fk_orders_custkey=[differential join] // { arity: 9 }
      cte l0 =
        ArrangeBy keys=[[#0{c_custkey}]] // { arity: 8 }
          ReadIndex on=customer pk_customer_custkey=[differential join] // { arity: 8 }

Used Indexes:
  - materialize.public.pk_customer_custkey (*** full scan ***, differential join)
  - materialize.public.fk_orders_custkey (differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 14
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    100.00 * sum(case
        when p_type like 'PROMO%'
            then l_extendedprice * (1 - l_discount)
        else 0
    end) / sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey
    AND l_shipdate >= DATE '1995-09-01'
    AND l_shipdate < DATE '1995-09-01' + INTERVAL '1' month;
----
Explained Query:
  Return // { arity: 1 }
    Project (#2) // { arity: 1 }
      Map (((100 * #0{sum}) / #1{sum})) // { arity: 3 }
        Union // { arity: 2 }
          Get l0 // { arity: 2 }
          Map (null, null) // { arity: 2 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l0 // { arity: 2 }
              Constant // { arity: 0 }
                - ()
  With
    cte l0 =
      Reduce aggregates=[sum(case when like["PROMO%"](varchar_to_text(#2{p_type})) then (#0{l_extendedprice} * (1 - #1{l_discount})) else 0 end), sum((#0{l_extendedprice} * (1 - #1{l_discount})))] // { arity: 2 }
        Project (#5, #6, #20) // { arity: 3 }
          Filter (#10{l_shipdate} >= 1995-09-01) AND (date_to_timestamp(#10{l_shipdate}) < 1995-10-01 00:00:00) // { arity: 25 }
            Join on=(#1{l_partkey} = #16{p_partkey}) type=differential // { arity: 25 }
              implementation
                %0:lineitem[#1]KAiif » %1:part[#0]KAiif
              ArrangeBy keys=[[#1{l_partkey}]] // { arity: 16 }
                ReadIndex on=lineitem fk_lineitem_partkey=[differential join] // { arity: 16 }
              ArrangeBy keys=[[#0{p_partkey}]] // { arity: 9 }
                ReadIndex on=part pk_part_partkey=[differential join] // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey (differential join)
  - materialize.public.fk_lineitem_partkey (differential join)

Target cluster: quickstart

EOF


statement ok
create view revenue (supplier_no, total_revenue) as
    SELECT
        l_suppkey,
        sum(l_extendedprice * (1 - l_discount))
    FROM
        lineitem
    WHERE
        l_shipdate >= DATE '1996-01-01'
        AND l_shipdate < DATE '1996-01-01' + INTERVAL '3' month
    GROUP BY
        l_suppkey

query T multiline
-- Query 15
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
FROM
    supplier,
    revenue
WHERE
    s_suppkey = supplier_no
    AND total_revenue = (
        SELECT
            max(total_revenue)
        FROM
            revenue
    )
ORDER BY
    s_suppkey;
----
Explained Query:
  Finish order_by=[#0{s_suppkey} asc nulls_last] output=[#0..=#4]
    Return // { arity: 5 }
      Project (#0{s_suppkey}..=#2{s_address}, #4{sum}, #8) // { arity: 5 }
        Join on=(#0{s_suppkey} = #7{l_suppkey} AND #8{sum} = #9{max_sum}) type=delta // { arity: 10 }
          implementation
            %0:supplier » %1:l0[#0]UKA » %2[#0]UK
            %1:l0 » %2[#0]UK » %0:supplier[#0]KA
            %2 » %1:l0[#1]K » %0:supplier[#0]KA
          ArrangeBy keys=[[#0{s_suppkey}]] // { arity: 7 }
            ReadIndex on=supplier pk_supplier_suppkey=[delta join 1st input (full scan)] // { arity: 7 }
          ArrangeBy keys=[[#0{l_suppkey}], [#1{sum}]] // { arity: 2 }
            Get l0 // { arity: 2 }
          ArrangeBy keys=[[#0{max_sum}]] // { arity: 1 }
            Reduce aggregates=[max(#0{sum})] // { arity: 1 }
              Project (#1) // { arity: 1 }
                Get l0 // { arity: 2 }
    With
      cte l0 =
        Reduce group_by=[#0{l_suppkey}] aggregates=[sum((#1{l_extendedprice} * (1 - #2{l_discount})))] // { arity: 2 }
          Project (#2{l_discount}, #5, #6) // { arity: 3 }
            Filter (#10{l_shipdate} >= 1996-01-01) AND (date_to_timestamp(#10{l_shipdate}) < 1996-04-01 00:00:00) // { arity: 16 }
              ReadIndex on=lineitem pk_lineitem_orderkey_linenumber=[*** full scan ***] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_supplier_suppkey (delta join 1st input (full scan))
  - materialize.public.pk_lineitem_orderkey_linenumber (*** full scan ***)

Target cluster: quickstart

EOF

statement ok
drop view revenue


query T multiline
-- Query 16
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    p_brand,
    p_type,
    p_size,
    count(DISTINCT ps_suppkey) AS supplier_cnt
FROM
    partsupp,
    part
WHERE
    p_partkey = ps_partkey
    AND p_brand <> 'Brand#45'
    AND p_type NOT LIKE 'MEDIUM POLISHED%'
    AND p_size IN (49, 14, 23, 45, 19, 3, 36, 9)
    AND ps_suppkey NOT IN (
        SELECT
            s_suppkey
        FROM
            supplier
        WHERE
            s_comment like '%Customer%Complaints%'
    )
GROUP BY
    p_brand,
    p_type,
    p_size
ORDER BY
    supplier_cnt DESC,
    p_brand,
    p_type,
    p_size;
----
Explained Query:
  Finish order_by=[#3{count_ps_suppkey} desc nulls_first, #0{p_brand} asc nulls_last, #1{p_type} asc nulls_last, #2{p_size} asc nulls_last] output=[#0..=#3]
    Return // { arity: 4 }
      Reduce group_by=[#1{p_brand}..=#3{p_size}] aggregates=[count(distinct #0{ps_suppkey})] // { arity: 4 }
        Project (#1{p_brand}, #7..=#9) // { arity: 4 }
          Join on=(#0{ps_partkey} = #13{ps_partkey} AND #1{ps_suppkey} = #14{ps_suppkey} = #26{ps_suppkey} AND #2{ps_availqty} = #15{ps_availqty} AND #3{ps_supplycost} = #16{ps_supplycost} AND #4{ps_comment} = #17{ps_comment} AND #5{p_name} = #18{p_name} AND #6{p_mfgr} = #19{p_mfgr} AND #7{p_brand} = #20{p_brand} AND #8{p_type} = #21{p_type} AND #9{p_size} = #22{p_size} AND #10{p_container} = #23{p_container} AND #11{p_retailprice} = #24{p_retailprice} AND #12{p_comment} = #25{p_comment}) type=delta // { arity: 27 }
            implementation
              %0:l0 » %1:l1[#0..=#12]UKKKKKKKKKKKKKef » %2[#0]K
              %1:l1 » %0:l0[#0..=#12]KKKKKKKKKKKKKef » %2[#0]K
              %2 » %0:l0[#1]Kef » %1:l1[#0..=#12]UKKKKKKKKKKKKKef
            ArrangeBy keys=[[#0{ps_partkey}..=#12{p_comment}], [#1{ps_suppkey}]] // { arity: 13 }
              Project (#0{ps_partkey}..=#4{ps_comment}, #6{p_mfgr}..=#13) // { arity: 13 }
                Filter (#8{p_brand} != "Brand#45") AND (#0{ps_partkey} = #5{p_partkey}) AND NOT(like["MEDIUM POLISHED%"](varchar_to_text(#9{p_type}))) AND ((#10{p_size} = 3) OR (#10{p_size} = 9) OR (#10{p_size} = 14) OR (#10{p_size} = 19) OR (#10{p_size} = 23) OR (#10{p_size} = 36) OR (#10{p_size} = 45) OR (#10{p_size} = 49)) // { arity: 14 }
                  Get l0 // { arity: 14 }
            ArrangeBy keys=[[#0{ps_partkey}..=#12{p_comment}]] // { arity: 13 }
              Project (#0{ps_partkey}..=#4{ps_comment}, #6{p_mfgr}..=#13) // { arity: 13 }
                Filter (#8{p_brand} != "Brand#45") AND (#0{ps_partkey} = #5{p_partkey}) AND NOT(like["MEDIUM POLISHED%"](varchar_to_text(#9{p_type}))) AND ((#10{p_size} = 3) OR (#10{p_size} = 9) OR (#10{p_size} = 14) OR (#10{p_size} = 19) OR (#10{p_size} = 23) OR (#10{p_size} = 36) OR (#10{p_size} = 45) OR (#10{p_size} = 49)) // { arity: 14 }
                  Get l1 // { arity: 14 }
            ArrangeBy keys=[[#0{ps_suppkey}]] // { arity: 1 }
              Union // { arity: 1 }
                Negate // { arity: 1 }
                  Distinct project=[#0{ps_suppkey}] // { arity: 1 }
                    Project (#0{ps_suppkey}) // { arity: 1 }
                      Filter ((#1{s_suppkey}) IS NULL OR (#0{ps_suppkey} = #1{s_suppkey})) // { arity: 2 }
                        CrossJoin type=differential // { arity: 2 }
                          implementation
                            %1:supplier[×]lf » %0:l2[×]lf
                          ArrangeBy keys=[[]] // { arity: 1 }
                            Get l2 // { arity: 1 }
                          ArrangeBy keys=[[]] // { arity: 1 }
                            Project (#0{s_suppkey}) // { arity: 1 }
                              Filter like["%Customer%Complaints%"](varchar_to_text(#6{s_comment})) // { arity: 7 }
                                ReadIndex on=supplier pk_supplier_suppkey=[*** full scan ***] // { arity: 7 }
                Get l2 // { arity: 1 }
    With
      cte l2 =
        Distinct project=[#0{ps_suppkey}] // { arity: 1 }
          Project (#1) // { arity: 1 }
            Get l1 // { arity: 14 }
      cte l1 =
        Distinct project=[#0{ps_partkey}..=#13{p_comment}] // { arity: 14 }
          Get l0 // { arity: 14 }
      cte l0 =
        CrossJoin type=differential // { arity: 14 }
          implementation
            %0:partsupp[×] » %1:part[×]
          ArrangeBy keys=[[]] // { arity: 5 }
            ReadIndex on=partsupp pk_partsupp_partkey_suppkey=[*** full scan ***] // { arity: 5 }
          ArrangeBy keys=[[]] // { arity: 9 }
            ReadIndex on=part pk_part_partkey=[*** full scan ***] // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey (*** full scan ***)
  - materialize.public.pk_supplier_suppkey (*** full scan ***)
  - materialize.public.pk_partsupp_partkey_suppkey (*** full scan ***)

Target cluster: quickstart

EOF


query T multiline
-- Query 17
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
  sum(l_extendedprice) / 7.0 AS avg_yearly
FROM
  lineitem,
  part
WHERE
  p_partkey = l_partkey
  AND p_brand = 'Brand#23'
  AND p_container = 'MED BOX'
  AND l_quantity < (
    SELECT
      0.2 * avg(l_quantity)
    FROM
      lineitem
    WHERE
      l_partkey = p_partkey
  );
----
Explained Query:
  Return // { arity: 1 }
    Project (#1) // { arity: 1 }
      Map ((#0{sum_l_extendedprice} / 7)) // { arity: 2 }
        Union // { arity: 1 }
          Get l2 // { arity: 1 }
          Map (null) // { arity: 1 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l2 // { arity: 1 }
              Constant // { arity: 0 }
                - ()
  With
    cte l2 =
      Reduce aggregates=[sum(#0{l_extendedprice})] // { arity: 1 }
        Project (#5) // { arity: 1 }
          Filter (#4{l_quantity} < (0.2 * (#45{sum_l_quantity} / bigint_to_numeric(case when (#46{count} = 0) then null else #46{count} end)))) // { arity: 47 }
            Join on=(#0{l_orderkey} = #22{l_orderkey} AND #1{l_partkey} = #23{l_partkey} = #44{p_partkey} AND #2{l_suppkey} = #24{l_suppkey} AND #3{l_linenumber} = #25{l_linenumber} AND #4{l_quantity} = #26{l_quantity} AND #5{l_extendedprice} = #27{l_extendedprice} AND #6{l_discount} = #28{l_discount} AND #7{l_tax} = #29{l_tax} AND #8{l_returnflag} = #30{l_returnflag} AND #9{l_linestatus} = #31{l_linestatus} AND #10{l_shipdate} = #32{l_shipdate} AND #11{l_commitdate} = #33{l_commitdate} AND #12{l_receiptdate} = #34{l_receiptdate} AND #13{l_shipinstruct} = #35{l_shipinstruct} AND #14{l_shipmode} = #36{l_shipmode} AND #15{l_comment} = #37{l_comment} AND #16{p_name} = #38{p_name} AND #17{p_mfgr} = #39{p_mfgr} AND #18{p_type} = #40{p_type} AND #19{p_size} = #41{p_size} AND #20{p_retailprice} = #42{p_retailprice} AND #21{p_comment} = #43{p_comment}) type=delta // { arity: 47 }
              implementation
                %0:l0 » %1:l1[#0..=#21]UKKKKKKKKKKKKKKKKKKKKKKef » %2[#0]UKA
                %1:l1 » %2[#0]UKA » %0:l0[#0..=#21]KKKKKKKKKKKKKKKKKKKKKKef
                %2 » %0:l0[#1]Kef » %1:l1[#0..=#21]UKKKKKKKKKKKKKKKKKKKKKKef
              ArrangeBy keys=[[#0{l_orderkey}..=#21{p_comment}], [#1{l_partkey}]] // { arity: 22 }
                Project (#0{l_orderkey}..=#15{l_comment}, #17{p_mfgr}, #18{p_type}, #20{p_retailprice}, #21{p_comment}, #23, #24) // { arity: 22 }
                  Filter (#19{p_brand} = "Brand#23") AND (#22{p_container} = "MED BOX") AND (#1{l_partkey} = #16{p_partkey}) // { arity: 25 }
                    Get l0 // { arity: 25 }
              ArrangeBy keys=[[#0{l_orderkey}..=#21{p_comment}]] // { arity: 22 }
                Project (#0{l_orderkey}..=#15{l_comment}, #17{p_mfgr}, #18{p_type}, #20{p_retailprice}, #21{p_comment}, #23, #24) // { arity: 22 }
                  Filter (#19{p_brand} = "Brand#23") AND (#22{p_container} = "MED BOX") AND (#1{l_partkey} = #16{p_partkey}) // { arity: 25 }
                    Get l1 // { arity: 25 }
              ArrangeBy keys=[[#0{p_partkey}]] // { arity: 3 }
                Reduce group_by=[#0{p_partkey}] aggregates=[sum(#1{l_quantity}), count(*)] // { arity: 3 }
                  Project (#0{p_partkey}, #5) // { arity: 2 }
                    Join on=(#0{p_partkey} = #2{l_partkey}) type=differential // { arity: 17 }
                      implementation
                        %0[#0]UKA » %1:lineitem[#1]KA
                      ArrangeBy keys=[[#0{p_partkey}]] // { arity: 1 }
                        Distinct project=[#0{p_partkey}] // { arity: 1 }
                          Project (#16) // { arity: 1 }
                            Filter (#16{p_partkey}) IS NOT NULL // { arity: 25 }
                              Get l1 // { arity: 25 }
                      ArrangeBy keys=[[#1{l_partkey}]] // { arity: 16 }
                        ReadIndex on=lineitem fk_lineitem_partkey=[differential join] // { arity: 16 }
    cte l1 =
      Distinct project=[#0{l_orderkey}..=#24{p_comment}] // { arity: 25 }
        Get l0 // { arity: 25 }
    cte l0 =
      CrossJoin type=differential // { arity: 25 }
        implementation
          %0:lineitem[×] » %1:part[×]
        ArrangeBy keys=[[]] // { arity: 16 }
          ReadIndex on=lineitem fk_lineitem_partkey=[*** full scan ***] // { arity: 16 }
        ArrangeBy keys=[[]] // { arity: 9 }
          ReadIndex on=part pk_part_partkey=[*** full scan ***] // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey (*** full scan ***)
  - materialize.public.fk_lineitem_partkey (*** full scan ***, differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 18
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
FROM
    customer,
    orders,
    lineitem
WHERE
    o_orderkey IN (
        SELECT
            l_orderkey
        FROM
            lineitem
        GROUP BY
            l_orderkey having
                sum(l_quantity) > 300
    )
    AND c_custkey = o_custkey
    AND o_orderkey = l_orderkey
GROUP BY
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
ORDER BY
    o_totalprice DESC,
    o_orderdate;
----
Explained Query:
  Finish order_by=[#4{o_totalprice} desc nulls_first, #3{o_orderdate} asc nulls_last] output=[#0..=#5]
    Return // { arity: 6 }
      Reduce group_by=[#1{c_name}, #0{c_custkey}, #2{o_orderkey}, #4{o_orderdate}, #3{o_totalprice}] aggregates=[sum(#5{l_quantity})] // { arity: 6 }
        Project (#0{c_custkey}, #1{c_name}, #8, #10, #11, #19) // { arity: 6 }
          Filter (#63{sum_l_quantity} > 300) // { arity: 64 }
            Join on=(#0{c_custkey} = #31{c_custkey} AND #1{c_name} = #32{c_name} AND #2{c_address} = #33{c_address} AND #3{c_nationkey} = #34{c_nationkey} AND #4{c_phone} = #35{c_phone} AND #5{c_acctbal} = #36{c_acctbal} AND #6{c_mktsegment} = #37{c_mktsegment} AND #7{c_comment} = #38{c_comment} AND #8{o_orderkey} = #39{o_orderkey} = #62{o_orderkey} AND #9{o_orderstatus} = #40{o_orderstatus} AND #10{o_totalprice} = #41{o_totalprice} AND #11{o_orderdate} = #42{o_orderdate} AND #12{o_orderpriority} = #43{o_orderpriority} AND #13{o_clerk} = #44{o_clerk} AND #14{o_shippriority} = #45{o_shippriority} AND #15{o_comment} = #46{o_comment} AND #16{l_partkey} = #47{l_partkey} AND #17{l_suppkey} = #48{l_suppkey} AND #18{l_linenumber} = #49{l_linenumber} AND #19{l_quantity} = #50{l_quantity} AND #20{l_extendedprice} = #51{l_extendedprice} AND #21{l_discount} = #52{l_discount} AND #22{l_tax} = #53{l_tax} AND #23{l_returnflag} = #54{l_returnflag} AND #24{l_linestatus} = #55{l_linestatus} AND #25{l_shipdate} = #56{l_shipdate} AND #26{l_commitdate} = #57{l_commitdate} AND #27{l_receiptdate} = #58{l_receiptdate} AND #28{l_shipinstruct} = #59{l_shipinstruct} AND #29{l_shipmode} = #60{l_shipmode} AND #30{l_comment} = #61{l_comment}) type=delta // { arity: 64 }
              implementation
                %0:l0 » %1:l1[#0..=#30]UKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKf » %2[#0]UKAif
                %1:l1 » %2[#0]UKAif » %0:l0[#0..=#30]KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKf
                %2 » %0:l0[#8]Kf » %1:l1[#0..=#30]UKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKf
              ArrangeBy keys=[[#0{c_custkey}..=#30{l_comment}], [#8{o_orderkey}]] // { arity: 31 }
                Project (#0{c_custkey}..=#8{o_orderkey}, #10{o_totalprice}..=#16{l_partkey}, #18{l_linenumber}..=#32) // { arity: 31 }
                  Filter (#0{c_custkey} = #9{o_custkey}) AND (#8{o_orderkey} = #17{l_orderkey}) // { arity: 33 }
                    Get l0 // { arity: 33 }
              ArrangeBy keys=[[#0{c_custkey}..=#30{l_comment}]] // { arity: 31 }
                Project (#0{c_custkey}..=#8{o_orderkey}, #10{o_totalprice}..=#16{l_partkey}, #18{l_linenumber}..=#32) // { arity: 31 }
                  Filter (#0{c_custkey} = #9{o_custkey}) AND (#8{o_orderkey} = #17{l_orderkey}) // { arity: 33 }
                    Get l1 // { arity: 33 }
              ArrangeBy keys=[[#0{o_orderkey}]] // { arity: 2 }
                Reduce group_by=[#0{o_orderkey}] aggregates=[sum(#1{l_quantity})] // { arity: 2 }
                  Project (#0{o_orderkey}, #5) // { arity: 2 }
                    Join on=(#0{o_orderkey} = #1{l_orderkey}) type=differential // { arity: 17 }
                      implementation
                        %0[#0]UKA » %1:lineitem[#0]KA
                      ArrangeBy keys=[[#0{o_orderkey}]] // { arity: 1 }
                        Distinct project=[#0{o_orderkey}] // { arity: 1 }
                          Project (#8) // { arity: 1 }
                            Get l1 // { arity: 33 }
                      ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 16 }
                        ReadIndex on=lineitem fk_lineitem_orderkey=[differential join] // { arity: 16 }
    With
      cte l1 =
        Distinct project=[#0{c_custkey}..=#32{l_comment}] // { arity: 33 }
          Get l0 // { arity: 33 }
      cte l0 =
        CrossJoin type=delta // { arity: 33 }
          implementation
            %0:customer » %1:orders[×] » %2:lineitem[×]
            %1:orders » %0:customer[×] » %2:lineitem[×]
            %2:lineitem » %0:customer[×] » %1:orders[×]
          ArrangeBy keys=[[]] // { arity: 8 }
            ReadIndex on=customer pk_customer_custkey=[*** full scan ***] // { arity: 8 }
          ArrangeBy keys=[[]] // { arity: 9 }
            Filter (#0{o_orderkey}) IS NOT NULL // { arity: 9 }
              ReadIndex on=orders pk_orders_orderkey=[*** full scan ***] // { arity: 9 }
          ArrangeBy keys=[[]] // { arity: 16 }
            ReadIndex on=lineitem fk_lineitem_orderkey=[*** full scan ***] // { arity: 16 }

Used Indexes:
  - materialize.public.pk_customer_custkey (*** full scan ***)
  - materialize.public.pk_orders_orderkey (*** full scan ***)
  - materialize.public.fk_lineitem_orderkey (*** full scan ***, differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 19
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    sum(l_extendedprice* (1 - l_discount)) AS revenue
FROM
    lineitem,
    part
WHERE
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#12'
        AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
        AND l_quantity >= CAST (1 AS smallint) AND l_quantity <= CAST (1 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (5 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#23'
        AND p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
        AND l_quantity >= CAST (10 AS smallint) AND l_quantity <= CAST (10 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (10 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#34'
        AND p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
        AND l_quantity >= CAST (20 AS smallint) AND l_quantity <= CAST (20 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (15 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    );
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l0 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l0 =
      Reduce aggregates=[sum((#0{l_extendedprice} * (1 - #1{l_discount})))] // { arity: 1 }
        Project (#5, #6) // { arity: 2 }
          Filter (#13{l_shipinstruct} = "DELIVER IN PERSON") AND (#21{p_size} >= 1) AND ((#14{l_shipmode} = "AIR") OR (#14{l_shipmode} = "AIR REG")) AND ((#25 AND #26) OR (#27 AND #28) OR (#29 AND #30)) AND ((#31 AND #32 AND #33) OR (#34 AND #35 AND #36) OR (#37 AND #38 AND #39)) AND ((#25 AND #26 AND #34 AND #35 AND #36) OR (#27 AND #28 AND #37 AND #38 AND #39) OR (#29 AND #30 AND #31 AND #32 AND #33)) // { arity: 40 }
            Map ((#4{l_quantity} <= 20), (#4{l_quantity} >= 10), (#4{l_quantity} <= 30), (#4{l_quantity} >= 20), (#4{l_quantity} <= 11), (#4{l_quantity} >= 1), (#19{p_brand} = "Brand#12"), (#21{p_size} <= 5), ((#22{p_container} = "SM BOX") OR (#22{p_container} = "SM PKG") OR (#22{p_container} = "SM CASE") OR (#22{p_container} = "SM PACK")), (#19{p_brand} = "Brand#23"), (#21{p_size} <= 10), ((#22{p_container} = "MED BAG") OR (#22{p_container} = "MED BOX") OR (#22{p_container} = "MED PKG") OR (#22{p_container} = "MED PACK")), (#19{p_brand} = "Brand#34"), (#21{p_size} <= 15), ((#22{p_container} = "LG BOX") OR (#22{p_container} = "LG PKG") OR (#22{p_container} = "LG CASE") OR (#22{p_container} = "LG PACK"))) // { arity: 40 }
              Join on=(#1{l_partkey} = #16{p_partkey}) type=differential // { arity: 25 }
                implementation
                  %1:part[#0]KAeiiif » %0:lineitem[#1]KAeiiiiif
                ArrangeBy keys=[[#1{l_partkey}]] // { arity: 16 }
                  ReadIndex on=lineitem fk_lineitem_partkey=[differential join] // { arity: 16 }
                ArrangeBy keys=[[#0{p_partkey}]] // { arity: 9 }
                  ReadIndex on=part pk_part_partkey=[differential join] // { arity: 9 }

Used Indexes:
  - materialize.public.pk_part_partkey (differential join)
  - materialize.public.fk_lineitem_partkey (differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 20
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name;
----
Explained Query:
  Finish order_by=[#0{s_name} asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Project (#1{s_address}, #2) // { arity: 2 }
        Join on=(#0{s_suppkey} = #9{s_suppkey} = #18{s_suppkey} AND #1{s_name} = #10{s_name} AND #2{s_address} = #11{s_address} AND #3{s_nationkey} = #12{s_nationkey} AND #4{s_phone} = #13{s_phone} AND #5{s_acctbal} = #14{s_acctbal} AND #6{s_comment} = #15{s_comment} AND #7{n_regionkey} = #16{n_regionkey} AND #8{n_comment} = #17{n_comment}) type=delta // { arity: 19 }
          implementation
            %0:l0 » %1:l1[#0..=#8]UKKKKKKKKKef » %2[#0]UKA
            %1:l1 » %2[#0]UKA » %0:l0[#0..=#8]KKKKKKKKKef
            %2 » %0:l0[#0]Kef » %1:l1[#0..=#8]UKKKKKKKKKef
          ArrangeBy keys=[[#0{s_suppkey}], [#0{s_suppkey}..=#8{n_comment}]] // { arity: 9 }
            Project (#0{s_suppkey}..=#6{s_comment}, #9, #10) // { arity: 9 }
              Filter (#8{n_name} = "CANADA") AND (#3{s_nationkey} = #7{n_nationkey}) // { arity: 11 }
                Get l0 // { arity: 11 }
          ArrangeBy keys=[[#0{s_suppkey}..=#8{n_comment}]] // { arity: 9 }
            Project (#0{s_suppkey}..=#6{s_comment}, #9, #10) // { arity: 9 }
              Filter (#8{n_name} = "CANADA") AND (#3{s_nationkey} = #7{n_nationkey}) // { arity: 11 }
                Get l1 // { arity: 11 }
          ArrangeBy keys=[[#0{s_suppkey}]] // { arity: 1 }
            Distinct project=[#0{s_suppkey}] // { arity: 1 }
              Project (#0{s_suppkey}) // { arity: 1 }
                Filter (integer_to_numeric(#2{ps_availqty}) > (0.5 * #13{sum_l_quantity})) // { arity: 14 }
                  Join on=(#0{s_suppkey} = #5{s_suppkey} = #12{ps_suppkey} AND #1{ps_partkey} = #6{ps_partkey} = #10{p_partkey} = #11{ps_partkey} AND #2{ps_availqty} = #7{ps_availqty} AND #3{ps_supplycost} = #8{ps_supplycost} AND #4{ps_comment} = #9{ps_comment}) type=delta // { arity: 14 }
                    implementation
                      %0:l2 » %1:l3[#0..=#4]UKKKKKf » %3[#0, #1]UKKA » %2[#0]UKA
                      %1:l3 » %3[#0, #1]UKKA » %2[#0]UKA » %0:l2[#0..=#4]KKKKKf
                      %2 » %0:l2[#1]Kf » %1:l3[#0..=#4]UKKKKKf » %3[#0, #1]UKKA
                      %3 » %2[#0]UKA » %0:l2[#0, #1]KKf » %1:l3[#0..=#4]UKKKKKf
                    ArrangeBy keys=[[#0{s_suppkey}, #1{ps_partkey}], [#0{s_suppkey}..=#4{ps_comment}], [#1{ps_partkey}]] // { arity: 5 }
                      Project (#0{s_suppkey}, #1{ps_partkey}, #3{ps_supplycost}..=#5) // { arity: 5 }
                        Filter (#0{s_suppkey} = #2{ps_suppkey}) // { arity: 6 }
                          Get l2 // { arity: 6 }
                    ArrangeBy keys=[[#0{s_suppkey}..=#4{ps_comment}]] // { arity: 5 }
                      Project (#0{s_suppkey}, #1{ps_partkey}, #3{ps_supplycost}..=#5) // { arity: 5 }
                        Filter (#0{s_suppkey} = #2{ps_suppkey}) // { arity: 6 }
                          Get l3 // { arity: 6 }
                    ArrangeBy keys=[[#0{p_partkey}]] // { arity: 1 }
                      Distinct project=[#0{p_partkey}] // { arity: 1 }
                        Project (#0{p_partkey}) // { arity: 1 }
                          Filter (#0{p_partkey}) IS NOT NULL AND like["forest%"](varchar_to_text(#1{p_name})) // { arity: 9 }
                            ReadIndex on=part pk_part_partkey=[*** full scan ***] // { arity: 9 }
                    ArrangeBy keys=[[#0{ps_partkey}, #1{ps_suppkey}]] // { arity: 3 }
                      Reduce group_by=[#0{ps_partkey}, #1{ps_suppkey}] aggregates=[sum(#2{l_quantity})] // { arity: 3 }
                        Project (#0{ps_partkey}, #1{ps_suppkey}, #6) // { arity: 3 }
                          Filter (#12{l_shipdate} >= 1995-01-01) AND (date_to_timestamp(#12{l_shipdate}) < 1996-01-01 00:00:00) // { arity: 18 }
                            Join on=(#0{ps_partkey} = #3{l_partkey} AND #1{ps_suppkey} = #4{l_suppkey}) type=differential // { arity: 18 }
                              implementation
                                %0[#0, #1]UKKA » %1:lineitem[#1, #2]KKAiif
                              ArrangeBy keys=[[#0{ps_partkey}, #1{ps_suppkey}]] // { arity: 2 }
                                Distinct project=[#0{ps_partkey}, #1{ps_suppkey}] // { arity: 2 }
                                  Project (#1{ps_suppkey}, #2) // { arity: 2 }
                                    Get l3 // { arity: 6 }
                              ArrangeBy keys=[[#1{l_partkey}, #2{l_suppkey}]] // { arity: 16 }
                                ReadIndex on=lineitem fk_lineitem_partsuppkey=[differential join] // { arity: 16 }
    With
      cte l3 =
        Distinct project=[#0{s_suppkey}..=#5{ps_comment}] // { arity: 6 }
          Get l2 // { arity: 6 }
      cte l2 =
        CrossJoin type=differential // { arity: 6 }
          implementation
            %0[×] » %1:partsupp[×]
          ArrangeBy keys=[[]] // { arity: 1 }
            Distinct project=[#0{s_suppkey}] // { arity: 1 }
              Project (#0{s_suppkey}) // { arity: 1 }
                Get l1 // { arity: 11 }
          ArrangeBy keys=[[]] // { arity: 5 }
            ReadIndex on=partsupp pk_partsupp_partkey_suppkey=[*** full scan ***] // { arity: 5 }
      cte l1 =
        Distinct project=[#0{s_suppkey}..=#10{n_comment}] // { arity: 11 }
          Get l0 // { arity: 11 }
      cte l0 =
        CrossJoin type=differential // { arity: 11 }
          implementation
            %0:supplier[×] » %1:nation[×]
          ArrangeBy keys=[[]] // { arity: 7 }
            ReadIndex on=supplier pk_supplier_suppkey=[*** full scan ***] // { arity: 7 }
          ArrangeBy keys=[[]] // { arity: 4 }
            ReadIndex on=nation pk_nation_nationkey=[*** full scan ***] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (*** full scan ***)
  - materialize.public.pk_part_partkey (*** full scan ***)
  - materialize.public.pk_supplier_suppkey (*** full scan ***)
  - materialize.public.pk_partsupp_partkey_suppkey (*** full scan ***)
  - materialize.public.fk_lineitem_partsuppkey (differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 21
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    s_name,
    count(*) AS numwait
FROM
    supplier,
    lineitem l1,
    orders,
    nation
WHERE
    s_suppkey = l1.l_suppkey
    AND o_orderkey = l1.l_orderkey
    AND o_orderstatus = 'F'
    AND l1.l_receiptdate > l1.l_commitdate
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem l2
        WHERE
            l2.l_orderkey = l1.l_orderkey
            AND l2.l_suppkey <> l1.l_suppkey
    )
    AND not EXISTS (
        SELECT
            *
        FROM
            lineitem l3
        WHERE
            l3.l_orderkey = l1.l_orderkey
            AND l3.l_suppkey <> l1.l_suppkey
            AND l3.l_receiptdate > l3.l_commitdate
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'SAUDI ARABIA'
GROUP BY
    s_name
ORDER BY
    numwait DESC,
    s_name;
----
Explained Query:
  Finish order_by=[#1{count} desc nulls_first, #0{s_name} asc nulls_last] output=[#0, #1]
    Return // { arity: 2 }
      Reduce group_by=[#0{s_name}] aggregates=[count(*)] // { arity: 2 }
        Project (#1) // { arity: 1 }
          Join on=(#0{s_suppkey} = #31{s_suppkey} = #63{l_suppkey} = #65{l_suppkey} AND #1{s_name} = #32{s_name} AND #2{s_address} = #33{s_address} AND #3{s_nationkey} = #34{s_nationkey} AND #4{s_phone} = #35{s_phone} AND #5{s_acctbal} = #36{s_acctbal} AND #6{s_comment} = #37{s_comment} AND #7{l_orderkey} = #38{l_orderkey} = #62{l_orderkey} = #64{l_orderkey} AND #8{l_partkey} = #39{l_partkey} AND #9{l_linenumber} = #40{l_linenumber} AND #10{l_quantity} = #41{l_quantity} AND #11{l_extendedprice} = #42{l_extendedprice} AND #12{l_discount} = #43{l_discount} AND #13{l_tax} = #44{l_tax} AND #14{l_returnflag} = #45{l_returnflag} AND #15{l_linestatus} = #46{l_linestatus} AND #16{l_shipdate} = #47{l_shipdate} AND #17{l_commitdate} = #48{l_commitdate} AND #18{l_receiptdate} = #49{l_receiptdate} AND #19{l_shipinstruct} = #50{l_shipinstruct} AND #20{l_shipmode} = #51{l_shipmode} AND #21{l_comment} = #52{l_comment} AND #22{o_custkey} = #53{o_custkey} AND #23{o_totalprice} = #54{o_totalprice} AND #24{o_orderdate} = #55{o_orderdate} AND #25{o_orderpriority} = #56{o_orderpriority} AND #26{o_clerk} = #57{o_clerk} AND #27{o_shippriority} = #58{o_shippriority} AND #28{o_comment} = #59{o_comment} AND #29{n_regionkey} = #60{n_regionkey} AND #30{n_comment} = #61{n_comment}) type=delta // { arity: 66 }
            implementation
              %0:l0 » %1:l1[#0..=#30]UKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKef » %2[#0, #1]UKKA » %3[#0, #1]KK
              %1:l1 » %2[#0, #1]UKKA » %0:l0[#0..=#30]KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKef » %3[#0, #1]KK
              %2 » %0:l0[#0, #7]KKef » %1:l1[#0..=#30]UKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKef » %3[#0, #1]KK
              %3 » %2[#0, #1]UKKA » %0:l0[#0, #7]KKef » %1:l1[#0..=#30]UKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKef
            ArrangeBy keys=[[#0{s_suppkey}..=#30{n_comment}], [#0{s_suppkey}, #7{l_orderkey}]] // { arity: 31 }
              Project (#0{s_suppkey}..=#8{l_partkey}, #10{l_quantity}..=#22{o_custkey}, #24{o_orderdate}, #26{o_clerk}..=#31, #34, #35) // { arity: 31 }
                Filter (#25{o_orderstatus} = "F") AND (#33{n_name} = "SAUDI ARABIA") AND (#0{s_suppkey} = #9{l_suppkey}) AND (#3{s_nationkey} = #32{n_nationkey}) AND (#7{l_orderkey} = #23{o_orderkey}) AND (#19{l_receiptdate} > #18{l_commitdate}) // { arity: 36 }
                  Get l0 // { arity: 36 }
            ArrangeBy keys=[[#0{s_suppkey}..=#30{n_comment}]] // { arity: 31 }
              Project (#0{s_suppkey}..=#8{l_partkey}, #10{l_quantity}..=#22{o_custkey}, #24{o_orderdate}, #26{o_clerk}..=#31, #34, #35) // { arity: 31 }
                Filter (#25{o_orderstatus} = "F") AND (#33{n_name} = "SAUDI ARABIA") AND (#0{s_suppkey} = #9{l_suppkey}) AND (#3{s_nationkey} = #32{n_nationkey}) AND (#7{l_orderkey} = #23{o_orderkey}) AND (#19{l_receiptdate} > #18{l_commitdate}) // { arity: 36 }
                  Get l1 // { arity: 36 }
            ArrangeBy keys=[[#0{l_orderkey}, #1{l_suppkey}]] // { arity: 2 }
              Distinct project=[#0{l_orderkey}, #1{l_suppkey}] // { arity: 2 }
                Project (#0{l_orderkey}, #1{l_suppkey}) // { arity: 2 }
                  Filter (#1{l_suppkey} != #4{l_suppkey}) // { arity: 18 }
                    Join on=(#0{l_orderkey} = #2{l_orderkey}) type=differential // { arity: 18 }
                      implementation
                        %1:l4[#0]KA » %0:l3[#0]K
                      Get l3 // { arity: 2 }
                      Get l4 // { arity: 16 }
            ArrangeBy keys=[[#0{l_orderkey}, #1{l_suppkey}]] // { arity: 2 }
              Union // { arity: 2 }
                Negate // { arity: 2 }
                  Distinct project=[#0{l_orderkey}, #1{l_suppkey}] // { arity: 2 }
                    Project (#0{l_orderkey}, #1{l_suppkey}) // { arity: 2 }
                      Filter (#1{l_suppkey} != #4{l_suppkey}) AND (#14{l_receiptdate} > #13{l_commitdate}) // { arity: 18 }
                        Join on=(#0{l_orderkey} = #2{l_orderkey}) type=differential // { arity: 18 }
                          implementation
                            %1:l4[#0]KAf » %0:l3[#0]Kf
                          Get l3 // { arity: 2 }
                          Get l4 // { arity: 16 }
                Get l2 // { arity: 2 }
    With
      cte l4 =
        ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 16 }
          ReadIndex on=lineitem fk_lineitem_orderkey=[differential join] // { arity: 16 }
      cte l3 =
        ArrangeBy keys=[[#0{l_orderkey}]] // { arity: 2 }
          Get l2 // { arity: 2 }
      cte l2 =
        Distinct project=[#0{l_orderkey}, #1{l_suppkey}] // { arity: 2 }
          Project (#7, #9) // { arity: 2 }
            Get l1 // { arity: 36 }
      cte l1 =
        Distinct project=[#0{s_suppkey}..=#35{n_comment}] // { arity: 36 }
          Get l0 // { arity: 36 }
      cte l0 =
        CrossJoin type=delta // { arity: 36 }
          implementation
            %0:supplier » %1:lineitem[×] » %2:orders[×] » %3:nation[×]
            %1:lineitem » %0:supplier[×] » %2:orders[×] » %3:nation[×]
            %2:orders » %0:supplier[×] » %1:lineitem[×] » %3:nation[×]
            %3:nation » %0:supplier[×] » %1:lineitem[×] » %2:orders[×]
          ArrangeBy keys=[[]] // { arity: 7 }
            ReadIndex on=supplier pk_supplier_suppkey=[*** full scan ***] // { arity: 7 }
          ArrangeBy keys=[[]] // { arity: 16 }
            ReadIndex on=lineitem fk_lineitem_orderkey=[*** full scan ***] // { arity: 16 }
          ArrangeBy keys=[[]] // { arity: 9 }
            ReadIndex on=orders pk_orders_orderkey=[*** full scan ***] // { arity: 9 }
          ArrangeBy keys=[[]] // { arity: 4 }
            ReadIndex on=nation pk_nation_nationkey=[*** full scan ***] // { arity: 4 }

Used Indexes:
  - materialize.public.pk_nation_nationkey (*** full scan ***)
  - materialize.public.pk_supplier_suppkey (*** full scan ***)
  - materialize.public.pk_orders_orderkey (*** full scan ***)
  - materialize.public.fk_lineitem_orderkey (*** full scan ***, differential join)

Target cluster: quickstart

EOF


query T multiline
-- Query 22
EXPLAIN WITH(humanized expressions, arity, join implementations)
SELECT
    cntrycode,
    count(*) AS numcust,
    sum(c_acctbal) AS totacctbal
FROM
    (
        SELECT
            substring(c_phone, 1, 2) AS cntrycode, c_acctbal
        FROM
            customer
        WHERE
            substring(c_phone, 1, 2)
            IN ('13', '31', '23', '29', '30', '18', '17')
            AND c_acctbal
                > (
                        SELECT
                            avg(c_acctbal)
                        FROM
                            customer
                        WHERE
                            c_acctbal > 0.00
                            AND substring(c_phone, 1, 2)
                                IN (
                                        '13',
                                        '31',
                                        '23',
                                        '29',
                                        '30',
                                        '18',
                                        '17'
                                    )
                    )
            AND NOT
                    EXISTS(
                        SELECT
                            *
                        FROM
                            orders
                        WHERE
                            o_custkey = c_custkey
                    )
    )
        AS custsale
GROUP BY
    cntrycode
ORDER BY
    cntrycode;
----
Explained Query:
  Finish order_by=[#0 asc nulls_last] output=[#0..=#2]
    Return // { arity: 3 }
      Reduce group_by=[substr(char_to_text(#0{c_phone}), 1, 2)] aggregates=[count(*), sum(#1{c_acctbal})] // { arity: 3 }
        Project (#4, #5) // { arity: 2 }
          Filter (#5{c_acctbal} > (#8{sum_c_acctbal} / bigint_to_numeric(case when (#9{count} = 0) then null else #9{count} end))) AND ((#19 = "13") OR (#19 = "17") OR (#19 = "18") OR (#19 = "23") OR (#19 = "29") OR (#19 = "30") OR (#19 = "31")) // { arity: 20 }
            Map (substr(char_to_text(#4{c_phone}), 1, 2)) // { arity: 20 }
              Join on=(#0{c_custkey} = #10{c_custkey} = #18{c_custkey} AND #1{c_name} = #11{c_name} AND #2{c_address} = #12{c_address} AND #3{c_nationkey} = #13{c_nationkey} AND #4{c_phone} = #14{c_phone} AND #5{c_acctbal} = #15{c_acctbal} AND #6{c_mktsegment} = #16{c_mktsegment} AND #7{c_comment} = #17{c_comment}) type=delta // { arity: 19 }
                implementation
                  %0:l2 » %2:l0[#0..=#7]UKKKKKKKKAef » %1[×]UA » %3[#0]K
                  %1 » %0:l2[×]ef » %2:l0[#0..=#7]UKKKKKKKKAef » %3[#0]K
                  %2:l0 » %1[×]UA » %0:l2[#0..=#7]KKKKKKKKef » %3[#0]K
                  %3 » %1[×]UA » %0:l2[#0]KAef » %2:l0[#0..=#7]UKKKKKKKKAef
                ArrangeBy keys=[[], [#0{c_custkey}], [#0{c_custkey}..=#7{c_comment}]] // { arity: 8 }
                  Project (#0{c_custkey}..=#7{c_comment}) // { arity: 8 }
                    Filter ((#8 = "13") OR (#8 = "17") OR (#8 = "18") OR (#8 = "23") OR (#8 = "29") OR (#8 = "30") OR (#8 = "31")) // { arity: 9 }
                      Get l2 // { arity: 9 }
                ArrangeBy keys=[[]] // { arity: 2 }
                  Reduce aggregates=[sum(#0{c_acctbal}), count(*)] // { arity: 2 }
                    Project (#5) // { arity: 1 }
                      Filter (#5{c_acctbal} > 0) AND ((#8 = "13") OR (#8 = "17") OR (#8 = "18") OR (#8 = "23") OR (#8 = "29") OR (#8 = "30") OR (#8 = "31")) // { arity: 9 }
                        Get l2 // { arity: 9 }
                ArrangeBy keys=[[#0{c_custkey}..=#7{c_comment}]] // { arity: 8 }
                  Get l0 // { arity: 8 }
                ArrangeBy keys=[[#0{c_custkey}]] // { arity: 1 }
                  Union // { arity: 1 }
                    Negate // { arity: 1 }
                      Project (#0{c_custkey}) // { arity: 1 }
                        Join on=(#0{c_custkey} = #1{o_custkey}) type=differential // { arity: 2 }
                          implementation
                            %0:l1[#0]UKA » %1[#0]UKA
                          ArrangeBy keys=[[#0{c_custkey}]] // { arity: 1 }
                            Get l1 // { arity: 1 }
                          ArrangeBy keys=[[#0{o_custkey}]] // { arity: 1 }
                            Distinct project=[#0{o_custkey}] // { arity: 1 }
                              Project (#1) // { arity: 1 }
                                ReadIndex on=orders pk_orders_orderkey=[*** full scan ***] // { arity: 9 }
                    Get l1 // { arity: 1 }
    With
      cte l2 =
        Map (substr(char_to_text(#4{c_phone}), 1, 2)) // { arity: 9 }
          ReadIndex on=customer pk_customer_custkey=[*** full scan ***] // { arity: 8 }
      cte l1 =
        Distinct project=[#0{c_custkey}] // { arity: 1 }
          Project (#0{c_custkey}) // { arity: 1 }
            Get l0 // { arity: 8 }
      cte l0 =
        Distinct project=[#0{c_custkey}..=#7{c_comment}] // { arity: 8 }
          ReadIndex on=customer pk_customer_custkey=[*** full scan ***] // { arity: 8 }

Used Indexes:
  - materialize.public.pk_customer_custkey (*** full scan ***)
  - materialize.public.pk_orders_orderkey (*** full scan ***)

Target cluster: quickstart

EOF

################################################################################
# end of optimized plans - below here is a sampling of other plan info
################################################################################

query T multiline
-- Query 20
EXPLAIN RAW PLAN FOR SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name;
----
Finish order_by=[#0 asc nulls_last] output=[#0, #1]
  Project (#1, #2)
    Return
      Filter ((select(Get l3) AND (#3 = #7)) AND (#8 = text_to_char("CANADA")))
        CrossJoin
          Get materialize.public.supplier
          Get materialize.public.nation
    With
      cte l3 =
        Reduce aggregates=[any((#^0 = #0))]
          Project (#1)
            Return
              Filter (select(Get l1) AND (integer_to_numeric(#2) > select(Get l2)))
                Get materialize.public.partsupp
            With
              cte l1 =
                Reduce aggregates=[any((#^0 = #0))]
                  Project (#0)
                    Filter (varchar_to_text(#1) like "forest%")
                      Get materialize.public.part
              cte l2 =
                Project (#1)
                  Map ((0.5 * #0))
                    Reduce aggregates=[sum(#4)]
                      Filter ((((#1 = #^0) AND (#2 = #^1)) AND (#10 >= text_to_date("1995-01-01"))) AND (date_to_timestamp(#10) < (text_to_date("1995-01-01") + 1 year)))
                        Get materialize.public.lineitem

Target cluster: quickstart

EOF
