# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

#
# Test various cases of column knowledge propagation
#

mode cockroach

statement ok
CREATE TABLE t1 (f1 INTEGER PRIMARY KEY, f2 INTEGER);

statement ok
CREATE TABLE t2 (f1 INTEGER PRIMARY KEY, f2 INTEGER);

statement ok
CREATE TABLE t3 (f1 INTEGER PRIMARY KEY, f2 INTEGER);

# No propagation for single tables

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 WHERE t1.f1 = 123 AND t1.f1 = t1.f2
----
Explained Query:
  Filter (#0 = 123) AND (#0 = #1) // { arity: 2 }
    Get materialize.public.t1 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123) AND (#0 = #1))

EOF

# Inner joins

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 , t2 WHERE t1.f1 = 123 AND t1.f1 = t2.f1
----
Explained Query:
  CrossJoin type=differential // { arity: 4 }
    implementation
      %0:t1[×]Uef » %1:t2[×]Uef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

# Outer joins

# TODO (#6748): the second join should be removed as redundant and replaced with
# `Get(l1)`.
query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 LEFT JOIN t2 ON (t1.f1 = t2.f1) WHERE t1.f1 = 123;
----
Explained Query:
  Return // { arity: 4 }
    Union // { arity: 4 }
      Map (null, null) // { arity: 4 }
        Union // { arity: 2 }
          Negate // { arity: 2 }
            Project (#0, #1) // { arity: 2 }
              Get l1 // { arity: 4 }
          Get l0 // { arity: 2 }
      Get l1 // { arity: 4 }
  With
    cte l1 =
      CrossJoin type=differential // { arity: 4 }
        implementation
          %0:l0[×]Uef » %1:t2[×]Uef
        ArrangeBy keys=[[]] // { arity: 2 }
          Get l0 // { arity: 2 }
        ArrangeBy keys=[[]] // { arity: 2 }
          Filter (#0 = 123) // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }
    cte l0 =
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 LEFT JOIN t2 USING (f1) WHERE t1.f1 = 123;
----
Explained Query:
  Return // { arity: 3 }
    Union // { arity: 3 }
      Map (null) // { arity: 3 }
        Union // { arity: 2 }
          Negate // { arity: 2 }
            Project (#0, #1) // { arity: 2 }
              Get l1 // { arity: 3 }
          Get l0 // { arity: 2 }
      Get l1 // { arity: 3 }
  With
    cte l1 =
      CrossJoin type=differential // { arity: 3 }
        implementation
          %0:l0[×]Uef » %1:t2[×]Uef
        ArrangeBy keys=[[]] // { arity: 2 }
          Get l0 // { arity: 2 }
        ArrangeBy keys=[[]] // { arity: 1 }
          Project (#1) // { arity: 1 }
            Filter (#0 = 123) // { arity: 2 }
              Get materialize.public.t2 // { arity: 2 }
    cte l0 =
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 LEFT JOIN t2 ON (TRUE) WHERE t1.f1 = t2.f1 AND t1.f1 = 123;
----
Explained Query:
  CrossJoin type=differential // { arity: 4 }
    implementation
      %0:t1[×]Uef » %1:t2[×]Uef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

# Transitive application

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1, t2, t3 WHERE t1.f1 = 123 AND t1.f1 = t2.f1 AND t2.f1 = t3.f1;
----
Explained Query:
  CrossJoin type=delta // { arity: 6 }
    implementation
      %0:t1 » %1:t2[×]UAef » %2:t3[×]UAef
      %1:t2 » %0:t1[×]UAef » %2:t3[×]UAef
      %2:t3 » %0:t1[×]UAef » %1:t2[×]UAef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t3 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))
Source materialize.public.t3
  filter=((#0 = 123))

EOF

# HAVING clause

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT t1.f1 FROM t1, t2 WHERE t1.f1 = t2.f1 GROUP BY t1.f1 HAVING t1.f1 = 123;
----
Explained Query:
  Map (123) // { arity: 1 }
    CrossJoin type=differential // { arity: 0 }
      implementation
        %0:t1[×]Uef » %1:t2[×]Uef
      ArrangeBy keys=[[]] // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 123) // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
      ArrangeBy keys=[[]] // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 123) // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

#
# Subqueries
#

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT (SELECT t1.f1 FROM t1 WHERE t1.f1 = t2.f1) FROM t2 WHERE t2.f1 = 123;
----
Explained Query:
  Return // { arity: 1 }
    CrossJoin type=differential // { arity: 1 }
      implementation
        %0:l1[×]Uef » %1[×]Uef
      Get l1 // { arity: 0 }
      ArrangeBy keys=[[]] // { arity: 1 }
        Union // { arity: 1 }
          Get l2 // { arity: 1 }
          Map (null) // { arity: 1 }
            Union // { arity: 0 }
              Negate // { arity: 0 }
                Project () // { arity: 0 }
                  Get l2 // { arity: 1 }
              Get l0 // { arity: 0 }
  With
    cte l2 =
      CrossJoin type=differential // { arity: 1 }
        implementation
          %0:l1[×]Uef » %1:t1[×]Uef
        Get l1 // { arity: 0 }
        ArrangeBy keys=[[]] // { arity: 1 }
          Project (#0) // { arity: 1 }
            Filter (#0 = 123) // { arity: 2 }
              Get materialize.public.t1 // { arity: 2 }
    cte l1 =
      ArrangeBy keys=[[]] // { arity: 0 }
        Get l0 // { arity: 0 }
    cte l0 =
      Project () // { arity: 0 }
        Filter (#0 = 123) // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

# This case is currently not optimized
query T multiline
EXPLAIN WITH(arity, join_impls) SELECT (SELECT t1.f1 FROM t1) = t2.f1 FROM t2 WHERE t2.f1 = 123;
----
Explained Query:
  Return // { arity: 1 }
    Project (#1) // { arity: 1 }
      Map ((#0 = 123)) // { arity: 2 }
        CrossJoin type=differential // { arity: 1 }
          implementation
            %0:t2[×]Uef » %1[×]ef
          ArrangeBy keys=[[]] // { arity: 0 }
            Project () // { arity: 0 }
              Filter (#0 = 123) // { arity: 2 }
                Get materialize.public.t2 // { arity: 2 }
          ArrangeBy keys=[[]] // { arity: 1 }
            Union // { arity: 1 }
              Get l0 // { arity: 1 }
              Map (null) // { arity: 1 }
                Union // { arity: 0 }
                  Negate // { arity: 0 }
                    Distinct // { arity: 0 }
                      Project () // { arity: 0 }
                        Get l0 // { arity: 1 }
                  Constant // { arity: 0 }
                    - ()
  With
    cte l0 =
      Union // { arity: 1 }
        Project (#0) // { arity: 1 }
          Get materialize.public.t1 // { arity: 2 }
        Map (error("more than one record produced in subquery")) // { arity: 1 }
          Project () // { arity: 0 }
            Filter (#0 > 1) // { arity: 1 }
              Reduce aggregates=[count(*)] // { arity: 1 }
                Project () // { arity: 0 }
                  Get materialize.public.t1 // { arity: 2 }

Source materialize.public.t2
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 WHERE t1.f1 = 123 AND EXISTS (SELECT * FROM t2 WHERE t2.f1 = t1.f1);
----
Explained Query:
  CrossJoin type=differential // { arity: 2 }
    implementation
      %0:t1[×]Uef » %1:t2[×]Uef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 0 }
      Project () // { arity: 0 }
        Filter (#0 = 123) // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 WHERE t1.f1 = 123 AND EXISTS (SELECT * FROM t2 WHERE t2.f1 = t1.f1) AND EXISTS (SELECT * FROM t3 WHERE t3.f1 = t1.f1);
----
Explained Query:
  CrossJoin type=delta // { arity: 2 }
    implementation
      %0:t1 » %1:t2[×]UAef » %2:t3[×]UAef
      %1:t2 » %0:t1[×]UAef » %2:t3[×]UAef
      %2:t3 » %0:t1[×]UAef » %1:t2[×]UAef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 0 }
      Project () // { arity: 0 }
        Filter (#0 = 123) // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 0 }
      Project () // { arity: 0 }
        Filter (#0 = 123) // { arity: 2 }
          Get materialize.public.t3 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))
Source materialize.public.t3
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1, (SELECT t2.f1 FROM t2) AS dt1 WHERE dt1.f1 = t1.f1 AND t1.f1 = 123;
----
Explained Query:
  CrossJoin type=differential // { arity: 3 }
    implementation
      %0:t1[×]Uef » %1:t2[×]Uef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 1 }
      Project (#0) // { arity: 1 }
        Filter (#0 = 123) // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((#0 = 123))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 WHERE 123 = (SELECT t2.f1 FROM t2);
----
Explained Query:
  CrossJoin type=differential // { arity: 2 }
    implementation
      %0:t1[×] » %1[×]
    ArrangeBy keys=[[]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 0 }
      Union // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 123) // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }
        Project () // { arity: 0 }
          Filter error("more than one record produced in subquery") AND (#0 > 1) // { arity: 1 }
            Reduce aggregates=[count(*)] // { arity: 1 }
              Project () // { arity: 0 }
                Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 WHERE t1.f1 = 123 AND t1.f1 = (SELECT t2.f1 FROM t2);
----
Explained Query:
  CrossJoin type=differential // { arity: 2 }
    implementation
      %0:t1[×]Uef » %1[×]ef
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 0 }
      Union // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 123) // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }
        Project () // { arity: 0 }
          Filter error("more than one record produced in subquery") AND (#0 > 1) // { arity: 1 }
            Reduce aggregates=[count(*)] // { arity: 1 }
              Project () // { arity: 0 }
                Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))

EOF

#
# Multipart keys
#


statement ok
CREATE TABLE t4 (f1 INTEGER, f2 INTEGER, PRIMARY KEY (f1, f2));

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t4 AS a1, t4 AS a2 WHERE a1.f1 = 123 AND a1.f2 = 234 AND a1.f1 = a2.f1 AND a1.f2 = a2.f2;
----
Explained Query:
  Project (#0, #1, #0, #1) // { arity: 4 }
    Filter (#0 = 123) AND (#1 = 234) // { arity: 2 }
      Get materialize.public.t4 // { arity: 2 }

Source materialize.public.t4
  filter=((#0 = 123) AND (#1 = 234))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t4 AS a1 LEFT JOIN t4 AS a2 USING (f1, f2) WHERE a1.f1 = 123 AND a1.f2 = 234;
----
Explained Query:
  Return // { arity: 2 }
    Union // { arity: 2 }
      Project (#1, #0) // { arity: 2 }
        Map (234, 123) // { arity: 2 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l0 // { arity: 2 }
      Get l0 // { arity: 2 }
      Get l0 // { arity: 2 }
  With
    cte l0 =
      Filter (#0 = 123) AND (#1 = 234) // { arity: 2 }
        Get materialize.public.t4 // { arity: 2 }

Source materialize.public.t4
  filter=((#0 = 123) AND (#1 = 234))

EOF

#
# Propagation in opposite direction
#

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t4 AS a1 LEFT JOIN t4 AS a2 USING (f1, f2) WHERE a1.f1 = 123 AND a2.f2 = 234;
----
Explained Query:
  Filter (#0 = 123) AND (#1 = 234) // { arity: 2 }
    Get materialize.public.t4 // { arity: 2 }

Source materialize.public.t4
  filter=((#0 = 123) AND (#1 = 234))

EOF

#
# Detect impossible conditions
#

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 LEFT JOIN t2 USING (f1) WHERE t1.f1 = 123 AND t2.f1 = 234;
----
Explained Query (fast path):
  Constant <empty>

EOF

#
# The following impossible condition is removed by `CanonicalizeMfp::remove_impossible_or_args`
#

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 FULL OUTER JOIN t2 USING (f1) WHERE t1.f1 = 123 AND t2.f1 = 234;
----
Explained Query (fast path):
  Constant <empty>

EOF

# Inequality between columns

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1, t2 WHERE t1.f1 = 123 AND t1.f1 > t2.f1;
----
Explained Query:
  CrossJoin type=differential // { arity: 4 }
    implementation
      %0:t1[×]Uef » %1:t2[×]eif
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 123) // { arity: 2 }
        Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (123 > #0) // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 = 123))
Source materialize.public.t2
  filter=((123 > #0))

EOF

statement ok
create table double_table(double_col DOUBLE);

statement ok
create table int_table(int_col integer NOT NULL);

# TODO: get rid of the unnecessary !isnull at the end of this plan

query T multiline
explain with(arity, join_impls) select * from int_table, double_table where int_table.int_col = double_table.double_col;
----
Explained Query:
  Join on=(#1 = integer_to_double(#0)) type=differential // { arity: 2 }
    implementation
      %0:int_table[integer_to_double(#0)]K » %1:double_table[#0]K
    ArrangeBy keys=[[integer_to_double(#0)]] // { arity: 1 }
      Get materialize.public.int_table // { arity: 1 }
    ArrangeBy keys=[[#0]] // { arity: 1 }
      Filter (#0) IS NOT NULL // { arity: 1 }
        Get materialize.public.double_table // { arity: 1 }

Source materialize.public.double_table
  filter=((#0) IS NOT NULL)

EOF

statement ok
CREATE TABLE json_table(data JSONB);

# Include map prefix in the `column_types` passed to `column_knowledge::optimize` (https://github.com/MaterializeInc/materialize/issues/15570)

query T multiline
EXPLAIN WITH(arity, types) SELECT COALESCE(field, '') FROM (SELECT data->>'field' AS field FROM json_table);
----
Explained Query:
  Project (#1) // { arity: 1, types: "(text?)" }
    Map (coalesce((#0 ->> "field"), "")) // { arity: 2, types: "(jsonb?, text?)" }
      Get materialize.public.json_table // { arity: 1, types: "(jsonb?)" }

EOF

# WITH MUTUALLY RECURSIVE support
# -------------------------------

# Single binding, value knowledge
query T multiline
EXPLAIN WITH(arity, types)
WITH MUTUALLY RECURSIVE
  c0(f1 integer, f2 integer) AS (
    SELECT * FROM (
      SELECT * FROM t1
      UNION
      SELECT * FROM c0
    ) WHERE f1 = 3 AND f2 = 5
  )
SELECT f1, f2, f1 + f2 FROM c0;
----
Explained Query:
  Return // { arity: 3, types: "(integer, integer, integer)" }
    Map (8) // { arity: 3, types: "(integer, integer, integer)" }
      Get l0 // { arity: 2, types: "(integer, integer)" }
  With Mutually Recursive
    cte l0 =
      Map (3, 5) // { arity: 2, types: "(integer, integer)" }
        Distinct // { arity: 0, types: "()" }
          Union // { arity: 0, types: "()" }
            Project () // { arity: 0, types: "()" }
              Filter (#0 = 3) AND (#1 = 5) // { arity: 2, types: "(integer, integer)" }
                Get materialize.public.t1 // { arity: 2, types: "(integer, integer?)" }
            Project () // { arity: 0, types: "()" }
              Get l0 // { arity: 2, types: "(integer?, integer?)" }

Source materialize.public.t1
  filter=((#0 = 3) AND (#1 = 5))

EOF

# Single binding, NOT NULL knowledge
query T multiline
EXPLAIN WITH(arity, types)
WITH MUTUALLY RECURSIVE
  c0(f1 integer, f2 integer) AS (
    SELECT * FROM (
      SELECT * FROM t1
      UNION
      SELECT * FROM c0
    ) WHERE f1 IS NOT NULL AND f2 IS NOT NULL
  )
SELECT f1, f2, f1 IS NOT NULL, f2 IS NULL FROM c0;
----
Explained Query:
  Return // { arity: 4, types: "(integer?, integer?, boolean, boolean)" }
    Map (true, false) // { arity: 4, types: "(integer?, integer?, boolean, boolean)" }
      Get l0 // { arity: 2, types: "(integer?, integer?)" }
  With Mutually Recursive
    cte l0 =
      Distinct group_by=[#0, #1] // { arity: 2, types: "(integer?, integer?)" }
        Union // { arity: 2, types: "(integer?, integer?)" }
          Filter (#1) IS NOT NULL // { arity: 2, types: "(integer, integer)" }
            Get materialize.public.t1 // { arity: 2, types: "(integer, integer?)" }
          Get l0 // { arity: 2, types: "(integer?, integer?)" }

Source materialize.public.t1
  filter=((#1) IS NOT NULL)

EOF

# Single binding, NOT NULL knowledge inside a UNION branch
query T multiline
EXPLAIN WITH(arity, types)
WITH MUTUALLY RECURSIVE
  c0(f1 integer, f2 integer) AS (
    SELECT * FROM (
      SELECT * FROM t1
      UNION
      SELECT * FROM c0 WHERE f1 IS NOT NULL AND f2 IS NOT NULL
    )
  )
SELECT f1, f2, f1 IS NOT NULL, f2 IS NULL FROM c0;
----
Explained Query:
  Return // { arity: 4, types: "(integer?, integer?, boolean, boolean)" }
    Project (#0, #1, #3, #2) // { arity: 4, types: "(integer?, integer?, boolean, boolean)" }
      Map ((#1) IS NULL, true) // { arity: 4, types: "(integer?, integer?, boolean, boolean)" }
        Get l0 // { arity: 2, types: "(integer?, integer?)" }
  With Mutually Recursive
    cte l0 =
      Distinct group_by=[#0, #1] // { arity: 2, types: "(integer?, integer?)" }
        Union // { arity: 2, types: "(integer?, integer?)" }
          Get materialize.public.t1 // { arity: 2, types: "(integer, integer?)" }
          Filter (#1) IS NOT NULL // { arity: 2, types: "(integer?, integer)" }
            Get l0 // { arity: 2, types: "(integer?, integer?)" }

EOF

# Multiple bindings, value knowledge
query T multiline
EXPLAIN WITH(arity, types)
WITH MUTUALLY RECURSIVE
  it(count integer) AS (
    SELECT 1 UNION SELECT * FROM it WHERE count = 1
  ),
  c0(count integer, f1 integer, f2 integer) AS (
    SELECT * FROM (
      SELECT count * 2, f1, f2 FROM it, t1
      UNION
      SELECT * FROM c0
    )
  )
SELECT * FROM c0;
----
Explained Query:
  Return // { arity: 3, types: "(integer, integer?, integer?)" }
    Get l1 // { arity: 3, types: "(integer, integer?, integer?)" }
  With Mutually Recursive
    cte l1 =
      Project (#2, #0, #1) // { arity: 3, types: "(integer, integer?, integer?)" }
        Map (2) // { arity: 3, types: "(integer?, integer?, integer)" }
          Distinct group_by=[#0, #1] // { arity: 2, types: "(integer?, integer?)" }
            Union // { arity: 2, types: "(integer?, integer?)" }
              CrossJoin type=differential // { arity: 2, types: "(integer, integer?)" }
                ArrangeBy keys=[[]] // { arity: 0, types: "()" }
                  Project () // { arity: 0, types: "()" }
                    Get l0 // { arity: 1, types: "(integer)" }
                ArrangeBy keys=[[]] // { arity: 2, types: "(integer, integer?)" }
                  Get materialize.public.t1 // { arity: 2, types: "(integer, integer?)" }
              Project (#1, #2) // { arity: 2, types: "(integer?, integer?)" }
                Get l1 // { arity: 3, types: "(integer?, integer?, integer?)" }
    cte l0 =
      Map (1) // { arity: 1, types: "(integer)" }
        Distinct // { arity: 0, types: "()" }
          Union // { arity: 0, types: "()" }
            Project () // { arity: 0, types: "()" }
              Get l0 // { arity: 1, types: "(integer?)" }
            Constant // { arity: 0, types: "()" }
              - ()

EOF


# Multiple bindings, NOT NULL knowledge
#
# This is currently masked by identical work done by the "non_nullable"
# transform. I had to swap the order of "non_nullable" and "column_knowledge" to
# see this transform in action in https://optimizer-trace.dev.materialize.com/.
query T multiline
EXPLAIN WITH(arity, types)
WITH MUTUALLY RECURSIVE
  it(count integer) AS (
    SELECT 1 UNION SELECT * FROM it WHERE count IS NOT NULL
  ),
  c0(count_is_null boolean, f1 integer, f2 integer) AS (
    SELECT * FROM (
      SELECT count IS NULL, f1, f2 FROM it, t1
      UNION
      SELECT * FROM c0
    )
  )
SELECT * FROM c0;
----
Explained Query:
  Return // { arity: 3, types: "(boolean, integer?, integer?)" }
    Get l1 // { arity: 3, types: "(boolean, integer?, integer?)" }
  With Mutually Recursive
    cte l1 =
      Project (#2, #0, #1) // { arity: 3, types: "(boolean, integer?, integer?)" }
        Map (false) // { arity: 3, types: "(integer?, integer?, boolean)" }
          Distinct group_by=[#0, #1] // { arity: 2, types: "(integer?, integer?)" }
            Union // { arity: 2, types: "(integer?, integer?)" }
              CrossJoin type=differential // { arity: 2, types: "(integer, integer?)" }
                ArrangeBy keys=[[]] // { arity: 0, types: "()" }
                  Project () // { arity: 0, types: "()" }
                    Get l0 // { arity: 1, types: "(integer)" }
                ArrangeBy keys=[[]] // { arity: 2, types: "(integer, integer?)" }
                  Get materialize.public.t1 // { arity: 2, types: "(integer, integer?)" }
              Project (#1, #2) // { arity: 2, types: "(integer?, integer?)" }
                Get l1 // { arity: 3, types: "(boolean?, integer?, integer?)" }
    cte l0 =
      Map (1) // { arity: 1, types: "(integer)" }
        Distinct // { arity: 0, types: "()" }
          Union // { arity: 0, types: "()" }
            Project () // { arity: 0, types: "()" }
              Get l0 // { arity: 1, types: "(integer?)" }
            Constant // { arity: 0, types: "()" }
              - ()

EOF
