# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
create table foo (
    a int NOT NULL,
    b varchar,
    c decimal(13, 1)
)

statement ok
INSERT INTO foo (a, b, c) VALUES (5, 'this', -4.4), (3, 'just', 11.3), (-45, 'it', 10.2)

statement ok
create table bar (
    a int NOT NULL,
    d varchar,
    e decimal(13, 1)
)

statement ok
INSERT INTO bar (a, d, e) VALUES (-45, 'our', 3.14), (5, 'still', -0.0), (-3, 'is', -1.0)

query T multiline
explain with(arity, join implementations) select b, c from foo where a = 5
----
Explained Query:
  Project (#1, #2) // { arity: 2 }
    Filter (#0 = 5) // { arity: 3 }
      ReadStorage materialize.public.foo // { arity: 3 }

Source materialize.public.foo
  filter=((#0 = 5))

EOF

query TR
select b, c from foo where a = 5
----
this
-4.4

# Test that a query that joins to a (select literal) gets planned as a filter
# and not a join.
query T multiline
explain with(arity, join implementations) select b, c from foo, (select 5 as a) const where foo.a = const.a
----
Explained Query:
  Project (#1, #2) // { arity: 2 }
    Filter (#0 = 5) // { arity: 3 }
      ReadStorage materialize.public.foo // { arity: 3 }

Source materialize.public.foo
  filter=((#0 = 5))

EOF

query TR
select b, c from foo, (select 5 as a) const where foo.a = const.a
----
this
-4.4

# Test that equality with a literal predicate gets pushed down to both inputs
# even when one of the join constraints is an expression as opposed to a column reference.
query T multiline
explain with(arity, join implementations) select * from foo, bar where foo.a = abs(bar.a) and foo.a = 3
----
Explained Query:
  CrossJoin type=differential // { arity: 6 }
    implementation
      %0:foo[×]ef » %1:bar[×]ef
    ArrangeBy keys=[[]] // { arity: 3 }
      Filter (#0 = 3) // { arity: 3 }
        ReadStorage materialize.public.foo // { arity: 3 }
    ArrangeBy keys=[[]] // { arity: 3 }
      Filter (3 = abs(#0)) // { arity: 3 }
        ReadStorage materialize.public.bar // { arity: 3 }

Source materialize.public.foo
  filter=((#0 = 3))
Source materialize.public.bar
  filter=((3 = abs(#0)))

EOF

query ITRITR
select * from foo, bar where foo.a = abs(bar.a) and foo.a = 3
----
3
just
11.3
-3
is
-1

statement ok
create index foo_idx on foo(a);

query T multiline
explain with(arity, join implementations) select b, c from foo where a = 5
----
Explained Query (fast path):
  Project (#1, #2)
    ReadIndex on=materialize.public.foo foo_idx=[lookup value=(5)]

Used Indexes:
  - materialize.public.foo_idx (lookup)

EOF

query TR
select b, c from foo where a = 5
----
this
-4.4

query T multiline
explain with(arity, join implementations) select b, c from foo where a = 5 and b = 'this'
----
Explained Query (fast path):
  Project (#1, #2)
    Filter ("this" = varchar_to_text(#1))
      ReadIndex on=materialize.public.foo foo_idx=[lookup value=(5)]

Used Indexes:
  - materialize.public.foo_idx (lookup)

EOF

query TR
select b, c from foo where a = 5
----
this
-4.4

statement ok
create index foo_idx2 on foo(b, a);

statement ok
create index foo_idx3 on foo(b);

query T multiline
explain with(arity, join implementations) select b, c from foo where a = 5 and b = 'this'
----
Explained Query (fast path):
  Project (#0, #2)
    ReadIndex on=materialize.public.foo foo_idx2=[lookup value=("this", 5)]

Used Indexes:
  - materialize.public.foo_idx2 (lookup)

EOF

statement ok
create index bar_idx on bar(a)

query T multiline
explain with(arity, join implementations) select foo.a, b, c, d, e from foo, bar where foo.a = bar.a and b = 'this'
----
Explained Query:
  Project (#0..=#2, #5, #6) // { arity: 5 }
    Join on=(#0 = #4) type=differential // { arity: 7 }
      implementation
        %0:foo[#0]KAe » %1:bar[#0]KAe
      ArrangeBy keys=[[#0]] // { arity: 4 }
        ReadIndex on=materialize.public.foo foo_idx3=[lookup value=("this")] // { arity: 4 }
      ArrangeBy keys=[[#0]] // { arity: 3 }
        ReadIndex on=bar bar_idx=[differential join] // { arity: 3 }

Used Indexes:
  - materialize.public.foo_idx3 (lookup)
  - materialize.public.bar_idx (differential join)

EOF

query ITRTR
select foo.a, b, c, d, e from foo, bar where foo.a = bar.a and b = 'this'
----
5
this
-4.4
still
0
