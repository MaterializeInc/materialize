# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
create table foo (
    a int NOT NULL,
    b varchar,
    c decimal(13, 1)
)

statement ok
INSERT INTO foo (a, b, c) VALUES (5, 'this', -4.4), (3, 'just', 11.3), (-45, 'it', 10.2)

statement ok
create table bar (
    a int NOT NULL,
    d varchar,
    e decimal(13, 1)
)

statement ok
INSERT INTO bar (a, d, e) VALUES (-45, 'our', 3.14), (5, 'still', -0.0), (-3, 'is', -1.0)

query T multiline
explain plan for select b, c from foo where a = 5
----
%0 =
| Get materialize.public.foo (u1)
| Filter (#0 = 5)
| Project (#1, #2)

EOF

query TR
select b, c from foo where a = 5
----
this
-4.400

# Test that a query that joins to a (select literal) gets planned as a filter
# and not a join.
query T multiline
explain plan for select b, c from foo, (select 5 as a) const where foo.a = const.a
----
%0 =
| Get materialize.public.foo (u1)
| Filter (#0 = 5)
| Project (#1, #2)

EOF

query TR
select b, c from foo, (select 5 as a) const where foo.a = const.a
----
this
-4.400

# Test that equality with a literal predicate gets pushed down to both inputs
# even when one of the join constraints is an expression as opposed to a column reference.
query T multiline
explain plan for select * from foo, bar where foo.a = abs(bar.a) and foo.a = 3
----
%0 =
| Get materialize.public.foo (u1)
| Filter (#0 = 3)
| ArrangeBy ()

%1 =
| Get materialize.public.bar (u3)
| Filter !(isnull(abs(#0))), (3 = abs(#0))

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| | demand = (#0..#5)

EOF

query ITRITR
select * from foo, bar where foo.a = abs(bar.a) and foo.a = 3
----
3
just
11.300
-3
is
-1.0000

statement ok
create index foo_idx on foo(a);

#TODO (wangandi) (materialize#616): uncomment these tests when FilterEqualLiteral is enabled

#query T multiline
#explain plan for select b, c from foo where a = 5
#----
#Project {
#  outputs: [1, 2],
#  Join {
#    variables: [[(0, 0), (1, 0)]],
#    ArrangeBy { keys: [[#0]], Get { foo (u1) } },
#    Constant [[5]]
#  }
#}

query TR
select b, c from foo where a = 5
----
this
-4.400

#query T multiline
#explain plan for select b, c from foo where a = 5 and b = 'this'
#----
#Project {
#  outputs: [1, 2],
#  Filter {
#    predicates: [#1 = "this"],
#    Join {
#      variables: [[(0, 0), (1, 0)]],
#      ArrangeBy { keys: [[#0]], Get { foo (u1) } },
#      Constant [[5]],
#    }
#  }
#}

query TR
select b, c from foo where a = 5
----
this
-4.400

statement ok
create index foo_idx2 on foo(b, a);

statement ok
create index foo_idx3 on foo(b);

#query T multiline
#explain plan for select b, c from foo where a = 5 and b = 'this'
#----
#Project {
#  outputs: [1, 2],
#  Join {
#    variables: [[(0, 1), (1, 0)], [(0, 0), (1, 1)]],
#    ArrangeBy { keys: [[#1, #0]], Get { foo (u1) } },
#    Constant [["this", 5]],
#  }
#}

#TODO (wangandi) (materialize#616): uncomment these tests when FilterEqualLiteral is enabled
#think about what the desired plan is when
#statement ok
#create index bar_idx on bar(a)
#
#query T multiline
#explain plan for select foo.a, b, c, d, e from foo, bar where foo.a = bar.a and b = 'this'
#----

query ITRTR
select foo.a, b, c, d, e from foo, bar where foo.a = bar.a and b = 'this'
----
5
this
-4.400
still
0.000
