# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# use mode cockroach because it "respects the scale of a Decimal type and the precision of a floating point number"
# even though mode standard would allow easier file comparisons with the other computation mode
mode cockroach

# -------------------------------
# aggregate functions with big numbers
# -------------------------------

statement ok
CREATE TABLE t_using_dataflow_rendering (real1 REAL, double1 DOUBLE PRECISION, numeric1 NUMERIC, tint1 INT2, tint2 INT2);

statement ok
INSERT INTO t_using_dataflow_rendering VALUES
 (1e38::real, 1e38::double, 1e38::numeric, (-32767)::INT2, (-1)::INT2),
 (2, 2, 2, 32767::INT2, 1::INT2);

# DIFF TO CONSTANT FOLDING ([SUM, AVG] with types [REAL, DOUBLE])!
# to be addressed with https://github.com/MaterializeInc/database-issues/issues/4341
query IIIIIIIIIIIIIIIIIIIIIIII
SELECT
 SUM(real1), SUM(double1), SUM(numeric1),
 SUM(real1 + real1), SUM(double1 + double1), SUM(numeric1 + numeric1),
 MIN(real1), MIN(double1), MIN(numeric1),
 MIN(real1 + real1), MIN(double1 + double1), MIN(numeric1 + numeric1),
 MAX(real1), MAX(double1), MAX(numeric1),
 MAX(real1 + real1), MAX(double1 + double1), MAX(numeric1 + numeric1),
 AVG(real1), AVG(double1), AVG(numeric1),
 AVG(real1 + real1), AVG(double1 + double1), AVG(numeric1 + numeric1)
FROM t_using_dataflow_rendering;
----


query T multiline
EXPLAIN OPTIMIZED PLAN WITH (humanized expressions) AS VERBOSE TEXT FOR
SELECT
 SUM(real1), SUM(double1), SUM(numeric1),
 SUM(real1 + real1), SUM(double1 + double1), SUM(numeric1 + numeric1),
 MIN(real1), MIN(double1), MIN(numeric1),
 MIN(real1 + real1), MIN(double1 + double1), MIN(numeric1 + numeric1),
 MAX(real1), MAX(double1), MAX(numeric1),
 MAX(real1 + real1), MAX(double1 + double1), MAX(numeric1 + numeric1),
 AVG(real1), AVG(double1), AVG(numeric1),
 AVG(real1 + real1), AVG(double1 + double1), AVG(numeric1 + numeric1)
FROM t_using_dataflow_rendering;
----
Explained Query:
  With
    cte l0 =
      Reduce aggregates=[sum(#0{real1}), sum(#1{double1}), sum(#2{numeric1}), sum((#0{real1} + #0{real1})), sum((#1{double1} + #1{double1})), sum((#2{numeric1} + #2{numeric1})), min(#0{real1}), min(#1{double1}), min(#2{numeric1}), min((#0{real1} + #0{real1})), min((#1{double1} + #1{double1})), min((#2{numeric1} + #2{numeric1})), max(#0{real1}), max(#1{double1}), max(#2{numeric1}), max((#0{real1} + #0{real1})), max((#1{double1} + #1{double1})), max((#2{numeric1} + #2{numeric1})), count(#0{real1}), count(#1{double1}), count(#2{numeric1}), count((#0{real1} + #0{real1})), count((#1{double1} + #1{double1})), count((#2{numeric1} + #2{numeric1}))]
        Project (#0{real1}..=#2{numeric1})
          ReadStorage materialize.public.t_using_dataflow_rendering
  Return
    Project (#0{sum_real1}..=#17{max}, #24..=#29)
      Map ((#0{sum_real1} / bigint_to_real(case when (#18{count_real1} = 0) then null else #18{count_real1} end)), (#1{sum_double1} / bigint_to_double(case when (#19{count_double1} = 0) then null else #19{count_double1} end)), (#2{sum_numeric1} / bigint_to_numeric(case when (#20{count_numeric1} = 0) then null else #20{count_numeric1} end)), (#3{sum} / bigint_to_real(case when (#21{count} = 0) then null else #21{count} end)), (#4{sum} / bigint_to_double(case when (#22{count} = 0) then null else #22{count} end)), (#5{sum} / bigint_to_numeric(case when (#23{count} = 0) then null else #23{count} end)))
        Union
          Get l0
          Map (null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 0, 0, 0, 0, 0)
            Union
              Negate
                Project ()
                  Get l0
              Constant
                - ()

Source materialize.public.t_using_dataflow_rendering

Target cluster: quickstart

EOF

query error
SELECT
 STDDEV(real1)
FROM t_using_dataflow_rendering;

query T multiline
EXPLAIN OPTIMIZED PLAN WITH (humanized expressions) AS VERBOSE TEXT FOR
SELECT
 STDDEV(real1)
FROM t_using_dataflow_rendering;
----
Explained Query:
  With
    cte l0 =
      Reduce aggregates=[sum((#0{real1} * #0{real1})), sum(#0{real1}), count(#0{real1})]
        Project (#0{real1})
          ReadStorage materialize.public.t_using_dataflow_rendering
  Return
    Project (#3)
      Map (sqrtf64(real_to_double(case when ((#0{sum}) IS NULL OR (#1{sum_real1}) IS NULL OR (case when (#2{count_real1} = 0) then null else #2{count_real1} end) IS NULL OR (case when (0 = (#2{count_real1} - 1)) then null else (#2{count_real1} - 1) end) IS NULL) then null else greatest(((#0{sum} - ((#1{sum_real1} * #1{sum_real1}) / bigint_to_real(case when (#2{count_real1} = 0) then null else #2{count_real1} end))) / bigint_to_real(case when (0 = (#2{count_real1} - 1)) then null else (#2{count_real1} - 1) end)), 0) end)))
        Union
          Get l0
          Map (null, null, 0)
            Union
              Negate
                Project ()
                  Get l0
              Constant
                - ()

Source materialize.public.t_using_dataflow_rendering

Target cluster: quickstart

EOF
