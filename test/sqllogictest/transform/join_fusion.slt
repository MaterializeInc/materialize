# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE t1 (f1 integer, f2 integer)

statement ok
INSERT INTO t1 VALUES (1, 1), (2, 3), (4, 5);

statement ok
CREATE TABLE t2 (f1 integer, f2 integer)

statement ok
INSERT INTO t2 VALUES (2, 3), (5, 5);

statement ok
CREATE TABLE t3 (f1 integer, f2 integer)

statement ok
INSERT INTO t3 VALUES (2, 3), (5, 5);

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 INNER JOIN t2 ON t2.f2 = t1.f2 INNER JOIN t3 ON t1.f1 = t3.f1 WHERE t1.f1 <= t2.f1 AND t3.f1 > 0;
----
Explained Query:
  Project (#0..=#2, #1, #0, #5) // { arity: 6 }
    Filter (#0 <= #2) // { arity: 6 }
      Join on=(#0 = #4 AND #1 = #3) type=differential // { arity: 6 }
        implementation
          %2:t3 » %0:t1[#0]KAiif » %1:t2[#1]KAiif
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0 > 0) AND (#1) IS NOT NULL // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
        ArrangeBy keys=[[#1]] // { arity: 2 }
          Filter (#1) IS NOT NULL // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }
        Filter (#0 > 0) // { arity: 2 }
          Get materialize.public.t3 // { arity: 2 }

Source materialize.public.t1
  filter=((#0 > 0) AND (#1) IS NOT NULL)
Source materialize.public.t2
  filter=((#1) IS NOT NULL)
Source materialize.public.t3
  filter=((#0 > 0))

EOF

query IIIIII
SELECT * FROM t1 INNER JOIN t2 ON t2.f2 = t1.f2 INNER JOIN t3 ON t1.f1 = t3.f1 WHERE t1.f1 <= t2.f1 AND t3.f1 > 0;
----
2  3  2  3  2  3

#
# Additional queries that came out of the randomized testing of #6936
#

#
# Randomized queries against a TPC-like schema
#

statement ok
CREATE TABLE customer (c_custkey integer, c_nationkey integer NOT NULL, c_acctbal decimal(15, 2) NOT NULL);

statement ok
CREATE INDEX pk_customer_custkey ON customer (c_custkey);

statement ok
CREATE INDEX fk_customer_nationkey ON customer (c_nationkey ASC);

statement ok
CREATE TABLE orders (o_orderkey integer, o_custkey integer NOT NULL, o_totalprice decimal(15, 2) NOT NULL, o_orderdate DATE NOT NULL);

statement ok
CREATE INDEX pk_orders_orderkey ON orders (o_orderkey);

statement ok
CREATE INDEX fk_orders_custkey ON orders (o_custkey ASC);

statement ok
CREATE TABLE lineitem (l_orderkey integer NOT NULL, l_partkey integer NOT NULL, l_suppkey integer NOT NULL, l_linenumber integer NOT NULL, l_extendedprice decimal(15, 2) NOT NULL, l_shipdate date NOT NULL, l_commitdate date NOT NULL, l_receiptdate date NOT NULL);

statement ok
CREATE INDEX pk_lineitem_orderkey_linenumber ON lineitem (l_orderkey, l_linenumber);

statement ok
CREATE INDEX fk_lineitem_orderkey ON lineitem (l_orderkey ASC);

statement ok
CREATE INDEX fk_lineitem_partkey ON lineitem (l_partkey ASC);

statement ok
CREATE INDEX fk_lineitem_suppkey ON lineitem (l_suppkey ASC);

statement ok
CREATE INDEX fk_lineitem_partsuppkey ON lineitem (l_partkey ASC, l_suppkey ASC);

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM lineitem
  JOIN orders ON ( l_orderkey = o_orderkey )
  JOIN customer ON ( c_acctbal >= o_totalprice )
  WHERE l_shipDATE <> o_orderdate
  AND o_orderdate = l_shipDATE - INTERVAL ' 9 MONTHS ';
----
Explained Query:
  Project (#0..=#7, #0, #9..=#14) // { arity: 15 }
    Filter (#5 != #11) AND (#14 >= #10) // { arity: 15 }
      Join on=(#0 = #8 AND date_to_timestamp(#11) = (#5 - 9 months)) type=differential // { arity: 15 }
        implementation
          %2:customer » %0:lineitem[×]A » %1:orders[#0, date_to_timestamp(#3)]KKA
        ArrangeBy keys=[[]] // { arity: 8 }
          Get materialize.public.lineitem // { arity: 8 }
        ArrangeBy keys=[[#0, date_to_timestamp(#3)]] // { arity: 4 }
          Filter (#0) IS NOT NULL // { arity: 4 }
            Get materialize.public.orders // { arity: 4 }
        Get materialize.public.customer // { arity: 3 }

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.pk_orders_orderkey
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT  MIN( o_orderkey  )
  FROM lineitem  JOIN orders  ON ( l_extendedprice  = o_totalprice  )
  WHERE l_commitDATE  = '1997-01-25'
  AND o_orderkey  BETWEEN  38  AND  195
  AND o_orderdate  = l_commitDATE  + ' 7 MONTHS '
  AND o_orderkey  = (  SELECT l_orderkey  FROM lineitem  WHERE l_orderkey  =  38  )
----
Explained Query:
  Return // { arity: 1 }
    Union // { arity: 1 }
      Get l1 // { arity: 1 }
      Map (null) // { arity: 1 }
        Union // { arity: 0 }
          Negate // { arity: 0 }
            Project () // { arity: 0 }
              Get l1 // { arity: 1 }
          Constant // { arity: 0 }
            - ()
  With
    cte l1 =
      Reduce aggregates=[min(#0)] // { arity: 1 }
        Project (#1) // { arity: 1 }
          Filter (#1 <= 195) AND (#1 >= 38) AND (1997-08-25 00:00:00 = date_to_timestamp(#4)) // { arity: 6 }
            Join on=(#0 = #3 AND #1 = #5) type=differential // { arity: 6 }
              implementation
                %2 » %1:orders[#0]KAeiiiif » %0:lineitem[#0]KAeiiiif
              ArrangeBy keys=[[#0]] // { arity: 1 }
                Project (#4) // { arity: 1 }
                  Filter (#6 = 1997-01-25) // { arity: 8 }
                    Get materialize.public.lineitem // { arity: 8 }
              ArrangeBy keys=[[#0]] // { arity: 4 }
                Get materialize.public.orders // { arity: 4 }
              Union // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Get l0 // { arity: 9 }
                Map (error("more than one record produced in subquery")) // { arity: 1 }
                  Project () // { arity: 0 }
                    Filter error("more than one record produced in subquery") AND (#0 > 1) // { arity: 1 }
                      Reduce aggregates=[count(true)] // { arity: 1 }
                        Project () // { arity: 0 }
                          Get l0 // { arity: 9 }
    cte l0 =
      Join on=(#0 = #8) type=indexed_filter // { arity: 9 }
        ArrangeBy keys=[[#0]] // { arity: 8 }
          Get materialize.public.lineitem // { arity: 8 }
        Constant // { arity: 1 }
          - (38)

Used Indexes:
  - materialize.public.pk_orders_orderkey
  - materialize.public.fk_lineitem_orderkey

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT l_partkey AS col24843 , l_orderkey AS col24844 , l_partkey AS col24845
  FROM lineitem JOIN orders ON ( l_commitDATE = o_orderdate )
  JOIN customer ON ( o_custkey = c_custkey )
  WHERE l_extendedprice = o_totalprice
  AND c_custkey = 134
  AND l_extendedprice = MOD (o_totalprice , 5 ) ;
----
Explained Query:
  Project (#1, #0, #1) // { arity: 3 }
    Join on=(#2 = #4 AND #3 = #5) type=differential // { arity: 6 }
      implementation
        %2:customer » %1:orders[×]Aef » %0:lineitem[#2, #3]KKAef
      ArrangeBy keys=[[#2, #3]] // { arity: 4 }
        Project (#0, #1, #4, #6) // { arity: 4 }
          Filter (#4 = (#4 % 5)) // { arity: 8 }
            Get materialize.public.lineitem // { arity: 8 }
      ArrangeBy keys=[[]] // { arity: 2 }
        Project (#2, #3) // { arity: 2 }
          Filter (#2 = (#2 % 5)) // { arity: 5 }
            Join on=(#1 = #4) type=indexed_filter // { arity: 5 }
              ArrangeBy keys=[[#1]] // { arity: 4 }
                Get materialize.public.orders // { arity: 4 }
              Constant // { arity: 1 }
                - (134)
      Project () // { arity: 0 }
        Join on=(#0 = #3) type=indexed_filter // { arity: 4 }
          ArrangeBy keys=[[#0]] // { arity: 3 }
            Get materialize.public.customer // { arity: 3 }
          Constant // { arity: 1 }
            - (134)

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_orders_custkey
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT *
  FROM lineitem JOIN orders ON ( l_extendedprice = o_totalprice )
  JOIN customer ON ( o_custkey = c_custkey )
  WHERE o_custkey = 229
  AND l_receiptDATE = o_orderdate + INTERVAL ' 6 DAYS '
  AND l_shipDATE = o_orderdate;
----
Explained Query:
  Project (#0..=#9, #4, #5, #12..=#14) // { arity: 15 }
    Join on=(#4 = #10 AND #5 = #11) type=differential // { arity: 15 }
      implementation
        %1:orders » %0:lineitem[#4, #5]KKAef » %2:customer[×]Aef
      ArrangeBy keys=[[#4, #5]] // { arity: 8 }
        Filter (date_to_timestamp(#7) = (#5 + 6 days)) // { arity: 8 }
          Get materialize.public.lineitem // { arity: 8 }
      Project (#0..=#3) // { arity: 4 }
        Join on=(#1 = #4) type=indexed_filter // { arity: 5 }
          ArrangeBy keys=[[#1]] // { arity: 4 }
            Get materialize.public.orders // { arity: 4 }
          Constant // { arity: 1 }
            - (229)
      ArrangeBy keys=[[]] // { arity: 3 }
        Project (#0..=#2) // { arity: 3 }
          Join on=(#0 = #3) type=indexed_filter // { arity: 4 }
            ArrangeBy keys=[[#0]] // { arity: 3 }
              Get materialize.public.customer // { arity: 3 }
            Constant // { arity: 1 }
              - (229)

Used Indexes:
  - materialize.public.pk_customer_custkey
  - materialize.public.fk_orders_custkey
  - materialize.public.pk_lineitem_orderkey_linenumber

EOF

#
# Randomized queries against the "simple" schema
#

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 AS a1, t1 AS a2
WHERE a2.f1 + a1.f2 = (SELECT 1)
AND a2.f1 IS NULL;
----
Explained Query (fast path):
  Constant <empty>

EOF
