# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
DROP TABLE IF EXISTS foo;

statement ok
DROP TABLE IF EXISTS bar;

statement ok
CREATE TABLE foo(a int, b int)

statement ok
INSERT INTO foo VALUES (1, 2), (-1, 4), (null, 3)

statement ok
CREATE TABLE bar(a int, b int)

statement ok
INSERT INTO bar VALUES (1, 3), (-1, null), (null, 5)

# no indexes other than the default foo(a,b) and bar(a,b)
query T multiline
EXPLAIN WITH(arity, join_impls) select * from foo inner join bar on foo.a = bar.a where foo.a = 1
----
Explained Query:
  CrossJoin type=differential // { arity: 4 }
    implementation
      %1 » %0[]
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 1) // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
    Filter (#0 = 1) // { arity: 2 }
      Get materialize.public.bar // { arity: 2 }

Source materialize.public.foo
  filter=((#0 = 1))
Source materialize.public.bar
  filter=((#0 = 1))

EOF

query IIII
select * from foo inner join bar on foo.a = bar.a where foo.a = 1
----
1
2
1
3

# no indexes other than the default foo(a,b) and bar(a,b)
query T multiline
EXPLAIN WITH(arity, join_impls) select * from foo inner join bar on foo.a = abs(bar.a) where mod(foo.a, 2) = 1
----
Explained Query:
  Join on=(#0 = abs(#2)) type=differential // { arity: 4 }
    implementation
      %1 » %0[#0]
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Filter (1 = (#0 % 2)) // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
    Filter (1 = (abs(#0) % 2)) // { arity: 2 }
      Get materialize.public.bar // { arity: 2 }

Source materialize.public.foo
  filter=((1 = (#0 % 2)))
Source materialize.public.bar
  filter=((1 = (abs(#0) % 2)))

EOF

query IIII
select * from foo inner join bar on foo.a = abs(bar.a) where mod(foo.a, 2) = 1
----
1
2
-1
NULL
1
2
1
3

# Test that column knowledge can propagate across inputs of a join.
# no indexes other than the default foo(a,b) and bar(a,b)
query T multiline
EXPLAIN WITH(arity, join_impls) select * from (select * from foo where a = 1) filtered_foo, bar where filtered_foo.a = bar.a
----
Explained Query:
  CrossJoin type=differential // { arity: 4 }
    implementation
      %1 » %0[]
    ArrangeBy keys=[[]] // { arity: 2 }
      Filter (#0 = 1) // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
    Filter (#0 = 1) // { arity: 2 }
      Get materialize.public.bar // { arity: 2 }

Source materialize.public.foo
  filter=((#0 = 1))
Source materialize.public.bar
  filter=((#0 = 1))

EOF

query IIII
select * from (select * from foo where a = 1) filtered_foo, bar where filtered_foo.a = bar.a
----
1
2
1
3

statement ok
CREATE INDEX foo_idx on foo(a);

statement ok
CREATE INDEX bar_idx on bar(a);

statement ok
CREATE TABLE baz(a int primary key, b int)

statement ok
INSERT INTO baz VALUES (3, 0), (5, 2)

# indexes exist on foo(a), bar(a), and baz(a). baz(a) is a unique key
query T multiline
EXPLAIN WITH(arity, join_impls)
select foo.a, baz.b
from foo, bar, baz
where foo.a = bar.a
  and baz.a = bar.b
----
Explained Query:
  Project (#0, #5) // { arity: 2 }
    Join on=(#0 = #2 AND #3 = #4) type=differential // { arity: 6 }
      implementation
        %1 » %2[#0] » %0[#0]
      ArrangeBy keys=[[#0]] // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
      Filter (#0) IS NOT NULL AND (#1) IS NOT NULL // { arity: 2 }
        Get materialize.public.bar // { arity: 2 }
      ArrangeBy keys=[[#0]] // { arity: 2 }
        Get materialize.public.baz // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.bar_idx

EOF

query II
select foo.a, baz.b
from foo, bar, baz
where foo.a = bar.a
  and baz.a = bar.b
----
1
0

statement ok
DROP TABLE baz

statement ok
CREATE TABLE baz(a int, b int)

statement ok
INSERT INTO baz VALUES (3, 0), (5, 2), (null, 6)

statement ok
CREATE INDEX baz_idx on baz(a);

# indexes exist on foo(a), bar(a), and baz(a)
query T multiline
EXPLAIN WITH(arity, join_impls)
select foo.a, baz.b
from foo, bar, baz
where foo.a = bar.a
  and baz.a = bar.b
----
Explained Query:
  Project (#0, #5) // { arity: 2 }
    Filter (#0) IS NOT NULL AND (#3) IS NOT NULL // { arity: 6 }
      Join on=(#0 = #2 AND #3 = #4) type=differential // { arity: 6 }
        implementation
          %0 » %1[#0] » %2[#0]
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Get materialize.public.foo // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Get materialize.public.bar // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Get materialize.public.baz // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.bar_idx
  - materialize.public.baz_idx

EOF

query II
select foo.a, baz.b
from foo, bar, baz
where foo.a = bar.a
  and baz.a = bar.b
----
1
0

statement ok
CREATE INDEX foo_idx2 on foo(nullif(a, 0));

statement ok
CREATE INDEX bar_idx2 on bar(-a);

# Test that when join planning uses indexes on expressions.
# Protects against regression of #4170.
query T multiline
EXPLAIN WITH(arity, join_impls)
select foo.b, bar.b
from foo, bar
where nullif(foo.a, 0) = -bar.a
----
Explained Query:
  Project (#1, #3) // { arity: 2 }
    Filter (#2) IS NOT NULL AND (case when (#0 = 0) then null else #0 end) IS NOT NULL // { arity: 4 }
      Join on=(-(#2) = if (#0 = 0) then {null} else {#0}) type=delta // { arity: 4 }
        implementation
          %0 » %1[-(#0)]
          %1 » %0[case when (#0 = 0) then null else #0 end]
        ArrangeBy keys=[[case when (#0 = 0) then null else #0 end]] // { arity: 2 }
          Get materialize.public.foo // { arity: 2 }
        ArrangeBy keys=[[-(#0)]] // { arity: 2 }
          Get materialize.public.bar // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx2
  - materialize.public.bar_idx2

EOF

query II
select foo.b, bar.b
from foo, bar
where nullif(foo.a, 0) = -bar.a
----
2
NULL
4
3

statement ok
DROP INDEX bar_idx;

statement ok
CREATE INDEX bar_idx3 on bar(a + 4);

# In this test, there exists an index on bar(a + 4)
# but not bar(a). Check that bar(a+4) is not inappropriately
# substituted for bar(a) in the first equivalence.
query T multiline
EXPLAIN WITH(arity, join_impls)
select foo.b, bar.b, baz.b
FROM bar, foo, baz
where foo.a = bar.a
  and bar.a + 4 = baz.a
----
Explained Query:
  Project (#3, #1, #5) // { arity: 3 }
    Filter (#0) IS NOT NULL AND (#4) IS NOT NULL // { arity: 6 }
      Join on=(#0 = #2 AND #4 = (#0 + 4)) type=differential // { arity: 6 }
        implementation
          %2 » %0[(#0 + 4)] » %1[#0]
        ArrangeBy keys=[[(#0 + 4)]] // { arity: 2 }
          Get materialize.public.bar // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Get materialize.public.foo // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Get materialize.public.baz // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.baz_idx
  - materialize.public.bar_idx3

EOF

query III
select foo.b, bar.b, baz.b
FROM bar, foo, baz
where foo.a = bar.a
  and bar.a + 4 = baz.a
----
4
NULL
0
2
3
2

# tests that equalities involving multi-input equalities become join conditions.

query T multiline
explain with(arity, join_impls) select foo.b, bar.b from foo, bar, (select 1 as a) const where foo.a / bar.a = const.a
----
Explained Query:
  Project (#1, #3) // { arity: 2 }
    Join on=(1 = (#0 / #2)) type=differential // { arity: 4 }
      implementation
        materialize.public.bar » %0[]
      ArrangeBy keys=[[]] // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
      Get materialize.public.bar // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.bar_idx2

EOF

query II
select foo.b, bar.b from foo, bar, (select 1 as a) const where foo.a / bar.a = const.a
----
4
NULL
2
3

query T multiline
explain with(arity, join_impls)
select foo.b, bar.b
from foo, bar, (select -1 as a) const
where foo.a / bar.a = const.a
and bar.b - foo.b = foo.a / bar.a
----
Explained Query:
  Project (#1, #3) // { arity: 2 }
    Join on=(eq(-1, (#3 - #1), (#0 / #2))) type=differential // { arity: 4 }
      implementation
        materialize.public.bar » %0[]
      ArrangeBy keys=[[]] // { arity: 2 }
        Get materialize.public.foo // { arity: 2 }
      Get materialize.public.bar // { arity: 2 }

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.bar_idx2

EOF

query II
select foo.b, bar.b
from foo, bar, (select -1 as a) const
where foo.a / bar.a = const.a
and bar.b - foo.b = foo.a / bar.a
----
4
3

statement ok
DROP INDEX baz_idx

# materialize#8002: it would be nice if this join used the indexes on foo(a)
# and bar(a+4)

query T multiline
EXPLAIN WITH(arity, join_impls)
select foo.b, bar.b, baz.b
FROM foo, bar, baz
where foo.a = bar.a
  and foo.a + 4 = baz.a
----
Explained Query:
  Project (#1, #3, #5) // { arity: 3 }
    Join on=(#0 = #2 AND #4 = (#0 + 4)) type=differential // { arity: 6 }
      implementation
        %2 » %0[(#0 + 4)] » %1[#0]
      ArrangeBy keys=[[(#0 + 4)]] // { arity: 2 }
        Filter (#0) IS NOT NULL // { arity: 2 }
          Get materialize.public.foo // { arity: 2 }
      ArrangeBy keys=[[#0]] // { arity: 2 }
        Filter (#0) IS NOT NULL // { arity: 2 }
          Get materialize.public.bar // { arity: 2 }
      Filter (#0) IS NOT NULL // { arity: 2 }
        Get materialize.public.baz // { arity: 2 }

Source materialize.public.baz
  filter=((#0) IS NOT NULL)

Used Indexes:
  - materialize.public.foo_idx
  - materialize.public.bar_idx2

EOF

query III
select foo.b, bar.b, baz.b
FROM bar, foo, baz
where foo.a = bar.a
  and bar.a + 4 = baz.a
----
4
NULL
0
2
3
2

statement ok
CREATE TABLE t1 (f1 DOUBLE PRECISION, f2 DOUBLE PRECISION NOT NULL);

statement ok
CREATE INDEX t1i1 ON t1(f1);

statement ok
CREATE INDEX t1i2 ON t1(f2, f1);

# one NULL row in t1

statement ok
INSERT INTO t1 VALUES (NULL, 0);

# values 1 and 2 have 2 rows each in t1

statement ok
INSERT INTO t1 VALUES (1, 1), (1, 1), (2, 2), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8);

# value 9 not present in either table

statement ok
CREATE TABLE t2 (f1 DOUBLE PRECISION, f2 DOUBLE PRECISION NOT NULL);

statement ok
CREATE INDEX t2i1 ON t2(f1);

statement ok
CREATE INDEX i2i2 ON t2(f2, f1);

# two NULL rows in t2

statement ok
INSERT INTO t2 VALUES (NULL, 0), (NULL, 0), (1, 1);

# value 2 has 2 rows in t2
statement ok
INSERT INTO t2 VALUES (2, 2), (2, 2);

# value 3 has no rows in t2
statement ok
INSERT INTO t2 VALUES (4, 4), (5, 5), (6, 6), (7, 7), (8, 8);

query RRR
SELECT *
  FROM (
        SELECT AVG(f1) + 10000 AS agg1
          FROM t1
       ) a1,
       t1 a2
 WHERE a2.f2 > a1.agg1;
----

query RR rowsort
SELECT a2.f2, agg1
  FROM (
        SELECT AVG(f1)  AS agg1 FROM t1
       ) a1 ,
       t1 a2
 WHERE a2.f2 < a1.agg1;
----
0.000
3.900
1.000
3.900
1.000
3.900
2.000
3.900
2.000
3.900
3.000
3.900

query
SELECT  FROM (  SELECT  AVG ( f2  ) f2  FROM t2  )  JOIN (  SELECT a2 .f1  FROM t1  JOIN t1 a2  ON  TRUE  )  ON  TRUE  WHERE  TRUE  AND f1  = f2   ;
----

query B
SELECT a1 .f1  FROM (  SELECT  TRUE f1  , MAX ( f1  ) f2  FROM t2  ) a1  RIGHT  JOIN (  SELECT f1  FROM t2  )  ON f2  IN (  1  , f2  )   ;
----
true
true
true
true
true
true
true
true
true
true

query R
SELECT f1  FROM (  SELECT  2 f1  , MIN ( f2  ) f2  FROM t1  ) a1  RIGHT  JOIN (  SELECT f2  FROM t2  )  ON f1  = a1 .f2   ;
----
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
