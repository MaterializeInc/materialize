# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
create table t (
  a int,
  b int
)

query T multiline
explain
(select null::int, 1, 2)
union all
(select a, b, 2 from t)
union all
(select a, b, 2 from t)
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| Constant (null, 1)

%3 =
| Union %0 %1 %2
| Map 2

EOF

query T multiline
explain
(select null::int, 1, 2, 3)
union all
(select a, b, 2, 3 from t)
union all
(select a, b, 2, 3 from t)
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)

%1 =
| Get materialize.public.t (u1)

%2 =
| Constant (null, 1)

%3 =
| Union %0 %1 %2
| Map 2, 3

EOF

query T multiline
explain
(select null::int, 1, 2)
union all
(select a, b, 2 from t)
union all
(select a, b, 3 from t)
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Map 2

%1 =
| Get materialize.public.t (u1)
| Map 3

%2 =
| Constant (null, 1, 2)

%3 =
| Union %0 %1 %2

EOF

# Group key literal lifting
query T multiline
explain
select a, b from t where a = 1 group by a, b
----
Source materialize.public.t (u1):
| Filter (#0 = 1)
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Filter (#0 = 1)
| Project (#1)
| Distinct group=(#0)
| Map 1
| Project (#1, #0)

EOF

query T multiline
explain
select a, b from t where b = 1 group by a, b
----
Source materialize.public.t (u1):
| Filter (#1 = 1)
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Filter (#1 = 1)
| Project (#0)
| Distinct group=(#0)
| Map 1

EOF


# Permute literals in Map operator so they can be lifted
query T multiline
explain
select * from (select 1, a+1 from t), t;
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Map (#0 + 1)
| Project (#2)
| ArrangeBy ()

%1 =
| Get materialize.public.t (u1)

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| Map 1
| Project (#3, #0..=#2)

EOF

query T multiline
explain
select * from (select b+1, 2, 1, a+1 from t), t;
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Map (#1 + 1), (#0 + 1)
| Project (#2, #3)
| ArrangeBy ()

%1 =
| Get materialize.public.t (u1)

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| Map 2, 1
| Project (#0, #4, #5, #1..=#3)

EOF

query T multiline
explain
select * from (select 3, b+1, 2, a+2, 1, a+1 from t), t;
----
Source materialize.public.t (u1):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Map (#1 + 1), (#0 + 2), (#0 + 1)
| Project (#2..=#4)
| ArrangeBy ()

%1 =
| Get materialize.public.t (u1)

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| Map 3, 2, 1
| Project (#5, #0, #6, #1, #7, #2..=#4)

EOF

query T multiline
explain
select a+1 from (select 1 as a, b from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Map 2
| Project (#2)

EOF

query T multiline
explain
select z+1 from (select 2 as y, a, 1 as z, b from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Map 2
| Project (#2)

EOF

# Extract common values in all rows in Constant operator
query T multiline
explain
select c1, c1 + a from (select 1 as c1, x as c2, 3 as c3 from generate_series(1, 3) as x union all select 1, x, 3 from generate_series(5, 8) as x), t;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Constant (() x 7)

%1 =
| Get materialize.public.t (u1)
| Project (#0)

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| Map (1 + #0), 1
| Project (#2, #1)

EOF

query T multiline
explain
select * from (select 1 as f1, 2 as f2), generate_series(f1, f2);
----
%0 =
| Constant (1, 2, 1) (1, 2, 2)

EOF

# ... check keys are updated properly
query T multiline
explain typed plan for
select c.* from (select f1, f2 from (select f2, f1 from (select 1 as f1), generate_series(2, 4) as f2) group by f2, f1) as c, t;
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Constant (2) (3) (4)
| | types = (integer)
| | keys = ((#0))

%1 =
| Get materialize.public.t (u1)
| | types = (integer?, integer?)
| | keys = ()
| Project ()
| | types = ()
| | keys = ()

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| | types = (integer)
| | keys = ()
| Map 1
| | types = (integer, integer)
| | keys = ()
| Project (#1, #0)
| | types = (integer, integer)
| | keys = ()

EOF

query T multiline
explain typed plan for
select c.* from (select f2, f1, f3 from (select f3, f2, f1 from generate_series(2, 4) as f2, generate_series(3, 5) as f3, (select 1 as f1)) group by f2, f3, f1) as c, t;
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Constant (2, 3) (2, 4) (2, 5) (3, 3) (3, 4) (3, 5) (4, 3) (4, 4) (4, 5)
| | types = (integer, integer)
| | keys = ((#0, #1))

%1 =
| Get materialize.public.t (u1)
| | types = (integer?, integer?)
| | keys = ()
| Project ()
| | types = ()
| | keys = ()

%2 =
| Join %0 %1
| | implementation = Differential %1 %0.()
| | types = (integer, integer)
| | keys = ()
| Map 1
| | types = (integer, integer, integer)
| | keys = ()
| Project (#0, #2, #1)
| | types = (integer, integer, integer)
| | keys = ()

EOF

# Permute the literals around the columns added by FlatMap
query T multiline
explain select * from (select 1 as a from t), generate_series(a+1, 4);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| FlatMap generate_series(2, 4, 1)
| Map 1
| Project (#1, #0)

EOF

# Make sure that grouping/distinct is handled correctly in the face of derived tables
# We want the proper interleaving between Map and Distinct to be preserved

# With literals only

query T multiline
explain select 123 from (select 234 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Map 123
| Project (#2)

EOF

query T multiline
explain select 123 from (select distinct 234 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

query T multiline
explain select distinct 123 from (select 234 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

query T multiline
explain select distinct 123 from (select distinct 234 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

# With a single literal

query T multiline
explain select * from (select distinct 123 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

query T multiline
explain select distinct * from (select 123 from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

# With a literal in the outer query and a column in the derived table

query T multiline
explain select 123 from (select a from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Map 123
| Project (#2)

EOF

query T multiline
explain select 123 from (select distinct a from t);
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123
| Project (#1)

EOF

query T multiline
explain select distinct 123 from (select a from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

query T multiline
explain select distinct 123 from (select distinct a from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()
| Map 123

EOF

# With a literal and a column in the derived table

query T multiline
explain select distinct a1.a, a1.literal from (select a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

query T multiline
explain select a1.a, a1.literal from (select distinct a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

query T multiline
explain select a1.a, a1.literal from (select distinct a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

query T multiline
explain select distinct a1.a, a1.literal from (select distinct a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

# With a literal and a column in the outer query

query T multiline
explain select distinct a1.a, 123 from (select a from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

query T multiline
explain select distinct a1.a, 123 from (select distinct a from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 123

EOF

# With expressions
query T multiline
explain select distinct a1.a+2 from (select distinct a+1 as a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(((#0 + 1) + 2))

EOF

query T multiline
explain select distinct a1.a, 123 from (select distinct a+1 as a, 234 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=((#0 + 1))
| Map 123

EOF

query T multiline
explain select distinct a1.a+2, a1.literal from (select distinct a+1 as a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(((#0 + 1) + 2))
| Map 123

EOF


query T multiline
explain select distinct a1.a, a1.literal + 1 from (select distinct a, 123 as literal from t) as a1;
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 =
| Get materialize.public.t (u1)
| Project (#0)
| Distinct group=(#0)
| Map 124

EOF

# Check that literals do not interfere with table elimination

statement ok
create table t_pk (
  a int primary key,
  b int
)

query T multiline
explain select a1.*, 123 from t_pk as a1, t_pk as a2 WHERE a1.a = a2.a;
----
Source materialize.public.t_pk (u2):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t_pk (u2)
| Map 123

EOF

query T multiline
explain select distinct a1.*, 123 from t_pk as a1, t_pk as a2 WHERE a1.a = a2.a;
----
Source materialize.public.t_pk (u2):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t_pk (u2)
| Map 123

EOF

# Reduce
query T multiline
explain
select a, b, max(2), count(*) from t where b = 1 group by a, b;
----
Source materialize.public.t (u1):
| Filter (#1 = 1)
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Filter (#1 = 1)
| Project (#0)
| Reduce group=(#0)
| | agg count(true)
| Map 1, 2
| Project (#0, #2, #3, #1)

EOF

query T multiline
explain
select a, b, count(*), max(2) from t where b = 1 group by a, b;
----
Source materialize.public.t (u1):
| Filter (#1 = 1)
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Filter (#1 = 1)
| Project (#0)
| Reduce group=(#0)
| | agg count(true)
| Map 1, 2
| Project (#0, #2, #1, #3)

EOF

query T multiline
explain
select a, b, min(2), max(3) from t where b = 1 group by a, b;
----
Source materialize.public.t (u1):
| Filter (#1 = 1)
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t (u1)
| Filter (#1 = 1)
| Project (#0)
| Distinct group=(#0)
| Map 1, 2, 3

EOF

# regression tests for #6943
query T multiline
explain select min(1/x) from (select a as y, 0 as x from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 = Let l0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()

%1 =
| Get %0 (l0)
| Map (err: division by zero)

%2 =
| Get %0 (l0)
| Negate

%3 =
| Constant ()

%4 =
| Union %2 %3
| Map null

%5 =
| Union %1 %4

EOF

query T multiline
explain select sum(1/x) from (select a as y, 0 as x from t);
----
Source materialize.public.t (u1):
| Map dummy, dummy
| Project (#2, #3)

Query:
%0 = Let l0 =
| Get materialize.public.t (u1)
| Project ()
| Distinct group=()

%1 =
| Get %0 (l0)
| Map (err: division by zero)

%2 =
| Get %0 (l0)
| Negate

%3 =
| Constant ()

%4 =
| Union %2 %3
| Map null

%5 =
| Union %1 %4

EOF

query T multiline
explain select min(a) from t_pk where a between 38 and 195 and a = (select a from t where a = 1308);
----
Source materialize.public.t (u1):
| Map dummy
| Filter (#0 = 1308)
| Project (#0, #2)

Source materialize.public.t_pk (u2):
| Map dummy
| Filter (#0 <= 195), (#0 >= 38)
| Project (#0, #2)

Query:
%0 = Let l0 =
| Get materialize.public.t (u1)
| Filter (#0 = 1308)

%1 =
| Get materialize.public.t_pk (u2)
| Filter (#0 <= 195), (#0 >= 38)
| Project (#0)
| ArrangeBy (#0)

%2 =
| Get %0 (l0)
| Project (#0)

%3 =
| Get %0 (l0)
| Project ()
| Reduce group=()
| | agg count(true)
| Filter (#0 > 1)
| Project ()
| Map (err: more than one record produced in subquery)

%4 =
| Union %2 %3

%5 = Let l1 =
| Join %1 %4 (= #0 #1)
| | implementation = Differential %4 %1.(#0)
| Project (#0)
| Reduce group=()
| | agg min(#0)

%6 =
| Get %5 (l1)
| Project ()
| Negate

%7 =
| Constant ()

%8 =
| Union %6 %7
| Map null

%9 =
| Union %5 %8

EOF

query T multiline
explain select min(a) from t where a between 38 and 195 and a = (select a from t where a = 1308);
----
Source materialize.public.t (u1):
| Map dummy
| Project (#0, #2)

Query:
%0 = Let l0 =
| Get materialize.public.t (u1)
| Filter (#0 = 1308)

%1 =
| Get materialize.public.t (u1)
| Filter (#0 <= 195), (#0 >= 38)
| Project (#0)
| ArrangeBy (#0)

%2 =
| Get %0 (l0)
| Project (#0)

%3 =
| Get %0 (l0)
| Project ()
| Reduce group=()
| | agg count(true)
| Filter (#0 > 1)
| Project ()
| Map (err: more than one record produced in subquery)

%4 =
| Union %2 %3

%5 = Let l1 =
| Join %1 %4 (= #0 #1)
| | implementation = Differential %4 %1.(#0)
| Project (#0)
| Reduce group=()
| | agg min(#0)

%6 =
| Get %5 (l1)
| Project ()
| Negate

%7 =
| Constant ()

%8 =
| Union %6 %7
| Map null

%9 =
| Union %5 %8

EOF

statement ok
insert into t_pk values (40);

# check no error is returned, but a NULL result
query I
select min(a) from t_pk where a between 38 and 195 and a = (select a from t where a = 1308);
----
NULL

statement ok
insert into t values (1308);

query I
select min(a) from t_pk where a between 38 and 195 and a = (select a from t where a = 1308);
----
NULL

statement ok
insert into t_pk values (1308);

query I
select min(a) from t_pk where a between 38 and 195 and a = (select a from t where a = 1308);
----
NULL

statement ok
insert into t values (1308);

statement error more than one record produced in subquery
select min(a) from t_pk where a between 38 and 195 and a = (select a from t where a = 1308);

# check that literal errors are not lifted beyond Joins, but also that that doesn't lead to
# a stack overflow due to LiteralLifting and JoinImplementation fighting against each other
statement ok
create table t1 (f1 double precision, f2 double precision not null);

query T multiline
explain select * from t1 as a1 join t1 as a2 on (a2.f2 = (select 6 from t1)) where a2.f2 = 9;
----
Source materialize.public.t1 (u3):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t1 (u3)
| ArrangeBy ()

%1 =
| Get materialize.public.t1 (u3)
| Filter (#1 = 9)

%2 =
| Get materialize.public.t1 (u3)
| Project ()
| Reduce group=()
| | agg count(true)
| Filter (err: more than one record produced in subquery), (#0 > 1)
| ArrangeBy ()

%3 =
| Join %0 %1 %2
| | implementation = Differential %1 %2.() %0.()
| Project (#0..=#3)

EOF

# count(null) is always 0
query T multiline
explain select count(null) from t;
----
%0 =
| Constant (0)

EOF
