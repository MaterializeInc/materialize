# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

## Test a plausibly correct recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT * FROM bar;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive
    cte l0 =
      Project (#1)
        Map (1)
          Distinct group_by=[#0] monotonic
            Union
              Project (#1)
                Map (7)
                  Get l0
              Constant
                - (2)

EOF

## Test a nested recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE
            bar (b int8) AS (
                SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM bar)
            )
        SELECT * FROM (SELECT * FROM foo EXCEPT ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive
    cte l1 =
      Return
        Threshold
          Union
            Get l1
            Negate
              Get l0
      With Mutually Recursive
        cte l0 =
          Union
            Get l1
            Get l0

EOF

## Test inlining at an inner nesting level. (#18889)
## `bar` is used only in `baz`, so it should be inlined. The inner WMR should have only one cte.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE
            bar (b int8) AS (
                SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM baz)
            ),
            baz (b int8) AS (
                SELECT b + 3 FROM bar WHERE b > -5
            )
        SELECT * FROM (SELECT * FROM foo EXCEPT ALL SELECT * FROM baz)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive
    cte l1 =
      Return
        Threshold
          Union
            Get l1
            Negate
              Get l0
      With Mutually Recursive
        cte l0 =
          Project (#1)
            Map ((#0 + 3))
              Union
                Filter (#0 > -5)
                  Get l1
                Filter (#0 > -5)
                  Get l0

EOF

statement ok
CREATE TABLE t1(f0 int);

## Test inlining a cte from a `Let` into a `LetRec`.
query T multiline
EXPLAIN WITH(raw)
WITH
  cte0 AS (
    SELECT * from t1 where f0 < 27
  )
SELECT * FROM
(
  WITH MUTUALLY RECURSIVE
    cnt (i int) AS (
      (SELECT f0 AS i FROM cte0)
      UNION
      SELECT i+1 FROM cnt)
  SELECT * FROM cnt
);
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive
    cte l0 =
      Distinct group_by=[#0]
        Union
          Filter (#0 < 27)
            ReadStorage materialize.public.t1
          Project (#1)
            Map ((#0 + 1))
              Get l0

Source materialize.public.t1
  filter=((#0 < 27))

EOF

## Test consolidation of not-really nested recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE
            bar (b int8) AS (
                SELECT * FROM foo
            )
        SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive
    cte l0 =
      Union
        Get l0
        Get l0

EOF

## Test consolidation of independent recursive query blocks.
query T multiline
EXPLAIN SELECT * FROM (
    WITH MUTUALLY RECURSIVE
        foo (a int8) AS (SELECT DISTINCT a FROM foo)
    SELECT * FROM foo
)
UNION ALL
SELECT * FROM (
    WITH MUTUALLY RECURSIVE
        bar (a int8) AS (SELECT DISTINCT a FROM bar)
    SELECT * FROM bar
);
----
Explained Query:
  Return
    Union
      Get l0
      Get l1
  With Mutually Recursive
    cte l1 =
      Distinct group_by=[#0] monotonic
        Get l1
    cte l0 =
      Distinct group_by=[#0] monotonic
        Get l0

EOF

statement ok
CREATE TABLE edges (src int, dst int);

## Complex inlining and other things
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    label (node int, comp int) AS (
        SELECT dst, MIN(comp)
        FROM (
            SELECT dst, dst AS comp FROM edges
            UNION ALL
            SELECT edges.dst, label.comp
            FROM edges, label
            WHERE edges.src = label.node
        )
        GROUP BY dst
    )
SELECT round, COUNT(*) FROM (
    WITH MUTUALLY RECURSIVE
        relabel (node int, comp int, round int) AS (
            SELECT DISTINCT ON(node) node, comp, round
            FROM (
                SELECT node, comp, 0 as round FROM label
                UNION ALL
                SELECT edges.dst, relabel.comp, relabel.round + 1
                FROM edges, relabel
                WHERE edges.src = relabel.node
            )
            ORDER BY node, comp
        )
    SELECT round FROM relabel
)
GROUP BY round;
----
Explained Query:
  Return
    Return
      Reduce group_by=[#0] aggregates=[count(*)]
        Project (#2)
          Get l1
    With Mutually Recursive
      cte l1 =
        TopK group_by=[#0] order_by=[#1 asc nulls_last] limit=1
          Union
            Map (0)
              Get l0
            Project (#1, #3, #5)
              Map ((#4 + 1))
                Join on=(#0 = #2) type=differential
                  ArrangeBy keys=[[#0]]
                    Filter (#0) IS NOT NULL
                      ReadStorage materialize.public.edges
                  ArrangeBy keys=[[#0]]
                    Filter (#0) IS NOT NULL
                      Get l1
  With Mutually Recursive
    cte l0 =
      Reduce group_by=[#0] aggregates=[min(#1)]
        Union
          Project (#1, #1)
            ReadStorage materialize.public.edges
          Project (#1, #3)
            Join on=(#0 = #2) type=differential
              ArrangeBy keys=[[#0]]
                Filter (#0) IS NOT NULL
                  ReadStorage materialize.public.edges
              ArrangeBy keys=[[#0]]
                Filter (#0) IS NOT NULL
                  Get l0

EOF

#### Tests for RECURSION LIMIT

## RECURSION LIMIT -- Simple test

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RECURSION LIMIT 10)
  cnt (i int) AS (
    SELECT 1 AS i
    UNION
    SELECT i+1 FROM cnt)
SELECT * FROM cnt;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive [recursion_limit=10]
    cte l0 =
      Distinct group_by=[#0] monotonic
        Union
          Project (#1)
            Map ((#0 + 1))
              Get l0
          Constant
            - (1)

EOF

## RECURSION LIMIT -- RETURN AT RECURSION LIMIT

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RETURN AT RECURSION LIMIT 10)
  cnt (i int) AS (
    SELECT 1 AS i
    UNION
    SELECT i+1 FROM cnt)
SELECT * FROM cnt;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive [recursion_limit=10, return_at_limit]
    cte l0 =
      Distinct group_by=[#0] monotonic
        Union
          Project (#1)
            Map ((#0 + 1))
              Get l0
          Constant
            - (1)

EOF

## RECURSION LIMIT -- ERROR AT RECURSION LIMIT

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (ERROR AT RECURSION LIMIT 10)
  cnt (i int) AS (
    SELECT 1 AS i
    UNION
    SELECT i+1 FROM cnt)
SELECT * FROM cnt;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive [recursion_limit=10]
    cte l0 =
      Distinct group_by=[#0] monotonic
        Union
          Project (#1)
            Map ((#0 + 1))
              Get l0
          Constant
            - (1)

EOF

## RECURSION LIMIT -- consolidation of independent recursive query blocks with different RECURSION LIMIT

query T multiline
EXPLAIN SELECT * FROM (
    WITH MUTUALLY RECURSIVE (RECURSION LIMIT 5)
        foo (a int8) AS (SELECT DISTINCT a FROM foo)
    SELECT * FROM foo
)
UNION ALL
SELECT * FROM (
    WITH MUTUALLY RECURSIVE (RECURSION LIMIT 7)
        bar (a int8) AS (SELECT DISTINCT a - 2 FROM bar)
    SELECT * FROM bar
);
----
Explained Query:
  Return
    Union
      Get l0
      Get l1
  With Mutually Recursive
    cte [recursion_limit=7] l1 =
      Distinct group_by=[(#0 - 2)] monotonic
        Get l1
    cte [recursion_limit=5] l0 =
      Distinct group_by=[#0] monotonic
        Get l0

EOF

## RECURSION LIMIT -- consolidation of independent recursive query blocks with equal RECURSION LIMIT.
## We want to see RECURSION LIMIT printed at the block level rather than on each cte.

query T multiline
EXPLAIN SELECT * FROM (
    WITH MUTUALLY RECURSIVE (RECURSION LIMIT 27)
        foo (a int8) AS (SELECT DISTINCT a FROM foo)
    SELECT * FROM foo
)
UNION ALL
SELECT * FROM (
    WITH MUTUALLY RECURSIVE (RECURSION LIMIT 27)
        bar (a int8) AS (SELECT DISTINCT a - 2 FROM bar)
    SELECT * FROM bar
);
----
Explained Query:
  Return
    Union
      Get l0
      Get l1
  With Mutually Recursive [recursion_limit=27]
    cte l1 =
      Distinct group_by=[(#0 - 2)] monotonic
        Get l1
    cte l0 =
      Distinct group_by=[#0] monotonic
        Get l0

EOF

## ITERATION RECURSION -- consolidation of not-really nested recursive query.
## Here, the ITERATION RECURSION of the inner WMR is irrelevant, because it's not recursive.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RECURSION LIMIT 9)
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE (RECURSION LIMIT 3)
            bar (b int8) AS (
                SELECT * FROM foo
            )
        SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive [recursion_limit=9]
    cte l0 =
      Union
        Get l0
        Get l0

EOF

# ITERATION RECURSION -- a nested recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RECURSION LIMIT 17)
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE (RECURSION LIMIT 11)
            bar (b int8) AS (
                SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM bar)
            )
        SELECT * FROM (SELECT * FROM foo EXCEPT ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive [recursion_limit=17]
    cte l1 =
      Return
        Threshold
          Union
            Get l1
            Negate
              Get l0
      With Mutually Recursive [recursion_limit=11]
        cte l0 =
          Union
            Get l1
            Get l0

EOF

## ITERATION RECURSION -- Complex inlining and other things.

query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE (RECURSION LIMIT 21)
    label (node int, comp int) AS (
        SELECT dst, MIN(comp)
        FROM (
            SELECT dst, dst AS comp FROM edges
            UNION ALL
            SELECT edges.dst, label.comp
            FROM edges, label
            WHERE edges.src = label.node
        )
        GROUP BY dst
    )
SELECT round, COUNT(*) FROM (
    WITH MUTUALLY RECURSIVE (RECURSION LIMIT 23)
        relabel (node int, comp int, round int) AS (
            SELECT DISTINCT ON(node) node, comp, round
            FROM (
                SELECT node, comp, 0 as round FROM label
                UNION ALL
                SELECT edges.dst, relabel.comp, relabel.round + 1
                FROM edges, relabel
                WHERE edges.src = relabel.node
            )
            ORDER BY node, comp
        )
    SELECT round FROM relabel
)
GROUP BY round;
----
Explained Query:
  Return
    Return
      Reduce group_by=[#0] aggregates=[count(*)]
        Project (#2)
          Get l1
    With Mutually Recursive [recursion_limit=23]
      cte l1 =
        TopK group_by=[#0] order_by=[#1 asc nulls_last] limit=1
          Union
            Map (0)
              Get l0
            Project (#1, #3, #5)
              Map ((#4 + 1))
                Join on=(#0 = #2) type=differential
                  ArrangeBy keys=[[#0]]
                    Filter (#0) IS NOT NULL
                      ReadStorage materialize.public.edges
                  ArrangeBy keys=[[#0]]
                    Filter (#0) IS NOT NULL
                      Get l1
  With Mutually Recursive [recursion_limit=21]
    cte l0 =
      Reduce group_by=[#0] aggregates=[min(#1)]
        Union
          Project (#1, #1)
            ReadStorage materialize.public.edges
          Project (#1, #3)
            Join on=(#0 = #2) type=differential
              ArrangeBy keys=[[#0]]
                Filter (#0) IS NOT NULL
                  ReadStorage materialize.public.edges
              ArrangeBy keys=[[#0]]
                Filter (#0) IS NOT NULL
                  Get l0

EOF

## Make sure that we run `NormalizeLets` just before `CollectIndexRequests`.
## Regression test for https://github.com/MaterializeInc/materialize/issues/21175

statement ok
CREATE TABLE t (a int2, b int4, c int8, d uint2, e uint4, f uint8, g text);

statement ok
explain
select
  subq_0."c2" as c0,
  ((select "attlen" from pg_catalog.pg_attribute limit 1 offset 4)
      ) # ((pg_catalog.abs(
        CAST((select "a" from public.t limit 1 offset 1)
           as int2))) # (case when ((cast(null as oid)) < (cast(null as oid)))
          or (((subq_0."c2" is not NULL)
              and ((numrange(0,0)) <= (numrange(0,0))))
            and ((((select "time" from mz_internal.mz_global_frontiers limit 1 offset 1)
                  ) <> ((select pg_catalog.max("time") from mz_internal.mz_compute_import_frontiers_per_worker)
                  ))
              or (false))) then pg_catalog.abs(
          CAST((select "tgtype" from pg_catalog.pg_trigger limit 1 offset 6)
             as int2)) else pg_catalog.abs(
          CAST((select "tgtype" from pg_catalog.pg_trigger limit 1 offset 6)
             as int2)) end
        )) as c1,
  subq_0."c0" as c2
from
  (select
        ref_0."credits_per_hour" as c0,
        ref_0."credits_per_hour" as c1,
        ref_0."replica_id" as c2,
        ref_0."cluster_name" as c3,
        (select "id" from mz_internal.mz_scheduling_elapsed_raw limit 1 offset 57)
           as c4
      from
        mz_internal.mz_cluster_replica_history as ref_0
      where ref_0."replica_id" is NULL
      limit 102) as subq_0
where (~ (select "replication_factor" from mz_catalog.mz_clusters limit 1 offset 5)
      ) <= (~ case when (case when (((((select "details" from mz_internal.mz_sink_statuses limit 1 offset 4)
                    ) >= ((select pg_catalog.jsonb_agg("id") from mz_internal.mz_dataflow_operators)
                    ))
                or ((cast(0 as name)) >= (cast(null as name))))
              or (subq_0."c1" is NULL))
            and (((select pg_catalog.min("tgtype") from pg_catalog.pg_trigger)
                   is not NULL)
              and (true)) then (select "d" from public.t limit 1 offset 4)
             else (select "d" from public.t limit 1 offset 4)
             end
          ) <> (pg_catalog.mod(
          CAST(cast(coalesce((select pg_catalog.max("d") from public.t)
              ,
            (select "d" from public.t limit 1 offset 2)
              ) as uint2) as uint2),
          CAST((select "d" from public.t limit 1 offset 3)
             as uint2))) then (select "replication_factor" from mz_catalog.mz_clusters limit 1 offset 2)
         else (select "replication_factor" from mz_catalog.mz_clusters limit 1 offset 2)
         end
      )
limit 117;
