# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_table_keys TO true
----
COMPLETE 0

simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_mz_notices TO true
----
COMPLETE 0

# Disable rbac checks in order to select from mz_notices.
simple conn=mz_system,user=mz_system
ALTER SYSTEM SET enable_rbac_checks TO false
----
COMPLETE 0

statement ok
CREATE TABLE t6(x int, y int, z int, w text);

statement ok
CREATE INDEX t6_idx_x_y ON t6(x,y);

query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE x=5;
----
Explained Query (fast path):
  Filter (#0{x} = 5)
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `x = 5`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (x).

EOF

statement ok
CREATE INDEX t6_idx_x_y_z ON t6(x,y,z);

# 2 notices
query T multiline
EXPLAIN WITH(humanized expressions, redacted)
SELECT *
FROM t6
WHERE x=5;
----
Explained Query (fast path):
  Filter (#0{x} = █)
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `x = █`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (x).
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `x = █`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (x).

EOF

# If we manage to use an index, then don't notice that the other couldn't be used.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE x=5 AND y=6;
----
Explained Query (fast path):
  Project (#0..=#3)
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[lookup value=(5, 6)]

Used Indexes:
  - materialize.public.t6_idx_x_y (lookup)

EOF

# No notice
query T multiline
EXPLAIN WITH(humanized expressions, redacted)
SELECT *
FROM t6
WHERE x=5 AND y=6 AND z=7;
----
Explained Query (fast path):
  Project (#0..=#3)
    ReadIndex on=materialize.public.t6 t6_idx_x_y_z=[lookup value=(█, █, █)]

Used Indexes:
  - materialize.public.t6_idx_x_y_z (lookup)

EOF

statement ok
CREATE INDEX t6_idx_x ON t6(x);

# If we manage to use an index, then don't notice that the other couldn't be used.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE x=5;
----
Explained Query (fast path):
  Project (#0..=#3)
    ReadIndex on=materialize.public.t6 t6_idx_x=[lookup value=(5)]

Used Indexes:
  - materialize.public.t6_idx_x (lookup)

EOF

# 2 notices. (No notice for the index on x, because it's not a subset).
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE y=6;
----
Explained Query (fast path):
  Filter (#1{y} = 6)
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `y = 6`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `y = 6`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).

EOF

# No notice, because we managed to do a lookup with x. (It's debatable whether we'd want a notice in this case.)
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE x=5 AND z=7;
----
Explained Query (fast path):
  Project (#0..=#3)
    Filter (#2{z} = 7)
      ReadIndex on=materialize.public.t6 t6_idx_x=[lookup value=(5)]

Used Indexes:
  - materialize.public.t6_idx_x (lookup)

EOF

# Notice only the (x,y,z) index.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE z=7;
----
Explained Query (fast path):
  Filter (#2{z} = 7)
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `z = 7`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (z).

EOF

# Test that notices are shown in EXPLAIN MATERIALIZED VIEW.
statement ok
CREATE MATERIALIZED VIEW mv1 AS
SELECT *
FROM t6
WHERE y=5;

query T multiline
EXPLAIN WITH(humanized expressions) MATERIALIZED VIEW mv1;
----
materialize.public.mv1:
  Filter (#1{y} = 5)
    ReadIndex on=t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `y = 5`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `y = 5`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).

EOF

# Verify that the same notices can be found in the catalog.
query TTTTTTTT
SELECT
  n.notice_type, n.message, n.redacted_message, n.hint, n.redacted_hint, n.action, n.redacted_action, n.action_type
FROM
  mz_internal.mz_notices n JOIN
  mz_catalog.mz_materialized_views mv ON(n.object_id = mv.id)
WHERE
  mv.name = 'mv1';
----
Index␠too␠wide␠for␠literal␠constraints  Index␠materialize.public.t6_idx_x_y␠on␠t6(x,␠y)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠5`.  Index␠materialize.public.t6_idx_x_y␠on␠t6(x,␠y)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠█`.  If␠your␠literal␠equalities␠filter␠out␠many␠rows,␠create␠an␠index␠whose␠key␠exactly␠matches␠your␠literal␠equalities:␠(y).  NULL  CREATE␠INDEX␠ON␠t6(y);  NULL  sql_statements
Index␠too␠wide␠for␠literal␠constraints  Index␠materialize.public.t6_idx_x_y_z␠on␠t6(x,␠y,␠z)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠5`.  Index␠materialize.public.t6_idx_x_y_z␠on␠t6(x,␠y,␠z)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠█`.  If␠your␠literal␠equalities␠filter␠out␠many␠rows,␠create␠an␠index␠whose␠key␠exactly␠matches␠your␠literal␠equalities:␠(y).  NULL  CREATE␠INDEX␠ON␠t6(y);  NULL  sql_statements

# Drop one of the indexes associated with the notices.
statement ok
DROP INDEX t6_idx_x_y_z;

# Verify that the second notice is no longer in the catalog.
query TTTTTTTT
SELECT
  n.notice_type, n.message, n.redacted_message, n.hint, n.redacted_hint, n.action, n.redacted_action, n.action_type
FROM
  mz_internal.mz_notices n JOIN
  mz_catalog.mz_materialized_views mv ON(n.object_id = mv.id)
WHERE
  mv.name = 'mv1';
----
Index␠too␠wide␠for␠literal␠constraints  Index␠materialize.public.t6_idx_x_y␠on␠t6(x,␠y)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠5`.  Index␠materialize.public.t6_idx_x_y␠on␠t6(x,␠y)␠is␠too␠wide␠to␠use␠for␠literal␠equalities␠`y␠=␠█`.  If␠your␠literal␠equalities␠filter␠out␠many␠rows,␠create␠an␠index␠whose␠key␠exactly␠matches␠your␠literal␠equalities:␠(y).  NULL  CREATE␠INDEX␠ON␠t6(y);  NULL  sql_statements

# Drop the catalog item associated with the notices.
statement ok
DROP MATERIALIZED VIEW mv1;

# Verify that the notices are no longer in the catalog.
query TTTTTTTT
SELECT
  n.notice_type, n.message, n.redacted_message, n.hint, n.redacted_hint, n.action, n.redacted_action, n.action_type
FROM
  mz_internal.mz_notices n JOIN
  mz_catalog.mz_materialized_views mv ON(n.object_id = mv.id)
WHERE
  mv.name = 'mv1';
----

# Re-create the index dropped above.
statement ok
CREATE INDEX t6_idx_x_y_z ON t6(x,y,z);

# Test IN printing.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE y=4 OR y=8;
----
Explained Query (fast path):
  Filter ((#1{y} = 4) OR (#1{y} = 8))
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `y IN (4, 8)`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `y IN (4, 8)`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y).

EOF

# Test IN printing with multiple fields.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE (y=5 AND z=7) OR (y=2 AND z=3);
----
Explained Query (fast path):
  Filter (((#1{y} = 2) AND (#2{z} = 3)) OR ((#1{y} = 5) AND (#2{z} = 7)))
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y on t6(x, y) is too wide to use for literal equalities `y IN (2, 5)`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y, z).
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `(y, z) IN ((2, 3), (5, 7))`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (y, z).

EOF

# Recommended key has a field that is not present in any of the indexes.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
FROM t6
WHERE z=9 AND w='árvíztűrő tükörfúrógép';
----
Explained Query (fast path):
  Filter (#2{z} = 9) AND (#3{w} = "árvíztűrő tükörfúrógép")
    ReadIndex on=materialize.public.t6 t6_idx_x_y=[*** full scan ***]

Used Indexes:
  - materialize.public.t6_idx_x_y (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t6_idx_x_y_z on t6(x, y, z) is too wide to use for literal equalities `z = 9`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (z, w).

EOF

# Regression test for #24301
# --------------------------

statement ok
DROP TABLE IF EXISTS t1 CASCADE;

statement ok
CREATE TABLE t1 (f1 DOUBLE PRECISION, f2 DOUBLE PRECISION NOT NULL);

statement ok
CREATE INDEX t1i2 ON t1(f2, f1);

# Recommended key has a field that is not present in any of the indexes.
query T multiline
EXPLAIN WITH(humanized expressions)
SELECT *
  FROM (SELECT * FROM (VALUES (1, 2))) as t2(f1, f2)
  JOIN (SELECT a1.f2 AS f1, a1.f1 + a1.f2 AS f2 FROM t1 AS a1) AS a2 USING (f1)
WHERE
  a2.f2 * 2 < a2.f2 + 2 AND
  a2.f2 + a2.f2 = 7;
----
Explained Query (fast path):
  Project (#4, #5, #3)
    Filter (#0{f1} = 1) AND (7 = (#2 + #2)) AND ((#2 * 2) < (#2 + 2))
      Map ((#1{f2} + #0{f1}), (#1{f2} + 1), 1, 2)
        ReadIndex on=materialize.public.t1 t1i2=[*** full scan ***]

Used Indexes:
  - materialize.public.t1i2 (*** full scan ***)

Notices:
  - Notice: Index materialize.public.t1i2 on t1(f2, f1) is too wide to use for literal equalities `f2 = 1`.
    Hint: If your literal equalities filter out many rows, create an index whose key exactly matches your literal equalities: (f2, (#2 + #2)).

EOF
