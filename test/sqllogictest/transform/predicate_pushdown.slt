# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This file contains tests for the PredicatePushdown transform.

statement ok
CREATE TABLE x (a int not null, u int, b bool)

statement ok
CREATE TABLE y (a int not null)

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT b FROM (SELECT b, not(b) as neg FROM x) WHERE NOT(neg)
----
Explained Query:
  Project (#2) // { arity: 1 }
    Filter #2 // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  project=(#3, #4, #2)
  filter=(#2)
  map=(dummy, dummy)

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT b FROM (SELECT b, b = false as neg FROM x) WHERE NOT(neg)
----
Explained Query:
  Project (#2) // { arity: 1 }
    Filter (#2 != false) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  project=(#3, #4, #2)
  filter=((#2 != false))
  map=(dummy, dummy)

EOF

# Inline binary expressions.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT a FROM (SELECT a, a = 3 AS cond, u != 2 as cond2 FROM x) WHERE NOT(cond) AND NOT(cond2)
----
Explained Query:
  Project (#0) // { arity: 1 }
    Filter (#1 = 2) AND (#0 != 3) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  project=(#0, #1, #3)
  filter=((#0 != 3) AND (#1 = 2))
  map=(dummy)

EOF

# Don't inline binary expressions not having a leaf argument.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT a FROM (SELECT a, (a + 1) = (u + 3) AS cond FROM x) WHERE NOT(cond)
----
Explained Query:
  Project (#0) // { arity: 1 }
    Filter ((#0 + 1) != (#1 + 3)) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  project=(#0, #1, #3)
  map=(dummy)

EOF

# We can push down b = 3, since it only refers to input columns. We can't push
# down c = 3 since the computation of c refers to mapped columns.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT * FROM
    (SELECT a, b, b+1 as c FROM
      (SELECT a, a+1 as b FROM y))
WHERE b = 3 AND c = 3
----
Explained Query:
  Filter (#1 = 3) AND (#2 = 3) // { arity: 3 }
    Map ((#0 + 1), (#1 + 1)) // { arity: 3 }
      Get materialize.public.y // { arity: 1 }

Source materialize.public.y
  filter=((3 = (#0 + 1)))

EOF

# Regression test to ensure that a filter gets pushed down to all inputs of a union.

query T multiline
EXPLAIN DECORRELATED PLAN WITH(arity) FOR
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
Return // { arity: 1 }
  Filter (#0 = 3) // { arity: 1 }
    Union // { arity: 1 }
      Project (#1) // { arity: 1 }
        Project (#0, #1) // { arity: 2 }
          Map (#0) // { arity: 2 }
            Get l1 // { arity: 1 }
      Project (#1) // { arity: 1 }
        Project (#0, #1) // { arity: 2 }
          Map (#0) // { arity: 2 }
            Get l2 // { arity: 1 }
With
  cte l2 =
    CrossJoin // { arity: 1 }
      Get l0 // { arity: 0 }
      Get materialize.public.y // { arity: 1 }
  cte l1 =
    Distinct group_by=[#0] // { arity: 1 }
      Project (#0) // { arity: 1 }
        CrossJoin // { arity: 3 }
          Get l0 // { arity: 0 }
          Get materialize.public.x // { arity: 3 }
  cte l0 =
    Constant // { arity: 0 }
      - ()

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
Explained Query:
  Union // { arity: 1 }
    Map (3) // { arity: 1 }
      Distinct // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 3) // { arity: 3 }
            Get materialize.public.x // { arity: 3 }
    Filter (#0 = 3) // { arity: 1 }
      Get materialize.public.y // { arity: 1 }

Source materialize.public.x
  project=(#0, #3, #4)
  filter=((#0 = 3))
  map=(dummy, dummy)
Source materialize.public.y
  filter=((#0 = 3))

EOF

statement ok
CREATE TABLE t1 (f1 integer, f2 integer)

statement ok
CREATE TABLE t2 (f1 integer, f2 integer)

# redundant equivalence is pushed down to all join branches and removed
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND t1.f2 = t2.f2 AND t1.f1 + t2.f2 = t2.f1 + t1.f2;
----
Explained Query:
  Project (#0, #1, #0, #1) // { arity: 4 }
    Join on=(#0 = #2 AND #1 = #3) type=differential // { arity: 4 }
      implementation
        %1 » %0[#0, #1]
      ArrangeBy keys=[[#0, #1]] // { arity: 2 }
        Filter (#0) IS NOT NULL AND (#1) IS NOT NULL // { arity: 2 }
          Get materialize.public.t1 // { arity: 2 }
      Filter (#0) IS NOT NULL AND (#1) IS NOT NULL // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND (#1) IS NOT NULL)
Source materialize.public.t2
  filter=((#0) IS NOT NULL AND (#1) IS NOT NULL)

EOF

# #7684 avoidable cross joins
query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and t2.f1 is null);
----
Explained Query:
  Join on=(#0 = (#2 + 1)) type=differential // { arity: 4 }
    implementation
      materialize.public.t2 » %0[#0]
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
Explained Query:
  Join on=(#0 = (#2 + 1)) type=differential // { arity: 4 }
    implementation
      materialize.public.t2 » %0[#0]
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
Explained Query:
  Join on=(#2 = (#0 + 1)) type=differential // { arity: 4 }
    implementation
      materialize.public.t2 » %0[(#0 + 1)]
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and ((t2.f1 + 1) is null and t1.f1 is null));
----
Explained Query:
  Join on=(#2 = (#0 + 1)) type=differential // { arity: 4 }
    implementation
      materialize.public.t2 » %0[(#0 + 1)]
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

# Join-Dependent Predicate Duplication (JoinInputMapper::consequence_for_input)

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR (t1.f2 = 5 AND t2.f2 = 6));
----
Explained Query:
  Project (#0, #1, #0, #3) // { arity: 4 }
    Filter (((#1 = 3) AND (#3 = 4)) OR ((#1 = 5) AND (#3 = 6))) // { arity: 4 }
      Join on=(#0 = #2) type=differential // { arity: 4 }
        implementation
          %1 » %0[#0]
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)) // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
        Filter (#0) IS NOT NULL AND ((#1 = 4) OR (#1 = 6)) // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)))
Source materialize.public.t2
  filter=((#0) IS NOT NULL AND ((#1 = 4) OR (#1 = 6)))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR t1.f2 = 5);
----
Explained Query:
  Project (#0, #1, #0, #3) // { arity: 4 }
    Filter ((#1 = 5) OR ((#1 = 3) AND (#3 = 4))) // { arity: 4 }
      Join on=(#0 = #2) type=differential // { arity: 4 }
        implementation
          %1 » %0[#0]
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)) // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
        Filter (#0) IS NOT NULL // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)))
Source materialize.public.t2
  filter=((#0) IS NOT NULL)

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2
WHERE t1.f2 = 27 OR (t1.f2 <= 1995 AND t1.f1 = t2.f1);
----
Explained Query:
  Filter ((#1 = 27) OR ((#0 = #2) AND (#1 <= 1995))) // { arity: 4 }
    CrossJoin type=differential // { arity: 4 }
      implementation
        materialize.public.t2 » %0[]
      ArrangeBy keys=[[]] // { arity: 2 }
        Filter ((#1 = 27) OR (#1 <= 1995)) // { arity: 2 }
          Get materialize.public.t1 // { arity: 2 }
      Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=(((#1 = 27) OR (#1 <= 1995)))

EOF

# Delta join -- In this case, `JoinImplementation` lifts the newly created predicates to after the join at the end of
# MIR. However, MIR -> LIR lowering will push these predicates to their correct place. We can check this in the physical
# plan, i.e., that they are in the `initial_closure`.

statement ok
CREATE INDEX t1_f1_ind on t1(f1)

statement ok
CREATE INDEX t2_f1_ind on t2(f1)

query T multiline
EXPLAIN PHYSICAL PLAN AS TEXT FOR
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR (t1.f2 = 5 AND t2.f2 = 6));
----
Explained Query:
  Join::Delta
    plan_path[0]
      final_closure
        project=(#0, #1, #0, #2)
      delta_stage[0]
        closure
          project=(#0, #1, #4)
          filter=((#5 OR #6) AND ((#2 AND #5) OR (#3 AND #6)))
          map=((#4 = 4), (#4 = 6))
        lookup={ relation=1, key=[#0] }
        stream={ key=[#0], thinning=(#1..=#3) }
      initial_closure
        project=(#0..=#3)
        filter=((#0) IS NOT NULL AND (#2 OR #3))
        map=((#1 = 3), (#1 = 5))
      source={ relation=0, key=[#0] }
    plan_path[1]
      final_closure
        project=(#0, #1, #0, #2)
      delta_stage[0]
        closure
          project=(#0, #4, #1)
          filter=((#0) IS NOT NULL AND (#5 OR #6) AND ((#5 AND #2) OR (#6 AND #3)))
          map=((#4 = 3), (#4 = 5))
        lookup={ relation=0, key=[#0] }
        stream={ key=[#0], thinning=(#1..=#3) }
      initial_closure
        project=(#0..=#3)
        filter=((#2 OR #3))
        map=((#1 = 4), (#1 = 6))
      source={ relation=1, key=[#0] }
    ArrangeBy
      input_key=[#0]
      raw=false
      arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
      Get::PassArrangements materialize.public.t1
        raw=false
        arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
    ArrangeBy
      input_key=[#0]
      raw=false
      arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
      Get::PassArrangements materialize.public.t2
        raw=false
        arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }

Used Indexes:
  - materialize.public.t1_f1_ind
  - materialize.public.t2_f1_ind

EOF
