# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This file contains tests for the PredicatePushdown transform.

statement ok
CREATE TABLE x (a int not null, u int, b bool)

statement ok
CREATE TABLE y (a int not null)

query T multiline
EXPLAIN PLAN FOR SELECT b FROM (SELECT b, not(b) as neg FROM x) WHERE NOT(neg)
----
%0 =
| Get materialize.public.x (u1)
| Filter #2
| Project (#2)

EOF

query T multiline
EXPLAIN PLAN FOR SELECT b FROM (SELECT b, b = false as neg FROM x) WHERE NOT(neg)
----
%0 =
| Get materialize.public.x (u1)
| Filter (#2 != false)
| Project (#2)

EOF

# Inline binary expressions.

query T multiline
EXPLAIN PLAN FOR
  SELECT a FROM (SELECT a, a = 3 AS cond, u != 2 as cond2 FROM x) WHERE NOT(cond) AND NOT(cond2)
----
%0 =
| Get materialize.public.x (u1)
| Filter (#1 = 2), (#0 != 3)
| Project (#0)

EOF

# Don't inline binary expressions not having a leaf argument.

query T multiline
EXPLAIN PLAN FOR
  SELECT a FROM (SELECT a, (a + 1) = (u + 3) AS cond FROM x) WHERE NOT(cond)
----
%0 =
| Get materialize.public.x (u1)
| Map ((#0 + 1) = (#1 + 3))
| Filter !(#3)
| Project (#0)

EOF

# We can push down b = 3, since it only refers to input columns. We can't push
# down c = 3 since the computation of c refers to mapped columns.

query T multiline
EXPLAIN PLAN FOR
  SELECT * FROM
    (SELECT a, b, b+1 as c FROM
      (SELECT a, a+1 as b FROM y))
WHERE b = 3 AND c = 3
----
%0 =
| Get materialize.public.y (u3)
| Filter (3 = (#0 + 1))
| Map (#0 + 1), (#1 + 1)
| Filter (#2 = 3)

EOF

# Regression test to ensure that a filter gets pushed down to all inputs of a union.

query T multiline
EXPLAIN DECORRELATED PLAN FOR
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
%0 = Let l0 =
| Constant ()

%1 =
| Get materialize.public.x (u1)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Project (#0)
| Distinct group=(#0)

%3 =
| Get materialize.public.y (u3)

%4 =
| Join %0 %3
| | implementation = Unimplemented

%5 =
| Union %2 %4
| Filter (#0 = 3)

EOF

query T multiline
EXPLAIN PLAN FOR
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
%0 =
| Get materialize.public.x (u1)
| Filter (#0 = 3)
| Distinct group=()
| Map 3

%1 =
| Get materialize.public.y (u3)
| Filter (#0 = 3)

%2 =
| Union %0 %1

EOF

statement ok
CREATE TABLE t1 (f1 integer, f2 integer)

statement ok
CREATE TABLE t2 (f1 integer, f2 integer)

# redundant equivalence is pushed down to all join branches and removed
query T multiline
EXPLAIN
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND t1.f2 = t2.f2 AND t1.f1 + t2.f2 = t2.f1 + t1.f2;
----
%0 =
| Get materialize.public.t1 (u5)
| ArrangeBy (#0, #1)

%1 =
| Get materialize.public.t2 (u7)
| ArrangeBy (#0, #1)

%2 =
| Join %0 %1 (= #0 #2) (= #1 #3)
| | implementation = DeltaQuery
| |   delta %0 %1.(#0, #1)
| |   delta %1 %0.(#0, #1)
| | demand = (#0, #1)
| Filter ((#0 + #1) = (#0 + #1))
| Project (#0, #1, #0, #1)

EOF

# #7684 avoidable cross joins
query T multiline
EXPLAIN
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and t2.f1 is null);
----
%0 =
| Get materialize.public.t1 (u5)
| ArrangeBy (#0)

%1 =
| Get materialize.public.t2 (u7)

%2 =
| Join %0 %1 (= #0 (#2 + 1))
| | implementation = Differential %1 %0.(#0)
| | demand = (#0..#3)

EOF

query T multiline
EXPLAIN
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
%0 =
| Get materialize.public.t1 (u5)
| ArrangeBy (#0)

%1 =
| Get materialize.public.t2 (u7)

%2 =
| Join %0 %1 (= #0 (#2 + 1))
| | implementation = Differential %1 %0.(#0)
| | demand = (#0..#3)

EOF

query T multiline
EXPLAIN
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
%0 =
| Get materialize.public.t1 (u5)
| ArrangeBy ((#0 + 1))

%1 =
| Get materialize.public.t2 (u7)

%2 =
| Join %0 %1 (= #2 (#0 + 1))
| | implementation = Differential %1 %0.((#0 + 1))
| | demand = (#0..#3)

EOF

query T multiline
EXPLAIN
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and ((t2.f1 + 1) is null and t1.f1 is null));
----
%0 =
| Get materialize.public.t1 (u5)
| ArrangeBy ((#0 + 1))

%1 =
| Get materialize.public.t2 (u7)

%2 =
| Join %0 %1 (= #2 (#0 + 1))
| | implementation = Differential %1 %0.((#0 + 1))
| | demand = (#0..#3)

EOF
