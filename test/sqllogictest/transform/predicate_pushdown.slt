# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This file contains tests for the PredicatePushdown transform.

mode cockroach

statement ok
CREATE TABLE x (a int not null, u int, b bool)

statement ok
CREATE TABLE y (a int not null)

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT b FROM (SELECT b, not(b) as neg FROM x) WHERE NOT(neg)
----
Explained Query:
  Project (#2) // { arity: 1 }
    Filter #2 // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  filter=(#2)

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT b FROM (SELECT b, b = false as neg FROM x) WHERE NOT(neg)
----
Explained Query:
  Project (#2) // { arity: 1 }
    Filter (#2 != false) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  filter=((#2 != false))

EOF

# Inline binary expressions.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT a FROM (SELECT a, a = 3 AS cond, u != 2 as cond2 FROM x) WHERE NOT(cond) AND NOT(cond2)
----
Explained Query:
  Project (#0) // { arity: 1 }
    Filter (#1 = 2) AND (#0 != 3) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

Source materialize.public.x
  filter=((#0 != 3) AND (#1 = 2))

EOF

# Don't inline binary expressions not having a leaf argument.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT a FROM (SELECT a, (a + 1) = (u + 3) AS cond FROM x) WHERE NOT(cond)
----
Explained Query:
  Project (#0) // { arity: 1 }
    Filter ((#0 + 1) != (#1 + 3)) // { arity: 3 }
      Get materialize.public.x // { arity: 3 }

EOF

# We can push down b = 3, since it only refers to input columns. We can't push
# down c = 3 since the computation of c refers to mapped columns.

query T multiline
EXPLAIN WITH(arity, join_impls)
  SELECT * FROM
    (SELECT a, b, b+1 as c FROM
      (SELECT a, a+1 as b FROM y))
WHERE b = 3 AND c = 3
----
Explained Query:
  Filter (#1 = 3) AND (#2 = 3) // { arity: 3 }
    Map ((#0 + 1), (#1 + 1)) // { arity: 3 }
      Get materialize.public.y // { arity: 1 }

Source materialize.public.y
  filter=((3 = (#0 + 1)))

EOF

# Regression test to ensure that a filter gets pushed down to all inputs of a union.

query T multiline
EXPLAIN DECORRELATED PLAN WITH(arity) FOR
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
Filter (#0 = 3) // { arity: 1 }
  Union // { arity: 1 }
    Distinct group_by=[#0] // { arity: 1 }
      Project (#0) // { arity: 1 }
        CrossJoin // { arity: 3 }
          Constant // { arity: 0 }
            - ()
          Get materialize.public.x // { arity: 3 }
    CrossJoin // { arity: 1 }
      Constant // { arity: 0 }
        - ()
      Get materialize.public.y // { arity: 1 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT a FROM (SELECT DISTINCT a FROM x UNION ALL SELECT a FROM y) WHERE a = 3
----
Explained Query:
  Union // { arity: 1 }
    Map (3) // { arity: 1 }
      Distinct // { arity: 0 }
        Project () // { arity: 0 }
          Filter (#0 = 3) // { arity: 3 }
            Get materialize.public.x // { arity: 3 }
    Filter (#0 = 3) // { arity: 1 }
      Get materialize.public.y // { arity: 1 }

Source materialize.public.x
  filter=((#0 = 3))
Source materialize.public.y
  filter=((#0 = 3))

EOF

statement ok
CREATE TABLE t1 (f1 integer, f2 integer)

statement ok
CREATE TABLE t2 (f1 integer, f2 integer)

# redundant equivalence is pushed down to all join branches and removed
query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND t1.f2 = t2.f2 AND t1.f1 + t2.f2 = t2.f1 + t1.f2;
----
Explained Query:
  Project (#0, #1, #0, #1) // { arity: 4 }
    Join on=(#0 = #2 AND #1 = #3) type=differential // { arity: 4 }
      implementation
        %0:t1[#0, #1]KK » %1:t2[#0, #1]KK
      ArrangeBy keys=[[#0, #1]] // { arity: 2 }
        Filter (#0) IS NOT NULL AND (#1) IS NOT NULL // { arity: 2 }
          Get materialize.public.t1 // { arity: 2 }
      ArrangeBy keys=[[#0, #1]] // { arity: 2 }
        Filter (#0) IS NOT NULL AND (#1) IS NOT NULL // { arity: 2 }
          Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND (#1) IS NOT NULL)
Source materialize.public.t2
  filter=((#0) IS NOT NULL AND (#1) IS NOT NULL)

EOF

# #7684 avoidable cross joins
query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and t2.f1 is null);
----
Explained Query:
  Join on=(#0 = (#2 + 1)) type=differential // { arity: 4 }
    implementation
      %0:t1[#0]K » %1:t2[(#0 + 1)]K
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t1.f1 = t2.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
Explained Query:
  Join on=(#0 = (#2 + 1)) type=differential // { arity: 4 }
    implementation
      %0:t1[#0]K » %1:t2[(#0 + 1)]K
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and (t2.f1 + 1) is null);
----
Explained Query:
  Join on=(#2 = (#0 + 1)) type=differential // { arity: 4 }
    implementation
      %0:t1[(#0 + 1)]K » %1:t2[#0]K
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t2 // { arity: 2 }

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
select * from t1, t2 where t2.f1 = t1.f1 + 1 or (t1.f1 is null and ((t2.f1 + 1) is null and t1.f1 is null));
----
Explained Query:
  Join on=(#2 = (#0 + 1)) type=differential // { arity: 4 }
    implementation
      %0:t1[(#0 + 1)]K » %1:t2[#0]K
    ArrangeBy keys=[[(#0 + 1)]] // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }
    ArrangeBy keys=[[#0]] // { arity: 2 }
      Get materialize.public.t2 // { arity: 2 }

EOF

# Join-Dependent Predicate Duplication (JoinInputMapper::consequence_for_input)

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR (t1.f2 = 5 AND t2.f2 = 6));
----
Explained Query:
  Project (#0, #1, #0, #3) // { arity: 4 }
    Filter (((#1 = 3) AND (#3 = 4)) OR ((#1 = 5) AND (#3 = 6))) // { arity: 4 }
      Join on=(#0 = #2) type=differential // { arity: 4 }
        implementation
          %0:t1[#0]Kef » %1:t2[#0]Kef
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)) // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL AND ((#1 = 4) OR (#1 = 6)) // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)))
Source materialize.public.t2
  filter=((#0) IS NOT NULL AND ((#1 = 4) OR (#1 = 6)))

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR t1.f2 = 5);
----
Explained Query:
  Project (#0, #1, #0, #3) // { arity: 4 }
    Filter ((#1 = 5) OR ((#1 = 3) AND (#3 = 4))) // { arity: 4 }
      Join on=(#0 = #2) type=differential // { arity: 4 }
        implementation
          %0:t1[#0]Kef » %1:t2[#0]Kef
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)) // { arity: 2 }
            Get materialize.public.t1 // { arity: 2 }
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Filter (#0) IS NOT NULL // { arity: 2 }
            Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=((#0) IS NOT NULL AND ((#1 = 3) OR (#1 = 5)))
Source materialize.public.t2
  filter=((#0) IS NOT NULL)

EOF

query T multiline
EXPLAIN WITH(arity, join_impls)
SELECT * FROM t1, t2
WHERE t1.f2 = 27 OR (t1.f2 <= 1995 AND t1.f1 = t2.f1);
----
Explained Query:
  Filter ((#1 = 27) OR ((#0 = #2) AND (#1 <= 1995))) // { arity: 4 }
    CrossJoin type=differential // { arity: 4 }
      implementation
        %0:t1[×]eiif » %1:t2[×]eiif
      ArrangeBy keys=[[]] // { arity: 2 }
        Filter ((#1 = 27) OR (#1 <= 1995)) // { arity: 2 }
          Get materialize.public.t1 // { arity: 2 }
      ArrangeBy keys=[[]] // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }

Source materialize.public.t1
  filter=(((#1 = 27) OR (#1 <= 1995)))

EOF

# Delta join -- In this case, `JoinImplementation` lifts the newly created predicates to after the join at the end of
# MIR. However, MIR -> LIR lowering will push these predicates to their correct place. We can check this in the physical
# plan, i.e., that they are in the `initial_closure`.

statement ok
CREATE INDEX t1_f1_ind on t1(f1)

statement ok
CREATE INDEX t2_f1_ind on t2(f1)

query T multiline
EXPLAIN PHYSICAL PLAN AS TEXT FOR
SELECT * FROM t1, t2 WHERE t1.f1 = t2.f1 AND ((t1.f2 = 3 AND t2.f2 = 4) OR (t1.f2 = 5 AND t2.f2 = 6));
----
Explained Query:
  Join::Linear
    final_closure
      project=(#0, #1, #0, #2)
    linear_stage[0]
      closure
        filter=((#0) IS NOT NULL AND (#3 OR #4) AND (#5 OR #6) AND ((#3 AND #5) OR (#4 AND #6)))
        map=((#1 = 3), (#1 = 5), (#2 = 4), (#2 = 6))
      lookup={ relation=1, key=[#0] }
      stream={ key=[#0], thinning=(#1) }
    source={ relation=0, key=[#0] }
    Get::PassArrangements materialize.public.t1
      raw=false
      arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }
    Get::PassArrangements materialize.public.t2
      raw=false
      arrangements[0]={ key=[#0], permutation=id, thinning=(#1) }

Used Indexes:
  - materialize.public.t1_f1_ind
  - materialize.public.t2_f1_ind

EOF

# Regression tests for https://github.com/MaterializeInc/materialize/issues/16128

statement ok
CREATE TABLE tt1 (f1 DOUBLE PRECISION, f2 DOUBLE PRECISION NOT NULL);

statement ok
CREATE TABLE tt2 (f1 DOUBLE PRECISION, f2 DOUBLE PRECISION NOT NULL);

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT *
FROM tt2 ,
(
    SELECT AVG(1) AS f1 , COUNT (1) AS f2
    FROM tt2
    WHERE f2 IS NULL
) AS a2
WHERE a2.f1 = 1
OR a2.f1 + 4 = 8
AND tt2.f2 = 1;
----
Explained Query (fast path):
  Constant <empty>

EOF

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT
        s.name, r.name
FROM
        mz_schemas s,
        mz_relations r
WHERE
        r.schema_id = s.id AND (r.type = 'materialized-view' OR (r.type = 'view' AND s.name != 'doesntmatter'))
----
Explained Query:
  Project (#1, #3) // { arity: 2 }
    Filter ((#4 = "materialized-view") OR ((#4 = "view") AND (#1 != "doesntmatter"))) // { arity: 5 }
      Join on=(#0 = #2) type=differential // { arity: 5 }
        implementation
          %1[#0]Kef » %0:mz_schemas[#0]Kef
        ArrangeBy keys=[[#0]] // { arity: 2 }
          Project (#0, #3) // { arity: 2 }
            Get mz_catalog.mz_schemas // { arity: 4 }
        ArrangeBy keys=[[#0]] // { arity: 3 }
          Union // { arity: 3 }
            Project (#2, #3, #5) // { arity: 3 }
              Map ("view") // { arity: 6 }
                Get mz_catalog.mz_views // { arity: 5 }
            Project (#2, #3, #6) // { arity: 3 }
              Map ("materialized-view") // { arity: 7 }
                Get mz_catalog.mz_materialized_views // { arity: 6 }

Source mz_catalog.mz_views
  filter=(true)
Source mz_catalog.mz_materialized_views
  filter=(true)

EOF

# Regression tests for #17515
# Push predicates through Threshold and TopK

# Test Threshold.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
WITH cte(a) as (SELECT a FROM x EXCEPT ALL SELECT a FROM y)
SELECT a * 5 FROM cte WHERE a = 5
----
Explained Query:
  Project (#1)
    Map (25)
      Threshold
        Union
          Project (#0)
            Filter (#0 = 5)
              Get materialize.public.x
          Negate
            Filter (#0 = 5)
              Get materialize.public.y

Source materialize.public.x
  filter=((#0 = 5))
Source materialize.public.y
  filter=((#0 = 5))

EOF

# Test TopK.
query T multiline
EXPLAIN OPTIMIZED PLAN AS TEXT FOR
SELECT a FROM y as y, LATERAL(SELECT u FROM x WHERE y.a = x.a LIMIT 5) WHERE a IN (41, 42);
----
Explained Query:
  Return
    Project (#0)
      Join on=(#0 = #1) type=differential
        ArrangeBy keys=[[#0]]
          Get l0
        ArrangeBy keys=[[#0]]
          TopK group_by=[#0] limit=5 monotonic=false
            Project (#0)
              Join on=(#0 = #1) type=differential
                ArrangeBy keys=[[#0]]
                  Distinct group_by=[#0]
                    Get l0
                ArrangeBy keys=[[#0]]
                  Project (#0)
                    Filter ((#0 = 41) OR (#0 = 42))
                      Get materialize.public.x
  With
    cte l0 =
      Filter ((#0 = 41) OR (#0 = 42))
        Get materialize.public.y

Source materialize.public.x
  filter=(((#0 = 41) OR (#0 = 42)))
Source materialize.public.y
  filter=(((#0 = 41) OR (#0 = 42)))

EOF

# One more for https://github.com/MaterializeInc/materialize/issues/16128
# https://github.com/MaterializeInc/materialize/pull/16147#issuecomment-1322042176

statement ok
DROP SCHEMA public CASCADE ;

statement ok
CREATE SCHEMA public ;

statement ok
CREATE TABLE table_f2_f3 ( f2 INTEGER , f3 INTEGER  ) ;

statement ok
CREATE TABLE table_f3_f4_f5 ( f3 INTEGER , f4 INTEGER , f5 INTEGER  ) ;

statement ok
CREATE TABLE table_f4_f5_f6 ( f4 INTEGER , f5 INTEGER , f6 INTEGER  ) ;

statement ok
INSERT INTO table_f2_f3 VALUES ( 0 , 0 ), ( 0 , 1 ), ( NULL , 0 );

statement ok
INSERT INTO table_f3_f4_f5 VALUES ( 0 , 1 , NULL ), ( 1 , 1 , 0 ), ( 1 , NULL , 0 );

statement ok
INSERT INTO table_f4_f5_f6 VALUES ( 0 , 0 , 1 ), ( 1 , 0 , 0 ), ( NULL , 0 , 1 ), ( NULL , 1 , 0 ), ( NULL , 1 , 0 );

query IIIIII rowsort
SELECT * FROM table_f2_f3  JOIN ( table_f3_f4_f5  JOIN table_f4_f5_f6  USING ( f5  )  )  USING ( f3  )
 WHERE f6  IS  NULL  OR f3  >= f6  AND f6  <=  10000   ;
----
1  0  0  1  0  1
1  0  0  1  1  0
1  0  0  1  NULL  1
1  0  0  NULL  0  1
1  0  0  NULL  1  0
1  0  0  NULL  NULL  1

## -------------------- Tests for WITH MUTUALLY RECURSIVE --------------------

statement ok
CREATE TABLE init(n int, m int, s string);

statement ok
INSERT INTO init VALUES (1, 3, 'aaa'), (2, 4, 'bbb');

# Across Let bindings, and within a Let binding.
# The `WHERE n<5` should be pushed into l0.
# Furthermore, within l0 it should be pushed down on top of the Gets. The Source should also have it.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0 WHERE n<5
  ),
  c2(n int) AS (
    (SELECT * FROM c0 WHERE n<5)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM c2;
----
Explained Query:
  Return
    Get l2
  With Mutually Recursive
    cte l2 =
      Union
        Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Map ((#0 + #0))
          Get l0
    cte l0 =
      Union
        Project (#0)
          Filter (#0 < 5)
            Get materialize.public.init
        Filter (#0 < 5)
          Get l2

Source materialize.public.init
  filter=((#0 < 5))

EOF

# Here, a pushdown should NOT happen, because not every use of the Get has the predicate.
# That is, the `< 5` predicate should stay inside the `cte l1 =`, and shouldn't appear anywhere else.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0 WHERE n<5
  ),
  c2(n int) AS (
    (SELECT * FROM c0)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM c2;
----
Explained Query:
  Return
    Get l2
  With Mutually Recursive
    cte l2 =
      Union
        Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Filter (#0 < 5)
          Map ((#0 + #0))
            Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Get l2

EOF

# Same as the previous query, but the predicate should stay inside the `cte l2 =`
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0
  ),
  c2(n int) AS (
    (SELECT * FROM c0 WHERE n<5)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM c2;
----
Explained Query:
  Return
    Get l2
  With Mutually Recursive
    cte l2 =
      Union
        Filter (#0 < 5)
          Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Map ((#0 + #0))
          Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Get l2

EOF

# Similar to the previous two queries, but here one of the uses of `l0` is in the body, so this would catch the error
# case of forgetting to call PredicatePushdown's `action` on the `body` of the `LetRec`, whose role here is to make the
# intersection in `get_predicates` empty.
# The predicate should NOT be pushed into the `cte l0 =`, and should stay in both the `cte l2 =` and the `cte l1 =`.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0 WHERE n<5
  ),
  c2(n int) AS (
    (SELECT * FROM c0 WHERE n<5)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM ((SELECT * FROM c2) UNION (SELECT * FROM c0));
----
Explained Query:
  Return
    Distinct group_by=[#0]
      Union
        Get l2
        Get l0
  With Mutually Recursive
    cte l2 =
      Union
        Filter (#0 < 5)
          Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Filter (#0 < 5)
          Map ((#0 + #0))
            Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Get l2

EOF

# For now, we can’t push from the body into such a Let binding that is being referenced across
# iterations (l2).
# That is, the `> 7` predicate should stay inside the `cte l0 =` and the body.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2 WHERE n>7)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0
  ),
  c2(n int) AS (
    (SELECT * FROM c0)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM c2 WHERE n>7;
----
Explained Query:
  Return
    Filter (#0 > 7)
      Get l2
  With Mutually Recursive
    cte l2 =
      Union
        Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Map ((#0 + #0))
          Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Filter (#0 > 7)
          Get l2

EOF

# We can push down from the body into such a Let binding that is NOT being referenced across
# iterations (l1).
# The `> 7` should end up inside the `cte l1 =`, and should disappear from everywhere else.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0
  ),
  c2(n int) AS (
    (SELECT * FROM c0)
    UNION ALL
    (SELECT * FROM c1 WHERE n>7)
    UNION ALL
    (SELECT * FROM c1 WHERE n>7)
  )
SELECT * FROM c1 WHERE n>7;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive
    cte l2 =
      Union
        Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Filter (#1 > 7)
          Map ((#0 + #0))
            Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Get l2

EOF

# Even though the only usage of `l2` has a predicate, we don't push that predicate into `l2`,
# because `l2` is being referenced across iterations.
# That is, the `< 3` predicate should stay inside the `cte l0 =`.
query T multiline
EXPLAIN
WITH MUTUALLY RECURSIVE
  c0(n int) AS (
    (SELECT n FROM init)
    UNION ALL
    (SELECT * FROM c2 WHERE n<3)
  ),
  c1(n int) AS (
    SELECT n+n FROM c0
  ),
  c2(n int) AS (
    (SELECT * FROM c0)
    UNION ALL
    (SELECT * FROM c1)
    UNION ALL
    (SELECT * FROM c1)
  )
SELECT * FROM c1;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive
    cte l2 =
      Union
        Get l0
        Get l1
        Get l1
    cte l1 =
      Project (#1)
        Map ((#0 + #0))
          Get l0
    cte l0 =
      Union
        Project (#0)
          Get materialize.public.init
        Filter (#0 < 3)
          Get l2

EOF
