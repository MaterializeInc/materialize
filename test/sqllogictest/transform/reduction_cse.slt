# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE t1 (f1 int, f2 int)

statement ok
CREATE TABLE t2 (f1 int, f2 int)

query T multiline
EXPLAIN SELECT * FROM (SELECT f1, count(*) FROM t1 GROUP BY f1) a, (SELECT f1, max(f2) FROM t1 GROUP BY f1) b
----
%0 = Let l0 =
| Get materialize.public.t1 (u1)
| Reduce group=(#0)
| | agg count(true)
| | agg max(#1)

%1 =
| Get %0 (l0)
| Project (#0, #1)
| ArrangeBy ()

%2 =
| Get %0 (l0)
| Project (#0, #2)

%3 =
| Join %1 %2
| | implementation = Differential %2 %1.()

EOF

query T multiline
EXPLAIN SELECT * FROM (SELECT f1, count(*) FROM t1 GROUP BY f1) a, (SELECT f1, max(f2) FROM t1 GROUP BY f1) b WHERE a.f1 = b.f1
----
%0 =
| Get materialize.public.t1 (u1)
| Filter !(isnull(#0))
| Reduce group=(#0)
| | agg count(true)
| | agg max(#1)
| Project (#0, #1, #0, #2)

EOF

query T multiline
EXPLAIN SELECT * FROM (SELECT f1, count(*) FROM t1 GROUP BY f1) a, (SELECT f1, max(f2) FROM t1 GROUP BY f1) b, (SELECT f1, max(f2) FROM t1 GROUP BY f1) c, (SELECT f1, min(f2) FROM t1 GROUP BY f1) c
----
%0 = Let l0 =
| Get materialize.public.t1 (u1)
| Reduce group=(#0)
| | agg max(#1)
| | agg count(true)
| | agg min(#1)

%1 = Let l1 =
| Get %0 (l0)
| Project (#0, #1)
| ArrangeBy ()

%2 =
| Get %0 (l0)
| Project (#0, #2)
| ArrangeBy ()

%3 =
| Get %0 (l0)
| Project (#0, #3)

%4 =
| Join %2 %1 %1 %3
| | implementation = Differential %3 %2.() %1.() %1.()

EOF

query T multiline
EXPLAIN SELECT * FROM (SELECT f1, count(*) FROM t1 GROUP BY f1) a WHERE 10 = (SELECT f1 FROM t1 GROUP BY f1 HAVING min(f2) < 10)
----
%0 = Let l0 =
| Get materialize.public.t1 (u1)
| Reduce group=(#0)
| | agg min(#1)
| | agg count(true)

%1 =
| Get %0 (l0)
| Project (#0, #2)
| ArrangeBy ()

%2 =
| Get %0 (l0)
| Filter (#0 = 10), (#1 < 10)
| Project ()

%3 =
| Get %0 (l0)
| Filter (#1 < 10)
| Project ()
| Reduce group=()
| | agg count(true)
| Filter (err: more than one record produced in subquery), (#0 > 1)
| Project ()

%4 =
| Union %2 %3

%5 =
| Join %1 %4
| | implementation = Differential %4 %1.()

EOF

# TODO reductions are not merged due to the way in which scalar subqueries are lowered one on top of each other
query T multiline
EXPLAIN SELECT (SELECT count(*) FROM t2 WHERE t2.f1 = t1.f1), (SELECT count(*) FROM t2 WHERE t2.f1 = t1.f1), (SELECT max(f2) FROM t2 WHERE t2.f1 = t1.f1) FROM t1
----
%0 = Let l0 =
| Get materialize.public.t1 (u1)
| Project (#0)

%1 = Let l1 =
| Get %0 (l0)
| Distinct group=(#0)

%2 = Let l2 =
| Get materialize.public.t2 (u3)
| Filter !(isnull(#0))

%3 = Let l3 =
| Get %2 (l2)
| Project (#0)

%4 =
| Get %1 (l1)
| ArrangeBy (#0)

%5 = Let l4 =
| Join %4 %3 (= #0 #1)
| | implementation = Differential %3 %4.(#0)
| Project (#0)
| Reduce group=(#0)
| | agg count(true)

%6 =
| Get %5 (l4)
| Project (#0)
| Negate

%7 =
| Union %6 %1
| Map 0

%8 = Let l5 =
| Union %5 %7

%9 =
| Get %0 (l0)
| ArrangeBy (#0)

%10 =
| Get %8 (l5)
| Project (#0)
| Negate

%11 =
| Union %10 %1
| Map null

%12 =
| Union %8 %11

%13 = Let l6 =
| Join %9 %12 (= #0 #1)
| | implementation = Differential %12 %9.(#0)
| Project (#0, #2)

%14 = Let l7 =
| Get %13 (l6)
| Project (#0)
| Distinct group=(#0)

%15 =
| Get %14 (l7)
| ArrangeBy (#0)

%16 = Let l8 =
| Join %15 %3 (= #0 #1)
| | implementation = Differential %3 %15.(#0)
| Project (#0)
| Reduce group=(#0)
| | agg count(true)

%17 =
| Get %16 (l8)
| Project (#0)
| Negate

%18 =
| Union %17 %14
| Map 0

%19 = Let l9 =
| Union %16 %18

%20 =
| Get %13 (l6)
| ArrangeBy (#0)

%21 =
| Get %19 (l9)
| Project (#0)
| Negate

%22 =
| Union %21 %14
| Map null

%23 =
| Union %19 %22

%24 = Let l10 =
| Join %20 %23 (= #0 #2)
| | implementation = Differential %23 %20.(#0)
| Project (#0, #1, #3)

%25 = Let l11 =
| Get %24 (l10)
| Project (#0)
| Distinct group=(#0)

%26 =
| Get %25 (l11)
| ArrangeBy (#0)

%27 = Let l12 =
| Join %26 %2 (= #0 #1)
| | implementation = Differential %2 %26.(#0)
| Project (#0, #2)
| Reduce group=(#0)
| | agg max(#1)

%28 =
| Get %27 (l12)
| Project (#0)
| Negate

%29 =
| Union %28 %25
| Map null

%30 = Let l13 =
| Union %27 %29

%31 =
| Get %24 (l10)
| ArrangeBy (#0)

%32 =
| Get %30 (l13)
| Project (#0)
| Negate

%33 =
| Union %32 %25
| Map null

%34 =
| Union %30 %33

%35 =
| Join %31 %34 (= #0 #3)
| | implementation = Differential %34 %31.(#0)
| Project (#1, #2, #4)

EOF
