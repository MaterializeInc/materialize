# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
DROP TABLE IF EXISTS band_members;

statement ok
DROP TABLE IF EXISTS people;

statement ok
DROP TABLE IF EXISTS bands;

statement ok
CREATE TABLE bands (
    id INT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL
)

statement ok
CREATE TABLE people (
    id INT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    born DATE NOT NULL,
    died DATE
)

statement ok
CREATE TABLE band_members (
    b_id INT NOT NULL, -- REFERENCES bands(id),
    p_id INT NOT NULL -- REFERENCES people(id)
)

statement ok
INSERT INTO bands VALUES
    (1, 'The Beatles')

statement ok
INSERT INTO people VALUES
    (1, 'John Lennon', '1940-10-09', '1980-12-08'),
    (2, 'George Harrison', '1943-02-25', '2001-11-29'),
    (3, 'Paul McCartney', '1942-06-18', NULL),
    (4, 'Richard Starkey', '1940-07-07', NULL)

statement ok
INSERT INTO band_members VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4)

# Simple case: EXCEPT ALL with a const literal constraint.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
(
    SELECT id FROM people
)
EXCEPT
(
    SELECT id FROM people WHERE id = 5
)
----
Source materialize.public.people (u2):
| Map dummy, dummy, dummy
| Project (#0, #4..=#6)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#0)

%1 =
| Get materialize.public.people (u2)
| Filter (#0 = 5)
| Project ()
| Negate
| Map 5

%2 =
| Union %0 %1

EOF

# Simple case: EXCEPT ALL with an IS NOT NULL filter.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
(
    SELECT id FROM people
)
EXCEPT ALL
(
    SELECT id FROM people WHERE died IS NOT NULL
)
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #4, #5, #3)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#0)

%1 =
| Get materialize.public.people (u2)
| Filter (#3) IS NOT NULL
| Project (#0)
| Negate

%2 =
| Union %0 %1

EOF

# Simple case: EXCEPT.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
SELECT name FROM people
EXCEPT
SELECT name FROM people WHERE id > 1
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #1, #4, #5)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#1)
| Distinct group=(#0)

%1 =
| Get materialize.public.people (u2)
| Filter (#0 > 1)
| Project (#1)
| Distinct group=(#0)
| Negate

%2 =
| Union %0 %1

EOF

# Negative example: EXCEPT ALL that should not be confused for an EXCEPT
# the two inputs have a Reduce *with aggregates*.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
SELECT MAX(id) FROM people GROUP BY name
EXCEPT ALL
SELECT MAX(id) FROM (SELECT * FROM people WHERE id > 1) GROUP BY name
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #1, #4, #5)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#0, #1)
| Reduce group=(#1)
| | agg max(#0)
| Project (#1)

%1 =
| Get materialize.public.people (u2)
| Filter (#0 > 1)
| Project (#0, #1)
| Reduce group=(#1)
| | agg max(#0)
| Project (#1)
| Negate

%2 =
| Union %0 %1
| Threshold

EOF

# Complex example: EXCEPT ALL.
# Here ThresholdElision can only match in after some prior simplifications
# and for some reason (TBD later) this means that we need to run it at the
# end of the physical pass.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
(
    SELECT
        id, name
    FROM
        people
)
EXCEPT ALL
(
    SELECT
        *
    FROM
        (SELECT DISTINCT id FROM people) people_ids,
        LATERAL (
            SELECT name FROM people
            WHERE people.id = people_ids.id
            LIMIT 1
        )
)
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #1, #4, #5)

Query:
%0 = Let l0 =
| Get materialize.public.people (u2)
| Project (#0, #1)

%1 =
| Get %0 (l0)
| TopK group=(#0) order=() limit=1 offset=0
| Negate

%2 =
| Union %0 %1

EOF

# Complex example: EXCEPT.
# Here ThresholdElision can only match in after some prior simplifications
# and for some reason (TBD later) this means that we need to run it at the
# end of the physical pass.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
(
    SELECT
        id, name
    FROM
        people
)
EXCEPT
(
    SELECT
        *
    FROM
        (SELECT DISTINCT id FROM people) people_ids,
        LATERAL (
            SELECT name FROM people
            WHERE people.id = people_ids.id
            LIMIT 1
        )
)
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #1, #4, #5)

Query:
%0 = Let l0 =
| Get materialize.public.people (u2)
| Project (#0, #1)

%1 =
| Get %0 (l0)
| TopK group=(#0) order=() limit=1 offset=0
| Negate

%2 =
| Union %0 %1

EOF

# Complex example: CTE with a join.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
WITH cte AS (SELECT people.id FROM people, bands)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte where id > 5;
----
Source materialize.public.bands (u1):
| Map dummy, dummy
| Project (#2, #3)

Source materialize.public.people (u2):
| Map dummy, dummy, dummy
| Project (#0, #4..=#6)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#0)
| ArrangeBy ()

%1 =
| Get materialize.public.bands (u1)
| Project ()

%2 = Let l0 =
| Join %0 %1
| | implementation = Differential %1 %0.()

%3 =
| Get %2 (l0)
| Filter (#0 > 5)
| Negate

%4 =
| Union %2 %3

EOF

# Complex example: CTE with a DISTINCT.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
WITH cte AS (SELECT DISTINCT name FROM people)
SELECT * FROM cte EXCEPT ALL SELECT * FROM cte WHERE name LIKE 'J%'
----
Source materialize.public.people (u2):
| Map dummy, dummy, dummy
| Project (#4, #1, #5, #6)

Query:
%0 = Let l0 =
| Get materialize.public.people (u2)
| Project (#1)
| Distinct group=(#0)

%1 =
| Get %0 (l0)
| Filter "J%" ~~(#0)
| Negate

%2 =
| Union %0 %1

EOF

# Complex example: CTE with a GROUP BY.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
WITH a(birth_year, no_people_born) AS (
    SELECT EXTRACT(year from born), COUNT(*)
    FROM people
    GROUP BY EXTRACT(year from born)
)
SELECT * FROM a EXCEPT (SELECT * FROM a WHERE birth_year > 1940);
----
Source materialize.public.people (u2):
| Map dummy, dummy, dummy
| Project (#4, #5, #2, #6)

Query:
%0 = Let l0 =
| Get materialize.public.people (u2)
| Project (#2)
| Reduce group=(extract_year_d(#0))
| | agg count(true)

%1 =
| Get %0 (l0)
| Filter (#0 > 1940)
| Negate

%2 =
| Union %0 %1

EOF

# Complex example: a chain of CTEs with:
# (1) an EXCEPT ALL in cte1 (that is, a plan containing Negate),
# (2) a non-pushable operation (Distinct) in the cte2,
# (3) an EXCEPT in the final result,
# The optimization still removes the Threshold operators in both
# (1) and (3) because the non_negative value inferred for cte1
# prior to the rewrite is maintained for downstream rewrites.
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
WITH cte1 AS (
    SELECT * FROM people
    EXCEPT ALL
    SELECT * FROM people WHERE name LIKE 'J%'
), cte2 AS (
    SELECT DISTINCT * FROM cte1
)
SELECT * FROM cte2
EXCEPT
SELECT * FROM cte2 WHERE name LIKE 'P%';
----
Source materialize.public.people (u2):
| Project (#0..=#3)

Query:
%0 =
| Get materialize.public.people (u2)

%1 =
| Get materialize.public.people (u2)
| Filter "J%" ~~(#1)
| Negate

%2 = Let l0 =
| Union %0 %1
| Distinct group=(#0, #1, #2, #3)

%3 =
| Get %2 (l0)
| Filter "P%" ~~(#1)
| Negate

%4 =
| Union %2 %3

EOF

# Complex example (unsupported): A - (σ(p)(A) ⊎ σ(q)(A)).
query T multiline
EXPLAIN OPTIMIZED PLAN FOR
SELECT name FROM people
EXCEPT ALL
(
    SELECT name FROM people WHERE id = 1
    UNION ALL
    SELECT name FROM people WHERE id = 2
)
----
Source materialize.public.people (u2):
| Map dummy, dummy
| Project (#0, #1, #4, #5)

Query:
%0 =
| Get materialize.public.people (u2)
| Project (#1)

%1 =
| Get materialize.public.people (u2)
| Filter (#0 = 1)
| Project (#1)
| Negate

%2 =
| Get materialize.public.people (u2)
| Filter (#0 = 2)
| Project (#1)
| Negate

%3 =
| Union %0 %1 %2
| Threshold

EOF
