
# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

# This file contains tests for the TopK elision transform
# and interaction of transforms with the TopK operator.

statement ok
CREATE TABLE test1(a int, b int, c int, d int)

# check that the extra project caused by the CSE is lifted
# through the TopK
query T multiline
EXPLAIN PLAN FOR
SELECT avg(d), sumc, sumd FROM (
SELECT a + b + c as sumc, a + b + d as sumd, d
FROM test1
ORDER BY d NULLS FIRST LIMIT 4
)
GROUP BY sumc, sumd
----
Source materialize.public.test1 (u1):
| Project (#0..=#3)

Query:
%0 =
| Get materialize.public.test1 (u1)
| Map (#0 + #1), (#4 + #2), (#4 + #3)
| Project (#3, #5, #6)
| TopK group=() order=(#0 asc nulls_first) limit=4 offset=0
| Reduce group=(#1, #2)
| | agg sum(#0)
| | agg count(#0)
| Map (bigint_to_double(#2) / bigint_to_double(if (#3 = 0) then {null} else {#3}))
| Project (#4, #0, #1)

EOF

# check that TopK elision is recursive
statement ok
CREATE MATERIALIZED VIEW plan_test1 AS
SELECT avg(d), sumc, sumd FROM (
SELECT a + b + c as sumc, a + b + d as sumd, d
FROM test1
ORDER BY d
)
GROUP BY sumc, sumd
ORDER BY sumc

query T multiline
EXPLAIN PLAN FOR VIEW plan_test1
----
Source materialize.public.test1 (u1):
| Project (#0..=#3)

Query:
%0 =
| Get materialize.public.test1 (u1)
| Reduce group=(((#0 + #1) + #2), ((#0 + #1) + #3))
| | agg sum(#3)
| | agg count(#3)
| Map (bigint_to_double(#2) / bigint_to_double(if (#3 = 0) then {null} else {#3}))
| Project (#4, #0, #1)

EOF

# Test that chained unions get planned with a single union operator.
query T multiline
EXPLAIN PLAN FOR SELECT * FROM test1 UNION ALL SELECT * FROM test1 UNION ALL SELECT * FROM test1
----
Source materialize.public.test1 (u1):
| Project (#0..=#3)

Query:
%0 =
| Get materialize.public.test1 (u1)

%1 =
| Get materialize.public.test1 (u1)

%2 =
| Get materialize.public.test1 (u1)

%3 =
| Union %0 %1 %2

EOF

# Test that `limit 0` results in an empty constant with () as the keys

statement ok
CREATE TABLE with_primary_key(a int primary key, b int)

query T multiline
explain typed plan for select * from (select * from with_primary_key limit 0);
----
%0 =
| Constant
| | types = (integer, integer)
| | keys = (())

EOF

# Check that TopK fusion transform is wired up

statement ok
create table t1(f1 int, f2 int);
----

statement ok
create materialized view v1 as select * from (select * from t1 order by f1 limit 10 offset 2) order by f1 limit 3 offset 1;
----

query T multiline
explain view v1;
----
Source materialize.public.t1 (u5):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t1 (u5)
| TopK group=() order=(#0 asc nulls_last) limit=3 offset=3

EOF
