# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE t1 (key integer PRIMARY KEY, nokey integer)

statement ok
INSERT INTO t1 VALUES (1, 1), (2, 3), (4, 5);

statement ok
CREATE TABLE t2 (key integer PRIMARY KEY, nokey integer)

statement ok
INSERT INTO t2 VALUES (2, 3), (5, 5);

statement ok
CREATE TABLE t3 (f1 INTEGER, f2 INTEGER);

statement ok
INSERT INTO t3 VALUES (2, 3), (5, 5), (5, 5), (6, 1)

# Test that nested unions are fused into a single Union operator
query T multiline
EXPLAIN (SELECT * FROM t1 UNION ALL SELECT * FROM t1) UNION ALL (SELECT * FROM t2 UNION ALL SELECT * FROM t2);
----
Source materialize.public.t1 (u1):
| Project (#0, #1)

Source materialize.public.t2 (u2):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t1 (u1)

%1 =
| Get materialize.public.t1 (u1)

%2 =
| Get materialize.public.t2 (u2)

%3 =
| Get materialize.public.t2 (u2)

%4 =
| Union %0 %1 %2 %3

EOF

query II
(SELECT * FROM t1 UNION ALL SELECT * FROM t1) UNION ALL (SELECT * FROM t2 UNION ALL SELECT * FROM t2);
----
1  1
1  1
2  3
2  3
2  3
2  3
4  5
4  5
5  5
5  5

# Test that nested negated unions are merged into the parent Union operator by pushing the Negate into their branches
query T multiline
EXPLAIN (SELECT * FROM t1 UNION ALL SELECT * FROM t1) EXCEPT ALL (SELECT * FROM t2 UNION ALL SELECT * FROM t2);
----
Source materialize.public.t1 (u1):
| Project (#0, #1)

Source materialize.public.t2 (u2):
| Project (#0, #1)

Query:
%0 = Let l0 =
| Get materialize.public.t2 (u2)
| Negate

%1 =
| Get materialize.public.t1 (u1)

%2 =
| Get materialize.public.t1 (u1)

%3 =
| Union %1 %2 %0 %0
| Threshold

EOF

query II
(SELECT * FROM t1 UNION ALL SELECT * FROM t1) EXCEPT ALL (SELECT * FROM t2 UNION ALL SELECT * FROM t2);
----
1  1
1  1
4  5
4  5

query T multiline
EXPLAIN PLAN FOR SELECT * FROM t2  EXCEPT ALL SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3;
----
Source materialize.public.t1 (u1):
| Project (#0, #1)

Source materialize.public.t2 (u2):
| Project (#0, #1)

Source materialize.public.t3 (u3):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t2 (u2)

%1 =
| Get materialize.public.t1 (u1)
| Negate

%2 =
| Get materialize.public.t1 (u1)

%3 =
| Get materialize.public.t3 (u3)
| Negate

%4 =
| Union %2 %3
| Threshold

%5 =
| Union %0 %1 %4
| Threshold

EOF

query II
SELECT * FROM t2  EXCEPT ALL SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3;
----
5  5

query T multiline
EXPLAIN PLAN FOR SELECT * FROM t2 EXCEPT ALL (SELECT * FROM t1 INTERSECT ALL SELECT f1, null::int FROM t3);
----
Source materialize.public.t1 (u1):
| Project (#0, #1)

Source materialize.public.t2 (u2):
| Project (#0, #1)

Source materialize.public.t3 (u3):
| Project (#0)

Query:
%0 =
| Get materialize.public.t2 (u2)

%1 =
| Get materialize.public.t1 (u1)
| Negate

%2 =
| Get materialize.public.t1 (u1)

%3 =
| Get materialize.public.t3 (u3)
| Project (#0)
| Negate
| Map null

%4 =
| Union %2 %3
| Threshold

%5 =
| Union %0 %1 %4
| Threshold

EOF

query II
SELECT * FROM t2 EXCEPT ALL (SELECT * FROM t1 INTERSECT ALL SELECT f1, null::int FROM t3);
----
2 3
5 5

query T multiline
EXPLAIN SELECT a1.* FROM t3 AS a1 LEFT JOIN t2 AS a2 ON (a1.f1 = a2.nokey);
----
Source materialize.public.t2 (u2):
| Filter !(isnull(#1))
| Project (#1)

Source materialize.public.t3 (u3):
| Project (#0, #1)

Query:
%0 =
| Get materialize.public.t3 (u3)
| Filter !(isnull(#0))
| ArrangeBy (#0)

%1 =
| Get materialize.public.t2 (u2)
| Filter !(isnull(#1))
| Project (#1)

%2 = Let l0 =
| Join %0 %1 (= #0 #2)
| | implementation = Differential %1 %0.(#0)
| Project (#0, #1)

%3 =
| Get materialize.public.t3 (u3)

%4 =
| Get %2 (l0)
| Project (#0)
| Distinct group=(#0)
| ArrangeBy (#0)

%5 =
| Join %3 %4 (= #0 #2)
| | implementation = Differential %3 %4.(#0)
| Project (#0, #1)
| Negate

%6 =
| Get materialize.public.t3 (u3)

%7 =
| Union %5 %6 %2

EOF

query II
SELECT a1.* FROM t3 AS a1 LEFT JOIN t2 AS a2 ON (a1.f1 = a2.nokey);
----
2 3
5 5
5 5
6 1
