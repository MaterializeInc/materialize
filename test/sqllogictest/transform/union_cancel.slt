# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

statement ok
CREATE TABLE t1 (key integer PRIMARY KEY, nokey integer)

statement ok
INSERT INTO t1 VALUES (1, 1), (2, 3), (4, 5);

statement ok
CREATE TABLE t2 (key integer PRIMARY KEY, nokey integer)

statement ok
INSERT INTO t2 VALUES (2, 3), (5, 5);

statement ok
create table t3 (f1 integer, f2 integer);

statement ok
INSERT INTO t3 VALUES (4, 5), (5, 5), (5, 5), (null, null)

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1
----
Explained Query:
  Get materialize.public.t1 // { arity: 2 }

EOF

query II
SELECT * FROM t1
----
1 1
2 3
4 5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT a1.* FROM t1 AS a1 LEFT JOIN t1 AS a2 ON (a1.key = a2.key)
----
Explained Query:
  Get materialize.public.t1 // { arity: 2 }

EOF

query II
SELECT a1.* FROM t1 AS a1 LEFT JOIN t1 AS a2 ON (a1.key = a2.key)
----
1 1
2 3
4 5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 AS a1 LEFT JOIN t1 AS a2 ON (a1.key = a2.key) WHERE a1.nokey = 1
----
Explained Query:
  Project (#0, #1, #0, #1) // { arity: 4 }
    Filter (#1 = 1) // { arity: 2 }
      Get materialize.public.t1 // { arity: 2 }

Source materialize.public.t1
  filter=((#1 = 1))

EOF

query IIII
SELECT * FROM t1 AS a1 LEFT JOIN t1 AS a2 ON (a1.key = a2.key) WHERE a1.nokey = 1
----
1  1  1  1

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----
Explained Query (fast path):
  Constant

EOF

query II
SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----


query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 UNION ALL SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----
Explained Query:
  Threshold // { arity: 2 }
    Get materialize.public.t1 // { arity: 2 }

EOF

query II
SELECT * FROM t1 UNION ALL SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----
1  1
2  3
4  5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1 UNION ALL SELECT * FROM t1
----
Explained Query:
  Get materialize.public.t1 // { arity: 2 }

EOF

query II
SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1 UNION ALL SELECT * FROM t1
----
1  1
2  3
4  5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t1 UNION ALL SELECT * FROM t2 EXCEPT ALL SELECT * FROM t1
----
Explained Query:
  Threshold // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

query II
SELECT * FROM t1 UNION ALL SELECT * FROM t2 EXCEPT ALL SELECT * FROM t1
----
2 3
5 5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t2 UNION ALL SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----
Explained Query:
  Threshold // { arity: 2 }
    Get materialize.public.t2 // { arity: 2 }

EOF

query II
SELECT * FROM t2 UNION ALL SELECT * FROM t1 EXCEPT ALL SELECT * FROM t1
----
2 3
5 5

query T multiline
EXPLAIN WITH(arity, join_impls) SELECT * FROM t2 EXCEPT ALL SELECT * FROM t1 UNION ALL SELECT * FROM t1
----
Explained Query:
  Union // { arity: 2 }
    Threshold // { arity: 2 }
      Union // { arity: 2 }
        Get materialize.public.t2 // { arity: 2 }
        Negate // { arity: 2 }
          Get materialize.public.t1 // { arity: 2 }
    Get materialize.public.t1 // { arity: 2 }

EOF

query II
SELECT * FROM t2 EXCEPT ALL SELECT * FROM t1 UNION ALL SELECT * FROM t1
----
1  1
2  3
4  5
5  5

query T multiline
EXPLAIN WITH(arity, join_impls)
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3_with_key AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.key = a2.key)
----
Explained Query:
  Reduce group_by=[#0] aggregates=[sum(#1)] // { arity: 2 }
    Get materialize.public.t3 // { arity: 2 }

EOF

query II
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3_with_key AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.key = a2.key)
----
NULL NULL
4  5
5  10

query T multiline
EXPLAIN WITH(arity, join_impls)
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3 AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.f1 = a2.key);
----
Explained Query:
  Return // { arity: 2 }
    Union // { arity: 2 }
      Negate // { arity: 2 }
        Project (#0, #1) // { arity: 2 }
          Join on=(#0 = #2) type=differential // { arity: 3 }
            implementation
              materialize.public.t3 Â» %1[#0]
            Get materialize.public.t3 // { arity: 2 }
            ArrangeBy keys=[[#0]] // { arity: 1 }
              Distinct group_by=[#0] // { arity: 1 }
                Project (#0) // { arity: 1 }
                  Get l0 // { arity: 2 }
      Get materialize.public.t3 // { arity: 2 }
      Get l0 // { arity: 2 }
  With
    cte l0 =
      Filter (#0) IS NOT NULL // { arity: 2 }
        Get materialize.public.t3 // { arity: 2 }

EOF

query II
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3 AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.f1 = a2.key)
----
NULL NULL
4 5
5 5
5 5

query T multiline
EXPLAIN WITH(arity, join_impls)
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3 AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.f1 = a2.key or (a1.f1 is null and a2.key is null));
----
Explained Query:
  Get materialize.public.t3 // { arity: 2 }

EOF

query II
WITH t3_with_key AS (select f1 as key, sum(f2) as nokey from t3 group by f1)
SELECT a1.* FROM t3 AS a1 LEFT JOIN t3_with_key AS a2 ON (a1.f1 = a2.key or (a1.f1 is null and a2.key is null));
----
NULL NULL
4 5
5 5
5 5
