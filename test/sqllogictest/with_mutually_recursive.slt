# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

mode cockroach

## Test a plausibly correct recursive query.
## query I
## WITH MUTUALLY RECURSIVE
##     foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
##     bar (a int) as (SELECT a FROM foo)
## SELECT * FROM bar;
## ----
## 1
## 1

## Test a recursive query with mismatched types.
statement error did not match inferred type
WITH MUTUALLY RECURSIVE
    foo (a text, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT * FROM bar;

## Test with fewer columns than declared
statement error did not match inferred type
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1 UNION SELECT a FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT a FROM foo, bar;

## Test with more columns than declared
statement error did not match inferred type
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2, 3 UNION SELECT a, 5, 6 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT a FROM foo, bar;

## Test ambiguity of resulting columns.
statement error column reference "a" is ambiguous
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 5 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT a FROM foo, bar;

## Test column resolution in planning.
statement error column "a" does not exist
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 5 FROM bar),
    bar (c int) as (SELECT c FROM foo)
SELECT * FROM foo, bar;

## Test column resolution in planning.
statement error column "c" does not exist
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT 5, 5 FROM bar),
    bar (c int) as (SELECT c FROM foo)
SELECT * FROM foo, bar;

## Test nested mutual recursion.
statement error column reference "a" is ambiguous
WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (
        WITH MUTUALLY RECURSIVE
            foo (a int, b int) AS (SELECT 1, 2 UNION SELECT c, 5 FROM bar),
            bar (c int) as (SELECT a FROM foo)
        SELECT a, c FROM foo, bar
    ),
    bar (a int) as (SELECT a FROM foo)
SELECT a FROM foo, bar;

## Test recursive name resolution in SELECT subquery
## query III
## WITH MUTUALLY RECURSIVE
##     foo (a int, b int) AS (SELECT (
##         SELECT MIN(c) FROM bar
##     ), 2 UNION SELECT 5, 5 FROM bar),
##     bar (c int) as (SELECT a FROM foo)
## SELECT * FROM foo, bar;
## ----
## 5  2  5
## 5  2  5
## 5  5  5
## 5  5  5

## Test recursive name resolution in FROM clause
## query III
## WITH MUTUALLY RECURSIVE
##     foo (a int, b int) AS (
##         SELECT 1, 2 UNION
##         SELECT * FROM (
##             SELECT MIN(c), 2 FROM bar
##         )
##     ),
##     bar (c int) as (SELECT a FROM foo)
## SELECT * FROM foo, bar;
## ----
## 1  2  1

## Test recursive name resolution in FROM clause
## query I
## WITH MUTUALLY RECURSIVE
##     foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
##     bar (a int) as (SELECT a FROM foo)
## SELECT (SELECT COUNT(*) FROM foo) FROM bar;
## ----
## 2
## 2

## Explain plans:

## Test a plausibly correct recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int, b int) AS (SELECT 1, 2 UNION SELECT a, 7 FROM bar),
    bar (a int) as (SELECT a FROM foo)
SELECT * FROM bar;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive
    cte l0 =
      Project (#0)
        Distinct group_by=[#0, #1]
          Union
            Project (#2, #3)
              Map (#0, #1)
                Map (1, 2)
                  Constant
                    - ()
            Project (#1, #2)
              Map (#0)
                Project (#1, #2)
                  Map (7, #0)
                    Get l0

EOF

## Test a nested recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE
            bar (b int8) AS (
                SELECT * FROM (SELECT * FROM foo UNION ALL SELECT * FROM bar)
            )
        SELECT * FROM (SELECT * FROM foo EXCEPT ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l1
  With Mutually Recursive
    cte l1 =
      Return
        Threshold
          Union
            Project (#1)
              Map (#0)
                Get l1
            Negate
              Project (#1)
                Map (#0)
                  Get l0
      With Mutually Recursive
        cte l0 =
          Union
            Project (#1)
              Map (#0)
                Get l1
            Project (#1)
              Map (#0)
                Get l0

EOF

## Test consolidation of not-really nested recursive query.
query T multiline
EXPLAIN WITH MUTUALLY RECURSIVE
    foo (a int8) AS (
        WITH MUTUALLY RECURSIVE
            bar (b int8) AS (
                SELECT * FROM foo
            )
        SELECT * FROM (SELECT * FROM foo EXCEPT ALL SELECT * FROM bar)
    )
SELECT * FROM foo;
----
Explained Query:
  Return
    Get l0
  With Mutually Recursive
    cte l0 =
      Threshold
        Union
          Project (#1)
            Map (#0)
              Get l0
          Negate
            Project (#1)
              Map (#0)
                Get l0

EOF

## Test consolidation of independent recursive query blocks.
query T multiline
EXPLAIN SELECT * FROM (
    WITH MUTUALLY RECURSIVE
        foo (a int8) AS (SELECT DISTINCT a FROM foo)
    SELECT * FROM foo
)
UNION ALL
SELECT * FROM (
    WITH MUTUALLY RECURSIVE
        bar (a int8) AS (SELECT DISTINCT a FROM bar)
    SELECT * FROM bar
);
----
Explained Query:
  Return
    Union
      Project (#1)
        Map (#0)
          Get l0
      Project (#1)
        Map (#0)
          Get l1
  With Mutually Recursive
    cte l1 =
      Distinct group_by=[#0]
        Get l1
    cte l0 =
      Distinct group_by=[#0]
        Get l0

EOF
