# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

version: '3.7'

mzworkflows:
  # Run tests, requires aws credentials in the environment
  ci:
    env:
      AWS_REGION: us-east-2
      AWS_ENDPOINT: ''
      # The first TD_TEST parameter is automatically appended to
      # test/testdrive, but the second is just a plain string
      TD_TEST: ${TD_TEST:-*.td test/testdrive/esoteric/*.td}
    steps:
      - step: workflow
        workflow: start-deps
      - step: run
        service: testdrive

  # Run tests with no support for s3
  local:
    steps:
      - step: workflow
        workflow: start-deps
      - step: run
        service: testdrive

  # Run tests with s3 stubbed out, no credentials needed
  local-aws:
    env:
      AWS_REGION: localstack
      AWS_ENDPOINT: http://localstack:4566
    steps:
      - step: start-services
        services: [localstack]
      - step: workflow
        workflow: start-deps
      - step: wait-for-tcp
        host: localstack
        port: 4566
      - step: run
        service: testdrive

  start-deps:
    steps:
      - step: start-services
        services: [kafka, schema-registry, materialized]
      - step: wait-for-tcp
        host: schema-registry
        port: 8081
      - step: wait-for-tcp
        host: kafka
        port: 9092
      - step: wait-for-mz

services:
  testdrive:
    mzbuild: testdrive
    entrypoint:
      - bash
      - -c
      - >-
        wait-for-it --timeout=30 kafka:9092 &&
        wait-for-it --timeout=30 schema-registry:8081 &&
        wait-for-it --timeout=30 materialized:6875 &&
        testdrive
        --kafka-addr=kafka:9092
        --aws-region=${AWS_REGION-localstack}
        --aws-endpoint=${AWS_ENDPOINT-http://localstack:4566}
        --schema-registry-url=http://schema-registry:8081
        --materialized-url=postgres://ignored@materialized:6875
        --validate-catalog=/share/mzdata/catalog
        $$*
      - bash
    command: test/testdrive/${TD_TEST:-*.td}
    environment:
    - TMPDIR=/share/tmp
    - MZ_LOG
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - AWS_SECURITY_TOKEN
    volumes:
    - ../../:/workdir
    - mzdata:/share/mzdata
    - tmp:/share/tmp
    propagate-uid-gid: true
    init: true
    depends_on: [kafka, zookeeper, schema-registry, materialized]
  materialized:
    mzbuild: materialized
    command: >-
      --logging-granularity=10ms
      --data-directory=/share/mzdata
      -w1 --experimental
      --cache-max-pending-records 1
      --disable-telemetry
    ports:
      - 6875
    environment:
    - MZ_DEV=1
    - MZ_LOG
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - AWS_SECURITY_TOKEN
    volumes:
    - mzdata:/share/mzdata
    - tmp:/share/tmp
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-kafka:5.5.3
    environment:
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
    - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    - SCHEMA_REGISTRY_HOST_NAME=localhost
    depends_on: [kafka, zookeeper]

  localstack:
    image: localstack/localstack:0.12.5
    ports:
      - "4566"
      - "4571"
      - "${LOCALSTACK_WEB_UI-8080}"
    environment:
      - SERVICES=${SERVICES- }
      - DEBUG=${DEBUG- }
      - DATA_DIR=${DATA_DIR- }
      - PORT_WEB_UI=${PORT_WEB_UI- }
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  mzdata:
  tmp:
