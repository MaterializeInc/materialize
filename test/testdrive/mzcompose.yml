# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

version: '3.7'

mzworkflows:
  # Run tests with s3 stubbed out, no credentials needed
  testdrive:
    steps:
      - step: start-services
        services: [localstack]
      - step: workflow
        workflow: start-deps
      - step: wait-for-tcp
        host: localstack
        port: 4566
      - step: run
        service: testdrive-svc
        command: --aws-endpoint=http://localstack:4566 ${TD_TEST:-*.td esoteric/*.td}

  # Runs the tests that interact with Kafka and Schema Registry against Redpanda.
  #
  # Specify the `TD_TEST` environment variable to select a specific test to run.
  # Otherwise, this workflow runs against the test files in this directory that
  # use a Kafka action but do *not* use:
  # - `kafka-add-partition`(Redpanda does not yet support dynamically adding partitions to a topic)
  # - `format=protobuf` with `publish=true` (Redpanda does not support schema publication for protobuf/json)
  testdrive-redpanda:
    steps:
      - step: start-services
        services: [redpanda, materialized]
      - step: wait-for-tcp
        host: redpanda
        port: 9092
        timeout_secs: 120
      - step: wait-for-tcp
        host: redpanda
        port: 8081
      - step: wait-for-mz
      - step: run
        service: testdrive-svc
        entrypoint: /bin/bash
        command:
        - -c
        - >-
          testdrive
          --kafka-addr=redpanda:9092
          --schema-registry-url=http://redpanda:8081
          --materialized-url=postgres://materialize@materialized:6875
          ${TD_TEST:-$(grep -lF '$ kafka' $(grep -LF '$ kafka-add-partitions' $(grep -L '$ kafka-ingest.\+format=protobuf.\+publish=true' *.td)))}

  # Run tests, requires AWS credentials to be present. See guide-testing for
  # details.
  ci:
    steps:
      - step: workflow
        workflow: start-deps
      - step: run
        service: testdrive-svc
        command: --aws-region=us-east-2 --ci-output ${TD_TEST:-*.td esoteric/*.td}

  # Run tests that hit the live, public PubNub service.
  ci-pubnub:
    steps:
      - step: workflow
        workflow: start-deps
      - step: run
        service: testdrive-svc
        command: --ci-output esoteric/pubnub/pubnub.td

  # Run a couple of tests that verify that our http* proxy configuration works
  ci-proxy:
    env:
      ALL_PROXY: http://squid:3128
      TD_TEST: 'avro-registry.td esoteric/s3.td'
    steps:
      - step: start-services
        services: [squid]
      - step: workflow
        workflow: ci

  ci-proxy-failure:
    env:
      ALL_PROXY: http://localhost:1234
      TD_TEST: 'proxy/proxy-failure.td'
    steps:
      - step: workflow
        workflow: testdrive

  ci-proxy-no-proxy:
    env:
      ALL_PROXY: http://localhost:1234
      NO_PROXY: schema-registry, amazonaws.com
      TD_TEST: 'avro-registry.td esoteric/s3.td'
    steps:
      - step: workflow
        workflow: ci

  start-deps:
    steps:
      - step: start-services
        services: [kafka, schema-registry, materialized]
      - step: wait-for-tcp
        host: kafka
        port: 9092
        timeout_secs: 120
      - step: wait-for-tcp
        host: schema-registry
        port: 8081
      - step: wait-for-mz

services:
  testdrive-svc:
    mzbuild: testdrive
    entrypoint:
      - bash
      - -c
      - >-
        testdrive
        --kafka-addr=kafka:9092
        --schema-registry-url=http://schema-registry:8081
        --materialized-url=postgres://materialize@materialized:6875
        --validate-catalog=/share/mzdata/catalog
        $$*
      - bash
    environment:
    - TMPDIR=/share/tmp
    - MZ_LOG_FILTER
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    volumes:
    - .:/workdir
    - mzdata:/share/mzdata
    - tmp:/share/tmp
    propagate_uid_gid: true
    init: true
  materialized:
    mzbuild: materialized
    command: >-
      --data-directory=/share/mzdata
      -w5 --experimental
      --timestamp-frequency 100ms
      --disable-telemetry
      --retain-prometheus-metrics 1s
      --metrics-scraping-interval 1s
    ports:
      - 6875
    environment:
    - MZ_DEV=1
    - MZ_LOG_FILTER
    - MZ_SOFT_ASSERTIONS=1
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - ALL_PROXY
    - NO_PROXY
    volumes:
    - mzdata:/share/mzdata
    - tmp:/share/tmp
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.4
    environment:
    - ZOOKEEPER_CLIENT_PORT=2181
  kafka:
    image: confluentinc/cp-kafka:5.5.4
    environment:
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    - KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE=false
    - KAFKA_MIN_INSYNC_REPLICAS=1
    - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.4
    environment:
    - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    - SCHEMA_REGISTRY_HOST_NAME=localhost
    depends_on: [kafka, zookeeper]
  redpanda:
    image: vectorized/redpanda:v21.7.1
    # Most of these options are simply required when using Redpanda in Docker.
    # See: https://vectorized.io/docs/quick-start-docker/#Single-command-for-a-1-node-cluster
    # The `enable_transactions` and `enable_idempotence` feature flags enable
    # features Materialize requires that are present by default in Apache Kafka
    # but not in Redpanda.
    command: >-
      redpanda start
      --overprovisioned --smp=1 --memory=1G --reserve-memory=0M
      --node-id=0 --check=false
      --set "redpanda.enable_transactions=true"
      --set "redpanda.enable_idempotence=true"
      --advertise-kafka-addr redpanda:9092
  localstack:
    image: localstack/localstack:0.12.5
    environment:
    - SERVICES=sqs,sts,iam,kinesis,s3
    - HOSTNAME_EXTERNAL=localstack
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # An HTTP forward proxy, used in some workflows to test whether Materialize can correctly route
  # traffic via the proxy.
  squid:
    image: sameersbn/squid:3.5.27-2
    ports:
    - 3128
    volumes:
    - ./static/squid.conf:/etc/squid/squid.conf

volumes:
  mzdata:
  tmp:
