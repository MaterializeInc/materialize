# Copyright Materialize, Inc. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

version: '3.7'

mzworkflows:
  # Run tests with s3 stubbed out, no credentials needed
  testdrive:
    steps:
      - step: start-services
        services: [localstack]
      - step: workflow
        workflow: start-deps
      - step: wait-for-tcp
        host: localstack
        port: 4566
      - step: run
        service: testdrive-svc
        command: --aws-endpoint=http://localstack:4566 ${TD_TEST:-*.td esoteric/*.td}

  # Run tests, requires AWS credentials to be present. See guide-testing for
  # details.
  ci:
    steps:
      - step: workflow
        workflow: start-deps
      - step: run
        service: testdrive-svc
        command: --aws-region=us-east-2 --ci-output ${TD_TEST:-*.td esoteric/*.td}

  # Run a couple of tests that verify that our http* proxy configuration works
  ci-proxy:
    env:
      ALL_PROXY: http://squid:3128
      TD_TEST: 'avro-registry.td esoteric/s3.td'
    steps:
      - step: start-services
        services: [squid]
      - step: workflow
        workflow: ci

  ci-proxy-failure:
    env:
      ALL_PROXY: '#nonsense'
      TD_TEST: 'proxy/proxy-failure.td'
    steps:
      - step: workflow
        workflow: testdrive

  start-deps:
    steps:
      - step: start-services
        services: [kafka, schema-registry, materialized]
      - step: wait-for-tcp
        host: kafka
        port: 9092
        timeout_secs: 120
      - step: wait-for-tcp
        host: schema-registry
        port: 8081
      - step: wait-for-mz

services:
  testdrive-svc:
    mzbuild: testdrive
    entrypoint:
      - bash
      - -c
      - >-
        testdrive
        --kafka-addr=kafka:9092
        --schema-registry-url=http://schema-registry:8081
        --materialized-url=postgres://materialize@materialized:6875
        --validate-catalog=/share/mzdata/catalog
        $$*
      - bash
    environment:
    - TMPDIR=/share/tmp
    - MZ_LOG
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - AWS_SECURITY_TOKEN
    volumes:
    - .:/workdir
    - mzdata:/share/mzdata
    - tmp:/share/tmp
    propagate-uid-gid: true
    init: true
    depends_on: [kafka, zookeeper, schema-registry, materialized]
  materialized:
    mzbuild: materialized
    command: >-
      --data-directory=/share/mzdata
      -w1 --experimental
      --cache-max-pending-records 1
      --timestamp-frequency 100ms
      --disable-telemetry
      --retain-prometheus-metrics 1s
    ports:
      - 6875
    environment:
    - MZ_DEV=1
    - MZ_LOG
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_SESSION_TOKEN
    - AWS_SECURITY_TOKEN
    - ALL_PROXY
    volumes:
    - mzdata:/share/mzdata
    - tmp:/share/tmp
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-kafka:5.5.3
    environment:
    - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
    - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    - SCHEMA_REGISTRY_HOST_NAME=localhost
    depends_on: [kafka, zookeeper]
  localstack:
    image: localstack/localstack:0.12.5
    environment:
    - SERVICES=sqs,sts,iam,kinesis,s3
    - HOSTNAME_EXTERNAL=localstack
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # An HTTP forward proxy, used in some workflows to test whether Materialize can correctly route
  # traffic via the proxy.
  squid:
    image: sameersbn/squid:3.5.27-2
    ports:
    - 3128
    volumes:
    - ./static/squid.conf:/etc/squid/squid.conf

volumes:
  mzdata:
  tmp:
